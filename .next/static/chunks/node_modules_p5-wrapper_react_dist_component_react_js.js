"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_p5-wrapper_react_dist_component_react_js"],{

/***/ "./node_modules/@p5-wrapper/react/dist/component/react.js":
/*!****************************************************************!*\
  !*** ./node_modules/@p5-wrapper/react/dist/component/react.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   P5WrapperClassName: () => (/* binding */ Zn),\n/* harmony export */   ReactP5Wrapper: () => (/* binding */ ro)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n\nconst Hn = { Date: !0, RegExp: !0, String: !0, Number: !0 };\nfunction xn(yt, Et, Vt = { cyclesFix: !0 }, t = []) {\n  var y, u;\n  let H = [];\n  const C = Array.isArray(yt);\n  for (const h in yt) {\n    const g = yt[h], f = C ? +h : h;\n    if (!(h in Et)) {\n      H.push({\n        type: \"REMOVE\",\n        path: [f],\n        oldValue: yt[h]\n      });\n      continue;\n    }\n    const r = Et[h], s = typeof g == \"object\" && typeof r == \"object\" && Array.isArray(g) === Array.isArray(r);\n    if (g && r && s && !Hn[(u = (y = Object.getPrototypeOf(g)) == null ? void 0 : y.constructor) == null ? void 0 : u.name] && (!Vt.cyclesFix || !t.includes(g))) {\n      const o = xn(g, r, Vt, Vt.cyclesFix ? t.concat([g]) : []);\n      H.push.apply(H, o.map((i) => (i.path.unshift(f), i)));\n    } else\n      g !== r && // treat NaN values as equivalent\n      !(Number.isNaN(g) && Number.isNaN(r)) && !(s && (isNaN(g) ? g + \"\" == r + \"\" : +g == +r)) && H.push({\n        path: [f],\n        type: \"CHANGE\",\n        value: r,\n        oldValue: g\n      });\n  }\n  const m = Array.isArray(Et);\n  for (const h in Et)\n    h in yt || H.push({\n      type: \"CREATE\",\n      path: [m ? +h : h],\n      value: Et[h]\n    });\n  return H;\n}\nfunction Wn(yt, Et) {\n  return xn(yt, Et).length === 0;\n}\nvar _r = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {};\nfunction qn(yt) {\n  return yt && yt.__esModule && Object.prototype.hasOwnProperty.call(yt, \"default\") ? yt.default : yt;\n}\nvar Pr = { exports: {} }, pr = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar vn;\nfunction Xn() {\n  if (vn)\n    return pr;\n  vn = 1;\n  var yt = react__WEBPACK_IMPORTED_MODULE_0__, Et = Symbol.for(\"react.element\"), Vt = Symbol.for(\"react.fragment\"), t = Object.prototype.hasOwnProperty, H = yt.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, C = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function m(y, u, h) {\n    var g, f = {}, r = null, s = null;\n    h !== void 0 && (r = \"\" + h), u.key !== void 0 && (r = \"\" + u.key), u.ref !== void 0 && (s = u.ref);\n    for (g in u)\n      t.call(u, g) && !C.hasOwnProperty(g) && (f[g] = u[g]);\n    if (y && y.defaultProps)\n      for (g in u = y.defaultProps, u)\n        f[g] === void 0 && (f[g] = u[g]);\n    return { $$typeof: Et, type: y, key: r, ref: s, props: f, _owner: H.current };\n  }\n  return pr.Fragment = Vt, pr.jsx = m, pr.jsxs = m, pr;\n}\nvar mr = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar bn;\nfunction Yn() {\n  return bn || (bn = 1,  true && function() {\n    var yt = react__WEBPACK_IMPORTED_MODULE_0__, Et = Symbol.for(\"react.element\"), Vt = Symbol.for(\"react.portal\"), t = Symbol.for(\"react.fragment\"), H = Symbol.for(\"react.strict_mode\"), C = Symbol.for(\"react.profiler\"), m = Symbol.for(\"react.provider\"), y = Symbol.for(\"react.context\"), u = Symbol.for(\"react.forward_ref\"), h = Symbol.for(\"react.suspense\"), g = Symbol.for(\"react.suspense_list\"), f = Symbol.for(\"react.memo\"), r = Symbol.for(\"react.lazy\"), s = Symbol.for(\"react.offscreen\"), o = Symbol.iterator, i = \"@@iterator\";\n    function l(me) {\n      if (me === null || typeof me != \"object\")\n        return null;\n      var Ue = o && me[o] || me[i];\n      return typeof Ue == \"function\" ? Ue : null;\n    }\n    var n = yt.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function a(me) {\n      {\n        for (var Ue = arguments.length, Ye = new Array(Ue > 1 ? Ue - 1 : 0), it = 1; it < Ue; it++)\n          Ye[it - 1] = arguments[it];\n        c(\"error\", me, Ye);\n      }\n    }\n    function c(me, Ue, Ye) {\n      {\n        var it = n.ReactDebugCurrentFrame, ft = it.getStackAddendum();\n        ft !== \"\" && (Ue += \"%s\", Ye = Ye.concat([ft]));\n        var pt = Ye.map(function(ie) {\n          return String(ie);\n        });\n        pt.unshift(\"Warning: \" + Ue), Function.prototype.apply.call(console[me], console, pt);\n      }\n    }\n    var p = !1, j = !1, T = !1, _ = !1, S = !1, E;\n    E = Symbol.for(\"react.module.reference\");\n    function A(me) {\n      return !!(typeof me == \"string\" || typeof me == \"function\" || me === t || me === C || S || me === H || me === h || me === g || _ || me === s || p || j || T || typeof me == \"object\" && me !== null && (me.$$typeof === r || me.$$typeof === f || me.$$typeof === m || me.$$typeof === y || me.$$typeof === u || // This needs to include all possible module reference object\n      // types supported by any Flight configuration anywhere since\n      // we don't know which Flight build this will end up being used\n      // with.\n      me.$$typeof === E || me.getModuleId !== void 0));\n    }\n    function x(me, Ue, Ye) {\n      var it = me.displayName;\n      if (it)\n        return it;\n      var ft = Ue.displayName || Ue.name || \"\";\n      return ft !== \"\" ? Ye + \"(\" + ft + \")\" : Ye;\n    }\n    function P(me) {\n      return me.displayName || \"Context\";\n    }\n    function M(me) {\n      if (me == null)\n        return null;\n      if (typeof me.tag == \"number\" && a(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof me == \"function\")\n        return me.displayName || me.name || null;\n      if (typeof me == \"string\")\n        return me;\n      switch (me) {\n        case t:\n          return \"Fragment\";\n        case Vt:\n          return \"Portal\";\n        case C:\n          return \"Profiler\";\n        case H:\n          return \"StrictMode\";\n        case h:\n          return \"Suspense\";\n        case g:\n          return \"SuspenseList\";\n      }\n      if (typeof me == \"object\")\n        switch (me.$$typeof) {\n          case y:\n            var Ue = me;\n            return P(Ue) + \".Consumer\";\n          case m:\n            var Ye = me;\n            return P(Ye._context) + \".Provider\";\n          case u:\n            return x(me, me.render, \"ForwardRef\");\n          case f:\n            var it = me.displayName || null;\n            return it !== null ? it : M(me.type) || \"Memo\";\n          case r: {\n            var ft = me, pt = ft._payload, ie = ft._init;\n            try {\n              return M(ie(pt));\n            } catch {\n              return null;\n            }\n          }\n        }\n      return null;\n    }\n    var R = Object.assign, L = 0, F, V, G, U, W, X, ne;\n    function b() {\n    }\n    b.__reactDisabledLog = !0;\n    function O() {\n      {\n        if (L === 0) {\n          F = console.log, V = console.info, G = console.warn, U = console.error, W = console.group, X = console.groupCollapsed, ne = console.groupEnd;\n          var me = {\n            configurable: !0,\n            enumerable: !0,\n            value: b,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            info: me,\n            log: me,\n            warn: me,\n            error: me,\n            group: me,\n            groupCollapsed: me,\n            groupEnd: me\n          });\n        }\n        L++;\n      }\n    }\n    function D() {\n      {\n        if (L--, L === 0) {\n          var me = {\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            log: R({}, me, {\n              value: F\n            }),\n            info: R({}, me, {\n              value: V\n            }),\n            warn: R({}, me, {\n              value: G\n            }),\n            error: R({}, me, {\n              value: U\n            }),\n            group: R({}, me, {\n              value: W\n            }),\n            groupCollapsed: R({}, me, {\n              value: X\n            }),\n            groupEnd: R({}, me, {\n              value: ne\n            })\n          });\n        }\n        L < 0 && a(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n      }\n    }\n    var B = n.ReactCurrentDispatcher, Y;\n    function J(me, Ue, Ye) {\n      {\n        if (Y === void 0)\n          try {\n            throw Error();\n          } catch (ft) {\n            var it = ft.stack.trim().match(/\\n( *(at )?)/);\n            Y = it && it[1] || \"\";\n          }\n        return `\n` + Y + me;\n      }\n    }\n    var te = !1, ce;\n    {\n      var re = typeof WeakMap == \"function\" ? WeakMap : Map;\n      ce = new re();\n    }\n    function ue(me, Ue) {\n      if (!me || te)\n        return \"\";\n      {\n        var Ye = ce.get(me);\n        if (Ye !== void 0)\n          return Ye;\n      }\n      var it;\n      te = !0;\n      var ft = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var pt;\n      pt = B.current, B.current = null, O();\n      try {\n        if (Ue) {\n          var ie = function() {\n            throw Error();\n          };\n          if (Object.defineProperty(ie.prototype, \"props\", {\n            set: function() {\n              throw Error();\n            }\n          }), typeof Reflect == \"object\" && Reflect.construct) {\n            try {\n              Reflect.construct(ie, []);\n            } catch (ut) {\n              it = ut;\n            }\n            Reflect.construct(me, [], ie);\n          } else {\n            try {\n              ie.call();\n            } catch (ut) {\n              it = ut;\n            }\n            me.call(ie.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (ut) {\n            it = ut;\n          }\n          me();\n        }\n      } catch (ut) {\n        if (ut && it && typeof ut.stack == \"string\") {\n          for (var Oe = ut.stack.split(`\n`), Ge = it.stack.split(`\n`), Le = Oe.length - 1, rt = Ge.length - 1; Le >= 1 && rt >= 0 && Oe[Le] !== Ge[rt]; )\n            rt--;\n          for (; Le >= 1 && rt >= 0; Le--, rt--)\n            if (Oe[Le] !== Ge[rt]) {\n              if (Le !== 1 || rt !== 1)\n                do\n                  if (Le--, rt--, rt < 0 || Oe[Le] !== Ge[rt]) {\n                    var Pe = `\n` + Oe[Le].replace(\" at new \", \" at \");\n                    return me.displayName && Pe.includes(\"<anonymous>\") && (Pe = Pe.replace(\"<anonymous>\", me.displayName)), typeof me == \"function\" && ce.set(me, Pe), Pe;\n                  }\n                while (Le >= 1 && rt >= 0);\n              break;\n            }\n        }\n      } finally {\n        te = !1, B.current = pt, D(), Error.prepareStackTrace = ft;\n      }\n      var ct = me ? me.displayName || me.name : \"\", qe = ct ? J(ct) : \"\";\n      return typeof me == \"function\" && ce.set(me, qe), qe;\n    }\n    function le(me, Ue, Ye) {\n      return ue(me, !1);\n    }\n    function K(me) {\n      var Ue = me.prototype;\n      return !!(Ue && Ue.isReactComponent);\n    }\n    function ae(me, Ue, Ye) {\n      if (me == null)\n        return \"\";\n      if (typeof me == \"function\")\n        return ue(me, K(me));\n      if (typeof me == \"string\")\n        return J(me);\n      switch (me) {\n        case h:\n          return J(\"Suspense\");\n        case g:\n          return J(\"SuspenseList\");\n      }\n      if (typeof me == \"object\")\n        switch (me.$$typeof) {\n          case u:\n            return le(me.render);\n          case f:\n            return ae(me.type, Ue, Ye);\n          case r: {\n            var it = me, ft = it._payload, pt = it._init;\n            try {\n              return ae(pt(ft), Ue, Ye);\n            } catch {\n            }\n          }\n        }\n      return \"\";\n    }\n    var he = Object.prototype.hasOwnProperty, _e = {}, fe = n.ReactDebugCurrentFrame;\n    function ge(me) {\n      if (me) {\n        var Ue = me._owner, Ye = ae(me.type, me._source, Ue ? Ue.type : null);\n        fe.setExtraStackFrame(Ye);\n      } else\n        fe.setExtraStackFrame(null);\n    }\n    function xe(me, Ue, Ye, it, ft) {\n      {\n        var pt = Function.call.bind(he);\n        for (var ie in me)\n          if (pt(me, ie)) {\n            var Oe = void 0;\n            try {\n              if (typeof me[ie] != \"function\") {\n                var Ge = Error((it || \"React class\") + \": \" + Ye + \" type `\" + ie + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof me[ie] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                throw Ge.name = \"Invariant Violation\", Ge;\n              }\n              Oe = me[ie](Ue, ie, it, Ye, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n            } catch (Le) {\n              Oe = Le;\n            }\n            Oe && !(Oe instanceof Error) && (ge(ft), a(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", it || \"React class\", Ye, ie, typeof Oe), ge(null)), Oe instanceof Error && !(Oe.message in _e) && (_e[Oe.message] = !0, ge(ft), a(\"Failed %s type: %s\", Ye, Oe.message), ge(null));\n          }\n      }\n    }\n    var De = Array.isArray;\n    function Me(me) {\n      return De(me);\n    }\n    function Qe(me) {\n      {\n        var Ue = typeof Symbol == \"function\" && Symbol.toStringTag, Ye = Ue && me[Symbol.toStringTag] || me.constructor.name || \"Object\";\n        return Ye;\n      }\n    }\n    function ze(me) {\n      try {\n        return Ve(me), !1;\n      } catch {\n        return !0;\n      }\n    }\n    function Ve(me) {\n      return \"\" + me;\n    }\n    function Xe(me) {\n      if (ze(me))\n        return a(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", Qe(me)), Ve(me);\n    }\n    var He = n.ReactCurrentOwner, ve = {\n      key: !0,\n      ref: !0,\n      __self: !0,\n      __source: !0\n    }, Re, we, Z;\n    Z = {};\n    function $(me) {\n      if (he.call(me, \"ref\")) {\n        var Ue = Object.getOwnPropertyDescriptor(me, \"ref\").get;\n        if (Ue && Ue.isReactWarning)\n          return !1;\n      }\n      return me.ref !== void 0;\n    }\n    function q(me) {\n      if (he.call(me, \"key\")) {\n        var Ue = Object.getOwnPropertyDescriptor(me, \"key\").get;\n        if (Ue && Ue.isReactWarning)\n          return !1;\n      }\n      return me.key !== void 0;\n    }\n    function ee(me, Ue) {\n      if (typeof me.ref == \"string\" && He.current && Ue && He.current.stateNode !== Ue) {\n        var Ye = M(He.current.type);\n        Z[Ye] || (a('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', M(He.current.type), me.ref), Z[Ye] = !0);\n      }\n    }\n    function pe(me, Ue) {\n      {\n        var Ye = function() {\n          Re || (Re = !0, a(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", Ue));\n        };\n        Ye.isReactWarning = !0, Object.defineProperty(me, \"key\", {\n          get: Ye,\n          configurable: !0\n        });\n      }\n    }\n    function je(me, Ue) {\n      {\n        var Ye = function() {\n          we || (we = !0, a(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", Ue));\n        };\n        Ye.isReactWarning = !0, Object.defineProperty(me, \"ref\", {\n          get: Ye,\n          configurable: !0\n        });\n      }\n    }\n    var Ce = function(me, Ue, Ye, it, ft, pt, ie) {\n      var Oe = {\n        // This tag allows us to uniquely identify this as a React Element\n        $$typeof: Et,\n        // Built-in properties that belong on the element\n        type: me,\n        key: Ue,\n        ref: Ye,\n        props: ie,\n        // Record the component responsible for creating this element.\n        _owner: pt\n      };\n      return Oe._store = {}, Object.defineProperty(Oe._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: !1\n      }), Object.defineProperty(Oe, \"_self\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: it\n      }), Object.defineProperty(Oe, \"_source\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: ft\n      }), Object.freeze && (Object.freeze(Oe.props), Object.freeze(Oe)), Oe;\n    };\n    function Fe(me, Ue, Ye, it, ft) {\n      {\n        var pt, ie = {}, Oe = null, Ge = null;\n        Ye !== void 0 && (Xe(Ye), Oe = \"\" + Ye), q(Ue) && (Xe(Ue.key), Oe = \"\" + Ue.key), $(Ue) && (Ge = Ue.ref, ee(Ue, ft));\n        for (pt in Ue)\n          he.call(Ue, pt) && !ve.hasOwnProperty(pt) && (ie[pt] = Ue[pt]);\n        if (me && me.defaultProps) {\n          var Le = me.defaultProps;\n          for (pt in Le)\n            ie[pt] === void 0 && (ie[pt] = Le[pt]);\n        }\n        if (Oe || Ge) {\n          var rt = typeof me == \"function\" ? me.displayName || me.name || \"Unknown\" : me;\n          Oe && pe(ie, rt), Ge && je(ie, rt);\n        }\n        return Ce(me, Oe, Ge, ft, it, He.current, ie);\n      }\n    }\n    var Ne = n.ReactCurrentOwner, Be = n.ReactDebugCurrentFrame;\n    function We(me) {\n      if (me) {\n        var Ue = me._owner, Ye = ae(me.type, me._source, Ue ? Ue.type : null);\n        Be.setExtraStackFrame(Ye);\n      } else\n        Be.setExtraStackFrame(null);\n    }\n    var st;\n    st = !1;\n    function nt(me) {\n      return typeof me == \"object\" && me !== null && me.$$typeof === Et;\n    }\n    function Ke() {\n      {\n        if (Ne.current) {\n          var me = M(Ne.current.type);\n          if (me)\n            return `\n\nCheck the render method of \\`` + me + \"`.\";\n        }\n        return \"\";\n      }\n    }\n    function at(me) {\n      return \"\";\n    }\n    var ot = {};\n    function bt(me) {\n      {\n        var Ue = Ke();\n        if (!Ue) {\n          var Ye = typeof me == \"string\" ? me : me.displayName || me.name;\n          Ye && (Ue = `\n\nCheck the top-level render call using <` + Ye + \">.\");\n        }\n        return Ue;\n      }\n    }\n    function It(me, Ue) {\n      {\n        if (!me._store || me._store.validated || me.key != null)\n          return;\n        me._store.validated = !0;\n        var Ye = bt(Ue);\n        if (ot[Ye])\n          return;\n        ot[Ye] = !0;\n        var it = \"\";\n        me && me._owner && me._owner !== Ne.current && (it = \" It was passed a child from \" + M(me._owner.type) + \".\"), We(me), a('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', Ye, it), We(null);\n      }\n    }\n    function Mt(me, Ue) {\n      {\n        if (typeof me != \"object\")\n          return;\n        if (Me(me))\n          for (var Ye = 0; Ye < me.length; Ye++) {\n            var it = me[Ye];\n            nt(it) && It(it, Ue);\n          }\n        else if (nt(me))\n          me._store && (me._store.validated = !0);\n        else if (me) {\n          var ft = l(me);\n          if (typeof ft == \"function\" && ft !== me.entries)\n            for (var pt = ft.call(me), ie; !(ie = pt.next()).done; )\n              nt(ie.value) && It(ie.value, Ue);\n        }\n      }\n    }\n    function mt(me) {\n      {\n        var Ue = me.type;\n        if (Ue == null || typeof Ue == \"string\")\n          return;\n        var Ye;\n        if (typeof Ue == \"function\")\n          Ye = Ue.propTypes;\n        else if (typeof Ue == \"object\" && (Ue.$$typeof === u || // Note: Memo only checks outer props here.\n        // Inner props are checked in the reconciler.\n        Ue.$$typeof === f))\n          Ye = Ue.propTypes;\n        else\n          return;\n        if (Ye) {\n          var it = M(Ue);\n          xe(Ye, me.props, \"prop\", it, me);\n        } else if (Ue.PropTypes !== void 0 && !st) {\n          st = !0;\n          var ft = M(Ue);\n          a(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", ft || \"Unknown\");\n        }\n        typeof Ue.getDefaultProps == \"function\" && !Ue.getDefaultProps.isReactClassApproved && a(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n      }\n    }\n    function jt(me) {\n      {\n        for (var Ue = Object.keys(me.props), Ye = 0; Ye < Ue.length; Ye++) {\n          var it = Ue[Ye];\n          if (it !== \"children\" && it !== \"key\") {\n            We(me), a(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", it), We(null);\n            break;\n          }\n        }\n        me.ref !== null && (We(me), a(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), We(null));\n      }\n    }\n    function ht(me, Ue, Ye, it, ft, pt) {\n      {\n        var ie = A(me);\n        if (!ie) {\n          var Oe = \"\";\n          (me === void 0 || typeof me == \"object\" && me !== null && Object.keys(me).length === 0) && (Oe += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n          var Ge = at();\n          Ge ? Oe += Ge : Oe += Ke();\n          var Le;\n          me === null ? Le = \"null\" : Me(me) ? Le = \"array\" : me !== void 0 && me.$$typeof === Et ? (Le = \"<\" + (M(me.type) || \"Unknown\") + \" />\", Oe = \" Did you accidentally export a JSX literal instead of a component?\") : Le = typeof me, a(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", Le, Oe);\n        }\n        var rt = Fe(me, Ue, Ye, ft, pt);\n        if (rt == null)\n          return rt;\n        if (ie) {\n          var Pe = Ue.children;\n          if (Pe !== void 0)\n            if (it)\n              if (Me(Pe)) {\n                for (var ct = 0; ct < Pe.length; ct++)\n                  Mt(Pe[ct], me);\n                Object.freeze && Object.freeze(Pe);\n              } else\n                a(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n            else\n              Mt(Pe, me);\n        }\n        return me === t ? jt(rt) : mt(rt), rt;\n      }\n    }\n    function Dt(me, Ue, Ye) {\n      return ht(me, Ue, Ye, !0);\n    }\n    function Pt(me, Ue, Ye) {\n      return ht(me, Ue, Ye, !1);\n    }\n    var gt = Pt, Ft = Dt;\n    mr.Fragment = t, mr.jsx = gt, mr.jsxs = Ft;\n  }()), mr;\n}\n false ? 0 : Pr.exports = Yn();\nvar wr = Pr.exports;\nconst Zn = \"react-p5-wrapper\";\nfunction xr(yt) {\n  throw new Error('Could not dynamically require \"' + yt + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\nvar wn = { exports: {} };\n/*! p5.js v1.9.4 May 21, 2024 */\n(function(yt, Et) {\n  (function(Vt) {\n    yt.exports = Vt();\n  })(function() {\n    var Vt;\n    return function t(H, C, m) {\n      function y(g, f) {\n        if (!C[g]) {\n          if (!H[g]) {\n            var r = typeof xr == \"function\" && xr;\n            if (!f && r)\n              return r(g, !0);\n            if (u)\n              return u(g, !0);\n            throw (f = new Error(\"Cannot find module '\" + g + \"'\")).code = \"MODULE_NOT_FOUND\", f;\n          }\n          r = C[g] = { exports: {} }, H[g][0].call(r.exports, function(s) {\n            return y(H[g][1][s] || s);\n          }, r, r.exports, t, H, C, m);\n        }\n        return C[g].exports;\n      }\n      for (var u = typeof xr == \"function\" && xr, h = 0; h < m.length; h++)\n        y(m[h]);\n      return y;\n    }({ 1: [function(t, H, C) {\n      C.byteLength = function(i) {\n        var i = r(i), o = i[0], i = i[1];\n        return 3 * (o + i) / 4 - i;\n      }, C.toByteArray = function(s) {\n        var o, i, n = r(s), l = n[0], n = n[1], a = new u(function(j, T) {\n          return 3 * (j + T) / 4 - T;\n        }(l, n)), c = 0, p = 0 < n ? l - 4 : l;\n        for (i = 0; i < p; i += 4)\n          o = y[s.charCodeAt(i)] << 18 | y[s.charCodeAt(i + 1)] << 12 | y[s.charCodeAt(i + 2)] << 6 | y[s.charCodeAt(i + 3)], a[c++] = o >> 16 & 255, a[c++] = o >> 8 & 255, a[c++] = 255 & o;\n        return n === 2 && (o = y[s.charCodeAt(i)] << 2 | y[s.charCodeAt(i + 1)] >> 4, a[c++] = 255 & o), n === 1 && (o = y[s.charCodeAt(i)] << 10 | y[s.charCodeAt(i + 1)] << 4 | y[s.charCodeAt(i + 2)] >> 2, a[c++] = o >> 8 & 255, a[c++] = 255 & o), a;\n      }, C.fromByteArray = function(s) {\n        for (var o, i = s.length, l = i % 3, n = [], a = 0, c = i - l; a < c; a += 16383)\n          n.push(function(p, j, T) {\n            for (var _, S = [], E = j; E < T; E += 3)\n              _ = (p[E] << 16 & 16711680) + (p[E + 1] << 8 & 65280) + (255 & p[E + 2]), S.push(function(A) {\n                return m[A >> 18 & 63] + m[A >> 12 & 63] + m[A >> 6 & 63] + m[63 & A];\n              }(_));\n            return S.join(\"\");\n          }(s, a, c < a + 16383 ? c : a + 16383));\n        return l == 1 ? (o = s[i - 1], n.push(m[o >> 2] + m[o << 4 & 63] + \"==\")) : l == 2 && (o = (s[i - 2] << 8) + s[i - 1], n.push(m[o >> 10] + m[o >> 4 & 63] + m[o << 2 & 63] + \"=\")), n.join(\"\");\n      };\n      for (var m = [], y = [], u = typeof Uint8Array < \"u\" ? Uint8Array : Array, h = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", g = 0, f = h.length; g < f; ++g)\n        m[g] = h[g], y[h.charCodeAt(g)] = g;\n      function r(s) {\n        var o = s.length;\n        if (0 < o % 4)\n          throw new Error(\"Invalid string. Length must be a multiple of 4\");\n        return s = s.indexOf(\"=\"), o = (s = s === -1 ? o : s) === o ? 0 : 4 - s % 4, [s, o];\n      }\n      y[45] = 62, y[95] = 63;\n    }, {}], 2: [function(t, H, C) {\n    }, {}], 3: [function(t, H, C) {\n    }, {}], 4: [function(t, H, C) {\n      (function(r) {\n        var y = t(\"base64-js\"), u = t(\"ieee754\"), h = typeof Symbol == \"function\" && typeof Symbol.for == \"function\" ? Symbol.for(\"nodejs.util.inspect.custom\") : null, g = (C.Buffer = r, C.SlowBuffer = function(b) {\n          return +b != b && (b = 0), r.alloc(+b);\n        }, C.INSPECT_MAX_BYTES = 50, 2147483647);\n        function f(b) {\n          if (g < b)\n            throw new RangeError('The value \"' + b + '\" is invalid for option \"size\"');\n          return b = new Uint8Array(b), Object.setPrototypeOf(b, r.prototype), b;\n        }\n        function r(b, O, D) {\n          if (typeof b != \"number\")\n            return s(b, O, D);\n          if (typeof O == \"string\")\n            throw new TypeError('The \"string\" argument must be of type string. Received type number');\n          return i(b);\n        }\n        function s(b, O, D) {\n          if (typeof b == \"string\") {\n            var B = b, Y = O;\n            if (r.isEncoding(Y = typeof Y == \"string\" && Y !== \"\" ? Y : \"utf8\"))\n              return J = 0 | a(B, Y), te = f(J), te = (B = te.write(B, Y)) !== J ? te.slice(0, B) : te;\n            throw new TypeError(\"Unknown encoding: \" + Y);\n          }\n          if (ArrayBuffer.isView(b))\n            return l(b);\n          if (b != null) {\n            if (W(b, ArrayBuffer) || b && W(b.buffer, ArrayBuffer)) {\n              var J = b, B = O, te = D;\n              if (B < 0 || J.byteLength < B)\n                throw new RangeError('\"offset\" is outside of buffer bounds');\n              if (J.byteLength < B + (te || 0))\n                throw new RangeError('\"length\" is outside of buffer bounds');\n              return J = B === void 0 && te === void 0 ? new Uint8Array(J) : te === void 0 ? new Uint8Array(J, B) : new Uint8Array(J, B, te), Object.setPrototypeOf(J, r.prototype), J;\n            }\n            if (typeof b == \"number\")\n              throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n            if (Y = b.valueOf && b.valueOf(), Y != null && Y !== b)\n              return r.from(Y, O, D);\n            var ce = function(re) {\n              {\n                var ue, le;\n                if (r.isBuffer(re))\n                  return ue = 0 | n(re.length), (le = f(ue)).length !== 0 && re.copy(le, 0, 0, ue), le;\n              }\n              if (re.length !== void 0)\n                return typeof re.length != \"number\" || X(re.length) ? f(0) : l(re);\n              if (re.type === \"Buffer\" && Array.isArray(re.data))\n                return l(re.data);\n            }(b);\n            if (ce)\n              return ce;\n            if (typeof Symbol < \"u\" && Symbol.toPrimitive != null && typeof b[Symbol.toPrimitive] == \"function\")\n              return r.from(b[Symbol.toPrimitive](\"string\"), O, D);\n          }\n          throw new TypeError(\"The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type \" + typeof b);\n        }\n        function o(b) {\n          if (typeof b != \"number\")\n            throw new TypeError('\"size\" argument must be of type number');\n          if (b < 0)\n            throw new RangeError('The value \"' + b + '\" is invalid for option \"size\"');\n        }\n        function i(b) {\n          return o(b), f(b < 0 ? 0 : 0 | n(b));\n        }\n        function l(b) {\n          for (var O = b.length < 0 ? 0 : 0 | n(b.length), D = f(O), B = 0; B < O; B += 1)\n            D[B] = 255 & b[B];\n          return D;\n        }\n        function n(b) {\n          if (g <= b)\n            throw new RangeError(\"Attempt to allocate Buffer larger than maximum size: 0x\" + g.toString(16) + \" bytes\");\n          return 0 | b;\n        }\n        function a(b, O) {\n          if (r.isBuffer(b))\n            return b.length;\n          if (ArrayBuffer.isView(b) || W(b, ArrayBuffer))\n            return b.byteLength;\n          if (typeof b != \"string\")\n            throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof b);\n          var D = b.length, B = 2 < arguments.length && arguments[2] === !0;\n          if (!B && D === 0)\n            return 0;\n          for (var Y = !1; ; )\n            switch (O) {\n              case \"ascii\":\n              case \"latin1\":\n              case \"binary\":\n                return D;\n              case \"utf8\":\n              case \"utf-8\":\n                return V(b).length;\n              case \"ucs2\":\n              case \"ucs-2\":\n              case \"utf16le\":\n              case \"utf-16le\":\n                return 2 * D;\n              case \"hex\":\n                return D >>> 1;\n              case \"base64\":\n                return G(b).length;\n              default:\n                if (Y)\n                  return B ? -1 : V(b).length;\n                O = (\"\" + O).toLowerCase(), Y = !0;\n            }\n        }\n        function c(b, O, D) {\n          var B, Y = !1;\n          if ((O = O === void 0 || O < 0 ? 0 : O) > this.length || (D = D === void 0 || D > this.length ? this.length : D) <= 0 || (D >>>= 0) <= (O >>>= 0))\n            return \"\";\n          for (b = b || \"utf8\"; ; )\n            switch (b) {\n              case \"hex\":\n                var J = this, fe = O, te = D, le = J.length;\n                (!te || te < 0 || le < te) && (te = le);\n                for (var ce = \"\", re = fe = !fe || fe < 0 ? 0 : fe; re < te; ++re)\n                  ce += ne[J[re]];\n                return ce;\n              case \"utf8\":\n              case \"utf-8\":\n                return E(this, O, D);\n              case \"ascii\":\n                var ue = this, le = O, K = D, ae = \"\";\n                K = Math.min(ue.length, K);\n                for (var he = le; he < K; ++he)\n                  ae += String.fromCharCode(127 & ue[he]);\n                return ae;\n              case \"latin1\":\n              case \"binary\":\n                var _e = this, fe = O, ge = D, xe = \"\";\n                ge = Math.min(_e.length, ge);\n                for (var De = fe; De < ge; ++De)\n                  xe += String.fromCharCode(_e[De]);\n                return xe;\n              case \"base64\":\n                return Me = this, B = D, (Qe = O) === 0 && B === Me.length ? y.fromByteArray(Me) : y.fromByteArray(Me.slice(Qe, B));\n              case \"ucs2\":\n              case \"ucs-2\":\n              case \"utf16le\":\n              case \"utf-16le\":\n                for (var Me = O, Qe = D, ze = this.slice(Me, Qe), Ve = \"\", Xe = 0; Xe < ze.length; Xe += 2)\n                  Ve += String.fromCharCode(ze[Xe] + 256 * ze[Xe + 1]);\n                return Ve;\n              default:\n                if (Y)\n                  throw new TypeError(\"Unknown encoding: \" + b);\n                b = (b + \"\").toLowerCase(), Y = !0;\n            }\n        }\n        function p(b, O, D) {\n          var B = b[O];\n          b[O] = b[D], b[D] = B;\n        }\n        function j(b, O, D, B, Y) {\n          if (b.length === 0)\n            return -1;\n          if (typeof D == \"string\" ? (B = D, D = 0) : 2147483647 < D ? D = 2147483647 : D < -2147483648 && (D = -2147483648), (D = (D = X(D = +D) ? Y ? 0 : b.length - 1 : D) < 0 ? b.length + D : D) >= b.length) {\n            if (Y)\n              return -1;\n            D = b.length - 1;\n          } else if (D < 0) {\n            if (!Y)\n              return -1;\n            D = 0;\n          }\n          if (typeof O == \"string\" && (O = r.from(O, B)), r.isBuffer(O))\n            return O.length === 0 ? -1 : T(b, O, D, B, Y);\n          if (typeof O == \"number\")\n            return O &= 255, typeof Uint8Array.prototype.indexOf == \"function\" ? (Y ? Uint8Array.prototype.indexOf : Uint8Array.prototype.lastIndexOf).call(b, O, D) : T(b, [O], D, B, Y);\n          throw new TypeError(\"val must be string, number or Buffer\");\n        }\n        function T(b, O, D, B, Y) {\n          var J = 1, te = b.length, ce = O.length;\n          if (B !== void 0 && ((B = String(B).toLowerCase()) === \"ucs2\" || B === \"ucs-2\" || B === \"utf16le\" || B === \"utf-16le\")) {\n            if (b.length < 2 || O.length < 2)\n              return -1;\n            te /= J = 2, ce /= 2, D /= 2;\n          }\n          function re(he, _e) {\n            return J === 1 ? he[_e] : he.readUInt16BE(_e * J);\n          }\n          if (Y)\n            for (var ue = -1, le = D; le < te; le++)\n              if (re(b, le) === re(O, ue === -1 ? 0 : le - ue)) {\n                if (le - (ue = ue === -1 ? le : ue) + 1 === ce)\n                  return ue * J;\n              } else\n                ue !== -1 && (le -= le - ue), ue = -1;\n          else\n            for (le = D = te < D + ce ? te - ce : D; 0 <= le; le--) {\n              for (var K = !0, ae = 0; ae < ce; ae++)\n                if (re(b, le + ae) !== re(O, ae)) {\n                  K = !1;\n                  break;\n                }\n              if (K)\n                return le;\n            }\n          return -1;\n        }\n        function _(b, O, D, B) {\n          return U(function(Y) {\n            for (var J = [], te = 0; te < Y.length; ++te)\n              J.push(255 & Y.charCodeAt(te));\n            return J;\n          }(O), b, D, B);\n        }\n        function S(b, O, D, B) {\n          return U(function(Y, J) {\n            for (var te, ce, re = [], ue = 0; ue < Y.length && !((J -= 2) < 0); ++ue)\n              ce = Y.charCodeAt(ue), te = ce >> 8, ce = ce % 256, re.push(ce), re.push(te);\n            return re;\n          }(O, b.length - D), b, D, B);\n        }\n        function E(b, O, D) {\n          D = Math.min(b.length, D);\n          for (var B = [], Y = O; Y < D; ) {\n            var J, te, ce, re, ue = b[Y], le = null, K = 239 < ue ? 4 : 223 < ue ? 3 : 191 < ue ? 2 : 1;\n            if (Y + K <= D)\n              switch (K) {\n                case 1:\n                  ue < 128 && (le = ue);\n                  break;\n                case 2:\n                  (192 & (J = b[Y + 1])) == 128 && 127 < (re = (31 & ue) << 6 | 63 & J) && (le = re);\n                  break;\n                case 3:\n                  J = b[Y + 1], te = b[Y + 2], (192 & J) == 128 && (192 & te) == 128 && 2047 < (re = (15 & ue) << 12 | (63 & J) << 6 | 63 & te) && (re < 55296 || 57343 < re) && (le = re);\n                  break;\n                case 4:\n                  J = b[Y + 1], te = b[Y + 2], ce = b[Y + 3], (192 & J) == 128 && (192 & te) == 128 && (192 & ce) == 128 && 65535 < (re = (15 & ue) << 18 | (63 & J) << 12 | (63 & te) << 6 | 63 & ce) && re < 1114112 && (le = re);\n              }\n            le === null ? (le = 65533, K = 1) : 65535 < le && (le -= 65536, B.push(le >>> 10 & 1023 | 55296), le = 56320 | 1023 & le), B.push(le), Y += K;\n          }\n          var ae = B, he = ae.length;\n          if (he <= A)\n            return String.fromCharCode.apply(String, ae);\n          for (var _e = \"\", fe = 0; fe < he; )\n            _e += String.fromCharCode.apply(String, ae.slice(fe, fe += A));\n          return _e;\n        }\n        C.kMaxLength = g, (r.TYPED_ARRAY_SUPPORT = function() {\n          try {\n            var b = new Uint8Array(1), O = { foo: function() {\n              return 42;\n            } };\n            return Object.setPrototypeOf(O, Uint8Array.prototype), Object.setPrototypeOf(b, O), b.foo() === 42;\n          } catch {\n            return !1;\n          }\n        }()) || typeof console > \"u\" || typeof console.error != \"function\" || console.error(\"This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.\"), Object.defineProperty(r.prototype, \"parent\", { enumerable: !0, get: function() {\n          if (r.isBuffer(this))\n            return this.buffer;\n        } }), Object.defineProperty(r.prototype, \"offset\", { enumerable: !0, get: function() {\n          if (r.isBuffer(this))\n            return this.byteOffset;\n        } }), typeof Symbol < \"u\" && Symbol.species != null && r[Symbol.species] === r && Object.defineProperty(r, Symbol.species, { value: null, configurable: !0, enumerable: !1, writable: !1 }), r.poolSize = 8192, r.from = s, Object.setPrototypeOf(r.prototype, Uint8Array.prototype), Object.setPrototypeOf(r, Uint8Array), r.alloc = function(b, O, D) {\n          return O = O, D = D, o(b = b), !(b <= 0) && O !== void 0 ? typeof D == \"string\" ? f(b).fill(O, D) : f(b).fill(O) : f(b);\n        }, r.allocUnsafe = i, r.allocUnsafeSlow = i, r.isBuffer = function(b) {\n          return b != null && b._isBuffer === !0 && b !== r.prototype;\n        }, r.compare = function(b, O) {\n          if (W(b, Uint8Array) && (b = r.from(b, b.offset, b.byteLength)), W(O, Uint8Array) && (O = r.from(O, O.offset, O.byteLength)), !r.isBuffer(b) || !r.isBuffer(O))\n            throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n          if (b === O)\n            return 0;\n          for (var D = b.length, B = O.length, Y = 0, J = Math.min(D, B); Y < J; ++Y)\n            if (b[Y] !== O[Y]) {\n              D = b[Y], B = O[Y];\n              break;\n            }\n          return D < B ? -1 : B < D ? 1 : 0;\n        }, r.isEncoding = function(b) {\n          switch (String(b).toLowerCase()) {\n            case \"hex\":\n            case \"utf8\":\n            case \"utf-8\":\n            case \"ascii\":\n            case \"latin1\":\n            case \"binary\":\n            case \"base64\":\n            case \"ucs2\":\n            case \"ucs-2\":\n            case \"utf16le\":\n            case \"utf-16le\":\n              return !0;\n            default:\n              return !1;\n          }\n        }, r.concat = function(b, O) {\n          if (!Array.isArray(b))\n            throw new TypeError('\"list\" argument must be an Array of Buffers');\n          if (b.length === 0)\n            return r.alloc(0);\n          if (O === void 0)\n            for (Y = O = 0; Y < b.length; ++Y)\n              O += b[Y].length;\n          for (var D = r.allocUnsafe(O), B = 0, Y = 0; Y < b.length; ++Y) {\n            var J = b[Y];\n            if (W(J, Uint8Array) && (J = r.from(J)), !r.isBuffer(J))\n              throw new TypeError('\"list\" argument must be an Array of Buffers');\n            J.copy(D, B), B += J.length;\n          }\n          return D;\n        }, r.byteLength = a, r.prototype._isBuffer = !0, r.prototype.swap16 = function() {\n          var b = this.length;\n          if (b % 2 != 0)\n            throw new RangeError(\"Buffer size must be a multiple of 16-bits\");\n          for (var O = 0; O < b; O += 2)\n            p(this, O, O + 1);\n          return this;\n        }, r.prototype.swap32 = function() {\n          var b = this.length;\n          if (b % 4 != 0)\n            throw new RangeError(\"Buffer size must be a multiple of 32-bits\");\n          for (var O = 0; O < b; O += 4)\n            p(this, O, O + 3), p(this, O + 1, O + 2);\n          return this;\n        }, r.prototype.swap64 = function() {\n          var b = this.length;\n          if (b % 8 != 0)\n            throw new RangeError(\"Buffer size must be a multiple of 64-bits\");\n          for (var O = 0; O < b; O += 8)\n            p(this, O, O + 7), p(this, O + 1, O + 6), p(this, O + 2, O + 5), p(this, O + 3, O + 4);\n          return this;\n        }, r.prototype.toLocaleString = r.prototype.toString = function() {\n          var b = this.length;\n          return b === 0 ? \"\" : arguments.length === 0 ? E(this, 0, b) : c.apply(this, arguments);\n        }, r.prototype.equals = function(b) {\n          if (r.isBuffer(b))\n            return this === b || r.compare(this, b) === 0;\n          throw new TypeError(\"Argument must be a Buffer\");\n        }, r.prototype.inspect = function() {\n          var O = \"\", b = C.INSPECT_MAX_BYTES, O = this.toString(\"hex\", 0, b).replace(/(.{2})/g, \"$1 \").trim();\n          return this.length > b && (O += \" ... \"), \"<Buffer \" + O + \">\";\n        }, h && (r.prototype[h] = r.prototype.inspect), r.prototype.compare = function(b, O, D, B, Y) {\n          if (W(b, Uint8Array) && (b = r.from(b, b.offset, b.byteLength)), !r.isBuffer(b))\n            throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. Received type ' + typeof b);\n          if (D === void 0 && (D = b ? b.length : 0), B === void 0 && (B = 0), Y === void 0 && (Y = this.length), (O = O === void 0 ? 0 : O) < 0 || D > b.length || B < 0 || Y > this.length)\n            throw new RangeError(\"out of range index\");\n          if (Y <= B && D <= O)\n            return 0;\n          if (Y <= B)\n            return -1;\n          if (D <= O)\n            return 1;\n          if (this === b)\n            return 0;\n          for (var J = (Y >>>= 0) - (B >>>= 0), te = (D >>>= 0) - (O >>>= 0), ce = Math.min(J, te), re = this.slice(B, Y), ue = b.slice(O, D), le = 0; le < ce; ++le)\n            if (re[le] !== ue[le]) {\n              J = re[le], te = ue[le];\n              break;\n            }\n          return J < te ? -1 : te < J ? 1 : 0;\n        }, r.prototype.includes = function(b, O, D) {\n          return this.indexOf(b, O, D) !== -1;\n        }, r.prototype.indexOf = function(b, O, D) {\n          return j(this, b, O, D, !0);\n        }, r.prototype.lastIndexOf = function(b, O, D) {\n          return j(this, b, O, D, !1);\n        }, r.prototype.write = function(b, O, D, B) {\n          if (O === void 0)\n            B = \"utf8\", D = this.length, O = 0;\n          else if (D === void 0 && typeof O == \"string\")\n            B = O, D = this.length, O = 0;\n          else {\n            if (!isFinite(O))\n              throw new Error(\"Buffer.write(string, encoding, offset[, length]) is no longer supported\");\n            O >>>= 0, isFinite(D) ? (D >>>= 0, B === void 0 && (B = \"utf8\")) : (B = D, D = void 0);\n          }\n          var Y = this.length - O;\n          if ((D === void 0 || Y < D) && (D = Y), 0 < b.length && (D < 0 || O < 0) || O > this.length)\n            throw new RangeError(\"Attempt to write outside buffer bounds\");\n          B = B || \"utf8\";\n          for (var J, te, ce, re = !1; ; )\n            switch (B) {\n              case \"hex\":\n                var ue = this, le = b, K = O, ae = D, he = (K = Number(K) || 0, ue.length - K);\n                (!ae || he < (ae = Number(ae))) && (ae = he), (he = le.length) / 2 < ae && (ae = he / 2);\n                for (var _e = 0; _e < ae; ++_e) {\n                  var fe = parseInt(le.substr(2 * _e, 2), 16);\n                  if (X(fe))\n                    return _e;\n                  ue[K + _e] = fe;\n                }\n                return _e;\n              case \"utf8\":\n              case \"utf-8\":\n                return he = O, ce = D, U(V(b, (te = this).length - he), te, he, ce);\n              case \"ascii\":\n                return _(this, b, O, D);\n              case \"latin1\":\n              case \"binary\":\n                return _(this, b, O, D);\n              case \"base64\":\n                return te = this, ce = O, J = D, U(G(b), te, ce, J);\n              case \"ucs2\":\n              case \"ucs-2\":\n              case \"utf16le\":\n              case \"utf-16le\":\n                return S(this, b, O, D);\n              default:\n                if (re)\n                  throw new TypeError(\"Unknown encoding: \" + B);\n                B = (\"\" + B).toLowerCase(), re = !0;\n            }\n        }, r.prototype.toJSON = function() {\n          return { type: \"Buffer\", data: Array.prototype.slice.call(this._arr || this, 0) };\n        };\n        var A = 4096;\n        function x(b, O, D) {\n          if (b % 1 != 0 || b < 0)\n            throw new RangeError(\"offset is not uint\");\n          if (D < b + O)\n            throw new RangeError(\"Trying to access beyond buffer length\");\n        }\n        function P(b, O, D, B, Y, J) {\n          if (!r.isBuffer(b))\n            throw new TypeError('\"buffer\" argument must be a Buffer instance');\n          if (Y < O || O < J)\n            throw new RangeError('\"value\" argument is out of bounds');\n          if (D + B > b.length)\n            throw new RangeError(\"Index out of range\");\n        }\n        function M(b, O, D, B) {\n          if (D + B > b.length)\n            throw new RangeError(\"Index out of range\");\n          if (D < 0)\n            throw new RangeError(\"Index out of range\");\n        }\n        function R(b, O, D, B, Y) {\n          return O = +O, D >>>= 0, Y || M(b, 0, D, 4), u.write(b, O, D, B, 23, 4), D + 4;\n        }\n        function L(b, O, D, B, Y) {\n          return O = +O, D >>>= 0, Y || M(b, 0, D, 8), u.write(b, O, D, B, 52, 8), D + 8;\n        }\n        r.prototype.slice = function(b, O) {\n          var D = this.length, D = ((b = ~~b) < 0 ? (b += D) < 0 && (b = 0) : D < b && (b = D), (O = O === void 0 ? D : ~~O) < 0 ? (O += D) < 0 && (O = 0) : D < O && (O = D), O < b && (O = b), this.subarray(b, O));\n          return Object.setPrototypeOf(D, r.prototype), D;\n        }, r.prototype.readUIntLE = function(b, O, D) {\n          b >>>= 0, O >>>= 0, D || x(b, O, this.length);\n          for (var B = this[b], Y = 1, J = 0; ++J < O && (Y *= 256); )\n            B += this[b + J] * Y;\n          return B;\n        }, r.prototype.readUIntBE = function(b, O, D) {\n          b >>>= 0, O >>>= 0, D || x(b, O, this.length);\n          for (var B = this[b + --O], Y = 1; 0 < O && (Y *= 256); )\n            B += this[b + --O] * Y;\n          return B;\n        }, r.prototype.readUInt8 = function(b, O) {\n          return b >>>= 0, O || x(b, 1, this.length), this[b];\n        }, r.prototype.readUInt16LE = function(b, O) {\n          return b >>>= 0, O || x(b, 2, this.length), this[b] | this[b + 1] << 8;\n        }, r.prototype.readUInt16BE = function(b, O) {\n          return b >>>= 0, O || x(b, 2, this.length), this[b] << 8 | this[b + 1];\n        }, r.prototype.readUInt32LE = function(b, O) {\n          return b >>>= 0, O || x(b, 4, this.length), (this[b] | this[b + 1] << 8 | this[b + 2] << 16) + 16777216 * this[b + 3];\n        }, r.prototype.readUInt32BE = function(b, O) {\n          return b >>>= 0, O || x(b, 4, this.length), 16777216 * this[b] + (this[b + 1] << 16 | this[b + 2] << 8 | this[b + 3]);\n        }, r.prototype.readIntLE = function(b, O, D) {\n          b >>>= 0, O >>>= 0, D || x(b, O, this.length);\n          for (var B = this[b], Y = 1, J = 0; ++J < O && (Y *= 256); )\n            B += this[b + J] * Y;\n          return (Y *= 128) <= B && (B -= Math.pow(2, 8 * O)), B;\n        }, r.prototype.readIntBE = function(b, O, D) {\n          b >>>= 0, O >>>= 0, D || x(b, O, this.length);\n          for (var B = O, Y = 1, J = this[b + --B]; 0 < B && (Y *= 256); )\n            J += this[b + --B] * Y;\n          return (Y *= 128) <= J && (J -= Math.pow(2, 8 * O)), J;\n        }, r.prototype.readInt8 = function(b, O) {\n          return b >>>= 0, O || x(b, 1, this.length), 128 & this[b] ? -1 * (255 - this[b] + 1) : this[b];\n        }, r.prototype.readInt16LE = function(b, O) {\n          return b >>>= 0, O || x(b, 2, this.length), O = this[b] | this[b + 1] << 8, 32768 & O ? 4294901760 | O : O;\n        }, r.prototype.readInt16BE = function(b, O) {\n          return b >>>= 0, O || x(b, 2, this.length), O = this[b + 1] | this[b] << 8, 32768 & O ? 4294901760 | O : O;\n        }, r.prototype.readInt32LE = function(b, O) {\n          return b >>>= 0, O || x(b, 4, this.length), this[b] | this[b + 1] << 8 | this[b + 2] << 16 | this[b + 3] << 24;\n        }, r.prototype.readInt32BE = function(b, O) {\n          return b >>>= 0, O || x(b, 4, this.length), this[b] << 24 | this[b + 1] << 16 | this[b + 2] << 8 | this[b + 3];\n        }, r.prototype.readFloatLE = function(b, O) {\n          return b >>>= 0, O || x(b, 4, this.length), u.read(this, b, !0, 23, 4);\n        }, r.prototype.readFloatBE = function(b, O) {\n          return b >>>= 0, O || x(b, 4, this.length), u.read(this, b, !1, 23, 4);\n        }, r.prototype.readDoubleLE = function(b, O) {\n          return b >>>= 0, O || x(b, 8, this.length), u.read(this, b, !0, 52, 8);\n        }, r.prototype.readDoubleBE = function(b, O) {\n          return b >>>= 0, O || x(b, 8, this.length), u.read(this, b, !1, 52, 8);\n        }, r.prototype.writeUIntLE = function(b, O, D, B) {\n          b = +b, O >>>= 0, D >>>= 0, B || P(this, b, O, D, Math.pow(2, 8 * D) - 1, 0);\n          var Y = 1, J = 0;\n          for (this[O] = 255 & b; ++J < D && (Y *= 256); )\n            this[O + J] = b / Y & 255;\n          return O + D;\n        }, r.prototype.writeUIntBE = function(b, O, D, B) {\n          b = +b, O >>>= 0, D >>>= 0, B || P(this, b, O, D, Math.pow(2, 8 * D) - 1, 0);\n          var Y = D - 1, J = 1;\n          for (this[O + Y] = 255 & b; 0 <= --Y && (J *= 256); )\n            this[O + Y] = b / J & 255;\n          return O + D;\n        }, r.prototype.writeUInt8 = function(b, O, D) {\n          return b = +b, O >>>= 0, D || P(this, b, O, 1, 255, 0), this[O] = 255 & b, O + 1;\n        }, r.prototype.writeUInt16LE = function(b, O, D) {\n          return b = +b, O >>>= 0, D || P(this, b, O, 2, 65535, 0), this[O] = 255 & b, this[O + 1] = b >>> 8, O + 2;\n        }, r.prototype.writeUInt16BE = function(b, O, D) {\n          return b = +b, O >>>= 0, D || P(this, b, O, 2, 65535, 0), this[O] = b >>> 8, this[O + 1] = 255 & b, O + 2;\n        }, r.prototype.writeUInt32LE = function(b, O, D) {\n          return b = +b, O >>>= 0, D || P(this, b, O, 4, 4294967295, 0), this[O + 3] = b >>> 24, this[O + 2] = b >>> 16, this[O + 1] = b >>> 8, this[O] = 255 & b, O + 4;\n        }, r.prototype.writeUInt32BE = function(b, O, D) {\n          return b = +b, O >>>= 0, D || P(this, b, O, 4, 4294967295, 0), this[O] = b >>> 24, this[O + 1] = b >>> 16, this[O + 2] = b >>> 8, this[O + 3] = 255 & b, O + 4;\n        }, r.prototype.writeIntLE = function(b, O, D, B) {\n          b = +b, O >>>= 0, B || P(this, b, O, D, (B = Math.pow(2, 8 * D - 1)) - 1, -B);\n          var Y = 0, J = 1, te = 0;\n          for (this[O] = 255 & b; ++Y < D && (J *= 256); )\n            b < 0 && te === 0 && this[O + Y - 1] !== 0 && (te = 1), this[O + Y] = (b / J >> 0) - te & 255;\n          return O + D;\n        }, r.prototype.writeIntBE = function(b, O, D, B) {\n          b = +b, O >>>= 0, B || P(this, b, O, D, (B = Math.pow(2, 8 * D - 1)) - 1, -B);\n          var Y = D - 1, J = 1, te = 0;\n          for (this[O + Y] = 255 & b; 0 <= --Y && (J *= 256); )\n            b < 0 && te === 0 && this[O + Y + 1] !== 0 && (te = 1), this[O + Y] = (b / J >> 0) - te & 255;\n          return O + D;\n        }, r.prototype.writeInt8 = function(b, O, D) {\n          return b = +b, O >>>= 0, D || P(this, b, O, 1, 127, -128), this[O] = 255 & (b = b < 0 ? 255 + b + 1 : b), O + 1;\n        }, r.prototype.writeInt16LE = function(b, O, D) {\n          return b = +b, O >>>= 0, D || P(this, b, O, 2, 32767, -32768), this[O] = 255 & b, this[O + 1] = b >>> 8, O + 2;\n        }, r.prototype.writeInt16BE = function(b, O, D) {\n          return b = +b, O >>>= 0, D || P(this, b, O, 2, 32767, -32768), this[O] = b >>> 8, this[O + 1] = 255 & b, O + 2;\n        }, r.prototype.writeInt32LE = function(b, O, D) {\n          return b = +b, O >>>= 0, D || P(this, b, O, 4, 2147483647, -2147483648), this[O] = 255 & b, this[O + 1] = b >>> 8, this[O + 2] = b >>> 16, this[O + 3] = b >>> 24, O + 4;\n        }, r.prototype.writeInt32BE = function(b, O, D) {\n          return b = +b, O >>>= 0, D || P(this, b, O, 4, 2147483647, -2147483648), this[O] = (b = b < 0 ? 4294967295 + b + 1 : b) >>> 24, this[O + 1] = b >>> 16, this[O + 2] = b >>> 8, this[O + 3] = 255 & b, O + 4;\n        }, r.prototype.writeFloatLE = function(b, O, D) {\n          return R(this, b, O, !0, D);\n        }, r.prototype.writeFloatBE = function(b, O, D) {\n          return R(this, b, O, !1, D);\n        }, r.prototype.writeDoubleLE = function(b, O, D) {\n          return L(this, b, O, !0, D);\n        }, r.prototype.writeDoubleBE = function(b, O, D) {\n          return L(this, b, O, !1, D);\n        }, r.prototype.copy = function(b, O, D, B) {\n          if (!r.isBuffer(b))\n            throw new TypeError(\"argument should be a Buffer\");\n          if (D = D || 0, B || B === 0 || (B = this.length), O >= b.length && (O = b.length), (B = 0 < B && B < D ? D : B) === D || b.length === 0 || this.length === 0)\n            return 0;\n          if ((O = O || 0) < 0)\n            throw new RangeError(\"targetStart out of bounds\");\n          if (D < 0 || D >= this.length)\n            throw new RangeError(\"Index out of range\");\n          if (B < 0)\n            throw new RangeError(\"sourceEnd out of bounds\");\n          B > this.length && (B = this.length);\n          var Y = (B = b.length - O < B - D ? b.length - O + D : B) - D;\n          if (this === b && typeof Uint8Array.prototype.copyWithin == \"function\")\n            this.copyWithin(O, D, B);\n          else if (this === b && D < O && O < B)\n            for (var J = Y - 1; 0 <= J; --J)\n              b[J + O] = this[J + D];\n          else\n            Uint8Array.prototype.set.call(b, this.subarray(D, B), O);\n          return Y;\n        }, r.prototype.fill = function(b, O, D, B) {\n          if (typeof b == \"string\") {\n            if (typeof O == \"string\" ? (B = O, O = 0, D = this.length) : typeof D == \"string\" && (B = D, D = this.length), B !== void 0 && typeof B != \"string\")\n              throw new TypeError(\"encoding must be a string\");\n            if (typeof B == \"string\" && !r.isEncoding(B))\n              throw new TypeError(\"Unknown encoding: \" + B);\n            var Y;\n            b.length === 1 && (Y = b.charCodeAt(0), (B === \"utf8\" && Y < 128 || B === \"latin1\") && (b = Y));\n          } else\n            typeof b == \"number\" ? b &= 255 : typeof b == \"boolean\" && (b = Number(b));\n          if (O < 0 || this.length < O || this.length < D)\n            throw new RangeError(\"Out of range index\");\n          var J;\n          if (!(D <= O))\n            if (O >>>= 0, D = D === void 0 ? this.length : D >>> 0, typeof (b = b || 0) == \"number\")\n              for (J = O; J < D; ++J)\n                this[J] = b;\n            else {\n              var te = r.isBuffer(b) ? b : r.from(b, B), ce = te.length;\n              if (ce === 0)\n                throw new TypeError('The value \"' + b + '\" is invalid for argument \"value\"');\n              for (J = 0; J < D - O; ++J)\n                this[J + O] = te[J % ce];\n            }\n          return this;\n        };\n        var F = /[^+/0-9A-Za-z-_]/g;\n        function V(b, O) {\n          O = O || 1 / 0;\n          for (var D, B = b.length, Y = null, J = [], te = 0; te < B; ++te) {\n            if (55295 < (D = b.charCodeAt(te)) && D < 57344) {\n              if (!Y) {\n                if (56319 < D) {\n                  -1 < (O -= 3) && J.push(239, 191, 189);\n                  continue;\n                }\n                if (te + 1 === B) {\n                  -1 < (O -= 3) && J.push(239, 191, 189);\n                  continue;\n                }\n                Y = D;\n                continue;\n              }\n              if (D < 56320) {\n                -1 < (O -= 3) && J.push(239, 191, 189), Y = D;\n                continue;\n              }\n              D = 65536 + (Y - 55296 << 10 | D - 56320);\n            } else\n              Y && -1 < (O -= 3) && J.push(239, 191, 189);\n            if (Y = null, D < 128) {\n              if (--O < 0)\n                break;\n              J.push(D);\n            } else if (D < 2048) {\n              if ((O -= 2) < 0)\n                break;\n              J.push(D >> 6 | 192, 63 & D | 128);\n            } else if (D < 65536) {\n              if ((O -= 3) < 0)\n                break;\n              J.push(D >> 12 | 224, D >> 6 & 63 | 128, 63 & D | 128);\n            } else {\n              if (!(D < 1114112))\n                throw new Error(\"Invalid code point\");\n              if ((O -= 4) < 0)\n                break;\n              J.push(D >> 18 | 240, D >> 12 & 63 | 128, D >> 6 & 63 | 128, 63 & D | 128);\n            }\n          }\n          return J;\n        }\n        function G(b) {\n          return y.toByteArray(function(O) {\n            if ((O = (O = O.split(\"=\")[0]).trim().replace(F, \"\")).length < 2)\n              return \"\";\n            for (; O.length % 4 != 0; )\n              O += \"=\";\n            return O;\n          }(b));\n        }\n        function U(b, O, D, B) {\n          for (var Y = 0; Y < B && !(Y + D >= O.length || Y >= b.length); ++Y)\n            O[Y + D] = b[Y];\n          return Y;\n        }\n        function W(b, O) {\n          return b instanceof O || b != null && b.constructor != null && b.constructor.name != null && b.constructor.name === O.name;\n        }\n        function X(b) {\n          return b != b;\n        }\n        var ne = function() {\n          for (var b = \"0123456789abcdef\", O = new Array(256), D = 0; D < 16; ++D)\n            for (var B = 16 * D, Y = 0; Y < 16; ++Y)\n              O[B + Y] = b[D] + b[Y];\n          return O;\n        }();\n      }).call(this, t(\"buffer\").Buffer);\n    }, { \"base64-js\": 1, buffer: 4, ieee754: 251 }], 5: [function(t, H, C) {\n      H.exports = function(m) {\n        if (typeof m != \"function\")\n          throw TypeError(String(m) + \" is not a function\");\n        return m;\n      };\n    }, {}], 6: [function(t, H, C) {\n      var m = t(\"../internals/is-object\");\n      H.exports = function(y) {\n        if (m(y) || y === null)\n          return y;\n        throw TypeError(\"Can't set \" + String(y) + \" as a prototype\");\n      };\n    }, { \"../internals/is-object\": 75 }], 7: [function(u, H, C) {\n      var m = u(\"../internals/well-known-symbol\"), y = u(\"../internals/object-create\"), u = u(\"../internals/object-define-property\"), h = m(\"unscopables\"), g = Array.prototype;\n      g[h] == null && u.f(g, h, { configurable: !0, value: y(null) }), H.exports = function(f) {\n        g[h][f] = !0;\n      };\n    }, { \"../internals/object-create\": 91, \"../internals/object-define-property\": 93, \"../internals/well-known-symbol\": 149 }], 8: [function(t, H, C) {\n      var m = t(\"../internals/string-multibyte\").charAt;\n      H.exports = function(y, u, h) {\n        return u + (h ? m(y, u).length : 1);\n      };\n    }, { \"../internals/string-multibyte\": 124 }], 9: [function(t, H, C) {\n      H.exports = function(m, y, u) {\n        if (m instanceof y)\n          return m;\n        throw TypeError(\"Incorrect \" + (u ? u + \" \" : \"\") + \"invocation\");\n      };\n    }, {}], 10: [function(t, H, C) {\n      var m = t(\"../internals/is-object\");\n      H.exports = function(y) {\n        if (m(y))\n          return y;\n        throw TypeError(String(y) + \" is not an object\");\n      };\n    }, { \"../internals/is-object\": 75 }], 11: [function(t, H, C) {\n      H.exports = typeof ArrayBuffer < \"u\" && typeof DataView < \"u\";\n    }, {}], 12: [function(M, H, C) {\n      function m(L) {\n        return f(L) && r(R, s(L));\n      }\n      var y, u = M(\"../internals/array-buffer-native\"), h = M(\"../internals/descriptors\"), g = M(\"../internals/global\"), f = M(\"../internals/is-object\"), r = M(\"../internals/has\"), s = M(\"../internals/classof\"), o = M(\"../internals/create-non-enumerable-property\"), i = M(\"../internals/redefine\"), l = M(\"../internals/object-define-property\").f, n = M(\"../internals/object-get-prototype-of\"), a = M(\"../internals/object-set-prototype-of\"), A = M(\"../internals/well-known-symbol\"), M = M(\"../internals/uid\"), c = g.Int8Array, p = c && c.prototype, j = g.Uint8ClampedArray, j = j && j.prototype, T = c && n(c), _ = p && n(p), S = Object.prototype, E = S.isPrototypeOf, A = A(\"toStringTag\"), x = M(\"TYPED_ARRAY_TAG\"), P = u && !!a && s(g.opera) !== \"Opera\", M = !1, R = { Int8Array: 1, Uint8Array: 1, Uint8ClampedArray: 1, Int16Array: 2, Uint16Array: 2, Int32Array: 4, Uint32Array: 4, Float32Array: 4, Float64Array: 8 };\n      for (y in R)\n        g[y] || (P = !1);\n      if ((!P || typeof T != \"function\" || T === Function.prototype) && (T = function() {\n        throw TypeError(\"Incorrect invocation\");\n      }, P))\n        for (y in R)\n          g[y] && a(g[y], T);\n      if ((!P || !_ || _ === S) && (_ = T.prototype, P))\n        for (y in R)\n          g[y] && a(g[y].prototype, _);\n      if (P && n(j) !== _ && a(j, _), h && !r(_, A))\n        for (y in M = !0, l(_, A, { get: function() {\n          return f(this) ? this[x] : void 0;\n        } }), R)\n          g[y] && o(g[y], x, y);\n      H.exports = { NATIVE_ARRAY_BUFFER_VIEWS: P, TYPED_ARRAY_TAG: M && x, aTypedArray: function(L) {\n        if (m(L))\n          return L;\n        throw TypeError(\"Target is not a typed array\");\n      }, aTypedArrayConstructor: function(L) {\n        if (a) {\n          if (E.call(T, L))\n            return L;\n        } else\n          for (var F in R)\n            if (r(R, y) && (F = g[F], F && (L === F || E.call(F, L))))\n              return L;\n        throw TypeError(\"Target is not a typed array constructor\");\n      }, exportTypedArrayMethod: function(L, F, V) {\n        if (h) {\n          if (V)\n            for (var G in R)\n              G = g[G], G && r(G.prototype, L) && delete G.prototype[L];\n          _[L] && !V || i(_, L, !V && P && p[L] || F);\n        }\n      }, exportTypedArrayStaticMethod: function(L, F, V) {\n        var G, U;\n        if (h) {\n          if (a) {\n            if (V)\n              for (G in R)\n                (U = g[G]) && r(U, L) && delete U[L];\n            if (T[L] && !V)\n              return;\n            try {\n              return i(T, L, !V && P && c[L] || F);\n            } catch {\n            }\n          }\n          for (G in R)\n            !(U = g[G]) || U[L] && !V || i(U, L, F);\n        }\n      }, isView: function(L) {\n        return L = s(L), L === \"DataView\" || r(R, L);\n      }, isTypedArray: m, TypedArray: T, TypedArrayPrototype: _ };\n    }, { \"../internals/array-buffer-native\": 11, \"../internals/classof\": 29, \"../internals/create-non-enumerable-property\": 38, \"../internals/descriptors\": 43, \"../internals/global\": 60, \"../internals/has\": 61, \"../internals/is-object\": 75, \"../internals/object-define-property\": 93, \"../internals/object-get-prototype-of\": 98, \"../internals/object-set-prototype-of\": 102, \"../internals/redefine\": 109, \"../internals/uid\": 146, \"../internals/well-known-symbol\": 149 }], 13: [function(D, H, C) {\n      function m(K) {\n        return [255 & K];\n      }\n      function y(K) {\n        return [255 & K, K >> 8 & 255];\n      }\n      function u(K) {\n        return [255 & K, K >> 8 & 255, K >> 16 & 255, K >> 24 & 255];\n      }\n      function h(K) {\n        return K[3] << 24 | K[2] << 16 | K[1] << 8 | K[0];\n      }\n      function g(K) {\n        return J(K, 23, 4);\n      }\n      function f(K) {\n        return J(K, 52, 8);\n      }\n      function r(K, ae) {\n        M(K[W], ae, { get: function() {\n          return F(this)[ae];\n        } });\n      }\n      function s(xe, ae, ge, _e) {\n        if (ge = S(ge), xe = F(xe), ge + ae > xe.byteLength)\n          throw Y(X);\n        var fe = F(xe.buffer).bytes, ge = ge + xe.byteOffset, xe = fe.slice(ge, ge + ae);\n        return _e ? xe : xe.reverse();\n      }\n      function o(K, ae, he, _e, fe, ge) {\n        if (he = S(he), K = F(K), he + ae > K.byteLength)\n          throw Y(X);\n        for (var xe = F(K.buffer).bytes, De = he + K.byteOffset, Me = _e(+fe), Qe = 0; Qe < ae; Qe++)\n          xe[De + Qe] = Me[ge ? Qe : ae - Qe - 1];\n      }\n      var i = D(\"../internals/global\"), l = D(\"../internals/descriptors\"), n = D(\"../internals/array-buffer-native\"), a = D(\"../internals/create-non-enumerable-property\"), c = D(\"../internals/redefine-all\"), p = D(\"../internals/fails\"), j = D(\"../internals/an-instance\"), T = D(\"../internals/to-integer\"), _ = D(\"../internals/to-length\"), S = D(\"../internals/to-index\"), E = D(\"../internals/ieee754\"), A = D(\"../internals/object-get-prototype-of\"), x = D(\"../internals/object-set-prototype-of\"), P = D(\"../internals/object-get-own-property-names\").f, M = D(\"../internals/object-define-property\").f, R = D(\"../internals/array-fill\"), L = D(\"../internals/set-to-string-tag\"), D = D(\"../internals/internal-state\"), F = D.get, V = D.set, G = \"ArrayBuffer\", U = \"DataView\", W = \"prototype\", X = \"Wrong index\", ne = i[G], b = ne, O = i[U], D = O && O[W], B = Object.prototype, Y = i.RangeError, J = E.pack, te = E.unpack;\n      if (n) {\n        if (!p(function() {\n          ne(1);\n        }) || !p(function() {\n          new ne(-1);\n        }) || p(function() {\n          return new ne(), new ne(1.5), new ne(NaN), ne.name != G;\n        })) {\n          for (var ce, i = (b = function(he) {\n            return j(this, b), new ne(S(he));\n          })[W] = ne[W], re = P(ne), ue = 0; re.length > ue; )\n            (ce = re[ue++]) in b || a(b, ce, ne[ce]);\n          i.constructor = b;\n        }\n        x && A(D) !== B && x(D, B);\n        var E = new O(new b(2)), le = D.setInt8;\n        E.setInt8(0, 2147483648), E.setInt8(1, 2147483649), !E.getInt8(0) && E.getInt8(1) || c(D, { setInt8: function(ae, he) {\n          le.call(this, ae, he << 24 >> 24);\n        }, setUint8: function(ae, he) {\n          le.call(this, ae, he << 24 >> 24);\n        } }, { unsafe: !0 });\n      } else\n        b = function(K) {\n          j(this, b, G), K = S(K), V(this, { bytes: R.call(new Array(K), 0), byteLength: K }), l || (this.byteLength = K);\n        }, O = function(K, fe, he) {\n          j(this, O, U), j(K, b, U);\n          var _e = F(K).byteLength, fe = T(fe);\n          if (fe < 0 || _e < fe)\n            throw Y(\"Wrong offset\");\n          if (_e < fe + (he = he === void 0 ? _e - fe : _(he)))\n            throw Y(\"Wrong length\");\n          V(this, { buffer: K, byteLength: he, byteOffset: fe }), l || (this.buffer = K, this.byteLength = he, this.byteOffset = fe);\n        }, l && (r(b, \"byteLength\"), r(O, \"buffer\"), r(O, \"byteLength\"), r(O, \"byteOffset\")), c(O[W], { getInt8: function(K) {\n          return s(this, 1, K)[0] << 24 >> 24;\n        }, getUint8: function(K) {\n          return s(this, 1, K)[0];\n        }, getInt16: function(K) {\n          return K = s(this, 2, K, 1 < arguments.length ? arguments[1] : void 0), (K[1] << 8 | K[0]) << 16 >> 16;\n        }, getUint16: function(K) {\n          return K = s(this, 2, K, 1 < arguments.length ? arguments[1] : void 0), K[1] << 8 | K[0];\n        }, getInt32: function(K) {\n          return h(s(this, 4, K, 1 < arguments.length ? arguments[1] : void 0));\n        }, getUint32: function(K) {\n          return h(s(this, 4, K, 1 < arguments.length ? arguments[1] : void 0)) >>> 0;\n        }, getFloat32: function(K) {\n          return te(s(this, 4, K, 1 < arguments.length ? arguments[1] : void 0), 23);\n        }, getFloat64: function(K) {\n          return te(s(this, 8, K, 1 < arguments.length ? arguments[1] : void 0), 52);\n        }, setInt8: function(K, ae) {\n          o(this, 1, K, m, ae);\n        }, setUint8: function(K, ae) {\n          o(this, 1, K, m, ae);\n        }, setInt16: function(K, ae) {\n          o(this, 2, K, y, ae, 2 < arguments.length ? arguments[2] : void 0);\n        }, setUint16: function(K, ae) {\n          o(this, 2, K, y, ae, 2 < arguments.length ? arguments[2] : void 0);\n        }, setInt32: function(K, ae) {\n          o(this, 4, K, u, ae, 2 < arguments.length ? arguments[2] : void 0);\n        }, setUint32: function(K, ae) {\n          o(this, 4, K, u, ae, 2 < arguments.length ? arguments[2] : void 0);\n        }, setFloat32: function(K, ae) {\n          o(this, 4, K, g, ae, 2 < arguments.length ? arguments[2] : void 0);\n        }, setFloat64: function(K, ae) {\n          o(this, 8, K, f, ae, 2 < arguments.length ? arguments[2] : void 0);\n        } });\n      L(b, G), L(O, U), H.exports = { ArrayBuffer: b, DataView: O };\n    }, { \"../internals/an-instance\": 9, \"../internals/array-buffer-native\": 11, \"../internals/array-fill\": 15, \"../internals/create-non-enumerable-property\": 38, \"../internals/descriptors\": 43, \"../internals/fails\": 51, \"../internals/global\": 60, \"../internals/ieee754\": 66, \"../internals/internal-state\": 71, \"../internals/object-define-property\": 93, \"../internals/object-get-own-property-names\": 96, \"../internals/object-get-prototype-of\": 98, \"../internals/object-set-prototype-of\": 102, \"../internals/redefine-all\": 108, \"../internals/set-to-string-tag\": 118, \"../internals/to-index\": 134, \"../internals/to-integer\": 136, \"../internals/to-length\": 137 }], 14: [function(t, H, C) {\n      var m = t(\"../internals/to-object\"), y = t(\"../internals/to-absolute-index\"), u = t(\"../internals/to-length\"), h = Math.min;\n      H.exports = [].copyWithin || function(l, f) {\n        var r = m(this), s = u(r.length), o = y(l, s), i = y(f, s), l = 2 < arguments.length ? arguments[2] : void 0, n = h((l === void 0 ? s : y(l, s)) - i, s - o), a = 1;\n        for (i < o && o < i + n && (a = -1, i += n - 1, o += n - 1); 0 < n--; )\n          i in r ? r[o] = r[i] : delete r[o], o += a, i += a;\n        return r;\n      };\n    }, { \"../internals/to-absolute-index\": 133, \"../internals/to-length\": 137, \"../internals/to-object\": 138 }], 15: [function(t, H, C) {\n      var m = t(\"../internals/to-object\"), y = t(\"../internals/to-absolute-index\"), u = t(\"../internals/to-length\");\n      H.exports = function(h) {\n        for (var g = m(this), f = u(g.length), s = arguments.length, r = y(1 < s ? arguments[1] : void 0, f), s = 2 < s ? arguments[2] : void 0, o = s === void 0 ? f : y(s, f); r < o; )\n          g[r++] = h;\n        return g;\n      };\n    }, { \"../internals/to-absolute-index\": 133, \"../internals/to-length\": 137, \"../internals/to-object\": 138 }], 16: [function(u, H, C) {\n      var m = u(\"../internals/array-iteration\").forEach, y = u(\"../internals/array-method-is-strict\"), u = u(\"../internals/array-method-uses-to-length\"), y = y(\"forEach\"), u = u(\"forEach\");\n      H.exports = y && u ? [].forEach : function(h) {\n        return m(this, h, 1 < arguments.length ? arguments[1] : void 0);\n      };\n    }, { \"../internals/array-iteration\": 19, \"../internals/array-method-is-strict\": 22, \"../internals/array-method-uses-to-length\": 23 }], 17: [function(t, H, C) {\n      var m = t(\"../internals/function-bind-context\"), y = t(\"../internals/to-object\"), u = t(\"../internals/call-with-safe-iteration-closing\"), h = t(\"../internals/is-array-iterator-method\"), g = t(\"../internals/to-length\"), f = t(\"../internals/create-property\"), r = t(\"../internals/get-iterator-method\");\n      H.exports = function(j) {\n        var o, i, l, n, a, c, p = y(j), j = typeof this == \"function\" ? this : Array, T = arguments.length, _ = 1 < T ? arguments[1] : void 0, S = _ !== void 0, E = r(p), A = 0;\n        if (S && (_ = m(_, 2 < T ? arguments[2] : void 0, 2)), E == null || j == Array && h(E))\n          for (i = new j(o = g(p.length)); A < o; A++)\n            c = S ? _(p[A], A) : p[A], f(i, A, c);\n        else\n          for (a = (n = E.call(p)).next, i = new j(); !(l = a.call(n)).done; A++)\n            c = S ? u(n, _, [l.value, A], !0) : l.value, f(i, A, c);\n        return i.length = A, i;\n      };\n    }, { \"../internals/call-with-safe-iteration-closing\": 26, \"../internals/create-property\": 40, \"../internals/function-bind-context\": 55, \"../internals/get-iterator-method\": 58, \"../internals/is-array-iterator-method\": 72, \"../internals/to-length\": 137, \"../internals/to-object\": 138 }], 18: [function(t, H, C) {\n      function m(g) {\n        return function(f, r, s) {\n          var o, i = y(f), l = u(i.length), n = h(s, l);\n          if (g && r != r) {\n            for (; n < l; )\n              if ((o = i[n++]) != o)\n                return !0;\n          } else\n            for (; n < l; n++)\n              if ((g || n in i) && i[n] === r)\n                return g || n || 0;\n          return !g && -1;\n        };\n      }\n      var y = t(\"../internals/to-indexed-object\"), u = t(\"../internals/to-length\"), h = t(\"../internals/to-absolute-index\");\n      H.exports = { includes: m(!0), indexOf: m(!1) };\n    }, { \"../internals/to-absolute-index\": 133, \"../internals/to-indexed-object\": 135, \"../internals/to-length\": 137 }], 19: [function(t, H, C) {\n      function m(s) {\n        var o = s == 1, i = s == 2, l = s == 3, n = s == 4, a = s == 6, c = s == 5 || a;\n        return function(p, j, T, _) {\n          for (var S, E, A = h(p), x = u(A), P = y(j, T, 3), M = g(x.length), R = 0, j = _ || f, L = o ? j(p, M) : i ? j(p, 0) : void 0; R < M; R++)\n            if ((c || R in x) && (E = P(S = x[R], R, A), s)) {\n              if (o)\n                L[R] = E;\n              else if (E)\n                switch (s) {\n                  case 3:\n                    return !0;\n                  case 5:\n                    return S;\n                  case 6:\n                    return R;\n                  case 2:\n                    r.call(L, S);\n                }\n              else if (n)\n                return !1;\n            }\n          return a ? -1 : l || n ? n : L;\n        };\n      }\n      var y = t(\"../internals/function-bind-context\"), u = t(\"../internals/indexed-object\"), h = t(\"../internals/to-object\"), g = t(\"../internals/to-length\"), f = t(\"../internals/array-species-create\"), r = [].push;\n      H.exports = { forEach: m(0), map: m(1), filter: m(2), some: m(3), every: m(4), find: m(5), findIndex: m(6) };\n    }, { \"../internals/array-species-create\": 25, \"../internals/function-bind-context\": 55, \"../internals/indexed-object\": 67, \"../internals/to-length\": 137, \"../internals/to-object\": 138 }], 20: [function(s, H, C) {\n      var m = s(\"../internals/to-indexed-object\"), y = s(\"../internals/to-integer\"), u = s(\"../internals/to-length\"), r = s(\"../internals/array-method-is-strict\"), s = s(\"../internals/array-method-uses-to-length\"), h = Math.min, g = [].lastIndexOf, f = !!g && 1 / [1].lastIndexOf(1, -0) < 0, r = r(\"lastIndexOf\"), s = s(\"indexOf\", { ACCESSORS: !0, 1: 0 });\n      H.exports = f || !r || !s ? function(o) {\n        if (f)\n          return g.apply(this, arguments) || 0;\n        var i = m(this), l = u(i.length), n = l - 1;\n        for ((n = 1 < arguments.length ? h(n, y(arguments[1])) : n) < 0 && (n = l + n); 0 <= n; n--)\n          if (n in i && i[n] === o)\n            return n || 0;\n        return -1;\n      } : g;\n    }, { \"../internals/array-method-is-strict\": 22, \"../internals/array-method-uses-to-length\": 23, \"../internals/to-indexed-object\": 135, \"../internals/to-integer\": 136, \"../internals/to-length\": 137 }], 21: [function(t, H, C) {\n      var m = t(\"../internals/fails\"), y = t(\"../internals/well-known-symbol\"), u = t(\"../internals/engine-v8-version\"), h = y(\"species\");\n      H.exports = function(g) {\n        return 51 <= u || !m(function() {\n          var f = [];\n          return (f.constructor = {})[h] = function() {\n            return { foo: 1 };\n          }, f[g](Boolean).foo !== 1;\n        });\n      };\n    }, { \"../internals/engine-v8-version\": 48, \"../internals/fails\": 51, \"../internals/well-known-symbol\": 149 }], 22: [function(t, H, C) {\n      var m = t(\"../internals/fails\");\n      H.exports = function(y, u) {\n        var h = [][y];\n        return !!h && m(function() {\n          h.call(null, u || function() {\n            throw 1;\n          }, 1);\n        });\n      };\n    }, { \"../internals/fails\": 51 }], 23: [function(t, H, C) {\n      function m(r) {\n        throw r;\n      }\n      var y = t(\"../internals/descriptors\"), u = t(\"../internals/fails\"), h = t(\"../internals/has\"), g = Object.defineProperty, f = {};\n      H.exports = function(r, s) {\n        var o, i, l, n;\n        return h(f, r) ? f[r] : (o = [][r], i = !!h(s = s || {}, \"ACCESSORS\") && s.ACCESSORS, l = h(s, 0) ? s[0] : m, n = h(s, 1) ? s[1] : void 0, f[r] = !!o && !u(function() {\n          if (i && !y)\n            return !0;\n          var a = { length: -1 };\n          i ? g(a, 1, { enumerable: !0, get: m }) : a[1] = 1, o.call(a, l, n);\n        }));\n      };\n    }, { \"../internals/descriptors\": 43, \"../internals/fails\": 51, \"../internals/has\": 61 }], 24: [function(t, H, C) {\n      function m(f) {\n        return function(r, s, o, i) {\n          y(s);\n          var l = u(r), n = h(l), a = g(l.length), c = f ? a - 1 : 0, p = f ? -1 : 1;\n          if (o < 2)\n            for (; ; ) {\n              if (c in n) {\n                i = n[c], c += p;\n                break;\n              }\n              if (c += p, f ? c < 0 : a <= c)\n                throw TypeError(\"Reduce of empty array with no initial value\");\n            }\n          for (; f ? 0 <= c : c < a; c += p)\n            c in n && (i = s(i, n[c], c, l));\n          return i;\n        };\n      }\n      var y = t(\"../internals/a-function\"), u = t(\"../internals/to-object\"), h = t(\"../internals/indexed-object\"), g = t(\"../internals/to-length\");\n      H.exports = { left: m(!1), right: m(!0) };\n    }, { \"../internals/a-function\": 5, \"../internals/indexed-object\": 67, \"../internals/to-length\": 137, \"../internals/to-object\": 138 }], 25: [function(t, H, C) {\n      var m = t(\"../internals/is-object\"), y = t(\"../internals/is-array\"), u = t(\"../internals/well-known-symbol\")(\"species\");\n      H.exports = function(h, g) {\n        var f;\n        return new ((f = y(h) && (typeof (f = h.constructor) == \"function\" && (f === Array || y(f.prototype)) || m(f) && (f = f[u]) === null) ? void 0 : f) === void 0 ? Array : f)(g === 0 ? 0 : g);\n      };\n    }, { \"../internals/is-array\": 73, \"../internals/is-object\": 75, \"../internals/well-known-symbol\": 149 }], 26: [function(t, H, C) {\n      var m = t(\"../internals/an-object\");\n      H.exports = function(y, u, h, g) {\n        try {\n          return g ? u(m(h)[0], h[1]) : u(h);\n        } catch (f) {\n          throw g = y.return, g !== void 0 && m(g.call(y)), f;\n        }\n      };\n    }, { \"../internals/an-object\": 10 }], 27: [function(t, H, C) {\n      var m = t(\"../internals/well-known-symbol\")(\"iterator\"), y = !1;\n      try {\n        var u = 0, h = { next: function() {\n          return { done: !!u++ };\n        }, return: function() {\n          y = !0;\n        } };\n        h[m] = function() {\n          return this;\n        }, Array.from(h, function() {\n          throw 2;\n        });\n      } catch {\n      }\n      H.exports = function(g, f) {\n        if (!f && !y)\n          return !1;\n        var r = !1;\n        try {\n          var s = {};\n          s[m] = function() {\n            return { next: function() {\n              return { done: r = !0 };\n            } };\n          }, g(s);\n        } catch {\n        }\n        return r;\n      };\n    }, { \"../internals/well-known-symbol\": 149 }], 28: [function(t, H, C) {\n      var m = {}.toString;\n      H.exports = function(y) {\n        return m.call(y).slice(8, -1);\n      };\n    }, {}], 29: [function(t, H, C) {\n      var m = t(\"../internals/to-string-tag-support\"), y = t(\"../internals/classof-raw\"), u = t(\"../internals/well-known-symbol\")(\"toStringTag\"), h = y(/* @__PURE__ */ function() {\n        return arguments;\n      }()) == \"Arguments\";\n      H.exports = m ? y : function(g) {\n        var f;\n        return g === void 0 ? \"Undefined\" : g === null ? \"Null\" : typeof (f = function(r, s) {\n          try {\n            return r[s];\n          } catch {\n          }\n        }(g = Object(g), u)) == \"string\" ? f : h ? y(g) : (f = y(g)) == \"Object\" && typeof g.callee == \"function\" ? \"Arguments\" : f;\n      };\n    }, { \"../internals/classof-raw\": 28, \"../internals/to-string-tag-support\": 142, \"../internals/well-known-symbol\": 149 }], 30: [function(l, H, C) {\n      var m = l(\"../internals/object-define-property\").f, y = l(\"../internals/object-create\"), u = l(\"../internals/redefine-all\"), h = l(\"../internals/function-bind-context\"), g = l(\"../internals/an-instance\"), f = l(\"../internals/iterate\"), r = l(\"../internals/define-iterator\"), s = l(\"../internals/set-species\"), o = l(\"../internals/descriptors\"), i = l(\"../internals/internal-metadata\").fastKey, l = l(\"../internals/internal-state\"), n = l.set, a = l.getterFor;\n      H.exports = { getConstructor: function(c, p, j, T) {\n        function _(x, P, M) {\n          var R, L = A(x), F = S(x, P);\n          return F ? F.value = M : (L.last = F = { index: R = i(P, !0), key: P, value: M, previous: P = L.last, next: void 0, removed: !1 }, L.first || (L.first = F), P && (P.next = F), o ? L.size++ : x.size++, R !== \"F\" && (L.index[R] = F)), x;\n        }\n        function S(R, P) {\n          var M, R = A(R), L = i(P);\n          if (L !== \"F\")\n            return R.index[L];\n          for (M = R.first; M; M = M.next)\n            if (M.key == P)\n              return M;\n        }\n        var E = c(function(x, P) {\n          g(x, E, p), n(x, { type: p, index: y(null), first: void 0, last: void 0, size: 0 }), o || (x.size = 0), P != null && f(P, x[T], x, j);\n        }), A = a(p);\n        return u(E.prototype, { clear: function() {\n          for (var x = A(this), P = x.index, M = x.first; M; )\n            M.removed = !0, M.previous && (M.previous = M.previous.next = void 0), delete P[M.index], M = M.next;\n          x.first = x.last = void 0, o ? x.size = 0 : this.size = 0;\n        }, delete: function(L) {\n          var P, M, R = A(this), L = S(this, L);\n          return L && (P = L.next, M = L.previous, delete R.index[L.index], L.removed = !0, M && (M.next = P), P && (P.previous = M), R.first == L && (R.first = P), R.last == L && (R.last = M), o ? R.size-- : this.size--), !!L;\n        }, forEach: function(x) {\n          for (var P, M = A(this), R = h(x, 1 < arguments.length ? arguments[1] : void 0, 3); P = P ? P.next : M.first; )\n            for (R(P.value, P.key, this); P && P.removed; )\n              P = P.previous;\n        }, has: function(x) {\n          return !!S(this, x);\n        } }), u(E.prototype, j ? { get: function(x) {\n          return x = S(this, x), x && x.value;\n        }, set: function(x, P) {\n          return _(this, x === 0 ? 0 : x, P);\n        } } : { add: function(x) {\n          return _(this, x = x === 0 ? 0 : x, x);\n        } }), o && m(E.prototype, \"size\", { get: function() {\n          return A(this).size;\n        } }), E;\n      }, setStrong: function(c, p, j) {\n        var T = p + \" Iterator\", _ = a(p), S = a(T);\n        r(c, p, function(E, A) {\n          n(this, { type: T, target: E, state: _(E), kind: A, last: void 0 });\n        }, function() {\n          for (var E = S(this), A = E.kind, x = E.last; x && x.removed; )\n            x = x.previous;\n          return E.target && (E.last = x = x ? x.next : E.state.first) ? A == \"keys\" ? { value: x.key, done: !1 } : A == \"values\" ? { value: x.value, done: !1 } : { value: [x.key, x.value], done: !1 } : { value: E.target = void 0, done: !0 };\n        }, j ? \"entries\" : \"values\", !j, !0), s(p);\n      } };\n    }, { \"../internals/an-instance\": 9, \"../internals/define-iterator\": 41, \"../internals/descriptors\": 43, \"../internals/function-bind-context\": 55, \"../internals/internal-metadata\": 70, \"../internals/internal-state\": 71, \"../internals/iterate\": 78, \"../internals/object-create\": 91, \"../internals/object-define-property\": 93, \"../internals/redefine-all\": 108, \"../internals/set-species\": 117 }], 31: [function(n, H, C) {\n      function m(_) {\n        return _.frozen || (_.frozen = new y());\n      }\n      function y() {\n        this.entries = [];\n      }\n      function u(_, S) {\n        return p(_.entries, function(E) {\n          return E[0] === S;\n        });\n      }\n      var h = n(\"../internals/redefine-all\"), g = n(\"../internals/internal-metadata\").getWeakData, f = n(\"../internals/an-object\"), r = n(\"../internals/is-object\"), s = n(\"../internals/an-instance\"), o = n(\"../internals/iterate\"), i = n(\"../internals/array-iteration\"), l = n(\"../internals/has\"), n = n(\"../internals/internal-state\"), a = n.set, c = n.getterFor, p = i.find, j = i.findIndex, T = 0;\n      y.prototype = { get: function(_) {\n        if (_ = u(this, _), _)\n          return _[1];\n      }, has: function(_) {\n        return !!u(this, _);\n      }, set: function(_, S) {\n        var E = u(this, _);\n        E ? E[1] = S : this.entries.push([_, S]);\n      }, delete: function(_) {\n        var S = j(this.entries, function(E) {\n          return E[0] === _;\n        });\n        return ~S && this.entries.splice(S, 1), !!~S;\n      } }, H.exports = { getConstructor: function(_, S, E, A) {\n        function x(R, L, F) {\n          var V = M(R), G = g(f(L), !0);\n          return G === !0 ? m(V).set(L, F) : G[V.id] = F, R;\n        }\n        var P = _(function(R, L) {\n          s(R, P, S), a(R, { type: S, id: T++, frozen: void 0 }), L != null && o(L, R[A], R, E);\n        }), M = c(S);\n        return h(P.prototype, { delete: function(R) {\n          var L, F = M(this);\n          return !!r(R) && ((L = g(R)) === !0 ? m(F).delete(R) : L && l(L, F.id) && delete L[F.id]);\n        }, has: function(R) {\n          var L, F = M(this);\n          return !!r(R) && ((L = g(R)) === !0 ? m(F).has(R) : L && l(L, F.id));\n        } }), h(P.prototype, E ? { get: function(R) {\n          var L, F = M(this);\n          if (r(R))\n            return (L = g(R)) === !0 ? m(F).get(R) : L ? L[F.id] : void 0;\n        }, set: function(R, L) {\n          return x(this, R, L);\n        } } : { add: function(R) {\n          return x(this, R, !0);\n        } }), P;\n      } };\n    }, { \"../internals/an-instance\": 9, \"../internals/an-object\": 10, \"../internals/array-iteration\": 19, \"../internals/has\": 61, \"../internals/internal-metadata\": 70, \"../internals/internal-state\": 71, \"../internals/is-object\": 75, \"../internals/iterate\": 78, \"../internals/redefine-all\": 108 }], 32: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/global\"), u = t(\"../internals/is-forced\"), h = t(\"../internals/redefine\"), g = t(\"../internals/internal-metadata\"), f = t(\"../internals/iterate\"), r = t(\"../internals/an-instance\"), s = t(\"../internals/is-object\"), o = t(\"../internals/fails\"), i = t(\"../internals/check-correctness-of-iteration\"), l = t(\"../internals/set-to-string-tag\"), n = t(\"../internals/inherit-if-required\");\n      H.exports = function(a, c, p) {\n        function j(G) {\n          var U = L[G];\n          h(L, G, G == \"add\" ? function(W) {\n            return U.call(this, W === 0 ? 0 : W), this;\n          } : G == \"delete\" ? function(W) {\n            return !(P && !s(W)) && U.call(this, W === 0 ? 0 : W);\n          } : G == \"get\" ? function(W) {\n            return P && !s(W) ? void 0 : U.call(this, W === 0 ? 0 : W);\n          } : G == \"has\" ? function(W) {\n            return !(P && !s(W)) && U.call(this, W === 0 ? 0 : W);\n          } : function(W, X) {\n            return U.call(this, W === 0 ? 0 : W, X), this;\n          });\n        }\n        var T, _, S, E, A, x = a.indexOf(\"Map\") !== -1, P = a.indexOf(\"Weak\") !== -1, M = x ? \"set\" : \"add\", R = y[a], L = R && R.prototype, F = R, V = {};\n        return u(a, typeof R != \"function\" || !(P || L.forEach && !o(function() {\n          new R().entries().next();\n        }))) ? (F = p.getConstructor(c, a, x, M), g.REQUIRED = !0) : u(a, !0) && (_ = (T = new F())[M](P ? {} : -0, 1) != T, S = o(function() {\n          T.has(1);\n        }), E = i(function(G) {\n          new R(G);\n        }), A = !P && o(function() {\n          for (var G = new R(), U = 5; U--; )\n            G[M](U, U);\n          return !G.has(-0);\n        }), E || (((F = c(function(G, U) {\n          return r(G, F, a), G = n(new R(), G, F), U != null && f(U, G[M], G, x), G;\n        })).prototype = L).constructor = F), (S || A) && (j(\"delete\"), j(\"has\"), x && j(\"get\")), (A || _) && j(M), P && L.clear && delete L.clear), V[a] = F, m({ global: !0, forced: F != R }, V), l(F, a), P || p.setStrong(F, a, x), F;\n      };\n    }, { \"../internals/an-instance\": 9, \"../internals/check-correctness-of-iteration\": 27, \"../internals/export\": 50, \"../internals/fails\": 51, \"../internals/global\": 60, \"../internals/inherit-if-required\": 68, \"../internals/internal-metadata\": 70, \"../internals/is-forced\": 74, \"../internals/is-object\": 75, \"../internals/iterate\": 78, \"../internals/redefine\": 109, \"../internals/set-to-string-tag\": 118 }], 33: [function(t, H, C) {\n      var m = t(\"../internals/has\"), y = t(\"../internals/own-keys\"), u = t(\"../internals/object-get-own-property-descriptor\"), h = t(\"../internals/object-define-property\");\n      H.exports = function(g, f) {\n        for (var r = y(f), s = h.f, o = u.f, i = 0; i < r.length; i++) {\n          var l = r[i];\n          m(g, l) || s(g, l, o(f, l));\n        }\n      };\n    }, { \"../internals/has\": 61, \"../internals/object-define-property\": 93, \"../internals/object-get-own-property-descriptor\": 94, \"../internals/own-keys\": 104 }], 34: [function(t, H, C) {\n      var m = t(\"../internals/well-known-symbol\")(\"match\");\n      H.exports = function(y) {\n        var u = /./;\n        try {\n          \"/./\"[y](u);\n        } catch {\n          try {\n            return u[m] = !1, \"/./\"[y](u);\n          } catch {\n          }\n        }\n        return !1;\n      };\n    }, { \"../internals/well-known-symbol\": 149 }], 35: [function(t, H, C) {\n      t = t(\"../internals/fails\"), H.exports = !t(function() {\n        function m() {\n        }\n        return m.prototype.constructor = null, Object.getPrototypeOf(new m()) !== m.prototype;\n      });\n    }, { \"../internals/fails\": 51 }], 36: [function(t, H, C) {\n      var m = t(\"../internals/require-object-coercible\"), y = /\"/g;\n      H.exports = function(r, h, g, f) {\n        var r = String(m(r)), s = \"<\" + h;\n        return g !== \"\" && (s += \" \" + g + '=\"' + String(f).replace(y, \"&quot;\") + '\"'), s + \">\" + r + \"</\" + h + \">\";\n      };\n    }, { \"../internals/require-object-coercible\": 114 }], 37: [function(t, H, C) {\n      function m() {\n        return this;\n      }\n      var y = t(\"../internals/iterators-core\").IteratorPrototype, u = t(\"../internals/object-create\"), h = t(\"../internals/create-property-descriptor\"), g = t(\"../internals/set-to-string-tag\"), f = t(\"../internals/iterators\");\n      H.exports = function(r, s, o) {\n        return s += \" Iterator\", r.prototype = u(y, { next: h(1, o) }), g(r, s, !1, !0), f[s] = m, r;\n      };\n    }, { \"../internals/create-property-descriptor\": 39, \"../internals/iterators\": 80, \"../internals/iterators-core\": 79, \"../internals/object-create\": 91, \"../internals/set-to-string-tag\": 118 }], 38: [function(t, H, C) {\n      var m = t(\"../internals/descriptors\"), y = t(\"../internals/object-define-property\"), u = t(\"../internals/create-property-descriptor\");\n      H.exports = m ? function(h, g, f) {\n        return y.f(h, g, u(1, f));\n      } : function(h, g, f) {\n        return h[g] = f, h;\n      };\n    }, { \"../internals/create-property-descriptor\": 39, \"../internals/descriptors\": 43, \"../internals/object-define-property\": 93 }], 39: [function(t, H, C) {\n      H.exports = function(m, y) {\n        return { enumerable: !(1 & m), configurable: !(2 & m), writable: !(4 & m), value: y };\n      };\n    }, {}], 40: [function(t, H, C) {\n      var m = t(\"../internals/to-primitive\"), y = t(\"../internals/object-define-property\"), u = t(\"../internals/create-property-descriptor\");\n      H.exports = function(h, g, f) {\n        g = m(g), g in h ? y.f(h, g, u(0, f)) : h[g] = f;\n      };\n    }, { \"../internals/create-property-descriptor\": 39, \"../internals/object-define-property\": 93, \"../internals/to-primitive\": 141 }], 41: [function(n, H, C) {\n      function m() {\n        return this;\n      }\n      var y = n(\"../internals/export\"), u = n(\"../internals/create-iterator-constructor\"), h = n(\"../internals/object-get-prototype-of\"), g = n(\"../internals/object-set-prototype-of\"), f = n(\"../internals/set-to-string-tag\"), r = n(\"../internals/create-non-enumerable-property\"), s = n(\"../internals/redefine\"), o = n(\"../internals/well-known-symbol\"), i = n(\"../internals/is-pure\"), l = n(\"../internals/iterators\"), n = n(\"../internals/iterators-core\"), a = n.IteratorPrototype, c = n.BUGGY_SAFARI_ITERATORS, p = o(\"iterator\"), j = \"values\", T = \"entries\";\n      H.exports = function(_, S, E, V, x, P, M) {\n        u(E, S, V);\n        function R(b) {\n          if (b === x && X)\n            return X;\n          if (!c && b in U)\n            return U[b];\n          switch (b) {\n            case \"keys\":\n            case j:\n            case T:\n              return function() {\n                return new E(this, b);\n              };\n          }\n          return function() {\n            return new E(this);\n          };\n        }\n        var L, F, V = S + \" Iterator\", G = !1, U = _.prototype, W = U[p] || U[\"@@iterator\"] || x && U[x], X = !c && W || R(x), ne = S == \"Array\" && U.entries || W;\n        if (ne && (ne = h(ne.call(new _())), a !== Object.prototype && ne.next && (i || h(ne) === a || (g ? g(ne, a) : typeof ne[p] != \"function\" && r(ne, p, m)), f(ne, V, !0, !0), i && (l[V] = m))), x == j && W && W.name !== j && (G = !0, X = function() {\n          return W.call(this);\n        }), i && !M || U[p] === X || r(U, p, X), l[S] = X, x)\n          if (L = { values: R(j), keys: P ? X : R(\"keys\"), entries: R(T) }, M)\n            for (F in L)\n              !c && !G && F in U || s(U, F, L[F]);\n          else\n            y({ target: S, proto: !0, forced: c || G }, L);\n        return L;\n      };\n    }, { \"../internals/create-iterator-constructor\": 37, \"../internals/create-non-enumerable-property\": 38, \"../internals/export\": 50, \"../internals/is-pure\": 76, \"../internals/iterators\": 80, \"../internals/iterators-core\": 79, \"../internals/object-get-prototype-of\": 98, \"../internals/object-set-prototype-of\": 102, \"../internals/redefine\": 109, \"../internals/set-to-string-tag\": 118, \"../internals/well-known-symbol\": 149 }], 42: [function(t, H, C) {\n      var m = t(\"../internals/path\"), y = t(\"../internals/has\"), u = t(\"../internals/well-known-symbol-wrapped\"), h = t(\"../internals/object-define-property\").f;\n      H.exports = function(g) {\n        var f = m.Symbol || (m.Symbol = {});\n        y(f, g) || h(f, g, { value: u.f(g) });\n      };\n    }, { \"../internals/has\": 61, \"../internals/object-define-property\": 93, \"../internals/path\": 105, \"../internals/well-known-symbol-wrapped\": 148 }], 43: [function(t, H, C) {\n      t = t(\"../internals/fails\"), H.exports = !t(function() {\n        return Object.defineProperty({}, 1, { get: function() {\n          return 7;\n        } })[1] != 7;\n      });\n    }, { \"../internals/fails\": 51 }], 44: [function(y, H, C) {\n      var m = y(\"../internals/global\"), y = y(\"../internals/is-object\"), u = m.document, h = y(u) && y(u.createElement);\n      H.exports = function(g) {\n        return h ? u.createElement(g) : {};\n      };\n    }, { \"../internals/global\": 60, \"../internals/is-object\": 75 }], 45: [function(t, H, C) {\n      H.exports = { CSSRuleList: 0, CSSStyleDeclaration: 0, CSSValueList: 0, ClientRectList: 0, DOMRectList: 0, DOMStringList: 0, DOMTokenList: 1, DataTransferItemList: 0, FileList: 0, HTMLAllCollection: 0, HTMLCollection: 0, HTMLFormElement: 0, HTMLSelectElement: 0, MediaList: 0, MimeTypeArray: 0, NamedNodeMap: 0, NodeList: 1, PaintRequestList: 0, Plugin: 0, PluginArray: 0, SVGLengthList: 0, SVGNumberList: 0, SVGPathSegList: 0, SVGPointList: 0, SVGStringList: 0, SVGTransformList: 0, SourceBufferList: 0, StyleSheetList: 0, TextTrackCueList: 0, TextTrackList: 0, TouchList: 0 };\n    }, {}], 46: [function(t, H, C) {\n      t = t(\"../internals/engine-user-agent\"), H.exports = /(iphone|ipod|ipad).*applewebkit/i.test(t);\n    }, { \"../internals/engine-user-agent\": 47 }], 47: [function(t, H, C) {\n      t = t(\"../internals/get-built-in\"), H.exports = t(\"navigator\", \"userAgent\") || \"\";\n    }, { \"../internals/get-built-in\": 57 }], 48: [function(u, H, C) {\n      var m, y, h = u(\"../internals/global\"), u = u(\"../internals/engine-user-agent\"), h = h.process, h = h && h.versions, h = h && h.v8;\n      h ? y = (m = h.split(\".\"))[0] + m[1] : u && (!(m = u.match(/Edge\\/(\\d+)/)) || 74 <= m[1]) && (m = u.match(/Chrome\\/(\\d+)/)) && (y = m[1]), H.exports = y && +y;\n    }, { \"../internals/engine-user-agent\": 47, \"../internals/global\": 60 }], 49: [function(t, H, C) {\n      H.exports = [\"constructor\", \"hasOwnProperty\", \"isPrototypeOf\", \"propertyIsEnumerable\", \"toLocaleString\", \"toString\", \"valueOf\"];\n    }, {}], 50: [function(t, H, C) {\n      var m = t(\"../internals/global\"), y = t(\"../internals/object-get-own-property-descriptor\").f, u = t(\"../internals/create-non-enumerable-property\"), h = t(\"../internals/redefine\"), g = t(\"../internals/set-global\"), f = t(\"../internals/copy-constructor-properties\"), r = t(\"../internals/is-forced\");\n      H.exports = function(s, o) {\n        var i, l, n, a = s.target, c = s.global, p = s.stat, j = c ? m : p ? m[a] || g(a, {}) : (m[a] || {}).prototype;\n        if (j)\n          for (i in o) {\n            if (l = o[i], n = s.noTargetGet ? (n = y(j, i)) && n.value : j[i], !r(c ? i : a + (p ? \".\" : \"#\") + i, s.forced) && n !== void 0) {\n              if (typeof l == typeof n)\n                continue;\n              f(l, n);\n            }\n            (s.sham || n && n.sham) && u(l, \"sham\", !0), h(j, i, l, s);\n          }\n      };\n    }, { \"../internals/copy-constructor-properties\": 33, \"../internals/create-non-enumerable-property\": 38, \"../internals/global\": 60, \"../internals/is-forced\": 74, \"../internals/object-get-own-property-descriptor\": 94, \"../internals/redefine\": 109, \"../internals/set-global\": 116 }], 51: [function(t, H, C) {\n      H.exports = function(m) {\n        try {\n          return !!m();\n        } catch {\n          return !0;\n        }\n      };\n    }, {}], 52: [function(o, H, C) {\n      o(\"../modules/es.regexp.exec\");\n      var m = o(\"../internals/redefine\"), y = o(\"../internals/fails\"), u = o(\"../internals/well-known-symbol\"), h = o(\"../internals/regexp-exec\"), g = o(\"../internals/create-non-enumerable-property\"), f = u(\"species\"), r = !y(function() {\n        var n = /./;\n        return n.exec = function() {\n          var a = [];\n          return a.groups = { a: \"7\" }, a;\n        }, \"\".replace(n, \"$<a>\") !== \"7\";\n      }), s = \"a\".replace(/./, \"$0\") === \"$0\", o = u(\"replace\"), i = !!/./[o] && /./[o](\"a\", \"$0\") === \"\", l = !y(function() {\n        var a = /(?:)/, n = a.exec, a = (a.exec = function() {\n          return n.apply(this, arguments);\n        }, \"ab\".split(a));\n        return a.length !== 2 || a[0] !== \"a\" || a[1] !== \"b\";\n      });\n      H.exports = function(n, a, c, p) {\n        var j, T, _ = u(n), S = !y(function() {\n          var A = {};\n          return A[_] = function() {\n            return 7;\n          }, \"\"[n](A) != 7;\n        }), E = S && !y(function() {\n          var A = !1, x = /a/;\n          return n === \"split\" && ((x = { constructor: {} }).constructor[f] = function() {\n            return x;\n          }, x.flags = \"\", x[_] = /./[_]), x.exec = function() {\n            return A = !0, null;\n          }, x[_](\"\"), !A;\n        });\n        S && E && (n !== \"replace\" || r && s && !i) && (n !== \"split\" || l) || (j = /./[_], c = (E = c(_, \"\"[n], function(A, x, P, M, R) {\n          return x.exec === h ? S && !R ? { done: !0, value: j.call(x, P, M) } : { done: !0, value: A.call(P, x, M) } : { done: !1 };\n        }, { REPLACE_KEEPS_$0: s, REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE: i }))[0], T = E[1], m(String.prototype, n, c), m(RegExp.prototype, _, a == 2 ? function(A, x) {\n          return T.call(A, this, x);\n        } : function(A) {\n          return T.call(A, this);\n        })), p && g(RegExp.prototype[_], \"sham\", !0);\n      };\n    }, { \"../internals/create-non-enumerable-property\": 38, \"../internals/fails\": 51, \"../internals/redefine\": 109, \"../internals/regexp-exec\": 111, \"../internals/well-known-symbol\": 149, \"../modules/es.regexp.exec\": 192 }], 53: [function(t, H, C) {\n      function m(g, f, r, s, o, i, l, n) {\n        for (var a, c = o, p = 0, j = !!l && h(l, n, 3); p < s; ) {\n          if (p in r) {\n            if (a = j ? j(r[p], p, f) : r[p], 0 < i && y(a))\n              c = m(g, f, a, u(a.length), c, i - 1) - 1;\n            else {\n              if (9007199254740991 <= c)\n                throw TypeError(\"Exceed the acceptable array length\");\n              g[c] = a;\n            }\n            c++;\n          }\n          p++;\n        }\n        return c;\n      }\n      var y = t(\"../internals/is-array\"), u = t(\"../internals/to-length\"), h = t(\"../internals/function-bind-context\");\n      H.exports = m;\n    }, { \"../internals/function-bind-context\": 55, \"../internals/is-array\": 73, \"../internals/to-length\": 137 }], 54: [function(t, H, C) {\n      t = t(\"../internals/fails\"), H.exports = !t(function() {\n        return Object.isExtensible(Object.preventExtensions({}));\n      });\n    }, { \"../internals/fails\": 51 }], 55: [function(t, H, C) {\n      var m = t(\"../internals/a-function\");\n      H.exports = function(y, u, h) {\n        if (m(y), u === void 0)\n          return y;\n        switch (h) {\n          case 0:\n            return function() {\n              return y.call(u);\n            };\n          case 1:\n            return function(g) {\n              return y.call(u, g);\n            };\n          case 2:\n            return function(g, f) {\n              return y.call(u, g, f);\n            };\n          case 3:\n            return function(g, f, r) {\n              return y.call(u, g, f, r);\n            };\n        }\n        return function() {\n          return y.apply(u, arguments);\n        };\n      };\n    }, { \"../internals/a-function\": 5 }], 56: [function(t, H, C) {\n      var m = t(\"../internals/a-function\"), y = t(\"../internals/is-object\"), u = [].slice, h = {};\n      H.exports = Function.bind || function(g) {\n        var f = m(this), r = u.call(arguments, 1), s = function() {\n          var o = r.concat(u.call(arguments));\n          if (this instanceof s) {\n            var i = f, l = o.length, n = o;\n            if (!(l in h)) {\n              for (var a = [], c = 0; c < l; c++)\n                a[c] = \"a[\" + c + \"]\";\n              h[l] = Function(\"C,a\", \"return new C(\" + a.join(\",\") + \")\");\n            }\n            return h[l](i, n);\n          }\n          return f.apply(g, o);\n        };\n        return y(f.prototype) && (s.prototype = f.prototype), s;\n      };\n    }, { \"../internals/a-function\": 5, \"../internals/is-object\": 75 }], 57: [function(t, H, C) {\n      function m(h) {\n        return typeof h == \"function\" ? h : void 0;\n      }\n      var y = t(\"../internals/path\"), u = t(\"../internals/global\");\n      H.exports = function(h, g) {\n        return arguments.length < 2 ? m(y[h]) || m(u[h]) : y[h] && y[h][g] || u[h] && u[h][g];\n      };\n    }, { \"../internals/global\": 60, \"../internals/path\": 105 }], 58: [function(t, H, C) {\n      var m = t(\"../internals/classof\"), y = t(\"../internals/iterators\"), u = t(\"../internals/well-known-symbol\")(\"iterator\");\n      H.exports = function(h) {\n        if (h != null)\n          return h[u] || h[\"@@iterator\"] || y[m(h)];\n      };\n    }, { \"../internals/classof\": 29, \"../internals/iterators\": 80, \"../internals/well-known-symbol\": 149 }], 59: [function(t, H, C) {\n      var m = t(\"../internals/an-object\"), y = t(\"../internals/get-iterator-method\");\n      H.exports = function(u) {\n        var h = y(u);\n        if (typeof h != \"function\")\n          throw TypeError(String(u) + \" is not iterable\");\n        return m(h.call(u));\n      };\n    }, { \"../internals/an-object\": 10, \"../internals/get-iterator-method\": 58 }], 60: [function(t, H, C) {\n      (function(m) {\n        function y(u) {\n          return u && u.Math == Math && u;\n        }\n        H.exports = y(typeof globalThis == \"object\" && globalThis) || y(typeof window == \"object\" && window) || y(typeof self == \"object\" && self) || y(typeof m == \"object\" && m) || Function(\"return this\")();\n      }).call(this, typeof _r < \"u\" ? _r : typeof self < \"u\" ? self : typeof window < \"u\" ? window : {});\n    }, {}], 61: [function(t, H, C) {\n      var m = {}.hasOwnProperty;\n      H.exports = function(y, u) {\n        return m.call(y, u);\n      };\n    }, {}], 62: [function(t, H, C) {\n      H.exports = {};\n    }, {}], 63: [function(t, H, C) {\n      var m = t(\"../internals/global\");\n      H.exports = function(y, u) {\n        var h = m.console;\n        h && h.error && (arguments.length === 1 ? h.error(y) : h.error(y, u));\n      };\n    }, { \"../internals/global\": 60 }], 64: [function(t, H, C) {\n      t = t(\"../internals/get-built-in\"), H.exports = t(\"document\", \"documentElement\");\n    }, { \"../internals/get-built-in\": 57 }], 65: [function(t, H, C) {\n      var m = t(\"../internals/descriptors\"), y = t(\"../internals/fails\"), u = t(\"../internals/document-create-element\");\n      H.exports = !m && !y(function() {\n        return Object.defineProperty(u(\"div\"), \"a\", { get: function() {\n          return 7;\n        } }).a != 7;\n      });\n    }, { \"../internals/descriptors\": 43, \"../internals/document-create-element\": 44, \"../internals/fails\": 51 }], 66: [function(t, H, C) {\n      var m = Math.abs, y = Math.pow, u = Math.floor, h = Math.log, g = Math.LN2;\n      H.exports = { pack: function(f, r, c) {\n        var o, i, l, n = new Array(c), a = 8 * c - r - 1, c = (1 << a) - 1, p = c >> 1, j = r === 23 ? y(2, -24) - y(2, -77) : 0, T = f < 0 || f === 0 && 1 / f < 0 ? 1 : 0, _ = 0;\n        for ((f = m(f)) != f || f === 1 / 0 ? (i = f != f ? 1 : 0, o = c) : (o = u(h(f) / g), f * (l = y(2, -o)) < 1 && (o--, l *= 2), 2 <= (f += 1 <= o + p ? j / l : j * y(2, 1 - p)) * l && (o++, l /= 2), c <= o + p ? (i = 0, o = c) : 1 <= o + p ? (i = (f * l - 1) * y(2, r), o += p) : (i = f * y(2, p - 1) * y(2, r), o = 0)); 8 <= r; n[_++] = 255 & i, i /= 256, r -= 8)\n          ;\n        for (o = o << r | i, a += r; 0 < a; n[_++] = 255 & o, o /= 256, a -= 8)\n          ;\n        return n[--_] |= 128 * T, n;\n      }, unpack: function(f, r) {\n        var s, o = f.length, c = 8 * o - r - 1, i = (1 << c) - 1, l = i >> 1, n = c - 7, a = o - 1, c = f[a--], p = 127 & c;\n        for (c >>= 7; 0 < n; p = 256 * p + f[a], a--, n -= 8)\n          ;\n        for (s = p & (1 << -n) - 1, p >>= -n, n += r; 0 < n; s = 256 * s + f[a], a--, n -= 8)\n          ;\n        if (p === 0)\n          p = 1 - l;\n        else {\n          if (p === i)\n            return s ? NaN : c ? -1 / 0 : 1 / 0;\n          s += y(2, r), p -= l;\n        }\n        return (c ? -1 : 1) * s * y(2, p - r);\n      } };\n    }, {}], 67: [function(t, H, C) {\n      var m = t(\"../internals/fails\"), y = t(\"../internals/classof-raw\"), u = \"\".split;\n      H.exports = m(function() {\n        return !Object(\"z\").propertyIsEnumerable(0);\n      }) ? function(h) {\n        return y(h) == \"String\" ? u.call(h, \"\") : Object(h);\n      } : Object;\n    }, { \"../internals/classof-raw\": 28, \"../internals/fails\": 51 }], 68: [function(t, H, C) {\n      var m = t(\"../internals/is-object\"), y = t(\"../internals/object-set-prototype-of\");\n      H.exports = function(u, h, g) {\n        return y && typeof (h = h.constructor) == \"function\" && h !== g && m(h = h.prototype) && h !== g.prototype && y(u, h), u;\n      };\n    }, { \"../internals/is-object\": 75, \"../internals/object-set-prototype-of\": 102 }], 69: [function(m, H, C) {\n      var m = m(\"../internals/shared-store\"), y = Function.toString;\n      typeof m.inspectSource != \"function\" && (m.inspectSource = function(u) {\n        return y.call(u);\n      }), H.exports = m.inspectSource;\n    }, { \"../internals/shared-store\": 120 }], 70: [function(t, H, C) {\n      function m(n) {\n        g(n, s, { value: { objectID: \"O\" + ++o, weakData: {} } });\n      }\n      var y = t(\"../internals/hidden-keys\"), u = t(\"../internals/is-object\"), h = t(\"../internals/has\"), g = t(\"../internals/object-define-property\").f, f = t(\"../internals/uid\"), r = t(\"../internals/freezing\"), s = f(\"meta\"), o = 0, i = Object.isExtensible || function() {\n        return !0;\n      }, l = H.exports = { REQUIRED: !1, fastKey: function(n, a) {\n        if (!u(n))\n          return typeof n == \"symbol\" ? n : (typeof n == \"string\" ? \"S\" : \"P\") + n;\n        if (!h(n, s)) {\n          if (!i(n))\n            return \"F\";\n          if (!a)\n            return \"E\";\n          m(n);\n        }\n        return n[s].objectID;\n      }, getWeakData: function(n, a) {\n        if (!h(n, s)) {\n          if (!i(n))\n            return !0;\n          if (!a)\n            return !1;\n          m(n);\n        }\n        return n[s].weakData;\n      }, onFreeze: function(n) {\n        return r && l.REQUIRED && i(n) && !h(n, s) && m(n), n;\n      } };\n      y[s] = !0;\n    }, { \"../internals/freezing\": 54, \"../internals/has\": 61, \"../internals/hidden-keys\": 62, \"../internals/is-object\": 75, \"../internals/object-define-property\": 93, \"../internals/uid\": 146 }], 71: [function(c, H, C) {\n      var m, y, u, h, g, f, r, s, o = c(\"../internals/native-weak-map\"), p = c(\"../internals/global\"), i = c(\"../internals/is-object\"), l = c(\"../internals/create-non-enumerable-property\"), n = c(\"../internals/has\"), a = c(\"../internals/shared-key\"), c = c(\"../internals/hidden-keys\"), p = p.WeakMap;\n      r = o ? (m = new p(), y = m.get, u = m.has, h = m.set, g = function(j, T) {\n        return h.call(m, j, T), T;\n      }, f = function(j) {\n        return y.call(m, j) || {};\n      }, function(j) {\n        return u.call(m, j);\n      }) : (c[s = a(\"state\")] = !0, g = function(j, T) {\n        return l(j, s, T), T;\n      }, f = function(j) {\n        return n(j, s) ? j[s] : {};\n      }, function(j) {\n        return n(j, s);\n      }), H.exports = { set: g, get: f, has: r, enforce: function(j) {\n        return r(j) ? f(j) : g(j, {});\n      }, getterFor: function(j) {\n        return function(T) {\n          if (i(T) && (T = f(T)).type === j)\n            return T;\n          throw TypeError(\"Incompatible receiver, \" + j + \" required\");\n        };\n      } };\n    }, { \"../internals/create-non-enumerable-property\": 38, \"../internals/global\": 60, \"../internals/has\": 61, \"../internals/hidden-keys\": 62, \"../internals/is-object\": 75, \"../internals/native-weak-map\": 86, \"../internals/shared-key\": 119 }], 72: [function(t, H, C) {\n      var m = t(\"../internals/well-known-symbol\"), y = t(\"../internals/iterators\"), u = m(\"iterator\"), h = Array.prototype;\n      H.exports = function(g) {\n        return g !== void 0 && (y.Array === g || h[u] === g);\n      };\n    }, { \"../internals/iterators\": 80, \"../internals/well-known-symbol\": 149 }], 73: [function(t, H, C) {\n      var m = t(\"../internals/classof-raw\");\n      H.exports = Array.isArray || function(y) {\n        return m(y) == \"Array\";\n      };\n    }, { \"../internals/classof-raw\": 28 }], 74: [function(t, H, C) {\n      function m(s, o) {\n        return (s = g[h(s)]) == r || s != f && (typeof o == \"function\" ? y(o) : !!o);\n      }\n      var y = t(\"../internals/fails\"), u = /#|\\.prototype\\./, h = m.normalize = function(s) {\n        return String(s).replace(u, \".\").toLowerCase();\n      }, g = m.data = {}, f = m.NATIVE = \"N\", r = m.POLYFILL = \"P\";\n      H.exports = m;\n    }, { \"../internals/fails\": 51 }], 75: [function(t, H, C) {\n      H.exports = function(m) {\n        return typeof m == \"object\" ? m !== null : typeof m == \"function\";\n      };\n    }, {}], 76: [function(t, H, C) {\n      H.exports = !1;\n    }, {}], 77: [function(t, H, C) {\n      var m = t(\"../internals/is-object\"), y = t(\"../internals/classof-raw\"), u = t(\"../internals/well-known-symbol\")(\"match\");\n      H.exports = function(h) {\n        var g;\n        return m(h) && ((g = h[u]) !== void 0 ? !!g : y(h) == \"RegExp\");\n      };\n    }, { \"../internals/classof-raw\": 28, \"../internals/is-object\": 75, \"../internals/well-known-symbol\": 149 }], 78: [function(t, H, C) {\n      function m(s, o) {\n        this.stopped = s, this.result = o;\n      }\n      var y = t(\"../internals/an-object\"), u = t(\"../internals/is-array-iterator-method\"), h = t(\"../internals/to-length\"), g = t(\"../internals/function-bind-context\"), f = t(\"../internals/get-iterator-method\"), r = t(\"../internals/call-with-safe-iteration-closing\");\n      (H.exports = function(s, o, i, l, n) {\n        var a, c, p, j, T, _, S = g(o, i, l ? 2 : 1);\n        if (n)\n          a = s;\n        else {\n          if (typeof (o = f(s)) != \"function\")\n            throw TypeError(\"Target is not iterable\");\n          if (u(o)) {\n            for (c = 0, p = h(s.length); c < p; c++)\n              if ((j = l ? S(y(_ = s[c])[0], _[1]) : S(s[c])) && j instanceof m)\n                return j;\n            return new m(!1);\n          }\n          a = o.call(s);\n        }\n        for (T = a.next; !(_ = T.call(a)).done; )\n          if (typeof (j = r(a, S, _.value, l)) == \"object\" && j && j instanceof m)\n            return j;\n        return new m(!1);\n      }).stop = function(s) {\n        return new m(!0, s);\n      };\n    }, { \"../internals/an-object\": 10, \"../internals/call-with-safe-iteration-closing\": 26, \"../internals/function-bind-context\": 55, \"../internals/get-iterator-method\": 58, \"../internals/is-array-iterator-method\": 72, \"../internals/to-length\": 137 }], 79: [function(f, H, C) {\n      var m, y, u = f(\"../internals/object-get-prototype-of\"), h = f(\"../internals/create-non-enumerable-property\"), g = f(\"../internals/has\"), r = f(\"../internals/well-known-symbol\"), f = f(\"../internals/is-pure\"), r = r(\"iterator\"), s = !1;\n      [].keys && (\"next\" in (y = [].keys()) ? (u = u(u(y))) !== Object.prototype && (m = u) : s = !0), m == null && (m = {}), f || g(m, r) || h(m, r, function() {\n        return this;\n      }), H.exports = { IteratorPrototype: m, BUGGY_SAFARI_ITERATORS: s };\n    }, { \"../internals/create-non-enumerable-property\": 38, \"../internals/has\": 61, \"../internals/is-pure\": 76, \"../internals/object-get-prototype-of\": 98, \"../internals/well-known-symbol\": 149 }], 80: [function(t, H, C) {\n      H.exports = {};\n    }, {}], 81: [function(t, H, C) {\n      H.exports = Math.sign || function(m) {\n        return (m = +m) == 0 || m != m ? m : m < 0 ? -1 : 1;\n      };\n    }, {}], 82: [function(l, H, C) {\n      var m, y, u, h, g, f, r, s, o = l(\"../internals/global\"), T = l(\"../internals/object-get-own-property-descriptor\").f, j = l(\"../internals/classof-raw\"), i = l(\"../internals/task\").set, l = l(\"../internals/engine-is-ios\"), n = o.MutationObserver || o.WebKitMutationObserver, a = o.process, c = o.Promise, p = j(a) == \"process\", j = T(o, \"queueMicrotask\"), T = j && j.value;\n      T || (m = function() {\n        var _, S;\n        for (p && (_ = a.domain) && _.exit(); y; ) {\n          S = y.fn, y = y.next;\n          try {\n            S();\n          } catch (E) {\n            throw y ? h() : u = void 0, E;\n          }\n        }\n        u = void 0, _ && _.enter();\n      }, h = p ? function() {\n        a.nextTick(m);\n      } : n && !l ? (g = !0, f = document.createTextNode(\"\"), new n(m).observe(f, { characterData: !0 }), function() {\n        f.data = g = !g;\n      }) : c && c.resolve ? (r = c.resolve(void 0), s = r.then, function() {\n        s.call(r, m);\n      }) : function() {\n        i.call(o, m);\n      }), H.exports = T || function(_) {\n        _ = { fn: _, next: void 0 }, u && (u.next = _), y || (y = _, h()), u = _;\n      };\n    }, { \"../internals/classof-raw\": 28, \"../internals/engine-is-ios\": 46, \"../internals/global\": 60, \"../internals/object-get-own-property-descriptor\": 94, \"../internals/task\": 131 }], 83: [function(t, H, C) {\n      t = t(\"../internals/global\"), H.exports = t.Promise;\n    }, { \"../internals/global\": 60 }], 84: [function(t, H, C) {\n      t = t(\"../internals/fails\"), H.exports = !!Object.getOwnPropertySymbols && !t(function() {\n        return !String(Symbol());\n      });\n    }, { \"../internals/fails\": 51 }], 85: [function(t, H, C) {\n      var m = t(\"../internals/fails\"), y = t(\"../internals/well-known-symbol\"), u = t(\"../internals/is-pure\"), h = y(\"iterator\");\n      H.exports = !m(function() {\n        var g = new URL(\"b?a=1&b=2&c=3\", \"http://a\"), f = g.searchParams, r = \"\";\n        return g.pathname = \"c%20d\", f.forEach(function(s, o) {\n          f.delete(\"b\"), r += o + s;\n        }), u && !g.toJSON || !f.sort || g.href !== \"http://a/c%20d?a=1&c=3\" || f.get(\"c\") !== \"3\" || String(new URLSearchParams(\"?a=1\")) !== \"a=1\" || !f[h] || new URL(\"https://a@b\").username !== \"a\" || new URLSearchParams(new URLSearchParams(\"a=b\")).get(\"a\") !== \"b\" || new URL(\"http://тест\").host !== \"xn--e1aybc\" || new URL(\"http://a#б\").hash !== \"#%D0%B1\" || r !== \"a1c3\" || new URL(\"http://x\", void 0).host !== \"x\";\n      });\n    }, { \"../internals/fails\": 51, \"../internals/is-pure\": 76, \"../internals/well-known-symbol\": 149 }], 86: [function(m, H, C) {\n      var y = m(\"../internals/global\"), m = m(\"../internals/inspect-source\"), y = y.WeakMap;\n      H.exports = typeof y == \"function\" && /native code/.test(m(y));\n    }, { \"../internals/global\": 60, \"../internals/inspect-source\": 69 }], 87: [function(t, H, C) {\n      function m(u) {\n        var h, g;\n        this.promise = new u(function(f, r) {\n          if (h !== void 0 || g !== void 0)\n            throw TypeError(\"Bad Promise constructor\");\n          h = f, g = r;\n        }), this.resolve = y(h), this.reject = y(g);\n      }\n      var y = t(\"../internals/a-function\");\n      H.exports.f = function(u) {\n        return new m(u);\n      };\n    }, { \"../internals/a-function\": 5 }], 88: [function(t, H, C) {\n      var m = t(\"../internals/is-regexp\");\n      H.exports = function(y) {\n        if (m(y))\n          throw TypeError(\"The method doesn't accept regular expressions\");\n        return y;\n      };\n    }, { \"../internals/is-regexp\": 77 }], 89: [function(t, H, C) {\n      var m = t(\"../internals/global\").isFinite;\n      H.exports = Number.isFinite || function(y) {\n        return typeof y == \"number\" && m(y);\n      };\n    }, { \"../internals/global\": 60 }], 90: [function(t, H, C) {\n      var m = t(\"../internals/descriptors\"), y = t(\"../internals/fails\"), u = t(\"../internals/object-keys\"), h = t(\"../internals/object-get-own-property-symbols\"), g = t(\"../internals/object-property-is-enumerable\"), f = t(\"../internals/to-object\"), r = t(\"../internals/indexed-object\"), s = Object.assign, o = Object.defineProperty;\n      H.exports = !s || y(function() {\n        var i, l, n, a;\n        return !(!m || s({ b: 1 }, s(o({}, \"a\", { enumerable: !0, get: function() {\n          o(this, \"b\", { value: 3, enumerable: !1 });\n        } }), { b: 2 })).b === 1) || (l = {}, a = \"abcdefghijklmnopqrst\", (i = {})[n = Symbol()] = 7, a.split(\"\").forEach(function(c) {\n          l[c] = c;\n        }), s({}, i)[n] != 7 || u(s({}, l)).join(\"\") != a);\n      }) ? function(i, l) {\n        for (var n = f(i), a = arguments.length, c = 1, p = h.f, j = g.f; c < a; )\n          for (var T, _ = r(arguments[c++]), S = p ? u(_).concat(p(_)) : u(_), E = S.length, A = 0; A < E; )\n            T = S[A++], m && !j.call(_, T) || (n[T] = _[T]);\n        return n;\n      } : s;\n    }, { \"../internals/descriptors\": 43, \"../internals/fails\": 51, \"../internals/indexed-object\": 67, \"../internals/object-get-own-property-symbols\": 97, \"../internals/object-keys\": 100, \"../internals/object-property-is-enumerable\": 101, \"../internals/to-object\": 138 }], 91: [function(o, H, C) {\n      function m() {\n      }\n      var y, u = o(\"../internals/an-object\"), h = o(\"../internals/object-define-properties\"), g = o(\"../internals/enum-bug-keys\"), f = o(\"../internals/hidden-keys\"), r = o(\"../internals/html\"), s = o(\"../internals/document-create-element\"), o = o(\"../internals/shared-key\"), i = \"prototype\", l = \"script\", n = o(\"IE_PROTO\"), a = function(p) {\n        return \"<\" + l + \">\" + p + \"</\" + l + \">\";\n      }, c = function() {\n        try {\n          y = document.domain && new ActiveXObject(\"htmlfile\");\n        } catch {\n        }\n        c = y ? ((p = y).write(a(\"\")), p.close(), j = p.parentWindow.Object, p = null, j) : (p = s(\"iframe\"), j = \"java\" + l + \":\", p.style.display = \"none\", r.appendChild(p), p.src = String(j), (j = p.contentWindow.document).open(), j.write(a(\"document.F=Object\")), j.close(), j.F);\n        for (var p, j, T = g.length; T--; )\n          delete c[i][g[T]];\n        return c();\n      };\n      f[n] = !0, H.exports = Object.create || function(p, j) {\n        var T;\n        return p !== null ? (m[i] = u(p), T = new m(), m[i] = null, T[n] = p) : T = c(), j === void 0 ? T : h(T, j);\n      };\n    }, { \"../internals/an-object\": 10, \"../internals/document-create-element\": 44, \"../internals/enum-bug-keys\": 49, \"../internals/hidden-keys\": 62, \"../internals/html\": 64, \"../internals/object-define-properties\": 92, \"../internals/shared-key\": 119 }], 92: [function(t, H, C) {\n      var m = t(\"../internals/descriptors\"), y = t(\"../internals/object-define-property\"), u = t(\"../internals/an-object\"), h = t(\"../internals/object-keys\");\n      H.exports = m ? Object.defineProperties : function(g, f) {\n        u(g);\n        for (var r, s = h(f), o = s.length, i = 0; i < o; )\n          y.f(g, r = s[i++], f[r]);\n        return g;\n      };\n    }, { \"../internals/an-object\": 10, \"../internals/descriptors\": 43, \"../internals/object-define-property\": 93, \"../internals/object-keys\": 100 }], 93: [function(t, H, C) {\n      var m = t(\"../internals/descriptors\"), y = t(\"../internals/ie8-dom-define\"), u = t(\"../internals/an-object\"), h = t(\"../internals/to-primitive\"), g = Object.defineProperty;\n      C.f = m ? g : function(f, r, s) {\n        if (u(f), r = h(r, !0), u(s), y)\n          try {\n            return g(f, r, s);\n          } catch {\n          }\n        if (\"get\" in s || \"set\" in s)\n          throw TypeError(\"Accessors not supported\");\n        return \"value\" in s && (f[r] = s.value), f;\n      };\n    }, { \"../internals/an-object\": 10, \"../internals/descriptors\": 43, \"../internals/ie8-dom-define\": 65, \"../internals/to-primitive\": 141 }], 94: [function(t, H, C) {\n      var m = t(\"../internals/descriptors\"), y = t(\"../internals/object-property-is-enumerable\"), u = t(\"../internals/create-property-descriptor\"), h = t(\"../internals/to-indexed-object\"), g = t(\"../internals/to-primitive\"), f = t(\"../internals/has\"), r = t(\"../internals/ie8-dom-define\"), s = Object.getOwnPropertyDescriptor;\n      C.f = m ? s : function(o, i) {\n        if (o = h(o), i = g(i, !0), r)\n          try {\n            return s(o, i);\n          } catch {\n          }\n        if (f(o, i))\n          return u(!y.f.call(o, i), o[i]);\n      };\n    }, { \"../internals/create-property-descriptor\": 39, \"../internals/descriptors\": 43, \"../internals/has\": 61, \"../internals/ie8-dom-define\": 65, \"../internals/object-property-is-enumerable\": 101, \"../internals/to-indexed-object\": 135, \"../internals/to-primitive\": 141 }], 95: [function(t, H, C) {\n      var m = t(\"../internals/to-indexed-object\"), y = t(\"../internals/object-get-own-property-names\").f, u = {}.toString, h = typeof window == \"object\" && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];\n      H.exports.f = function(g) {\n        if (!h || u.call(g) != \"[object Window]\")\n          return y(m(g));\n        try {\n          return y(g);\n        } catch {\n          return h.slice();\n        }\n      };\n    }, { \"../internals/object-get-own-property-names\": 96, \"../internals/to-indexed-object\": 135 }], 96: [function(t, H, C) {\n      var m = t(\"../internals/object-keys-internal\"), y = t(\"../internals/enum-bug-keys\").concat(\"length\", \"prototype\");\n      C.f = Object.getOwnPropertyNames || function(u) {\n        return m(u, y);\n      };\n    }, { \"../internals/enum-bug-keys\": 49, \"../internals/object-keys-internal\": 99 }], 97: [function(t, H, C) {\n      C.f = Object.getOwnPropertySymbols;\n    }, {}], 98: [function(h, H, C) {\n      var m = h(\"../internals/has\"), y = h(\"../internals/to-object\"), u = h(\"../internals/shared-key\"), h = h(\"../internals/correct-prototype-getter\"), g = u(\"IE_PROTO\"), f = Object.prototype;\n      H.exports = h ? Object.getPrototypeOf : function(r) {\n        return r = y(r), m(r, g) ? r[g] : typeof r.constructor == \"function\" && r instanceof r.constructor ? r.constructor.prototype : r instanceof Object ? f : null;\n      };\n    }, { \"../internals/correct-prototype-getter\": 35, \"../internals/has\": 61, \"../internals/shared-key\": 119, \"../internals/to-object\": 138 }], 99: [function(t, H, C) {\n      var m = t(\"../internals/has\"), y = t(\"../internals/to-indexed-object\"), u = t(\"../internals/array-includes\").indexOf, h = t(\"../internals/hidden-keys\");\n      H.exports = function(g, f) {\n        var r, s = y(g), o = 0, i = [];\n        for (r in s)\n          !m(h, r) && m(s, r) && i.push(r);\n        for (; f.length > o; )\n          !m(s, r = f[o++]) || ~u(i, r) || i.push(r);\n        return i;\n      };\n    }, { \"../internals/array-includes\": 18, \"../internals/has\": 61, \"../internals/hidden-keys\": 62, \"../internals/to-indexed-object\": 135 }], 100: [function(t, H, C) {\n      var m = t(\"../internals/object-keys-internal\"), y = t(\"../internals/enum-bug-keys\");\n      H.exports = Object.keys || function(u) {\n        return m(u, y);\n      };\n    }, { \"../internals/enum-bug-keys\": 49, \"../internals/object-keys-internal\": 99 }], 101: [function(t, H, C) {\n      var m = {}.propertyIsEnumerable, y = Object.getOwnPropertyDescriptor, u = y && !m.call({ 1: 2 }, 1);\n      C.f = u ? function(h) {\n        return h = y(this, h), !!h && h.enumerable;\n      } : m;\n    }, {}], 102: [function(t, H, C) {\n      var m = t(\"../internals/an-object\"), y = t(\"../internals/a-possible-prototype\");\n      H.exports = Object.setPrototypeOf || (\"__proto__\" in {} ? function() {\n        var u, h = !1, g = {};\n        try {\n          (u = Object.getOwnPropertyDescriptor(Object.prototype, \"__proto__\").set).call(g, []), h = g instanceof Array;\n        } catch {\n        }\n        return function(f, r) {\n          return m(f), y(r), h ? u.call(f, r) : f.__proto__ = r, f;\n        };\n      }() : void 0);\n    }, { \"../internals/a-possible-prototype\": 6, \"../internals/an-object\": 10 }], 103: [function(t, H, C) {\n      var m = t(\"../internals/to-string-tag-support\"), y = t(\"../internals/classof\");\n      H.exports = m ? {}.toString : function() {\n        return \"[object \" + y(this) + \"]\";\n      };\n    }, { \"../internals/classof\": 29, \"../internals/to-string-tag-support\": 142 }], 104: [function(t, H, C) {\n      var m = t(\"../internals/get-built-in\"), y = t(\"../internals/object-get-own-property-names\"), u = t(\"../internals/object-get-own-property-symbols\"), h = t(\"../internals/an-object\");\n      H.exports = m(\"Reflect\", \"ownKeys\") || function(g) {\n        var f = y.f(h(g)), r = u.f;\n        return r ? f.concat(r(g)) : f;\n      };\n    }, { \"../internals/an-object\": 10, \"../internals/get-built-in\": 57, \"../internals/object-get-own-property-names\": 96, \"../internals/object-get-own-property-symbols\": 97 }], 105: [function(t, H, C) {\n      t = t(\"../internals/global\"), H.exports = t;\n    }, { \"../internals/global\": 60 }], 106: [function(t, H, C) {\n      H.exports = function(m) {\n        try {\n          return { error: !1, value: m() };\n        } catch (y) {\n          return { error: !0, value: y };\n        }\n      };\n    }, {}], 107: [function(t, H, C) {\n      var m = t(\"../internals/an-object\"), y = t(\"../internals/is-object\"), u = t(\"../internals/new-promise-capability\");\n      H.exports = function(h, g) {\n        return m(h), y(g) && g.constructor === h ? g : ((0, (h = u.f(h)).resolve)(g), h.promise);\n      };\n    }, { \"../internals/an-object\": 10, \"../internals/is-object\": 75, \"../internals/new-promise-capability\": 87 }], 108: [function(t, H, C) {\n      var m = t(\"../internals/redefine\");\n      H.exports = function(y, u, h) {\n        for (var g in u)\n          m(y, g, u[g], h);\n        return y;\n      };\n    }, { \"../internals/redefine\": 109 }], 109: [function(f, H, C) {\n      var m = f(\"../internals/global\"), y = f(\"../internals/create-non-enumerable-property\"), u = f(\"../internals/has\"), h = f(\"../internals/set-global\"), g = f(\"../internals/inspect-source\"), f = f(\"../internals/internal-state\"), r = f.get, s = f.enforce, o = String(String).split(\"String\");\n      (H.exports = function(i, l, n, j) {\n        var c = !!j && !!j.unsafe, p = !!j && !!j.enumerable, j = !!j && !!j.noTargetGet;\n        typeof n == \"function\" && (typeof l != \"string\" || u(n, \"name\") || y(n, \"name\", l), s(n).source = o.join(typeof l == \"string\" ? l : \"\")), i === m ? p ? i[l] = n : h(l, n) : (c ? !j && i[l] && (p = !0) : delete i[l], p ? i[l] = n : y(i, l, n));\n      })(Function.prototype, \"toString\", function() {\n        return typeof this == \"function\" && r(this).source || g(this);\n      });\n    }, { \"../internals/create-non-enumerable-property\": 38, \"../internals/global\": 60, \"../internals/has\": 61, \"../internals/inspect-source\": 69, \"../internals/internal-state\": 71, \"../internals/set-global\": 116 }], 110: [function(t, H, C) {\n      var m = t(\"./classof-raw\"), y = t(\"./regexp-exec\");\n      H.exports = function(u, h) {\n        var g = u.exec;\n        if (typeof g == \"function\") {\n          if (g = g.call(u, h), typeof g != \"object\")\n            throw TypeError(\"RegExp exec method returned something other than an Object or null\");\n          return g;\n        }\n        if (m(u) !== \"RegExp\")\n          throw TypeError(\"RegExp#exec called on incompatible receiver\");\n        return y.call(u, h);\n      };\n    }, { \"./classof-raw\": 28, \"./regexp-exec\": 111 }], 111: [function(h, H, C) {\n      var m, y, u = h(\"./regexp-flags\"), h = h(\"./regexp-sticky-helpers\"), g = RegExp.prototype.exec, f = String.prototype.replace, r = g, s = (m = /a/, y = /b*/g, g.call(m, \"a\"), g.call(y, \"a\"), m.lastIndex !== 0 || y.lastIndex !== 0), o = h.UNSUPPORTED_Y || h.BROKEN_CARET, i = /()??/.exec(\"\")[1] !== void 0;\n      H.exports = r = s || i || o ? function(l) {\n        var n, a, c, p, j = this, T = o && j.sticky, _ = u.call(j), S = j.source, E = 0, A = l;\n        return T && ((_ = _.replace(\"y\", \"\")).indexOf(\"g\") === -1 && (_ += \"g\"), A = String(l).slice(j.lastIndex), 0 < j.lastIndex && (!j.multiline || j.multiline && l[j.lastIndex - 1] !== `\n`) && (S = \"(?: \" + S + \")\", A = \" \" + A, E++), a = new RegExp(\"^(?:\" + S + \")\", _)), i && (a = new RegExp(\"^\" + S + \"$(?!\\\\s)\", _)), s && (n = j.lastIndex), c = g.call(T ? a : j, A), T ? c ? (c.input = c.input.slice(E), c[0] = c[0].slice(E), c.index = j.lastIndex, j.lastIndex += c[0].length) : j.lastIndex = 0 : s && c && (j.lastIndex = j.global ? c.index + c[0].length : n), i && c && 1 < c.length && f.call(c[0], a, function() {\n          for (p = 1; p < arguments.length - 2; p++)\n            arguments[p] === void 0 && (c[p] = void 0);\n        }), c;\n      } : r;\n    }, { \"./regexp-flags\": 112, \"./regexp-sticky-helpers\": 113 }], 112: [function(t, H, C) {\n      var m = t(\"../internals/an-object\");\n      H.exports = function() {\n        var y = m(this), u = \"\";\n        return y.global && (u += \"g\"), y.ignoreCase && (u += \"i\"), y.multiline && (u += \"m\"), y.dotAll && (u += \"s\"), y.unicode && (u += \"u\"), y.sticky && (u += \"y\"), u;\n      };\n    }, { \"../internals/an-object\": 10 }], 113: [function(t, H, C) {\n      t = t(\"./fails\");\n      function m(y, u) {\n        return RegExp(y, u);\n      }\n      C.UNSUPPORTED_Y = t(function() {\n        var y = m(\"a\", \"y\");\n        return y.lastIndex = 2, y.exec(\"abcd\") != null;\n      }), C.BROKEN_CARET = t(function() {\n        var y = m(\"^r\", \"gy\");\n        return y.lastIndex = 2, y.exec(\"str\") != null;\n      });\n    }, { \"./fails\": 51 }], 114: [function(t, H, C) {\n      H.exports = function(m) {\n        if (m == null)\n          throw TypeError(\"Can't call method on \" + m);\n        return m;\n      };\n    }, {}], 115: [function(t, H, C) {\n      H.exports = Object.is || function(m, y) {\n        return m === y ? m !== 0 || 1 / m == 1 / y : m != m && y != y;\n      };\n    }, {}], 116: [function(t, H, C) {\n      var m = t(\"../internals/global\"), y = t(\"../internals/create-non-enumerable-property\");\n      H.exports = function(u, h) {\n        try {\n          y(m, u, h);\n        } catch {\n          m[u] = h;\n        }\n        return h;\n      };\n    }, { \"../internals/create-non-enumerable-property\": 38, \"../internals/global\": 60 }], 117: [function(t, H, C) {\n      var m = t(\"../internals/get-built-in\"), y = t(\"../internals/object-define-property\"), u = t(\"../internals/well-known-symbol\"), h = t(\"../internals/descriptors\"), g = u(\"species\");\n      H.exports = function(r) {\n        var r = m(r), s = y.f;\n        h && r && !r[g] && s(r, g, { configurable: !0, get: function() {\n          return this;\n        } });\n      };\n    }, { \"../internals/descriptors\": 43, \"../internals/get-built-in\": 57, \"../internals/object-define-property\": 93, \"../internals/well-known-symbol\": 149 }], 118: [function(t, H, C) {\n      var m = t(\"../internals/object-define-property\").f, y = t(\"../internals/has\"), u = t(\"../internals/well-known-symbol\")(\"toStringTag\");\n      H.exports = function(h, g, f) {\n        h && !y(h = f ? h : h.prototype, u) && m(h, u, { configurable: !0, value: g });\n      };\n    }, { \"../internals/has\": 61, \"../internals/object-define-property\": 93, \"../internals/well-known-symbol\": 149 }], 119: [function(t, H, C) {\n      var m = t(\"../internals/shared\"), y = t(\"../internals/uid\"), u = m(\"keys\");\n      H.exports = function(h) {\n        return u[h] || (u[h] = y(h));\n      };\n    }, { \"../internals/shared\": 121, \"../internals/uid\": 146 }], 120: [function(m, H, C) {\n      var u = m(\"../internals/global\"), m = m(\"../internals/set-global\"), y = \"__core-js_shared__\", u = u[y] || m(y, {});\n      H.exports = u;\n    }, { \"../internals/global\": 60, \"../internals/set-global\": 116 }], 121: [function(t, H, C) {\n      var m = t(\"../internals/is-pure\"), y = t(\"../internals/shared-store\");\n      (H.exports = function(u, h) {\n        return y[u] || (y[u] = h !== void 0 ? h : {});\n      })(\"versions\", []).push({ version: \"3.6.5\", mode: m ? \"pure\" : \"global\", copyright: \"© 2020 Denis Pushkarev (zloirock.ru)\" });\n    }, { \"../internals/is-pure\": 76, \"../internals/shared-store\": 120 }], 122: [function(t, H, C) {\n      var m = t(\"../internals/an-object\"), y = t(\"../internals/a-function\"), u = t(\"../internals/well-known-symbol\")(\"species\");\n      H.exports = function(f, g) {\n        var f = m(f).constructor;\n        return f === void 0 || (f = m(f)[u]) == null ? g : y(f);\n      };\n    }, { \"../internals/a-function\": 5, \"../internals/an-object\": 10, \"../internals/well-known-symbol\": 149 }], 123: [function(t, H, C) {\n      var m = t(\"../internals/fails\");\n      H.exports = function(y) {\n        return m(function() {\n          var u = \"\"[y]('\"');\n          return u !== u.toLowerCase() || 3 < u.split('\"').length;\n        });\n      };\n    }, { \"../internals/fails\": 51 }], 124: [function(t, H, C) {\n      function m(h) {\n        return function(s, o) {\n          var r, s = String(u(s)), o = y(o), i = s.length;\n          return o < 0 || i <= o ? h ? \"\" : void 0 : (r = s.charCodeAt(o)) < 55296 || 56319 < r || o + 1 === i || (i = s.charCodeAt(o + 1)) < 56320 || 57343 < i ? h ? s.charAt(o) : r : h ? s.slice(o, o + 2) : i - 56320 + (r - 55296 << 10) + 65536;\n        };\n      }\n      var y = t(\"../internals/to-integer\"), u = t(\"../internals/require-object-coercible\");\n      H.exports = { codeAt: m(!1), charAt: m(!0) };\n    }, { \"../internals/require-object-coercible\": 114, \"../internals/to-integer\": 136 }], 125: [function(t, H, C) {\n      t = t(\"../internals/engine-user-agent\"), H.exports = /Version\\/10\\.\\d+(\\.\\d+)?( Mobile\\/\\w+)? Safari\\//.test(t);\n    }, { \"../internals/engine-user-agent\": 47 }], 126: [function(t, H, C) {\n      function m(f) {\n        return function(i, a, n) {\n          var i = String(h(i)), l = i.length, n = n === void 0 ? \" \" : String(n), a = y(a);\n          return a <= l || n == \"\" ? i : ((l = u.call(n, g((a = a - l) / n.length))).length > a && (l = l.slice(0, a)), f ? i + l : l + i);\n        };\n      }\n      var y = t(\"../internals/to-length\"), u = t(\"../internals/string-repeat\"), h = t(\"../internals/require-object-coercible\"), g = Math.ceil;\n      H.exports = { start: m(!1), end: m(!0) };\n    }, { \"../internals/require-object-coercible\": 114, \"../internals/string-repeat\": 128, \"../internals/to-length\": 137 }], 127: [function(t, H, C) {\n      function m(c) {\n        return c + 22 + 75 * (c < 26);\n      }\n      function y(c) {\n        var p, j = [], T = (c = function(W) {\n          for (var X = [], ne = 0, b = W.length; ne < b; ) {\n            var O, D = W.charCodeAt(ne++);\n            55296 <= D && D <= 56319 && ne < b ? (64512 & (O = W.charCodeAt(ne++))) == 56320 ? X.push(((1023 & D) << 10) + (1023 & O) + 65536) : (X.push(D), ne--) : X.push(D);\n          }\n          return X;\n        }(c)).length, _ = 128, S = 0, E = 72;\n        for (M = 0; M < c.length; M++)\n          (p = c[M]) < 128 && j.push(a(p));\n        var A = j.length, x = A;\n        for (A && j.push(\"-\"); x < T; ) {\n          for (var P = u, M = 0; M < c.length; M++)\n            _ <= (p = c[M]) && p < P && (P = p);\n          var R = x + 1;\n          if (P - _ > n((u - S) / R))\n            throw RangeError(i);\n          for (S += (P - _) * R, _ = P, M = 0; M < c.length; M++) {\n            if ((p = c[M]) < _ && ++S > u)\n              throw RangeError(i);\n            if (p == _) {\n              for (var L = S, F = h; ; F += h) {\n                var V = F <= E ? 1 : E + g <= F ? g : F - E;\n                if (L < V)\n                  break;\n                var G = L - V, U = h - V;\n                j.push(a(m(V + G % U))), L = n(G / U);\n              }\n              j.push(a(m(L))), E = function(W, X, ne) {\n                var b = 0;\n                for (W = ne ? n(W / r) : W >> 1, W += n(W / X); l * g >> 1 < W; b += h)\n                  W = n(W / l);\n                return n(b + (l + 1) * W / (W + f));\n              }(S, R, x == A), S = 0, ++x;\n            }\n          }\n          ++S, ++_;\n        }\n        return j.join(\"\");\n      }\n      var u = 2147483647, h = 36, g = 26, f = 38, r = 700, s = /[^\\0-\\u007E]/, o = /[.\\u3002\\uFF0E\\uFF61]/g, i = \"Overflow: input needs wider integers to process\", l = h - 1, n = Math.floor, a = String.fromCharCode;\n      H.exports = function(c) {\n        for (var p, j = [], T = c.toLowerCase().replace(o, \".\").split(\".\"), _ = 0; _ < T.length; _++)\n          p = T[_], j.push(s.test(p) ? \"xn--\" + y(p) : p);\n        return j.join(\".\");\n      };\n    }, {}], 128: [function(t, H, C) {\n      var m = t(\"../internals/to-integer\"), y = t(\"../internals/require-object-coercible\");\n      H.exports = \"\".repeat || function(u) {\n        var h = String(y(this)), g = \"\", f = m(u);\n        if (f < 0 || f == 1 / 0)\n          throw RangeError(\"Wrong number of repetitions\");\n        for (; 0 < f; (f >>>= 1) && (h += h))\n          1 & f && (g += h);\n        return g;\n      };\n    }, { \"../internals/require-object-coercible\": 114, \"../internals/to-integer\": 136 }], 129: [function(t, H, C) {\n      var m = t(\"../internals/fails\"), y = t(\"../internals/whitespaces\");\n      H.exports = function(u) {\n        return m(function() {\n          return !!y[u]() || \"​᠎\"[u]() != \"​᠎\" || y[u].name !== u;\n        });\n      };\n    }, { \"../internals/fails\": 51, \"../internals/whitespaces\": 150 }], 130: [function(u, H, C) {\n      function m(f) {\n        return function(r) {\n          return r = String(y(r)), 1 & f && (r = r.replace(h, \"\")), r = 2 & f ? r.replace(g, \"\") : r;\n        };\n      }\n      var y = u(\"../internals/require-object-coercible\"), u = \"[\" + u(\"../internals/whitespaces\") + \"]\", h = RegExp(\"^\" + u + u + \"*\"), g = RegExp(u + u + \"*$\");\n      H.exports = { start: m(1), end: m(2), trim: m(3) };\n    }, { \"../internals/require-object-coercible\": 114, \"../internals/whitespaces\": 150 }], 131: [function(l, H, C) {\n      function m(x) {\n        return function() {\n          A(x);\n        };\n      }\n      function y(x) {\n        A(x.data);\n      }\n      function u(x) {\n        g.postMessage(x + \"\", n.protocol + \"//\" + n.host);\n      }\n      var h, g = l(\"../internals/global\"), f = l(\"../internals/fails\"), r = l(\"../internals/classof-raw\"), s = l(\"../internals/function-bind-context\"), o = l(\"../internals/html\"), i = l(\"../internals/document-create-element\"), l = l(\"../internals/engine-is-ios\"), n = g.location, a = g.setImmediate, c = g.clearImmediate, p = g.process, j = g.MessageChannel, T = g.Dispatch, _ = 0, S = {}, E = \"onreadystatechange\", A = function(x) {\n        var P;\n        S.hasOwnProperty(x) && (P = S[x], delete S[x], P());\n      };\n      a && c || (a = function(x) {\n        for (var P = [], M = 1; M < arguments.length; )\n          P.push(arguments[M++]);\n        return S[++_] = function() {\n          (typeof x == \"function\" ? x : Function(x)).apply(void 0, P);\n        }, h(_), _;\n      }, c = function(x) {\n        delete S[x];\n      }, r(p) == \"process\" ? h = function(x) {\n        p.nextTick(m(x));\n      } : T && T.now ? h = function(x) {\n        T.now(m(x));\n      } : j && !l ? (l = (r = new j()).port2, r.port1.onmessage = y, h = s(l.postMessage, l, 1)) : !g.addEventListener || typeof postMessage != \"function\" || g.importScripts || f(u) || n.protocol === \"file:\" ? h = E in i(\"script\") ? function(x) {\n        o.appendChild(i(\"script\"))[E] = function() {\n          o.removeChild(this), A(x);\n        };\n      } : function(x) {\n        setTimeout(m(x), 0);\n      } : (h = u, g.addEventListener(\"message\", y, !1))), H.exports = { set: a, clear: c };\n    }, { \"../internals/classof-raw\": 28, \"../internals/document-create-element\": 44, \"../internals/engine-is-ios\": 46, \"../internals/fails\": 51, \"../internals/function-bind-context\": 55, \"../internals/global\": 60, \"../internals/html\": 64 }], 132: [function(t, H, C) {\n      var m = t(\"../internals/classof-raw\");\n      H.exports = function(y) {\n        if (typeof y != \"number\" && m(y) != \"Number\")\n          throw TypeError(\"Incorrect invocation\");\n        return +y;\n      };\n    }, { \"../internals/classof-raw\": 28 }], 133: [function(t, H, C) {\n      var m = t(\"../internals/to-integer\"), y = Math.max, u = Math.min;\n      H.exports = function(h, g) {\n        return h = m(h), h < 0 ? y(h + g, 0) : u(h, g);\n      };\n    }, { \"../internals/to-integer\": 136 }], 134: [function(t, H, C) {\n      var m = t(\"../internals/to-integer\"), y = t(\"../internals/to-length\");\n      H.exports = function(h) {\n        if (h === void 0)\n          return 0;\n        var h = m(h), g = y(h);\n        if (h !== g)\n          throw RangeError(\"Wrong length or index\");\n        return g;\n      };\n    }, { \"../internals/to-integer\": 136, \"../internals/to-length\": 137 }], 135: [function(t, H, C) {\n      var m = t(\"../internals/indexed-object\"), y = t(\"../internals/require-object-coercible\");\n      H.exports = function(u) {\n        return m(y(u));\n      };\n    }, { \"../internals/indexed-object\": 67, \"../internals/require-object-coercible\": 114 }], 136: [function(t, H, C) {\n      var m = Math.ceil, y = Math.floor;\n      H.exports = function(u) {\n        return isNaN(u = +u) ? 0 : (0 < u ? y : m)(u);\n      };\n    }, {}], 137: [function(t, H, C) {\n      var m = t(\"../internals/to-integer\"), y = Math.min;\n      H.exports = function(u) {\n        return 0 < u ? y(m(u), 9007199254740991) : 0;\n      };\n    }, { \"../internals/to-integer\": 136 }], 138: [function(t, H, C) {\n      var m = t(\"../internals/require-object-coercible\");\n      H.exports = function(y) {\n        return Object(m(y));\n      };\n    }, { \"../internals/require-object-coercible\": 114 }], 139: [function(t, H, C) {\n      var m = t(\"../internals/to-positive-integer\");\n      H.exports = function(y, u) {\n        if (y = m(y), y % u)\n          throw RangeError(\"Wrong offset\");\n        return y;\n      };\n    }, { \"../internals/to-positive-integer\": 140 }], 140: [function(t, H, C) {\n      var m = t(\"../internals/to-integer\");\n      H.exports = function(y) {\n        if (y = m(y), y < 0)\n          throw RangeError(\"The argument can't be less than 0\");\n        return y;\n      };\n    }, { \"../internals/to-integer\": 136 }], 141: [function(t, H, C) {\n      var m = t(\"../internals/is-object\");\n      H.exports = function(y, u) {\n        if (!m(y))\n          return y;\n        var h, g;\n        if (u && typeof (h = y.toString) == \"function\" && !m(g = h.call(y)) || typeof (h = y.valueOf) == \"function\" && !m(g = h.call(y)) || !u && typeof (h = y.toString) == \"function\" && !m(g = h.call(y)))\n          return g;\n        throw TypeError(\"Can't convert object to primitive value\");\n      };\n    }, { \"../internals/is-object\": 75 }], 142: [function(t, H, C) {\n      var m = {};\n      m[t(\"../internals/well-known-symbol\")(\"toStringTag\")] = \"z\", H.exports = String(m) === \"[object z]\";\n    }, { \"../internals/well-known-symbol\": 149 }], 143: [function(t, H, C) {\n      function m(fe, ge) {\n        for (var xe = 0, De = ge.length, Me = new (K(fe))(De); xe < De; )\n          Me[xe] = ge[xe++];\n        return Me;\n      }\n      function y(fe, ge) {\n        O(fe, ge, { get: function() {\n          return ne(this)[ge];\n        } });\n      }\n      function u(fe) {\n        return fe instanceof J || (fe = A(fe)) == \"ArrayBuffer\" || fe == \"SharedArrayBuffer\";\n      }\n      function h(fe, ge) {\n        return ae(fe) && typeof ge != \"symbol\" && ge in fe && String(+ge) == String(ge);\n      }\n      function g(fe, ge) {\n        return h(fe, ge = S(ge, !0)) ? c(2, fe[ge]) : D(fe, ge);\n      }\n      function f(fe, ge, xe) {\n        return !(h(fe, ge = S(ge, !0)) && x(xe) && E(xe, \"value\")) || E(xe, \"get\") || E(xe, \"set\") || xe.configurable || E(xe, \"writable\") && !xe.writable || E(xe, \"enumerable\") && !xe.enumerable ? O(fe, ge, xe) : (fe[ge] = xe.value, fe);\n      }\n      var r = t(\"../internals/export\"), s = t(\"../internals/global\"), o = t(\"../internals/descriptors\"), i = t(\"../internals/typed-array-constructors-require-wrappers\"), l = t(\"../internals/array-buffer-view-core\"), n = t(\"../internals/array-buffer\"), a = t(\"../internals/an-instance\"), c = t(\"../internals/create-property-descriptor\"), p = t(\"../internals/create-non-enumerable-property\"), j = t(\"../internals/to-length\"), T = t(\"../internals/to-index\"), _ = t(\"../internals/to-offset\"), S = t(\"../internals/to-primitive\"), E = t(\"../internals/has\"), A = t(\"../internals/classof\"), x = t(\"../internals/is-object\"), P = t(\"../internals/object-create\"), M = t(\"../internals/object-set-prototype-of\"), R = t(\"../internals/object-get-own-property-names\").f, L = t(\"../internals/typed-array-from\"), F = t(\"../internals/array-iteration\").forEach, V = t(\"../internals/set-species\"), G = t(\"../internals/object-define-property\"), U = t(\"../internals/object-get-own-property-descriptor\"), W = t(\"../internals/internal-state\"), X = t(\"../internals/inherit-if-required\"), ne = W.get, b = W.set, O = G.f, D = U.f, B = Math.round, Y = s.RangeError, J = n.ArrayBuffer, te = n.DataView, ce = l.NATIVE_ARRAY_BUFFER_VIEWS, re = l.TYPED_ARRAY_TAG, ue = l.TypedArray, le = l.TypedArrayPrototype, K = l.aTypedArrayConstructor, ae = l.isTypedArray, he = \"BYTES_PER_ELEMENT\", _e = \"Wrong length\";\n      o ? (ce || (U.f = g, G.f = f, y(le, \"buffer\"), y(le, \"byteOffset\"), y(le, \"byteLength\"), y(le, \"length\")), r({ target: \"Object\", stat: !0, forced: !ce }, { getOwnPropertyDescriptor: g, defineProperty: f }), H.exports = function(ve, ge, xe) {\n        function De(we, Z) {\n          O(we, Z, { get: function() {\n            var $ = this, q = Z;\n            return ($ = ne($)).view[ze](q * Me + $.byteOffset, !0);\n          }, set: function($) {\n            var q = this, ee = Z;\n            q = ne(q), xe && ($ = ($ = B($)) < 0 ? 0 : 255 < $ ? 255 : 255 & $), q.view[Ve](ee * Me + q.byteOffset, $, !0);\n          }, enumerable: !0 });\n        }\n        var Me = ve.match(/\\d+$/)[0] / 8, Qe = ve + (xe ? \"Clamped\" : \"\") + \"Array\", ze = \"get\" + ve, Ve = \"set\" + ve, Xe = s[Qe], He = Xe, ve = He && He.prototype, Re = {};\n        ce ? i && (He = ge(function(we, Z, $, q) {\n          return a(we, He, Qe), X(x(Z) ? u(Z) ? q !== void 0 ? new Xe(Z, _($, Me), q) : $ !== void 0 ? new Xe(Z, _($, Me)) : new Xe(Z) : ae(Z) ? m(He, Z) : L.call(He, Z) : new Xe(T(Z)), we, He);\n        }), M && M(He, ue), F(R(Xe), function(we) {\n          we in He || p(He, we, Xe[we]);\n        }), He.prototype = ve) : (He = ge(function(we, Z, $, q) {\n          a(we, He, Qe);\n          var ee, pe, je = 0, Ce = 0;\n          if (x(Z)) {\n            if (!u(Z))\n              return ae(Z) ? m(He, Z) : L.call(He, Z);\n            var Fe = Z, Ce = _($, Me), $ = Z.byteLength;\n            if (q === void 0) {\n              if ($ % Me || (ee = $ - Ce) < 0)\n                throw Y(_e);\n            } else if ($ < (ee = j(q) * Me) + Ce)\n              throw Y(_e);\n            pe = ee / Me;\n          } else\n            pe = T(Z), Fe = new J(ee = pe * Me);\n          for (b(we, { buffer: Fe, byteOffset: Ce, byteLength: ee, length: pe, view: new te(Fe) }); je < pe; )\n            De(we, je++);\n        }), M && M(He, ue), ve = He.prototype = P(le)), ve.constructor !== He && p(ve, \"constructor\", He), re && p(ve, re, Qe), Re[Qe] = He, r({ global: !0, forced: He != Xe, sham: !ce }, Re), he in He || p(He, he, Me), he in ve || p(ve, he, Me), V(Qe);\n      }) : H.exports = function() {\n      };\n    }, { \"../internals/an-instance\": 9, \"../internals/array-buffer\": 13, \"../internals/array-buffer-view-core\": 12, \"../internals/array-iteration\": 19, \"../internals/classof\": 29, \"../internals/create-non-enumerable-property\": 38, \"../internals/create-property-descriptor\": 39, \"../internals/descriptors\": 43, \"../internals/export\": 50, \"../internals/global\": 60, \"../internals/has\": 61, \"../internals/inherit-if-required\": 68, \"../internals/internal-state\": 71, \"../internals/is-object\": 75, \"../internals/object-create\": 91, \"../internals/object-define-property\": 93, \"../internals/object-get-own-property-descriptor\": 94, \"../internals/object-get-own-property-names\": 96, \"../internals/object-set-prototype-of\": 102, \"../internals/set-species\": 117, \"../internals/to-index\": 134, \"../internals/to-length\": 137, \"../internals/to-offset\": 139, \"../internals/to-primitive\": 141, \"../internals/typed-array-constructors-require-wrappers\": 144, \"../internals/typed-array-from\": 145 }], 144: [function(h, H, C) {\n      var m = h(\"../internals/global\"), y = h(\"../internals/fails\"), u = h(\"../internals/check-correctness-of-iteration\"), h = h(\"../internals/array-buffer-view-core\").NATIVE_ARRAY_BUFFER_VIEWS, g = m.ArrayBuffer, f = m.Int8Array;\n      H.exports = !h || !y(function() {\n        f(1);\n      }) || !y(function() {\n        new f(-1);\n      }) || !u(function(r) {\n        new f(), new f(null), new f(1.5), new f(r);\n      }, !0) || y(function() {\n        return new f(new g(2), 1, void 0).length !== 1;\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/check-correctness-of-iteration\": 27, \"../internals/fails\": 51, \"../internals/global\": 60 }], 145: [function(t, H, C) {\n      var m = t(\"../internals/to-object\"), y = t(\"../internals/to-length\"), u = t(\"../internals/get-iterator-method\"), h = t(\"../internals/is-array-iterator-method\"), g = t(\"../internals/function-bind-context\"), f = t(\"../internals/array-buffer-view-core\").aTypedArrayConstructor;\n      H.exports = function(r) {\n        var s, o, i, l, n, a, c = m(r), p = arguments.length, j = 1 < p ? arguments[1] : void 0, T = j !== void 0, _ = u(c);\n        if (_ != null && !h(_))\n          for (a = (n = _.call(c)).next, c = []; !(l = a.call(n)).done; )\n            c.push(l.value);\n        for (T && 2 < p && (j = g(j, arguments[2], 2)), o = y(c.length), i = new (f(this))(o), s = 0; s < o; s++)\n          i[s] = T ? j(c[s], s) : c[s];\n        return i;\n      };\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/function-bind-context\": 55, \"../internals/get-iterator-method\": 58, \"../internals/is-array-iterator-method\": 72, \"../internals/to-length\": 137, \"../internals/to-object\": 138 }], 146: [function(t, H, C) {\n      var m = 0, y = Math.random();\n      H.exports = function(u) {\n        return \"Symbol(\" + String(u === void 0 ? \"\" : u) + \")_\" + (++m + y).toString(36);\n      };\n    }, {}], 147: [function(t, H, C) {\n      t = t(\"../internals/native-symbol\"), H.exports = t && !Symbol.sham && typeof Symbol.iterator == \"symbol\";\n    }, { \"../internals/native-symbol\": 84 }], 148: [function(t, H, C) {\n      t = t(\"../internals/well-known-symbol\"), C.f = t;\n    }, { \"../internals/well-known-symbol\": 149 }], 149: [function(f, H, C) {\n      var m = f(\"../internals/global\"), y = f(\"../internals/shared\"), u = f(\"../internals/has\"), h = f(\"../internals/uid\"), g = f(\"../internals/native-symbol\"), f = f(\"../internals/use-symbol-as-uid\"), r = y(\"wks\"), s = m.Symbol, o = f ? s : s && s.withoutSetter || h;\n      H.exports = function(i) {\n        return u(r, i) || (g && u(s, i) ? r[i] = s[i] : r[i] = o(\"Symbol.\" + i)), r[i];\n      };\n    }, { \"../internals/global\": 60, \"../internals/has\": 61, \"../internals/native-symbol\": 84, \"../internals/shared\": 121, \"../internals/uid\": 146, \"../internals/use-symbol-as-uid\": 147 }], 150: [function(t, H, C) {\n      H.exports = `\t\n\\v\\f\\r                　\\u2028\\u2029\\uFEFF`;\n    }, {}], 151: [function(u, H, C) {\n      var m = u(\"../internals/export\"), y = u(\"../internals/global\"), g = u(\"../internals/array-buffer\"), u = u(\"../internals/set-species\"), h = \"ArrayBuffer\", g = g[h];\n      m({ global: !0, forced: y[h] !== g }, { ArrayBuffer: g }), u(h);\n    }, { \"../internals/array-buffer\": 13, \"../internals/export\": 50, \"../internals/global\": 60, \"../internals/set-species\": 117 }], 152: [function(c, H, C) {\n      var m = c(\"../internals/export\"), y = c(\"../internals/fails\"), u = c(\"../internals/is-array\"), h = c(\"../internals/is-object\"), g = c(\"../internals/to-object\"), f = c(\"../internals/to-length\"), r = c(\"../internals/create-property\"), s = c(\"../internals/array-species-create\"), o = c(\"../internals/array-method-has-species-support\"), a = c(\"../internals/well-known-symbol\"), c = c(\"../internals/engine-v8-version\"), i = a(\"isConcatSpreadable\"), l = 9007199254740991, n = \"Maximum allowed index exceeded\", a = 51 <= c || !y(function() {\n        var p = [];\n        return p[i] = !1, p.concat()[0] !== p;\n      }), c = o(\"concat\");\n      m({ target: \"Array\", proto: !0, forced: !a || !c }, { concat: function(p) {\n        for (var j, T, _, S, E, A = g(this), x = s(A, 0), P = 0, M = -1, R = arguments.length; M < R; M++)\n          if (E = void 0, !h(S = _ = M === -1 ? A : arguments[M]) || ((E = S[i]) !== void 0 ? !E : !u(S))) {\n            if (l <= P)\n              throw TypeError(n);\n            r(x, P++, _);\n          } else {\n            if (T = f(_.length), l < P + T)\n              throw TypeError(n);\n            for (j = 0; j < T; j++, P++)\n              j in _ && r(x, P, _[j]);\n          }\n        return x.length = P, x;\n      } });\n    }, { \"../internals/array-method-has-species-support\": 21, \"../internals/array-species-create\": 25, \"../internals/create-property\": 40, \"../internals/engine-v8-version\": 48, \"../internals/export\": 50, \"../internals/fails\": 51, \"../internals/is-array\": 73, \"../internals/is-object\": 75, \"../internals/to-length\": 137, \"../internals/to-object\": 138, \"../internals/well-known-symbol\": 149 }], 153: [function(u, H, C) {\n      var m = u(\"../internals/export\"), y = u(\"../internals/array-copy-within\"), u = u(\"../internals/add-to-unscopables\");\n      m({ target: \"Array\", proto: !0 }, { copyWithin: y }), u(\"copyWithin\");\n    }, { \"../internals/add-to-unscopables\": 7, \"../internals/array-copy-within\": 14, \"../internals/export\": 50 }], 154: [function(h, H, C) {\n      var m = h(\"../internals/export\"), y = h(\"../internals/array-iteration\").every, u = h(\"../internals/array-method-is-strict\"), h = h(\"../internals/array-method-uses-to-length\"), u = u(\"every\"), h = h(\"every\");\n      m({ target: \"Array\", proto: !0, forced: !u || !h }, { every: function(g) {\n        return y(this, g, 1 < arguments.length ? arguments[1] : void 0);\n      } });\n    }, { \"../internals/array-iteration\": 19, \"../internals/array-method-is-strict\": 22, \"../internals/array-method-uses-to-length\": 23, \"../internals/export\": 50 }], 155: [function(u, H, C) {\n      var m = u(\"../internals/export\"), y = u(\"../internals/array-fill\"), u = u(\"../internals/add-to-unscopables\");\n      m({ target: \"Array\", proto: !0 }, { fill: y }), u(\"fill\");\n    }, { \"../internals/add-to-unscopables\": 7, \"../internals/array-fill\": 15, \"../internals/export\": 50 }], 156: [function(h, H, C) {\n      var m = h(\"../internals/export\"), y = h(\"../internals/array-iteration\").filter, u = h(\"../internals/array-method-has-species-support\"), h = h(\"../internals/array-method-uses-to-length\"), u = u(\"filter\"), h = h(\"filter\");\n      m({ target: \"Array\", proto: !0, forced: !u || !h }, { filter: function(g) {\n        return y(this, g, 1 < arguments.length ? arguments[1] : void 0);\n      } });\n    }, { \"../internals/array-iteration\": 19, \"../internals/array-method-has-species-support\": 21, \"../internals/array-method-uses-to-length\": 23, \"../internals/export\": 50 }], 157: [function(f, H, C) {\n      var m = f(\"../internals/export\"), y = f(\"../internals/array-iteration\").findIndex, u = f(\"../internals/add-to-unscopables\"), f = f(\"../internals/array-method-uses-to-length\"), h = \"findIndex\", g = !0, f = f(h);\n      h in [] && Array(1)[h](function() {\n        g = !1;\n      }), m({ target: \"Array\", proto: !0, forced: g || !f }, { findIndex: function(r) {\n        return y(this, r, 1 < arguments.length ? arguments[1] : void 0);\n      } }), u(h);\n    }, { \"../internals/add-to-unscopables\": 7, \"../internals/array-iteration\": 19, \"../internals/array-method-uses-to-length\": 23, \"../internals/export\": 50 }], 158: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/flatten-into-array\"), u = t(\"../internals/to-object\"), h = t(\"../internals/to-length\"), g = t(\"../internals/a-function\"), f = t(\"../internals/array-species-create\");\n      m({ target: \"Array\", proto: !0 }, { flatMap: function(r) {\n        var s, o = u(this), i = h(o.length);\n        return g(r), (s = f(o, 0)).length = y(s, o, o, i, 0, 1, r, 1 < arguments.length ? arguments[1] : void 0), s;\n      } });\n    }, { \"../internals/a-function\": 5, \"../internals/array-species-create\": 25, \"../internals/export\": 50, \"../internals/flatten-into-array\": 53, \"../internals/to-length\": 137, \"../internals/to-object\": 138 }], 159: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/flatten-into-array\"), u = t(\"../internals/to-object\"), h = t(\"../internals/to-length\"), g = t(\"../internals/to-integer\"), f = t(\"../internals/array-species-create\");\n      m({ target: \"Array\", proto: !0 }, { flat: function() {\n        var r = arguments.length ? arguments[0] : void 0, s = u(this), o = h(s.length), i = f(s, 0);\n        return i.length = y(i, s, s, o, 0, r === void 0 ? 1 : g(r)), i;\n      } });\n    }, { \"../internals/array-species-create\": 25, \"../internals/export\": 50, \"../internals/flatten-into-array\": 53, \"../internals/to-integer\": 136, \"../internals/to-length\": 137, \"../internals/to-object\": 138 }], 160: [function(y, H, C) {\n      var m = y(\"../internals/export\"), y = y(\"../internals/array-for-each\");\n      m({ target: \"Array\", proto: !0, forced: [].forEach != y }, { forEach: y });\n    }, { \"../internals/array-for-each\": 16, \"../internals/export\": 50 }], 161: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/array-from\");\n      m({ target: \"Array\", stat: !0, forced: !t(\"../internals/check-correctness-of-iteration\")(function(u) {\n        Array.from(u);\n      }) }, { from: y });\n    }, { \"../internals/array-from\": 17, \"../internals/check-correctness-of-iteration\": 27, \"../internals/export\": 50 }], 162: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/array-includes\").includes, u = t(\"../internals/add-to-unscopables\");\n      m({ target: \"Array\", proto: !0, forced: !t(\"../internals/array-method-uses-to-length\")(\"indexOf\", { ACCESSORS: !0, 1: 0 }) }, { includes: function(h) {\n        return y(this, h, 1 < arguments.length ? arguments[1] : void 0);\n      } }), u(\"includes\");\n    }, { \"../internals/add-to-unscopables\": 7, \"../internals/array-includes\": 18, \"../internals/array-method-uses-to-length\": 23, \"../internals/export\": 50 }], 163: [function(f, H, C) {\n      var m = f(\"../internals/export\"), y = f(\"../internals/array-includes\").indexOf, g = f(\"../internals/array-method-is-strict\"), f = f(\"../internals/array-method-uses-to-length\"), u = [].indexOf, h = !!u && 1 / [1].indexOf(1, -0) < 0, g = g(\"indexOf\"), f = f(\"indexOf\", { ACCESSORS: !0, 1: 0 });\n      m({ target: \"Array\", proto: !0, forced: h || !g || !f }, { indexOf: function(r) {\n        return h ? u.apply(this, arguments) || 0 : y(this, r, 1 < arguments.length ? arguments[1] : void 0);\n      } });\n    }, { \"../internals/array-includes\": 18, \"../internals/array-method-is-strict\": 22, \"../internals/array-method-uses-to-length\": 23, \"../internals/export\": 50 }], 164: [function(g, H, C) {\n      var m = g(\"../internals/to-indexed-object\"), y = g(\"../internals/add-to-unscopables\"), u = g(\"../internals/iterators\"), h = g(\"../internals/internal-state\"), g = g(\"../internals/define-iterator\"), f = \"Array Iterator\", r = h.set, s = h.getterFor(f);\n      H.exports = g(Array, \"Array\", function(o, i) {\n        r(this, { type: f, target: m(o), index: 0, kind: i });\n      }, function() {\n        var o = s(this), i = o.target, l = o.kind, n = o.index++;\n        return !i || n >= i.length ? { value: o.target = void 0, done: !0 } : l == \"keys\" ? { value: n, done: !1 } : l == \"values\" ? { value: i[n], done: !1 } : { value: [n, i[n]], done: !1 };\n      }, \"values\"), u.Arguments = u.Array, y(\"keys\"), y(\"values\"), y(\"entries\");\n    }, { \"../internals/add-to-unscopables\": 7, \"../internals/define-iterator\": 41, \"../internals/internal-state\": 71, \"../internals/iterators\": 80, \"../internals/to-indexed-object\": 135 }], 165: [function(g, H, C) {\n      var m = g(\"../internals/export\"), h = g(\"../internals/indexed-object\"), y = g(\"../internals/to-indexed-object\"), g = g(\"../internals/array-method-is-strict\"), u = [].join, h = h != Object, g = g(\"join\", \",\");\n      m({ target: \"Array\", proto: !0, forced: h || !g }, { join: function(f) {\n        return u.call(y(this), f === void 0 ? \",\" : f);\n      } });\n    }, { \"../internals/array-method-is-strict\": 22, \"../internals/export\": 50, \"../internals/indexed-object\": 67, \"../internals/to-indexed-object\": 135 }], 166: [function(y, H, C) {\n      var m = y(\"../internals/export\"), y = y(\"../internals/array-last-index-of\");\n      m({ target: \"Array\", proto: !0, forced: y !== [].lastIndexOf }, { lastIndexOf: y });\n    }, { \"../internals/array-last-index-of\": 20, \"../internals/export\": 50 }], 167: [function(h, H, C) {\n      var m = h(\"../internals/export\"), y = h(\"../internals/array-iteration\").map, u = h(\"../internals/array-method-has-species-support\"), h = h(\"../internals/array-method-uses-to-length\"), u = u(\"map\"), h = h(\"map\");\n      m({ target: \"Array\", proto: !0, forced: !u || !h }, { map: function(g) {\n        return y(this, g, 1 < arguments.length ? arguments[1] : void 0);\n      } });\n    }, { \"../internals/array-iteration\": 19, \"../internals/array-method-has-species-support\": 21, \"../internals/array-method-uses-to-length\": 23, \"../internals/export\": 50 }], 168: [function(i, H, C) {\n      var m = i(\"../internals/export\"), y = i(\"../internals/is-object\"), u = i(\"../internals/is-array\"), h = i(\"../internals/to-absolute-index\"), g = i(\"../internals/to-length\"), f = i(\"../internals/to-indexed-object\"), r = i(\"../internals/create-property\"), s = i(\"../internals/well-known-symbol\"), o = i(\"../internals/array-method-has-species-support\"), i = i(\"../internals/array-method-uses-to-length\"), o = o(\"slice\"), i = i(\"slice\", { ACCESSORS: !0, 0: 0, 1: 2 }), l = s(\"species\"), n = [].slice, a = Math.max;\n      m({ target: \"Array\", proto: !0, forced: !o || !i }, { slice: function(c, p) {\n        var j, T, _, S = f(this), E = g(S.length), A = h(c, E), x = h(p === void 0 ? E : p, E);\n        if (u(S) && ((j = typeof (j = S.constructor) == \"function\" && (j === Array || u(j.prototype)) || y(j) && (j = j[l]) === null ? void 0 : j) === Array || j === void 0))\n          return n.call(S, A, x);\n        for (T = new (j === void 0 ? Array : j)(a(x - A, 0)), _ = 0; A < x; A++, _++)\n          A in S && r(T, _, S[A]);\n        return T.length = _, T;\n      } });\n    }, { \"../internals/array-method-has-species-support\": 21, \"../internals/array-method-uses-to-length\": 23, \"../internals/create-property\": 40, \"../internals/export\": 50, \"../internals/is-array\": 73, \"../internals/is-object\": 75, \"../internals/to-absolute-index\": 133, \"../internals/to-indexed-object\": 135, \"../internals/to-length\": 137, \"../internals/well-known-symbol\": 149 }], 169: [function(h, H, C) {\n      var m = h(\"../internals/export\"), y = h(\"../internals/array-iteration\").some, u = h(\"../internals/array-method-is-strict\"), h = h(\"../internals/array-method-uses-to-length\"), u = u(\"some\"), h = h(\"some\");\n      m({ target: \"Array\", proto: !0, forced: !u || !h }, { some: function(g) {\n        return y(this, g, 1 < arguments.length ? arguments[1] : void 0);\n      } });\n    }, { \"../internals/array-iteration\": 19, \"../internals/array-method-is-strict\": 22, \"../internals/array-method-uses-to-length\": 23, \"../internals/export\": 50 }], 170: [function(o, H, C) {\n      var m = o(\"../internals/export\"), y = o(\"../internals/to-absolute-index\"), u = o(\"../internals/to-integer\"), h = o(\"../internals/to-length\"), g = o(\"../internals/to-object\"), f = o(\"../internals/array-species-create\"), r = o(\"../internals/create-property\"), s = o(\"../internals/array-method-has-species-support\"), o = o(\"../internals/array-method-uses-to-length\"), s = s(\"splice\"), o = o(\"splice\", { ACCESSORS: !0, 0: 0, 1: 2 }), i = Math.max, l = Math.min;\n      m({ target: \"Array\", proto: !0, forced: !s || !o }, { splice: function(P, a) {\n        var c, p, j, T, _, S, E = g(this), A = h(E.length), x = y(P, A), P = arguments.length;\n        if (P === 0 ? c = p = 0 : p = P === 1 ? (c = 0, A - x) : (c = P - 2, l(i(u(a), 0), A - x)), 9007199254740991 < A + c - p)\n          throw TypeError(\"Maximum allowed length exceeded\");\n        for (j = f(E, p), T = 0; T < p; T++)\n          (_ = x + T) in E && r(j, T, E[_]);\n        if (c < (j.length = p)) {\n          for (T = x; T < A - p; T++)\n            S = T + c, (_ = T + p) in E ? E[S] = E[_] : delete E[S];\n          for (T = A; A - p + c < T; T--)\n            delete E[T - 1];\n        } else if (p < c)\n          for (T = A - p; x < T; T--)\n            S = T + c - 1, (_ = T + p - 1) in E ? E[S] = E[_] : delete E[S];\n        for (T = 0; T < c; T++)\n          E[T + x] = arguments[T + 2];\n        return E.length = A - p + c, j;\n      } });\n    }, { \"../internals/array-method-has-species-support\": 21, \"../internals/array-method-uses-to-length\": 23, \"../internals/array-species-create\": 25, \"../internals/create-property\": 40, \"../internals/export\": 50, \"../internals/to-absolute-index\": 133, \"../internals/to-integer\": 136, \"../internals/to-length\": 137, \"../internals/to-object\": 138 }], 171: [function(t, H, C) {\n      t(\"../internals/add-to-unscopables\")(\"flatMap\");\n    }, { \"../internals/add-to-unscopables\": 7 }], 172: [function(t, H, C) {\n      t(\"../internals/add-to-unscopables\")(\"flat\");\n    }, { \"../internals/add-to-unscopables\": 7 }], 173: [function(y, H, C) {\n      var m = y(\"../internals/descriptors\"), y = y(\"../internals/object-define-property\").f, u = Function.prototype, h = u.toString, g = /^\\s*function ([^ (]*)/;\n      !m || \"name\" in u || y(u, \"name\", { configurable: !0, get: function() {\n        try {\n          return h.call(this).match(g)[1];\n        } catch {\n          return \"\";\n        }\n      } });\n    }, { \"../internals/descriptors\": 43, \"../internals/object-define-property\": 93 }], 174: [function(y, H, C) {\n      var m = y(\"../internals/collection\"), y = y(\"../internals/collection-strong\");\n      H.exports = m(\"Map\", function(u) {\n        return function() {\n          return u(this, arguments.length ? arguments[0] : void 0);\n        };\n      }, y);\n    }, { \"../internals/collection\": 32, \"../internals/collection-strong\": 30 }], 175: [function(m, H, C) {\n      var m = m(\"../internals/export\"), y = Math.hypot, u = Math.abs, h = Math.sqrt;\n      m({ target: \"Math\", stat: !0, forced: !!y && y(1 / 0, NaN) !== 1 / 0 }, { hypot: function(g, f) {\n        for (var r, s, o = 0, i = 0, l = arguments.length, n = 0; i < l; )\n          n < (r = u(arguments[i++])) ? (o = o * (s = n / r) * s + 1, n = r) : o += 0 < r ? (s = r / n) * s : r;\n        return n === 1 / 0 ? 1 / 0 : n * h(o);\n      } });\n    }, { \"../internals/export\": 50 }], 176: [function(m, H, C) {\n      var m = m(\"../internals/export\"), y = Math.log, u = Math.LN2;\n      m({ target: \"Math\", stat: !0 }, { log2: function(h) {\n        return y(h) / u;\n      } });\n    }, { \"../internals/export\": 50 }], 177: [function(t, H, C) {\n      t(\"../internals/export\")({ target: \"Math\", stat: !0 }, { sign: t(\"../internals/math-sign\") });\n    }, { \"../internals/export\": 50, \"../internals/math-sign\": 81 }], 178: [function(t, H, C) {\n      function m(M) {\n        var R, L, F, V, G, U, W, X = o(M, !1);\n        if (typeof X == \"string\" && 2 < X.length) {\n          if ((M = (X = p(X)).charCodeAt(0)) === 43 || M === 45) {\n            if ((R = X.charCodeAt(2)) === 88 || R === 120)\n              return NaN;\n          } else if (M === 48) {\n            switch (X.charCodeAt(1)) {\n              case 66:\n              case 98:\n                L = 2, F = 49;\n                break;\n              case 79:\n              case 111:\n                L = 8, F = 55;\n                break;\n              default:\n                return +X;\n            }\n            for (G = (V = X.slice(2)).length, U = 0; U < G; U++)\n              if ((W = V.charCodeAt(U)) < 48 || F < W)\n                return NaN;\n            return parseInt(V, L);\n          }\n        }\n        return +X;\n      }\n      var y = t(\"../internals/descriptors\"), u = t(\"../internals/global\"), h = t(\"../internals/is-forced\"), g = t(\"../internals/redefine\"), f = t(\"../internals/has\"), r = t(\"../internals/classof-raw\"), s = t(\"../internals/inherit-if-required\"), o = t(\"../internals/to-primitive\"), i = t(\"../internals/fails\"), l = t(\"../internals/object-create\"), n = t(\"../internals/object-get-own-property-names\").f, a = t(\"../internals/object-get-own-property-descriptor\").f, c = t(\"../internals/object-define-property\").f, p = t(\"../internals/string-trim\").trim, j = \"Number\", T = u[j], _ = T.prototype, S = r(l(_)) == j;\n      if (h(j, !T(\" 0o1\") || !T(\"0b1\") || T(\"+0x1\"))) {\n        for (var E, A = function(R) {\n          var R = arguments.length < 1 ? 0 : R, L = this;\n          return L instanceof A && (S ? i(function() {\n            _.valueOf.call(L);\n          }) : r(L) != j) ? s(new T(m(R)), L, A) : m(R);\n        }, x = y ? n(T) : \"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger\".split(\",\"), P = 0; x.length > P; P++)\n          f(T, E = x[P]) && !f(A, E) && c(A, E, a(T, E));\n        (A.prototype = _).constructor = A, g(u, j, A);\n      }\n    }, { \"../internals/classof-raw\": 28, \"../internals/descriptors\": 43, \"../internals/fails\": 51, \"../internals/global\": 60, \"../internals/has\": 61, \"../internals/inherit-if-required\": 68, \"../internals/is-forced\": 74, \"../internals/object-create\": 91, \"../internals/object-define-property\": 93, \"../internals/object-get-own-property-descriptor\": 94, \"../internals/object-get-own-property-names\": 96, \"../internals/redefine\": 109, \"../internals/string-trim\": 130, \"../internals/to-primitive\": 141 }], 179: [function(t, H, C) {\n      t(\"../internals/export\")({ target: \"Number\", stat: !0 }, { isFinite: t(\"../internals/number-is-finite\") });\n    }, { \"../internals/export\": 50, \"../internals/number-is-finite\": 89 }], 180: [function(f, H, C) {\n      function m(o, i, l) {\n        return i === 0 ? l : i % 2 == 1 ? m(o, i - 1, l * o) : m(o * o, i / 2, l);\n      }\n      var y = f(\"../internals/export\"), u = f(\"../internals/to-integer\"), h = f(\"../internals/this-number-value\"), g = f(\"../internals/string-repeat\"), f = f(\"../internals/fails\"), r = 1 .toFixed, s = Math.floor;\n      y({ target: \"Number\", proto: !0, forced: r && (8e-5.toFixed(3) !== \"0.000\" || 0.9.toFixed(0) !== \"1\" || 1.255.toFixed(2) !== \"1.25\" || 1000000000000000100 .toFixed(0) !== \"1000000000000000128\") || !f(function() {\n        r.call({});\n      }) }, { toFixed: function(j) {\n        function i(E, A) {\n          for (var x = -1, P = A; ++x < 6; )\n            P += E * T[x], T[x] = P % 1e7, P = s(P / 1e7);\n        }\n        function l(E) {\n          for (var A = 6, x = 0; 0 <= --A; )\n            x += T[A], T[A] = s(x / E), x = x % E * 1e7;\n        }\n        function n() {\n          for (var E, A = 6, x = \"\"; 0 <= --A; )\n            x === \"\" && A !== 0 && T[A] === 0 || (E = String(T[A]), x = x === \"\" ? E : x + g.call(\"0\", 7 - E.length) + E);\n          return x;\n        }\n        var a, c, p = h(this), j = u(j), T = [0, 0, 0, 0, 0, 0], _ = \"\", S = \"0\";\n        if (j < 0 || 20 < j)\n          throw RangeError(\"Incorrect fraction digits\");\n        if (p != p)\n          return \"NaN\";\n        if (p <= -1e21 || 1e21 <= p)\n          return String(p);\n        if (p < 0 && (_ = \"-\", p = -p), 1e-21 < p)\n          if (p = (a = function(E) {\n            for (var A = 0, x = E; 4096 <= x; )\n              A += 12, x /= 4096;\n            for (; 2 <= x; )\n              A += 1, x /= 2;\n            return A;\n          }(p * m(2, 69, 1)) - 69) < 0 ? p * m(2, -a, 1) : p / m(2, a, 1), p *= 4503599627370496, 0 < (a = 52 - a)) {\n            for (i(0, p), c = j; 7 <= c; )\n              i(1e7, 0), c -= 7;\n            for (i(m(10, c, 1), 0), c = a - 1; 23 <= c; )\n              l(1 << 23), c -= 23;\n            l(1 << c), i(1, 1), l(2), S = n();\n          } else\n            i(0, p), i(1 << -a, 0), S = n() + g.call(\"0\", j);\n        return S = 0 < j ? _ + ((p = S.length) <= j ? \"0.\" + g.call(\"0\", j - p) + S : S.slice(0, p - j) + \".\" + S.slice(p - j)) : _ + S;\n      } });\n    }, { \"../internals/export\": 50, \"../internals/fails\": 51, \"../internals/string-repeat\": 128, \"../internals/this-number-value\": 132, \"../internals/to-integer\": 136 }], 181: [function(y, H, C) {\n      var m = y(\"../internals/export\"), y = y(\"../internals/object-assign\");\n      m({ target: \"Object\", stat: !0, forced: Object.assign !== y }, { assign: y });\n    }, { \"../internals/export\": 50, \"../internals/object-assign\": 90 }], 182: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/iterate\"), u = t(\"../internals/create-property\");\n      m({ target: \"Object\", stat: !0 }, { fromEntries: function(h) {\n        var g = {};\n        return y(h, function(f, r) {\n          u(g, f, r);\n        }, void 0, !0), g;\n      } });\n    }, { \"../internals/create-property\": 40, \"../internals/export\": 50, \"../internals/iterate\": 78 }], 183: [function(h, H, C) {\n      var m = h(\"../internals/export\"), g = h(\"../internals/fails\"), y = h(\"../internals/to-indexed-object\"), u = h(\"../internals/object-get-own-property-descriptor\").f, h = h(\"../internals/descriptors\"), g = g(function() {\n        u(1);\n      });\n      m({ target: \"Object\", stat: !0, forced: !h || g, sham: !h }, { getOwnPropertyDescriptor: function(f, r) {\n        return u(y(f), r);\n      } });\n    }, { \"../internals/descriptors\": 43, \"../internals/export\": 50, \"../internals/fails\": 51, \"../internals/object-get-own-property-descriptor\": 94, \"../internals/to-indexed-object\": 135 }], 184: [function(u, H, C) {\n      var m = u(\"../internals/export\"), y = u(\"../internals/fails\"), u = u(\"../internals/object-get-own-property-names-external\").f;\n      m({ target: \"Object\", stat: !0, forced: y(function() {\n        return !Object.getOwnPropertyNames(1);\n      }) }, { getOwnPropertyNames: u });\n    }, { \"../internals/export\": 50, \"../internals/fails\": 51, \"../internals/object-get-own-property-names-external\": 95 }], 185: [function(g, H, C) {\n      var m = g(\"../internals/export\"), y = g(\"../internals/fails\"), u = g(\"../internals/to-object\"), h = g(\"../internals/object-get-prototype-of\"), g = g(\"../internals/correct-prototype-getter\");\n      m({ target: \"Object\", stat: !0, forced: y(function() {\n        h(1);\n      }), sham: !g }, { getPrototypeOf: function(f) {\n        return h(u(f));\n      } });\n    }, { \"../internals/correct-prototype-getter\": 35, \"../internals/export\": 50, \"../internals/fails\": 51, \"../internals/object-get-prototype-of\": 98, \"../internals/to-object\": 138 }], 186: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/to-object\"), u = t(\"../internals/object-keys\");\n      m({ target: \"Object\", stat: !0, forced: t(\"../internals/fails\")(function() {\n        u(1);\n      }) }, { keys: function(h) {\n        return u(y(h));\n      } });\n    }, { \"../internals/export\": 50, \"../internals/fails\": 51, \"../internals/object-keys\": 100, \"../internals/to-object\": 138 }], 187: [function(u, H, C) {\n      var m = u(\"../internals/to-string-tag-support\"), y = u(\"../internals/redefine\"), u = u(\"../internals/object-to-string\");\n      m || y(Object.prototype, \"toString\", u, { unsafe: !0 });\n    }, { \"../internals/object-to-string\": 103, \"../internals/redefine\": 109, \"../internals/to-string-tag-support\": 142 }], 188: [function(xe, H, C) {\n      var m, y, u, h, g = xe(\"../internals/export\"), f = xe(\"../internals/is-pure\"), r = xe(\"../internals/global\"), s = xe(\"../internals/get-built-in\"), o = xe(\"../internals/native-promise-constructor\"), i = xe(\"../internals/redefine\"), l = xe(\"../internals/redefine-all\"), n = xe(\"../internals/set-to-string-tag\"), a = xe(\"../internals/set-species\"), c = xe(\"../internals/is-object\"), p = xe(\"../internals/a-function\"), j = xe(\"../internals/an-instance\"), T = xe(\"../internals/classof-raw\"), _ = xe(\"../internals/inspect-source\"), S = xe(\"../internals/iterate\"), E = xe(\"../internals/check-correctness-of-iteration\"), A = xe(\"../internals/species-constructor\"), x = xe(\"../internals/task\").set, P = xe(\"../internals/microtask\"), M = xe(\"../internals/promise-resolve\"), R = xe(\"../internals/host-report-errors\"), L = xe(\"../internals/new-promise-capability\"), F = xe(\"../internals/perform\"), V = xe(\"../internals/internal-state\"), G = xe(\"../internals/is-forced\"), De = xe(\"../internals/well-known-symbol\"), U = xe(\"../internals/engine-v8-version\"), W = De(\"species\"), X = \"Promise\", ne = V.get, b = V.set, O = V.getterFor(X), D = o, B = r.TypeError, Y = r.document, J = r.process, te = s(\"fetch\"), ce = L.f, re = ce, ue = T(J) == \"process\", le = !!(Y && Y.createEvent && r.dispatchEvent), K = \"unhandledrejection\", ae = \"rejectionhandled\", he = 1, _e = 2, fe = 1, ge = 2, xe = G(X, function() {\n        var Re, we;\n        return _(D) === String(D) && (U === 66 || !ue && typeof PromiseRejectionEvent != \"function\") ? !0 : !(!f || D.prototype.finally) || !(51 <= U && /native code/.test(D)) && (we = function(Z) {\n          Z(function() {\n          }, function() {\n          });\n        }, ((Re = D.resolve(1)).constructor = {})[W] = we, !(Re.then(function() {\n        }) instanceof we));\n      }), De = xe || !E(function(Re) {\n        D.all(Re).catch(function() {\n        });\n      }), Me = function(Re) {\n        var we;\n        return !(!c(Re) || typeof (we = Re.then) != \"function\") && we;\n      }, Qe = function(Re, we, Z) {\n        var $;\n        we.notified || (we.notified = !0, $ = we.reactions, P(function() {\n          for (var q, ee, pe = we.value, je = we.state == he, Ce = 0; $.length > Ce; ) {\n            var Fe, Ne, Be, We = $[Ce++], st = je ? We.ok : We.fail, nt = We.resolve, Ke = We.reject, at = We.domain;\n            try {\n              st ? (je || (we.rejection === ge && function(ot, bt) {\n                x.call(r, function() {\n                  ue ? J.emit(\"rejectionHandled\", ot) : ze(ae, ot, bt.value);\n                });\n              }(Re, we), we.rejection = fe), st === !0 ? Fe = pe : (at && at.enter(), Fe = st(pe), at && (at.exit(), Be = !0)), Fe === We.promise ? Ke(B(\"Promise-chain cycle\")) : (Ne = Me(Fe)) ? Ne.call(Fe, nt, Ke) : nt(Fe)) : Ke(pe);\n            } catch (ot) {\n              at && !Be && at.exit(), Ke(ot);\n            }\n          }\n          we.reactions = [], we.notified = !1, Z && !we.rejection && (q = Re, ee = we, x.call(r, function() {\n            var ot = ee.value, bt = Ve(ee);\n            if (bt && (bt = F(function() {\n              ue ? J.emit(\"unhandledRejection\", ot, q) : ze(K, q, ot);\n            }), ee.rejection = ue || Ve(ee) ? ge : fe, bt.error))\n              throw bt.value;\n          }));\n        }));\n      }, ze = function(Re, we, Z) {\n        var $;\n        le ? (($ = Y.createEvent(\"Event\")).promise = we, $.reason = Z, $.initEvent(Re, !1, !0), r.dispatchEvent($)) : $ = { promise: we, reason: Z }, (we = r[\"on\" + Re]) ? we($) : Re === K && R(\"Unhandled promise rejection\", Z);\n      }, Ve = function(Re) {\n        return Re.rejection !== fe && !Re.parent;\n      }, Xe = function(Re, we, Z, $) {\n        return function(q) {\n          Re(we, Z, q, $);\n        };\n      }, He = function(Re, we, Z, $) {\n        we.done || (we.done = !0, (we = $ || we).value = Z, we.state = _e, Qe(Re, we, !0));\n      }, ve = function(Re, we, Z, $) {\n        if (!we.done) {\n          we.done = !0, $ && (we = $);\n          try {\n            if (Re === Z)\n              throw B(\"Promise can't be resolved itself\");\n            var q = Me(Z);\n            q ? P(function() {\n              var ee = { done: !1 };\n              try {\n                q.call(Z, Xe(ve, Re, ee, we), Xe(He, Re, ee, we));\n              } catch (pe) {\n                He(Re, ee, pe, we);\n              }\n            }) : (we.value = Z, we.state = he, Qe(Re, we, !1));\n          } catch (ee) {\n            He(Re, { done: !1 }, ee, we);\n          }\n        }\n      };\n      xe && (D = function(Re) {\n        j(this, D, X), p(Re), m.call(this);\n        var we = ne(this);\n        try {\n          Re(Xe(ve, this, we), Xe(He, this, we));\n        } catch (Z) {\n          He(this, we, Z);\n        }\n      }, (m = function(Re) {\n        b(this, { type: X, done: !1, notified: !1, parent: !1, reactions: [], rejection: !1, state: 0, value: void 0 });\n      }).prototype = l(D.prototype, { then: function(Re, we) {\n        var Z = O(this), $ = ce(A(this, D));\n        return $.ok = typeof Re != \"function\" || Re, $.fail = typeof we == \"function\" && we, $.domain = ue ? J.domain : void 0, Z.parent = !0, Z.reactions.push($), Z.state != 0 && Qe(this, Z, !1), $.promise;\n      }, catch: function(Re) {\n        return this.then(void 0, Re);\n      } }), y = function() {\n        var Re = new m(), we = ne(Re);\n        this.promise = Re, this.resolve = Xe(ve, Re, we), this.reject = Xe(He, Re, we);\n      }, L.f = ce = function(Re) {\n        return Re === D || Re === u ? new y() : re(Re);\n      }, f || typeof o != \"function\" || (h = o.prototype.then, i(o.prototype, \"then\", function(Re, we) {\n        var Z = this;\n        return new D(function($, q) {\n          h.call(Z, $, q);\n        }).then(Re, we);\n      }, { unsafe: !0 }), typeof te == \"function\" && g({ global: !0, enumerable: !0, forced: !0 }, { fetch: function(Re) {\n        return M(D, te.apply(r, arguments));\n      } }))), g({ global: !0, wrap: !0, forced: xe }, { Promise: D }), n(D, X, !1, !0), a(X), u = s(X), g({ target: X, stat: !0, forced: xe }, { reject: function(Re) {\n        var we = ce(this);\n        return we.reject.call(void 0, Re), we.promise;\n      } }), g({ target: X, stat: !0, forced: f || xe }, { resolve: function(Re) {\n        return M(f && this === u ? D : this, Re);\n      } }), g({ target: X, stat: !0, forced: De }, { all: function(Re) {\n        var we = this, Z = ce(we), $ = Z.resolve, q = Z.reject, ee = F(function() {\n          var pe = p(we.resolve), je = [], Ce = 0, Fe = 1;\n          S(Re, function(Ne) {\n            var Be = Ce++, We = !1;\n            je.push(void 0), Fe++, pe.call(we, Ne).then(function(st) {\n              We || (We = !0, je[Be] = st, --Fe || $(je));\n            }, q);\n          }), --Fe || $(je);\n        });\n        return ee.error && q(ee.value), Z.promise;\n      }, race: function(Re) {\n        var we = this, Z = ce(we), $ = Z.reject, q = F(function() {\n          var ee = p(we.resolve);\n          S(Re, function(pe) {\n            ee.call(we, pe).then(Z.resolve, $);\n          });\n        });\n        return q.error && $(q.value), Z.promise;\n      } });\n    }, { \"../internals/a-function\": 5, \"../internals/an-instance\": 9, \"../internals/check-correctness-of-iteration\": 27, \"../internals/classof-raw\": 28, \"../internals/engine-v8-version\": 48, \"../internals/export\": 50, \"../internals/get-built-in\": 57, \"../internals/global\": 60, \"../internals/host-report-errors\": 63, \"../internals/inspect-source\": 69, \"../internals/internal-state\": 71, \"../internals/is-forced\": 74, \"../internals/is-object\": 75, \"../internals/is-pure\": 76, \"../internals/iterate\": 78, \"../internals/microtask\": 82, \"../internals/native-promise-constructor\": 83, \"../internals/new-promise-capability\": 87, \"../internals/perform\": 106, \"../internals/promise-resolve\": 107, \"../internals/redefine\": 109, \"../internals/redefine-all\": 108, \"../internals/set-species\": 117, \"../internals/set-to-string-tag\": 118, \"../internals/species-constructor\": 122, \"../internals/task\": 131, \"../internals/well-known-symbol\": 149 }], 189: [function(r, H, C) {\n      var m = r(\"../internals/export\"), l = r(\"../internals/get-built-in\"), y = r(\"../internals/a-function\"), u = r(\"../internals/an-object\"), h = r(\"../internals/is-object\"), g = r(\"../internals/object-create\"), f = r(\"../internals/function-bind\"), r = r(\"../internals/fails\"), s = l(\"Reflect\", \"construct\"), o = r(function() {\n        function n() {\n        }\n        return !(s(function() {\n        }, [], n) instanceof n);\n      }), i = !r(function() {\n        s(function() {\n        });\n      }), l = o || i;\n      m({ target: \"Reflect\", stat: !0, forced: l, sham: l }, { construct: function(n, a) {\n        y(n), u(a);\n        var c = arguments.length < 3 ? n : y(arguments[2]);\n        if (i && !o)\n          return s(n, a, c);\n        if (n == c) {\n          switch (a.length) {\n            case 0:\n              return new n();\n            case 1:\n              return new n(a[0]);\n            case 2:\n              return new n(a[0], a[1]);\n            case 3:\n              return new n(a[0], a[1], a[2]);\n            case 4:\n              return new n(a[0], a[1], a[2], a[3]);\n          }\n          var p = [null];\n          return p.push.apply(p, a), new (f.apply(n, p))();\n        }\n        return p = c.prototype, c = g(h(p) ? p : Object.prototype), p = Function.apply.call(n, c, a), h(p) ? p : c;\n      } });\n    }, { \"../internals/a-function\": 5, \"../internals/an-object\": 10, \"../internals/export\": 50, \"../internals/fails\": 51, \"../internals/function-bind\": 56, \"../internals/get-built-in\": 57, \"../internals/is-object\": 75, \"../internals/object-create\": 91 }], 190: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/is-object\"), u = t(\"../internals/an-object\"), h = t(\"../internals/has\"), g = t(\"../internals/object-get-own-property-descriptor\"), f = t(\"../internals/object-get-prototype-of\");\n      m({ target: \"Reflect\", stat: !0 }, { get: function r(s, o) {\n        var i, l = arguments.length < 3 ? s : arguments[2];\n        return u(s) === l ? s[o] : (i = g.f(s, o)) ? h(i, \"value\") ? i.value : i.get === void 0 ? void 0 : i.get.call(l) : y(i = f(s)) ? r(i, o, l) : void 0;\n      } });\n    }, { \"../internals/an-object\": 10, \"../internals/export\": 50, \"../internals/has\": 61, \"../internals/is-object\": 75, \"../internals/object-get-own-property-descriptor\": 94, \"../internals/object-get-prototype-of\": 98 }], 191: [function(t, H, C) {\n      var m = t(\"../internals/descriptors\"), y = t(\"../internals/global\"), u = t(\"../internals/is-forced\"), h = t(\"../internals/inherit-if-required\"), g = t(\"../internals/object-define-property\").f, f = t(\"../internals/object-get-own-property-names\").f, r = t(\"../internals/is-regexp\"), s = t(\"../internals/regexp-flags\"), o = t(\"../internals/regexp-sticky-helpers\"), i = t(\"../internals/redefine\"), l = t(\"../internals/fails\"), n = t(\"../internals/internal-state\").set, a = t(\"../internals/set-species\"), c = t(\"../internals/well-known-symbol\")(\"match\"), p = y.RegExp, j = p.prototype, T = /a/g, _ = /a/g, S = new p(T) !== T, E = o.UNSUPPORTED_Y;\n      if (m && u(\"RegExp\", !S || E || l(function() {\n        return _[c] = !1, p(T) != T || p(_) == _ || p(T, \"i\") != \"/a/i\";\n      }))) {\n        for (var A = function(M, R) {\n          var L, F = this instanceof A, V = r(M), G = R === void 0;\n          return !F && V && M.constructor === A && G ? M : (S ? V && !G && (M = M.source) : M instanceof A && (G && (R = s.call(M)), M = M.source), E && (L = !!R && -1 < R.indexOf(\"y\")) && (R = R.replace(/y/g, \"\")), V = h(S ? new p(M, R) : p(M, R), F ? this : j, A), E && L && n(V, { sticky: L }), V);\n        }, x = f(p), P = 0; x.length > P; )\n          (function(M) {\n            M in A || g(A, M, { configurable: !0, get: function() {\n              return p[M];\n            }, set: function(R) {\n              p[M] = R;\n            } });\n          })(x[P++]);\n        (j.constructor = A).prototype = j, i(y, \"RegExp\", A);\n      }\n      a(\"RegExp\");\n    }, { \"../internals/descriptors\": 43, \"../internals/fails\": 51, \"../internals/global\": 60, \"../internals/inherit-if-required\": 68, \"../internals/internal-state\": 71, \"../internals/is-forced\": 74, \"../internals/is-regexp\": 77, \"../internals/object-define-property\": 93, \"../internals/object-get-own-property-names\": 96, \"../internals/redefine\": 109, \"../internals/regexp-flags\": 112, \"../internals/regexp-sticky-helpers\": 113, \"../internals/set-species\": 117, \"../internals/well-known-symbol\": 149 }], 192: [function(y, H, C) {\n      var m = y(\"../internals/export\"), y = y(\"../internals/regexp-exec\");\n      m({ target: \"RegExp\", proto: !0, forced: /./.exec !== y }, { exec: y });\n    }, { \"../internals/export\": 50, \"../internals/regexp-exec\": 111 }], 193: [function(h, H, C) {\n      var m = h(\"../internals/redefine\"), y = h(\"../internals/an-object\"), r = h(\"../internals/fails\"), u = h(\"../internals/regexp-flags\"), h = \"toString\", g = RegExp.prototype, f = g[h], r = r(function() {\n        return f.call({ source: \"a\", flags: \"b\" }) != \"/a/b\";\n      }), s = f.name != h;\n      (r || s) && m(RegExp.prototype, h, function() {\n        var o = y(this), i = String(o.source), l = o.flags;\n        return \"/\" + i + \"/\" + String(l === void 0 && o instanceof RegExp && !(\"flags\" in g) ? u.call(o) : l);\n      }, { unsafe: !0 });\n    }, { \"../internals/an-object\": 10, \"../internals/fails\": 51, \"../internals/redefine\": 109, \"../internals/regexp-flags\": 112 }], 194: [function(y, H, C) {\n      var m = y(\"../internals/collection\"), y = y(\"../internals/collection-strong\");\n      H.exports = m(\"Set\", function(u) {\n        return function() {\n          return u(this, arguments.length ? arguments[0] : void 0);\n        };\n      }, y);\n    }, { \"../internals/collection\": 32, \"../internals/collection-strong\": 30 }], 195: [function(f, H, C) {\n      var m = f(\"../internals/export\"), y = f(\"../internals/object-get-own-property-descriptor\").f, u = f(\"../internals/to-length\"), h = f(\"../internals/not-a-regexp\"), g = f(\"../internals/require-object-coercible\"), o = f(\"../internals/correct-is-regexp-logic\"), f = f(\"../internals/is-pure\"), r = \"\".endsWith, s = Math.min, o = o(\"endsWith\");\n      m({ target: \"String\", proto: !0, forced: !!(f || o || !(m = y(String.prototype, \"endsWith\")) || m.writable) && !o }, { endsWith: function(i) {\n        var l = String(g(this)), n = (h(i), 1 < arguments.length ? arguments[1] : void 0), a = u(l.length), n = n === void 0 ? a : s(u(n), a), a = String(i);\n        return r ? r.call(l, a, n) : l.slice(n - a.length, n) === a;\n      } });\n    }, { \"../internals/correct-is-regexp-logic\": 34, \"../internals/export\": 50, \"../internals/is-pure\": 76, \"../internals/not-a-regexp\": 88, \"../internals/object-get-own-property-descriptor\": 94, \"../internals/require-object-coercible\": 114, \"../internals/to-length\": 137 }], 196: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/not-a-regexp\"), u = t(\"../internals/require-object-coercible\");\n      m({ target: \"String\", proto: !0, forced: !t(\"../internals/correct-is-regexp-logic\")(\"includes\") }, { includes: function(h) {\n        return !!~String(u(this)).indexOf(y(h), 1 < arguments.length ? arguments[1] : void 0);\n      } });\n    }, { \"../internals/correct-is-regexp-logic\": 34, \"../internals/export\": 50, \"../internals/not-a-regexp\": 88, \"../internals/require-object-coercible\": 114 }], 197: [function(u, H, C) {\n      var m = u(\"../internals/string-multibyte\").charAt, y = u(\"../internals/internal-state\"), u = u(\"../internals/define-iterator\"), h = \"String Iterator\", g = y.set, f = y.getterFor(h);\n      u(String, \"String\", function(r) {\n        g(this, { type: h, string: String(r), index: 0 });\n      }, function() {\n        var r = f(this), s = r.string, o = r.index;\n        return o >= s.length ? { value: void 0, done: !0 } : (s = m(s, o), r.index += s.length, { value: s, done: !1 });\n      });\n    }, { \"../internals/define-iterator\": 41, \"../internals/internal-state\": 71, \"../internals/string-multibyte\": 124 }], 198: [function(t, H, C) {\n      var m = t(\"../internals/fix-regexp-well-known-symbol-logic\"), y = t(\"../internals/an-object\"), u = t(\"../internals/to-length\"), h = t(\"../internals/require-object-coercible\"), g = t(\"../internals/advance-string-index\"), f = t(\"../internals/regexp-exec-abstract\");\n      m(\"match\", 1, function(r, s, o) {\n        return [function(i) {\n          var l = h(this), n = i == null ? void 0 : i[r];\n          return n !== void 0 ? n.call(i, l) : new RegExp(i)[r](String(l));\n        }, function(i) {\n          var l = o(s, i, this);\n          if (l.done)\n            return l.value;\n          var n = y(i), a = String(this);\n          if (!n.global)\n            return f(n, a);\n          for (var c = n.unicode, p = [], j = n.lastIndex = 0; (T = f(n, a)) !== null; ) {\n            var T = String(T[0]);\n            (p[j] = T) === \"\" && (n.lastIndex = g(a, u(n.lastIndex), c)), j++;\n          }\n          return j === 0 ? null : p;\n        }];\n      });\n    }, { \"../internals/advance-string-index\": 8, \"../internals/an-object\": 10, \"../internals/fix-regexp-well-known-symbol-logic\": 52, \"../internals/regexp-exec-abstract\": 110, \"../internals/require-object-coercible\": 114, \"../internals/to-length\": 137 }], 199: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/string-pad\").start;\n      m({ target: \"String\", proto: !0, forced: t(\"../internals/string-pad-webkit-bug\") }, { padStart: function(u) {\n        return y(this, u, 1 < arguments.length ? arguments[1] : void 0);\n      } });\n    }, { \"../internals/export\": 50, \"../internals/string-pad\": 126, \"../internals/string-pad-webkit-bug\": 125 }], 200: [function(t, H, C) {\n      t(\"../internals/export\")({ target: \"String\", proto: !0 }, { repeat: t(\"../internals/string-repeat\") });\n    }, { \"../internals/export\": 50, \"../internals/string-repeat\": 128 }], 201: [function(t, H, C) {\n      var m = t(\"../internals/fix-regexp-well-known-symbol-logic\"), y = t(\"../internals/an-object\"), u = t(\"../internals/to-object\"), h = t(\"../internals/to-length\"), g = t(\"../internals/to-integer\"), f = t(\"../internals/require-object-coercible\"), r = t(\"../internals/advance-string-index\"), s = t(\"../internals/regexp-exec-abstract\"), o = Math.max, i = Math.min, l = Math.floor, n = /\\$([$&'`]|\\d\\d?|<[^>]*>)/g, a = /\\$([$&'`]|\\d\\d?)/g;\n      m(\"replace\", 2, function(c, p, j, T) {\n        var _ = T.REGEXP_REPLACE_SUBSTITUTES_UNDEFINED_CAPTURE, S = T.REPLACE_KEEPS_$0, E = _ ? \"$\" : \"$0\";\n        return [function(A, x) {\n          var P = f(this), M = A == null ? void 0 : A[c];\n          return M !== void 0 ? M.call(A, P, x) : p.call(String(P), A, x);\n        }, function(A, x) {\n          if (!_ && S || typeof x == \"string\" && x.indexOf(E) === -1) {\n            var P = j(p, A, this, x);\n            if (P.done)\n              return P.value;\n          }\n          for (var M, R = y(A), L = String(this), F = typeof x == \"function\", V = (F || (x = String(x)), R.global), G = (V && (M = R.unicode, R.lastIndex = 0), []); (b = s(R, L)) !== null && (G.push(b), V); )\n            String(b[0]) === \"\" && (R.lastIndex = r(L, h(R.lastIndex), M));\n          for (var U, W = \"\", X = 0, ne = 0; ne < G.length; ne++) {\n            for (var b = G[ne], O = String(b[0]), D = o(i(g(b.index), L.length), 0), B = [], Y = 1; Y < b.length; Y++)\n              B.push((U = b[Y]) === void 0 ? U : String(U));\n            var J = b.groups, te = F ? (te = [O].concat(B, D, L), J !== void 0 && te.push(J), String(x.apply(void 0, te))) : function(ce, re, ue, le, K, ae) {\n              var he = ue + ce.length, _e = le.length, fe = a;\n              return K !== void 0 && (K = u(K), fe = n), p.call(ae, fe, function(ge, xe) {\n                var De;\n                switch (xe.charAt(0)) {\n                  case \"$\":\n                    return \"$\";\n                  case \"&\":\n                    return ce;\n                  case \"`\":\n                    return re.slice(0, ue);\n                  case \"'\":\n                    return re.slice(he);\n                  case \"<\":\n                    De = K[xe.slice(1, -1)];\n                    break;\n                  default:\n                    var Me, Qe = +xe;\n                    if (Qe == 0)\n                      return ge;\n                    if (_e < Qe)\n                      return (Me = l(Qe / 10)) !== 0 && Me <= _e ? le[Me - 1] === void 0 ? xe.charAt(1) : le[Me - 1] + xe.charAt(1) : ge;\n                    De = le[Qe - 1];\n                }\n                return De === void 0 ? \"\" : De;\n              });\n            }(O, L, D, B, J, x);\n            X <= D && (W += L.slice(X, D) + te, X = D + O.length);\n          }\n          return W + L.slice(X);\n        }];\n      });\n    }, { \"../internals/advance-string-index\": 8, \"../internals/an-object\": 10, \"../internals/fix-regexp-well-known-symbol-logic\": 52, \"../internals/regexp-exec-abstract\": 110, \"../internals/require-object-coercible\": 114, \"../internals/to-integer\": 136, \"../internals/to-length\": 137, \"../internals/to-object\": 138 }], 202: [function(t, H, C) {\n      var m = t(\"../internals/fix-regexp-well-known-symbol-logic\"), y = t(\"../internals/an-object\"), u = t(\"../internals/require-object-coercible\"), h = t(\"../internals/same-value\"), g = t(\"../internals/regexp-exec-abstract\");\n      m(\"search\", 1, function(f, r, s) {\n        return [function(o) {\n          var i = u(this), l = o == null ? void 0 : o[f];\n          return l !== void 0 ? l.call(o, i) : new RegExp(o)[f](String(i));\n        }, function(o) {\n          var i, l = s(r, o, this);\n          return l.done ? l.value : (l = y(o), o = String(this), i = l.lastIndex, h(i, 0) || (l.lastIndex = 0), o = g(l, o), h(l.lastIndex, i) || (l.lastIndex = i), o === null ? -1 : o.index);\n        }];\n      });\n    }, { \"../internals/an-object\": 10, \"../internals/fix-regexp-well-known-symbol-logic\": 52, \"../internals/regexp-exec-abstract\": 110, \"../internals/require-object-coercible\": 114, \"../internals/same-value\": 115 }], 203: [function(i, H, C) {\n      var m = i(\"../internals/fix-regexp-well-known-symbol-logic\"), y = i(\"../internals/is-regexp\"), u = i(\"../internals/an-object\"), h = i(\"../internals/require-object-coercible\"), g = i(\"../internals/species-constructor\"), f = i(\"../internals/advance-string-index\"), r = i(\"../internals/to-length\"), s = i(\"../internals/regexp-exec-abstract\"), o = i(\"../internals/regexp-exec\"), i = i(\"../internals/fails\"), l = [].push, n = Math.min, a = 4294967295, c = !i(function() {\n        return !RegExp(a, \"y\");\n      });\n      m(\"split\", 2, function(p, j, T) {\n        var _ = \"abbc\".split(/(b)*/)[1] == \"c\" || \"test\".split(/(?:)/, -1).length != 4 || \"ab\".split(/(?:ab)*/).length != 2 || \".\".split(/(.?)(.?)/).length != 4 || 1 < \".\".split(/()()/).length || \"\".split(/.?/).length ? function(S, E) {\n          var A = String(h(this)), x = E === void 0 ? a : E >>> 0;\n          if (x == 0)\n            return [];\n          if (S === void 0)\n            return [A];\n          if (!y(S))\n            return j.call(A, S, x);\n          for (var P, M, R, L = [], E = (S.ignoreCase ? \"i\" : \"\") + (S.multiline ? \"m\" : \"\") + (S.unicode ? \"u\" : \"\") + (S.sticky ? \"y\" : \"\"), F = 0, V = new RegExp(S.source, E + \"g\"); (P = o.call(V, A)) && !(F < (M = V.lastIndex) && (L.push(A.slice(F, P.index)), 1 < P.length && P.index < A.length && l.apply(L, P.slice(1)), R = P[0].length, F = M, L.length >= x)); )\n            V.lastIndex === P.index && V.lastIndex++;\n          return F === A.length ? !R && V.test(\"\") || L.push(\"\") : L.push(A.slice(F)), L.length > x ? L.slice(0, x) : L;\n        } : \"0\".split(void 0, 0).length ? function(S, E) {\n          return S === void 0 && E === 0 ? [] : j.call(this, S, E);\n        } : j;\n        return [function(S, E) {\n          var A = h(this), x = S == null ? void 0 : S[p];\n          return x !== void 0 ? x.call(S, A, E) : _.call(String(A), S, E);\n        }, function(P, E) {\n          var A = T(_, P, this, E, _ !== j);\n          if (A.done)\n            return A.value;\n          var A = u(P), x = String(this), P = g(A, RegExp), M = A.unicode, R = (A.ignoreCase ? \"i\" : \"\") + (A.multiline ? \"m\" : \"\") + (A.unicode ? \"u\" : \"\") + (c ? \"y\" : \"g\"), L = new P(c ? A : \"^(?:\" + A.source + \")\", R), F = E === void 0 ? a : E >>> 0;\n          if (F == 0)\n            return [];\n          if (x.length === 0)\n            return s(L, x) === null ? [x] : [];\n          for (var V = 0, G = 0, U = []; G < x.length; ) {\n            L.lastIndex = c ? G : 0;\n            var W, X = s(L, c ? x : x.slice(G));\n            if (X === null || (W = n(r(L.lastIndex + (c ? 0 : G)), x.length)) === V)\n              G = f(x, G, M);\n            else {\n              if (U.push(x.slice(V, G)), U.length === F)\n                return U;\n              for (var ne = 1; ne <= X.length - 1; ne++)\n                if (U.push(X[ne]), U.length === F)\n                  return U;\n              G = V = W;\n            }\n          }\n          return U.push(x.slice(V)), U;\n        }];\n      }, !c);\n    }, { \"../internals/advance-string-index\": 8, \"../internals/an-object\": 10, \"../internals/fails\": 51, \"../internals/fix-regexp-well-known-symbol-logic\": 52, \"../internals/is-regexp\": 77, \"../internals/regexp-exec\": 111, \"../internals/regexp-exec-abstract\": 110, \"../internals/require-object-coercible\": 114, \"../internals/species-constructor\": 122, \"../internals/to-length\": 137 }], 204: [function(f, H, C) {\n      var m = f(\"../internals/export\"), y = f(\"../internals/object-get-own-property-descriptor\").f, u = f(\"../internals/to-length\"), h = f(\"../internals/not-a-regexp\"), g = f(\"../internals/require-object-coercible\"), o = f(\"../internals/correct-is-regexp-logic\"), f = f(\"../internals/is-pure\"), r = \"\".startsWith, s = Math.min, o = o(\"startsWith\");\n      m({ target: \"String\", proto: !0, forced: !!(f || o || !(m = y(String.prototype, \"startsWith\")) || m.writable) && !o }, { startsWith: function(a) {\n        var l = String(g(this)), n = (h(a), u(s(1 < arguments.length ? arguments[1] : void 0, l.length))), a = String(a);\n        return r ? r.call(l, a, n) : l.slice(n, n + a.length) === a;\n      } });\n    }, { \"../internals/correct-is-regexp-logic\": 34, \"../internals/export\": 50, \"../internals/is-pure\": 76, \"../internals/not-a-regexp\": 88, \"../internals/object-get-own-property-descriptor\": 94, \"../internals/require-object-coercible\": 114, \"../internals/to-length\": 137 }], 205: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/create-html\");\n      m({ target: \"String\", proto: !0, forced: t(\"../internals/string-html-forced\")(\"sub\") }, { sub: function() {\n        return y(this, \"sub\", \"\", \"\");\n      } });\n    }, { \"../internals/create-html\": 36, \"../internals/export\": 50, \"../internals/string-html-forced\": 123 }], 206: [function(t, H, C) {\n      var m = t(\"../internals/export\"), y = t(\"../internals/string-trim\").trim;\n      m({ target: \"String\", proto: !0, forced: t(\"../internals/string-trim-forced\")(\"trim\") }, { trim: function() {\n        return y(this);\n      } });\n    }, { \"../internals/export\": 50, \"../internals/string-trim\": 130, \"../internals/string-trim-forced\": 129 }], 207: [function(n, H, C) {\n      var m, y, u, h, g, f = n(\"../internals/export\"), r = n(\"../internals/descriptors\"), s = n(\"../internals/global\"), o = n(\"../internals/has\"), i = n(\"../internals/is-object\"), l = n(\"../internals/object-define-property\").f, n = n(\"../internals/copy-constructor-properties\"), a = s.Symbol;\n      !r || typeof a != \"function\" || \"description\" in a.prototype && a().description === void 0 || (m = {}, n(y = function() {\n        var c = arguments.length < 1 || arguments[0] === void 0 ? void 0 : String(arguments[0]), p = this instanceof y ? new a(c) : c === void 0 ? a() : a(c);\n        return c === \"\" && (m[p] = !0), p;\n      }, a), (s = y.prototype = a.prototype).constructor = y, u = s.toString, h = String(a(\"test\")) == \"Symbol(test)\", g = /^Symbol\\((.*)\\)[^)]+$/, l(s, \"description\", { configurable: !0, get: function() {\n        var c = i(this) ? this.valueOf() : this, p = u.call(c);\n        return o(m, c) ? \"\" : (c = h ? p.slice(7, -1) : p.replace(g, \"$1\")) === \"\" ? void 0 : c;\n      } }), f({ global: !0, forced: !0 }, { Symbol: y }));\n    }, { \"../internals/copy-constructor-properties\": 33, \"../internals/descriptors\": 43, \"../internals/export\": 50, \"../internals/global\": 60, \"../internals/has\": 61, \"../internals/is-object\": 75, \"../internals/object-define-property\": 93 }], 208: [function(t, H, C) {\n      t(\"../internals/define-well-known-symbol\")(\"iterator\");\n    }, { \"../internals/define-well-known-symbol\": 42 }], 209: [function(re, H, C) {\n      function m(q, ee) {\n        var pe = De[q] = A(ae[ce]);\n        return ue(pe, { type: te, tag: q, description: ee }), o || (pe.description = ee), pe;\n      }\n      function y(q, je) {\n        j(q);\n        var pe = _(je), je = x(pe).concat($(pe));\n        return Y(je, function(Ce) {\n          o && !Z.call(pe, Ce) || we(q, Ce, pe[Ce]);\n        }), q;\n      }\n      function u(je, Ce) {\n        var pe, je = _(je), Ce = S(Ce, !0);\n        if (je !== K || !a(De, Ce) || a(Me, Ce))\n          return !(pe = _e(je, Ce)) || !a(De, Ce) || a(je, J) && je[J][Ce] || (pe.enumerable = !0), pe;\n      }\n      function h(ee) {\n        var ee = ge(_(ee)), pe = [];\n        return Y(ee, function(je) {\n          a(De, je) || a(X, je) || pe.push(je);\n        }), pe;\n      }\n      var g = re(\"../internals/export\"), f = re(\"../internals/global\"), r = re(\"../internals/get-built-in\"), s = re(\"../internals/is-pure\"), o = re(\"../internals/descriptors\"), i = re(\"../internals/native-symbol\"), l = re(\"../internals/use-symbol-as-uid\"), n = re(\"../internals/fails\"), a = re(\"../internals/has\"), c = re(\"../internals/is-array\"), p = re(\"../internals/is-object\"), j = re(\"../internals/an-object\"), T = re(\"../internals/to-object\"), _ = re(\"../internals/to-indexed-object\"), S = re(\"../internals/to-primitive\"), E = re(\"../internals/create-property-descriptor\"), A = re(\"../internals/object-create\"), x = re(\"../internals/object-keys\"), P = re(\"../internals/object-get-own-property-names\"), M = re(\"../internals/object-get-own-property-names-external\"), R = re(\"../internals/object-get-own-property-symbols\"), L = re(\"../internals/object-get-own-property-descriptor\"), F = re(\"../internals/object-define-property\"), V = re(\"../internals/object-property-is-enumerable\"), G = re(\"../internals/create-non-enumerable-property\"), U = re(\"../internals/redefine\"), W = re(\"../internals/shared\"), Ve = re(\"../internals/shared-key\"), X = re(\"../internals/hidden-keys\"), ne = re(\"../internals/uid\"), b = re(\"../internals/well-known-symbol\"), O = re(\"../internals/well-known-symbol-wrapped\"), D = re(\"../internals/define-well-known-symbol\"), B = re(\"../internals/set-to-string-tag\"), Xe = re(\"../internals/internal-state\"), Y = re(\"../internals/array-iteration\").forEach, J = Ve(\"hidden\"), te = \"Symbol\", ce = \"prototype\", re = b(\"toPrimitive\"), ue = Xe.set, le = Xe.getterFor(te), K = Object[ce], ae = f.Symbol, he = r(\"JSON\", \"stringify\"), _e = L.f, fe = F.f, ge = M.f, xe = V.f, De = W(\"symbols\"), Me = W(\"op-symbols\"), Qe = W(\"string-to-symbol-registry\"), ze = W(\"symbol-to-string-registry\"), Ve = W(\"wks\"), Xe = f.QObject, He = !Xe || !Xe[ce] || !Xe[ce].findChild, ve = o && n(function() {\n        return A(fe({}, \"a\", { get: function() {\n          return fe(this, \"a\", { value: 7 }).a;\n        } })).a != 7;\n      }) ? function(q, ee, pe) {\n        var je = _e(K, ee);\n        je && delete K[ee], fe(q, ee, pe), je && q !== K && fe(K, ee, je);\n      } : fe, Re = l ? function(q) {\n        return typeof q == \"symbol\";\n      } : function(q) {\n        return Object(q) instanceof ae;\n      }, we = function(q, ee, pe) {\n        return q === K && we(Me, ee, pe), j(q), ee = S(ee, !0), j(pe), (a(De, ee) ? (pe.enumerable ? (a(q, J) && q[J][ee] && (q[J][ee] = !1), pe = A(pe, { enumerable: E(0, !1) })) : (a(q, J) || fe(q, J, E(1, {})), q[J][ee] = !0), ve) : fe)(q, ee, pe);\n      }, Z = function(ee) {\n        var ee = S(ee, !0), pe = xe.call(this, ee);\n        return !(this === K && a(De, ee) && !a(Me, ee)) && (!(pe || !a(this, ee) || !a(De, ee) || a(this, J) && this[J][ee]) || pe);\n      }, $ = function(pe) {\n        var ee = pe === K, pe = ge(ee ? Me : _(pe)), je = [];\n        return Y(pe, function(Ce) {\n          !a(De, Ce) || ee && !a(K, Ce) || je.push(De[Ce]);\n        }), je;\n      };\n      i || (U((ae = function() {\n        if (this instanceof ae)\n          throw TypeError(\"Symbol is not a constructor\");\n        var q = arguments.length && arguments[0] !== void 0 ? String(arguments[0]) : void 0, ee = ne(q), pe = function(je) {\n          this === K && pe.call(Me, je), a(this, J) && a(this[J], ee) && (this[J][ee] = !1), ve(this, ee, E(1, je));\n        };\n        return o && He && ve(K, ee, { configurable: !0, set: pe }), m(ee, q);\n      })[ce], \"toString\", function() {\n        return le(this).tag;\n      }), U(ae, \"withoutSetter\", function(q) {\n        return m(ne(q), q);\n      }), V.f = Z, F.f = we, L.f = u, P.f = M.f = h, R.f = $, O.f = function(q) {\n        return m(b(q), q);\n      }, o && (fe(ae[ce], \"description\", { configurable: !0, get: function() {\n        return le(this).description;\n      } }), s || U(K, \"propertyIsEnumerable\", Z, { unsafe: !0 }))), g({ global: !0, wrap: !0, forced: !i, sham: !i }, { Symbol: ae }), Y(x(Ve), function(q) {\n        D(q);\n      }), g({ target: te, stat: !0, forced: !i }, { for: function(pe) {\n        var ee, pe = String(pe);\n        return a(Qe, pe) ? Qe[pe] : (ee = ae(pe), Qe[pe] = ee, ze[ee] = pe, ee);\n      }, keyFor: function(q) {\n        if (!Re(q))\n          throw TypeError(q + \" is not a symbol\");\n        if (a(ze, q))\n          return ze[q];\n      }, useSetter: function() {\n        He = !0;\n      }, useSimple: function() {\n        He = !1;\n      } }), g({ target: \"Object\", stat: !0, forced: !i, sham: !o }, { create: function(q, ee) {\n        return ee === void 0 ? A(q) : y(A(q), ee);\n      }, defineProperty: we, defineProperties: y, getOwnPropertyDescriptor: u }), g({ target: \"Object\", stat: !0, forced: !i }, { getOwnPropertyNames: h, getOwnPropertySymbols: $ }), g({ target: \"Object\", stat: !0, forced: n(function() {\n        R.f(1);\n      }) }, { getOwnPropertySymbols: function(q) {\n        return R.f(T(q));\n      } }), he && g({ target: \"JSON\", stat: !0, forced: !i || n(function() {\n        var q = ae();\n        return he([q]) != \"[null]\" || he({ a: q }) != \"{}\" || he(Object(q)) != \"{}\";\n      }) }, { stringify: function(q, ee, pe) {\n        for (var je, Ce = [q], Fe = 1; Fe < arguments.length; )\n          Ce.push(arguments[Fe++]);\n        if ((p(je = ee) || q !== void 0) && !Re(q))\n          return c(ee) || (ee = function(Ne, Be) {\n            if (typeof je == \"function\" && (Be = je.call(this, Ne, Be)), !Re(Be))\n              return Be;\n          }), Ce[1] = ee, he.apply(null, Ce);\n      } }), ae[ce][re] || G(ae[ce], re, ae[ce].valueOf), B(ae, te), X[J] = !0;\n    }, { \"../internals/an-object\": 10, \"../internals/array-iteration\": 19, \"../internals/create-non-enumerable-property\": 38, \"../internals/create-property-descriptor\": 39, \"../internals/define-well-known-symbol\": 42, \"../internals/descriptors\": 43, \"../internals/export\": 50, \"../internals/fails\": 51, \"../internals/get-built-in\": 57, \"../internals/global\": 60, \"../internals/has\": 61, \"../internals/hidden-keys\": 62, \"../internals/internal-state\": 71, \"../internals/is-array\": 73, \"../internals/is-object\": 75, \"../internals/is-pure\": 76, \"../internals/native-symbol\": 84, \"../internals/object-create\": 91, \"../internals/object-define-property\": 93, \"../internals/object-get-own-property-descriptor\": 94, \"../internals/object-get-own-property-names\": 96, \"../internals/object-get-own-property-names-external\": 95, \"../internals/object-get-own-property-symbols\": 97, \"../internals/object-keys\": 100, \"../internals/object-property-is-enumerable\": 101, \"../internals/redefine\": 109, \"../internals/set-to-string-tag\": 118, \"../internals/shared\": 121, \"../internals/shared-key\": 119, \"../internals/to-indexed-object\": 135, \"../internals/to-object\": 138, \"../internals/to-primitive\": 141, \"../internals/uid\": 146, \"../internals/use-symbol-as-uid\": 147, \"../internals/well-known-symbol\": 149, \"../internals/well-known-symbol-wrapped\": 148 }], 210: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-copy-within\"), u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"copyWithin\", function(h, g) {\n        return y.call(u(this), h, g, 2 < arguments.length ? arguments[2] : void 0);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-copy-within\": 14 }], 211: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-iteration\").every, u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"every\", function(h) {\n        return y(u(this), h, 1 < arguments.length ? arguments[1] : void 0);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-iteration\": 19 }], 212: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-fill\"), u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"fill\", function(h) {\n        return y.apply(u(this), arguments);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-fill\": 15 }], 213: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-iteration\").filter, u = t(\"../internals/species-constructor\"), h = m.aTypedArray, g = m.aTypedArrayConstructor;\n      (0, m.exportTypedArrayMethod)(\"filter\", function(f) {\n        for (var r = y(h(this), f, 1 < arguments.length ? arguments[1] : void 0), f = u(this, this.constructor), s = 0, o = r.length, i = new (g(f))(o); s < o; )\n          i[s] = r[s++];\n        return i;\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-iteration\": 19, \"../internals/species-constructor\": 122 }], 214: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-iteration\").findIndex, u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"findIndex\", function(h) {\n        return y(u(this), h, 1 < arguments.length ? arguments[1] : void 0);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-iteration\": 19 }], 215: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-iteration\").find, u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"find\", function(h) {\n        return y(u(this), h, 1 < arguments.length ? arguments[1] : void 0);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-iteration\": 19 }], 216: [function(t, H, C) {\n      t(\"../internals/typed-array-constructor\")(\"Float32\", function(m) {\n        return function(y, u, h) {\n          return m(this, y, u, h);\n        };\n      });\n    }, { \"../internals/typed-array-constructor\": 143 }], 217: [function(t, H, C) {\n      t(\"../internals/typed-array-constructor\")(\"Float64\", function(m) {\n        return function(y, u, h) {\n          return m(this, y, u, h);\n        };\n      });\n    }, { \"../internals/typed-array-constructor\": 143 }], 218: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-iteration\").forEach, u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"forEach\", function(h) {\n        y(u(this), h, 1 < arguments.length ? arguments[1] : void 0);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-iteration\": 19 }], 219: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-includes\").includes, u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"includes\", function(h) {\n        return y(u(this), h, 1 < arguments.length ? arguments[1] : void 0);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-includes\": 18 }], 220: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-includes\").indexOf, u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"indexOf\", function(h) {\n        return y(u(this), h, 1 < arguments.length ? arguments[1] : void 0);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-includes\": 18 }], 221: [function(t, H, C) {\n      t(\"../internals/typed-array-constructor\")(\"Int16\", function(m) {\n        return function(y, u, h) {\n          return m(this, y, u, h);\n        };\n      });\n    }, { \"../internals/typed-array-constructor\": 143 }], 222: [function(t, H, C) {\n      t(\"../internals/typed-array-constructor\")(\"Int32\", function(m) {\n        return function(y, u, h) {\n          return m(this, y, u, h);\n        };\n      });\n    }, { \"../internals/typed-array-constructor\": 143 }], 223: [function(y, H, C) {\n      function m() {\n        return u.call(f(this));\n      }\n      var o = y(\"../internals/global\"), s = y(\"../internals/array-buffer-view-core\"), r = y(\"../modules/es.array.iterator\"), y = y(\"../internals/well-known-symbol\")(\"iterator\"), o = o.Uint8Array, u = r.values, h = r.keys, g = r.entries, f = s.aTypedArray, r = s.exportTypedArrayMethod, s = o && o.prototype[y], o = !!s && (s.name == \"values\" || s.name == null);\n      r(\"entries\", function() {\n        return g.call(f(this));\n      }), r(\"keys\", function() {\n        return h.call(f(this));\n      }), r(\"values\", m, !o), r(y, m, !o);\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/global\": 60, \"../internals/well-known-symbol\": 149, \"../modules/es.array.iterator\": 164 }], 224: [function(y, H, C) {\n      var y = y(\"../internals/array-buffer-view-core\"), m = y.aTypedArray, y = y.exportTypedArrayMethod, u = [].join;\n      y(\"join\", function(h) {\n        return u.apply(m(this), arguments);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12 }], 225: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-last-index-of\"), u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"lastIndexOf\", function(h) {\n        return y.apply(u(this), arguments);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-last-index-of\": 20 }], 226: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-iteration\").map, u = t(\"../internals/species-constructor\"), h = m.aTypedArray, g = m.aTypedArrayConstructor;\n      (0, m.exportTypedArrayMethod)(\"map\", function(f) {\n        return y(h(this), f, 1 < arguments.length ? arguments[1] : void 0, function(r, s) {\n          return new (g(u(r, r.constructor)))(s);\n        });\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-iteration\": 19, \"../internals/species-constructor\": 122 }], 227: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-reduce\").right, u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"reduceRight\", function(h) {\n        return y(u(this), h, arguments.length, 1 < arguments.length ? arguments[1] : void 0);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-reduce\": 24 }], 228: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-reduce\").left, u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"reduce\", function(h) {\n        return y(u(this), h, arguments.length, 1 < arguments.length ? arguments[1] : void 0);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-reduce\": 24 }], 229: [function(y, H, C) {\n      var y = y(\"../internals/array-buffer-view-core\"), m = y.aTypedArray, y = y.exportTypedArrayMethod, u = Math.floor;\n      y(\"reverse\", function() {\n        for (var h, g = m(this).length, f = u(g / 2), r = 0; r < f; )\n          h = this[r], this[r++] = this[--g], this[g] = h;\n        return this;\n      });\n    }, { \"../internals/array-buffer-view-core\": 12 }], 230: [function(g, H, C) {\n      var m = g(\"../internals/array-buffer-view-core\"), y = g(\"../internals/to-length\"), u = g(\"../internals/to-offset\"), h = g(\"../internals/to-object\"), g = g(\"../internals/fails\"), f = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"set\", function(r) {\n        f(this);\n        var s = u(1 < arguments.length ? arguments[1] : void 0, 1), o = this.length, i = h(r), l = y(i.length), n = 0;\n        if (o < l + s)\n          throw RangeError(\"Wrong length\");\n        for (; n < l; )\n          this[s + n] = i[n++];\n      }, g(function() {\n        new Int8Array(1).set({});\n      }));\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/fails\": 51, \"../internals/to-length\": 137, \"../internals/to-object\": 138, \"../internals/to-offset\": 139 }], 231: [function(y, H, C) {\n      var g = y(\"../internals/array-buffer-view-core\"), m = y(\"../internals/species-constructor\"), y = y(\"../internals/fails\"), u = g.aTypedArray, h = g.aTypedArrayConstructor, g = g.exportTypedArrayMethod, f = [].slice;\n      g(\"slice\", function(r, s) {\n        for (var o = f.call(u(this), r, s), r = m(this, this.constructor), i = 0, l = o.length, n = new (h(r))(l); i < l; )\n          n[i] = o[i++];\n        return n;\n      }, y(function() {\n        new Int8Array(1).slice();\n      }));\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/fails\": 51, \"../internals/species-constructor\": 122 }], 232: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/array-iteration\").some, u = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"some\", function(h) {\n        return y(u(this), h, 1 < arguments.length ? arguments[1] : void 0);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/array-iteration\": 19 }], 233: [function(y, H, C) {\n      var y = y(\"../internals/array-buffer-view-core\"), m = y.aTypedArray, y = y.exportTypedArrayMethod, u = [].sort;\n      y(\"sort\", function(h) {\n        return u.call(m(this), h);\n      });\n    }, { \"../internals/array-buffer-view-core\": 12 }], 234: [function(t, H, C) {\n      var m = t(\"../internals/array-buffer-view-core\"), y = t(\"../internals/to-length\"), u = t(\"../internals/to-absolute-index\"), h = t(\"../internals/species-constructor\"), g = m.aTypedArray;\n      (0, m.exportTypedArrayMethod)(\"subarray\", function(i, r) {\n        var s = g(this), o = s.length, i = u(i, o);\n        return new (h(s, s.constructor))(s.buffer, s.byteOffset + i * s.BYTES_PER_ELEMENT, y((r === void 0 ? o : u(r, o)) - i));\n      });\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/species-constructor\": 122, \"../internals/to-absolute-index\": 133, \"../internals/to-length\": 137 }], 235: [function(y, H, C) {\n      var g = y(\"../internals/global\"), m = y(\"../internals/array-buffer-view-core\"), y = y(\"../internals/fails\"), u = g.Int8Array, h = m.aTypedArray, g = m.exportTypedArrayMethod, f = [].toLocaleString, r = [].slice, s = !!u && y(function() {\n        f.call(new u(1));\n      });\n      g(\"toLocaleString\", function() {\n        return f.apply(s ? r.call(h(this)) : h(this), arguments);\n      }, y(function() {\n        return [1, 2].toLocaleString() != new u([1, 2]).toLocaleString();\n      }) || !y(function() {\n        u.prototype.toLocaleString.call([1, 2]);\n      }));\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/fails\": 51, \"../internals/global\": 60 }], 236: [function(y, H, C) {\n      var m = y(\"../internals/array-buffer-view-core\").exportTypedArrayMethod, g = y(\"../internals/fails\"), y = y(\"../internals/global\").Uint8Array, y = y && y.prototype || {}, u = [].toString, h = [].join, g = (g(function() {\n        u.call({});\n      }) && (u = function() {\n        return h.call(this);\n      }), y.toString != u);\n      m(\"toString\", u, g);\n    }, { \"../internals/array-buffer-view-core\": 12, \"../internals/fails\": 51, \"../internals/global\": 60 }], 237: [function(t, H, C) {\n      t(\"../internals/typed-array-constructor\")(\"Uint16\", function(m) {\n        return function(y, u, h) {\n          return m(this, y, u, h);\n        };\n      });\n    }, { \"../internals/typed-array-constructor\": 143 }], 238: [function(t, H, C) {\n      t(\"../internals/typed-array-constructor\")(\"Uint32\", function(m) {\n        return function(y, u, h) {\n          return m(this, y, u, h);\n        };\n      });\n    }, { \"../internals/typed-array-constructor\": 143 }], 239: [function(t, H, C) {\n      t(\"../internals/typed-array-constructor\")(\"Uint8\", function(m) {\n        return function(y, u, h) {\n          return m(this, y, u, h);\n        };\n      });\n    }, { \"../internals/typed-array-constructor\": 143 }], 240: [function(t, H, C) {\n      t(\"../internals/typed-array-constructor\")(\"Uint8\", function(m) {\n        return function(y, u, h) {\n          return m(this, y, u, h);\n        };\n      }, !0);\n    }, { \"../internals/typed-array-constructor\": 143 }], 241: [function(a, j, C) {\n      function m(T) {\n        return function() {\n          return T(this, arguments.length ? arguments[0] : void 0);\n        };\n      }\n      var y, u, h, g, f, c = a(\"../internals/global\"), r = a(\"../internals/redefine-all\"), s = a(\"../internals/internal-metadata\"), o = a(\"../internals/collection\"), i = a(\"../internals/collection-weak\"), l = a(\"../internals/is-object\"), n = a(\"../internals/internal-state\").enforce, a = a(\"../internals/native-weak-map\"), c = !c.ActiveXObject && \"ActiveXObject\" in c, p = Object.isExtensible, j = j.exports = o(\"WeakMap\", m, i);\n      a && c && (y = i.getConstructor(m, \"WeakMap\", !0), s.REQUIRED = !0, o = j.prototype, u = o.delete, h = o.has, g = o.get, f = o.set, r(o, { delete: function(T) {\n        var _;\n        return l(T) && !p(T) ? ((_ = n(this)).frozen || (_.frozen = new y()), u.call(this, T) || _.frozen.delete(T)) : u.call(this, T);\n      }, has: function(T) {\n        var _;\n        return l(T) && !p(T) ? ((_ = n(this)).frozen || (_.frozen = new y()), h.call(this, T) || _.frozen.has(T)) : h.call(this, T);\n      }, get: function(T) {\n        var _;\n        return !l(T) || p(T) || ((_ = n(this)).frozen || (_.frozen = new y()), h.call(this, T)) ? g.call(this, T) : _.frozen.get(T);\n      }, set: function(T, _) {\n        var S;\n        return !l(T) || p(T) || ((S = n(this)).frozen || (S.frozen = new y()), h.call(this, T)) ? f.call(this, T, _) : S.frozen.set(T, _), this;\n      } }));\n    }, { \"../internals/collection\": 32, \"../internals/collection-weak\": 31, \"../internals/global\": 60, \"../internals/internal-metadata\": 70, \"../internals/internal-state\": 71, \"../internals/is-object\": 75, \"../internals/native-weak-map\": 86, \"../internals/redefine-all\": 108 }], 242: [function(t, H, C) {\n      var m, y = t(\"../internals/global\"), u = t(\"../internals/dom-iterables\"), h = t(\"../internals/array-for-each\"), g = t(\"../internals/create-non-enumerable-property\");\n      for (m in u) {\n        var f = y[m], f = f && f.prototype;\n        if (f && f.forEach !== h)\n          try {\n            g(f, \"forEach\", h);\n          } catch {\n            f.forEach = h;\n          }\n      }\n    }, { \"../internals/array-for-each\": 16, \"../internals/create-non-enumerable-property\": 38, \"../internals/dom-iterables\": 45, \"../internals/global\": 60 }], 243: [function(f, H, C) {\n      var m, y = f(\"../internals/global\"), u = f(\"../internals/dom-iterables\"), h = f(\"../modules/es.array.iterator\"), g = f(\"../internals/create-non-enumerable-property\"), f = f(\"../internals/well-known-symbol\"), r = f(\"iterator\"), s = f(\"toStringTag\"), o = h.values;\n      for (m in u) {\n        var i = y[m], l = i && i.prototype;\n        if (l) {\n          if (l[r] !== o)\n            try {\n              g(l, r, o);\n            } catch {\n              l[r] = o;\n            }\n          if (l[s] || g(l, s, m), u[m]) {\n            for (var n in h)\n              if (l[n] !== h[n])\n                try {\n                  g(l, n, h[n]);\n                } catch {\n                  l[n] = h[n];\n                }\n          }\n        }\n      }\n    }, { \"../internals/create-non-enumerable-property\": 38, \"../internals/dom-iterables\": 45, \"../internals/global\": 60, \"../internals/well-known-symbol\": 149, \"../modules/es.array.iterator\": 164 }], 244: [function(J, H, C) {\n      J(\"../modules/es.array.iterator\");\n      function m(te) {\n        try {\n          return decodeURIComponent(te);\n        } catch {\n          return te;\n        }\n      }\n      function y(te) {\n        return D[te];\n      }\n      function u(te) {\n        return encodeURIComponent(te).replace(O, y);\n      }\n      function h(te) {\n        this.entries.length = 0, B(this.entries, te);\n      }\n      function g(te, ce) {\n        if (te < ce)\n          throw TypeError(\"Not enough arguments\");\n      }\n      function f() {\n        c(this, f, F);\n        var te, ce, re, ue, le, K, ae, he, _e = 0 < arguments.length ? arguments[0] : void 0, fe = [];\n        if (G(this, { type: F, entries: fe, updateURL: function() {\n        }, updateSearchParams: h }), _e !== void 0)\n          if (S(_e))\n            if (typeof (te = P(_e)) == \"function\")\n              for (re = (ce = te.call(_e)).next; !(ue = re.call(ce)).done; ) {\n                if ((K = (le = (ue = x(_(ue.value))).next).call(ue)).done || (ae = le.call(ue)).done || !le.call(ue).done)\n                  throw TypeError(\"Expected sequence with length 2\");\n                fe.push({ key: K.value + \"\", value: ae.value + \"\" });\n              }\n            else\n              for (he in _e)\n                p(_e, he) && fe.push({ key: he, value: _e[he] + \"\" });\n          else\n            B(fe, typeof _e == \"string\" ? _e.charAt(0) === \"?\" ? _e.slice(1) : _e : _e + \"\");\n      }\n      var r = J(\"../internals/export\"), L = J(\"../internals/get-built-in\"), s = J(\"../internals/native-url\"), o = J(\"../internals/redefine\"), i = J(\"../internals/redefine-all\"), l = J(\"../internals/set-to-string-tag\"), n = J(\"../internals/create-iterator-constructor\"), a = J(\"../internals/internal-state\"), c = J(\"../internals/an-instance\"), p = J(\"../internals/has\"), j = J(\"../internals/function-bind-context\"), T = J(\"../internals/classof\"), _ = J(\"../internals/an-object\"), S = J(\"../internals/is-object\"), E = J(\"../internals/object-create\"), A = J(\"../internals/create-property-descriptor\"), x = J(\"../internals/get-iterator\"), P = J(\"../internals/get-iterator-method\"), J = J(\"../internals/well-known-symbol\"), M = L(\"fetch\"), R = L(\"Headers\"), L = J(\"iterator\"), F = \"URLSearchParams\", V = F + \"Iterator\", G = a.set, U = a.getterFor(F), W = a.getterFor(V), X = /\\+/g, ne = Array(4), b = function(te) {\n        var ce, re = te.replace(X, \" \"), ue = 4;\n        try {\n          return decodeURIComponent(re);\n        } catch {\n          for (; ue; )\n            re = re.replace((ce = ue--, ne[ce - 1] || (ne[ce - 1] = RegExp(\"((?:%[\\\\da-f]{2}){\" + ce + \"})\", \"gi\"))), m);\n          return re;\n        }\n      }, O = /[!'()~]|%20/g, D = { \"!\": \"%21\", \"'\": \"%27\", \"(\": \"%28\", \")\": \"%29\", \"~\": \"%7E\", \"%20\": \"+\" }, B = function(te, ce) {\n        if (ce)\n          for (var re, ue = ce.split(\"&\"), le = 0; le < ue.length; )\n            (re = ue[le++]).length && (re = re.split(\"=\"), te.push({ key: b(re.shift()), value: b(re.join(\"=\")) }));\n      }, Y = n(function(te, ce) {\n        G(this, { type: V, iterator: x(U(te).entries), kind: ce });\n      }, \"Iterator\", function() {\n        var ce = W(this), te = ce.kind, ce = ce.iterator.next(), re = ce.value;\n        return ce.done || (ce.value = te === \"keys\" ? re.key : te === \"values\" ? re.value : [re.key, re.value]), ce;\n      }), J = f.prototype;\n      i(J, { append: function(te, ce) {\n        g(arguments.length, 2);\n        var re = U(this);\n        re.entries.push({ key: te + \"\", value: ce + \"\" }), re.updateURL();\n      }, delete: function(te) {\n        g(arguments.length, 1);\n        for (var ce = U(this), re = ce.entries, ue = te + \"\", le = 0; le < re.length; )\n          re[le].key === ue ? re.splice(le, 1) : le++;\n        ce.updateURL();\n      }, get: function(te) {\n        g(arguments.length, 1);\n        for (var ce = U(this).entries, re = te + \"\", ue = 0; ue < ce.length; ue++)\n          if (ce[ue].key === re)\n            return ce[ue].value;\n        return null;\n      }, getAll: function(te) {\n        g(arguments.length, 1);\n        for (var ce = U(this).entries, re = te + \"\", ue = [], le = 0; le < ce.length; le++)\n          ce[le].key === re && ue.push(ce[le].value);\n        return ue;\n      }, has: function(te) {\n        g(arguments.length, 1);\n        for (var ce = U(this).entries, re = te + \"\", ue = 0; ue < ce.length; )\n          if (ce[ue++].key === re)\n            return !0;\n        return !1;\n      }, set: function(te, ce) {\n        g(arguments.length, 1);\n        for (var re, ue = U(this), le = ue.entries, K = !1, ae = te + \"\", he = ce + \"\", _e = 0; _e < le.length; _e++)\n          (re = le[_e]).key === ae && (K ? le.splice(_e--, 1) : (K = !0, re.value = he));\n        K || le.push({ key: ae, value: he }), ue.updateURL();\n      }, sort: function() {\n        for (var te, ce, re = U(this), ue = re.entries, le = ue.slice(), K = ue.length = 0; K < le.length; K++) {\n          for (te = le[K], ce = 0; ce < K; ce++)\n            if (ue[ce].key > te.key) {\n              ue.splice(ce, 0, te);\n              break;\n            }\n          ce === K && ue.push(te);\n        }\n        re.updateURL();\n      }, forEach: function(te) {\n        for (var ce, re = U(this).entries, ue = j(te, 1 < arguments.length ? arguments[1] : void 0, 3), le = 0; le < re.length; )\n          ue((ce = re[le++]).value, ce.key, this);\n      }, keys: function() {\n        return new Y(this, \"keys\");\n      }, values: function() {\n        return new Y(this, \"values\");\n      }, entries: function() {\n        return new Y(this, \"entries\");\n      } }, { enumerable: !0 }), o(J, L, J.entries), o(J, \"toString\", function() {\n        for (var te, ce = U(this).entries, re = [], ue = 0; ue < ce.length; )\n          te = ce[ue++], re.push(u(te.key) + \"=\" + u(te.value));\n        return re.join(\"&\");\n      }, { enumerable: !0 }), l(f, F), r({ global: !0, forced: !s }, { URLSearchParams: f }), s || typeof M != \"function\" || typeof R != \"function\" || r({ global: !0, enumerable: !0, forced: !0 }, { fetch: function(le) {\n        var ce, re, ue, le = [le];\n        return 1 < arguments.length && (S(ce = arguments[1]) && (re = ce.body, T(re) === F && ((ue = ce.headers ? new R(ce.headers) : new R()).has(\"content-type\") || ue.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"), ce = E(ce, { body: A(0, String(re)), headers: A(0, ue) }))), le.push(ce)), M.apply(this, le);\n      } }), H.exports = { URLSearchParams: f, getState: U };\n    }, { \"../internals/an-instance\": 9, \"../internals/an-object\": 10, \"../internals/classof\": 29, \"../internals/create-iterator-constructor\": 37, \"../internals/create-property-descriptor\": 39, \"../internals/export\": 50, \"../internals/function-bind-context\": 55, \"../internals/get-built-in\": 57, \"../internals/get-iterator\": 59, \"../internals/get-iterator-method\": 58, \"../internals/has\": 61, \"../internals/internal-state\": 71, \"../internals/is-object\": 75, \"../internals/native-url\": 85, \"../internals/object-create\": 91, \"../internals/redefine\": 109, \"../internals/redefine-all\": 108, \"../internals/set-to-string-tag\": 118, \"../internals/well-known-symbol\": 149, \"../modules/es.array.iterator\": 164 }], 245: [function(x, H, C) {\n      x(\"../modules/es.string.iterator\");\n      function m(ie) {\n        var Oe, Ge, Le, rt;\n        if (typeof ie == \"number\") {\n          for (Oe = [], Ge = 0; Ge < 4; Ge++)\n            Oe.unshift(ie % 256), ie = V(ie / 256);\n          return Oe.join(\".\");\n        }\n        if (typeof ie != \"object\")\n          return ie;\n        for (Oe = \"\", Le = ae(ie), Ge = 0; Ge < 8; Ge++)\n          rt && ie[Ge] === 0 || (rt = rt && !1, Le === Ge ? (Oe += Ge ? \":\" : \"::\", rt = !0) : (Oe += ie[Ge].toString(16), Ge < 7 && (Oe += \":\")));\n        return \"[\" + Oe + \"]\";\n      }\n      function y(ie) {\n        return !ie.host || ie.cannotBeABaseURL || ie.scheme == \"file\";\n      }\n      function u(ie, Oe, Ge, Le) {\n        var rt, Pe, ct, qe = Ge || Re, ut = 0, Ze = \"\", At = !1, Ut = !1, Ct = !1;\n        for (Ge || (ie.scheme = \"\", ie.username = \"\", ie.password = \"\", ie.host = null, ie.port = null, ie.path = [], ie.query = null, ie.fragment = null, ie.cannotBeABaseURL = !1, Oe = Oe.replace(ue, \"\")), Oe = Oe.replace(le, \"\"), rt = T(Oe); ut <= rt.length; ) {\n          switch (Pe = rt[ut], qe) {\n            case Re:\n              if (!Pe || !b.test(Pe)) {\n                if (Ge)\n                  return W;\n                qe = Z;\n                continue;\n              }\n              Ze += Pe.toLowerCase(), qe = we;\n              break;\n            case we:\n              if (Pe && (O.test(Pe) || Pe == \"+\" || Pe == \"-\" || Pe == \".\"))\n                Ze += Pe.toLowerCase();\n              else {\n                if (Pe != \":\") {\n                  if (Ge)\n                    return W;\n                  Ze = \"\", qe = Z, ut = 0;\n                  continue;\n                }\n                if (Ge && (Me(ie) != p(De, Ze) || Ze == \"file\" && (Qe(ie) || ie.port !== null) || ie.scheme == \"file\" && !ie.host))\n                  return;\n                if (ie.scheme = Ze, Ge)\n                  return void (Me(ie) && De[ie.scheme] == ie.port && (ie.port = null));\n                Ze = \"\", ie.scheme == \"file\" ? qe = st : Me(ie) && Le && Le.scheme == ie.scheme ? qe = $ : Me(ie) ? qe = je : rt[ut + 1] == \"/\" ? (qe = q, ut++) : (ie.cannotBeABaseURL = !0, ie.path.push(\"\"), qe = bt);\n              }\n              break;\n            case Z:\n              if (!Le || Le.cannotBeABaseURL && Pe != \"#\")\n                return W;\n              if (Le.cannotBeABaseURL && Pe == \"#\") {\n                ie.scheme = Le.scheme, ie.path = Le.path.slice(), ie.query = Le.query, ie.fragment = \"\", ie.cannotBeABaseURL = !0, qe = Mt;\n                break;\n              }\n              qe = Le.scheme == \"file\" ? st : ee;\n              continue;\n            case $:\n              if (Pe != \"/\" || rt[ut + 1] != \"/\") {\n                qe = ee;\n                continue;\n              }\n              qe = Ce, ut++;\n              break;\n            case q:\n              if (Pe == \"/\") {\n                qe = Fe;\n                break;\n              }\n              qe = ot;\n              continue;\n            case ee:\n              if (ie.scheme = Le.scheme, Pe == f)\n                ie.username = Le.username, ie.password = Le.password, ie.host = Le.host, ie.port = Le.port, ie.path = Le.path.slice(), ie.query = Le.query;\n              else if (Pe == \"/\" || Pe == \"\\\\\" && Me(ie))\n                qe = pe;\n              else if (Pe == \"?\")\n                ie.username = Le.username, ie.password = Le.password, ie.host = Le.host, ie.port = Le.port, ie.path = Le.path.slice(), ie.query = \"\", qe = It;\n              else {\n                if (Pe != \"#\") {\n                  ie.username = Le.username, ie.password = Le.password, ie.host = Le.host, ie.port = Le.port, ie.path = Le.path.slice(), ie.path.pop(), qe = ot;\n                  continue;\n                }\n                ie.username = Le.username, ie.password = Le.password, ie.host = Le.host, ie.port = Le.port, ie.path = Le.path.slice(), ie.query = Le.query, ie.fragment = \"\", qe = Mt;\n              }\n              break;\n            case pe:\n              if (!Me(ie) || Pe != \"/\" && Pe != \"\\\\\") {\n                if (Pe != \"/\") {\n                  ie.username = Le.username, ie.password = Le.password, ie.host = Le.host, ie.port = Le.port, qe = ot;\n                  continue;\n                }\n                qe = Fe;\n              } else\n                qe = Ce;\n              break;\n            case je:\n              if (qe = Ce, Pe != \"/\" || Ze.charAt(ut + 1) != \"/\")\n                continue;\n              ut++;\n              break;\n            case Ce:\n              if (Pe == \"/\" || Pe == \"\\\\\")\n                break;\n              qe = Fe;\n              continue;\n            case Fe:\n              if (Pe == \"@\") {\n                At && (Ze = \"%40\" + Ze);\n                for (var At = !0, Nt = T(Ze), Kt = 0; Kt < Nt.length; Kt++) {\n                  var Xt = Nt[Kt];\n                  Xt != \":\" || Ct ? (Xt = xe(Xt, ge), Ct ? ie.password += Xt : ie.username += Xt) : Ct = !0;\n                }\n                Ze = \"\";\n              } else if (Pe == f || Pe == \"/\" || Pe == \"?\" || Pe == \"#\" || Pe == \"\\\\\" && Me(ie)) {\n                if (At && Ze == \"\")\n                  return U;\n                ut -= T(Ze).length + 1, Ze = \"\", qe = Ne;\n              } else\n                Ze += Pe;\n              break;\n            case Ne:\n            case Be:\n              if (Ge && ie.scheme == \"file\") {\n                qe = Ke;\n                continue;\n              }\n              if (Pe != \":\" || Ut) {\n                if (Pe == f || Pe == \"/\" || Pe == \"?\" || Pe == \"#\" || Pe == \"\\\\\" && Me(ie)) {\n                  if (Me(ie) && Ze == \"\")\n                    return X;\n                  if (Ge && Ze == \"\" && (Qe(ie) || ie.port !== null))\n                    return;\n                  if (ct = K(ie, Ze))\n                    return ct;\n                  if (Ze = \"\", qe = at, Ge)\n                    return;\n                  continue;\n                }\n                Pe == \"[\" ? Ut = !0 : Pe == \"]\" && (Ut = !1), Ze += Pe;\n              } else {\n                if (Ze == \"\")\n                  return X;\n                if (ct = K(ie, Ze))\n                  return ct;\n                if (Ze = \"\", qe = We, Ge == Be)\n                  return;\n              }\n              break;\n            case We:\n              if (!D.test(Pe)) {\n                if (Pe == f || Pe == \"/\" || Pe == \"?\" || Pe == \"#\" || Pe == \"\\\\\" && Me(ie) || Ge) {\n                  if (Ze != \"\") {\n                    var Jt = parseInt(Ze, 10);\n                    if (65535 < Jt)\n                      return ne;\n                    ie.port = Me(ie) && Jt === De[ie.scheme] ? null : Jt, Ze = \"\";\n                  }\n                  if (Ge)\n                    return;\n                  qe = at;\n                  continue;\n                }\n                return ne;\n              }\n              Ze += Pe;\n              break;\n            case st:\n              if (ie.scheme = \"file\", Pe == \"/\" || Pe == \"\\\\\")\n                qe = nt;\n              else {\n                if (!Le || Le.scheme != \"file\") {\n                  qe = ot;\n                  continue;\n                }\n                if (Pe == f)\n                  ie.host = Le.host, ie.path = Le.path.slice(), ie.query = Le.query;\n                else if (Pe == \"?\")\n                  ie.host = Le.host, ie.path = Le.path.slice(), ie.query = \"\", qe = It;\n                else {\n                  if (Pe != \"#\") {\n                    Ve(rt.slice(ut).join(\"\")) || (ie.host = Le.host, ie.path = Le.path.slice(), Xe(ie)), qe = ot;\n                    continue;\n                  }\n                  ie.host = Le.host, ie.path = Le.path.slice(), ie.query = Le.query, ie.fragment = \"\", qe = Mt;\n                }\n              }\n              break;\n            case nt:\n              if (Pe == \"/\" || Pe == \"\\\\\") {\n                qe = Ke;\n                break;\n              }\n              Le && Le.scheme == \"file\" && !Ve(rt.slice(ut).join(\"\")) && (ze(Le.path[0], !0) ? ie.path.push(Le.path[0]) : ie.host = Le.host), qe = ot;\n              continue;\n            case Ke:\n              if (Pe == f || Pe == \"/\" || Pe == \"\\\\\" || Pe == \"?\" || Pe == \"#\") {\n                if (!Ge && ze(Ze))\n                  qe = ot;\n                else {\n                  if (Ze == \"\") {\n                    if (ie.host = \"\", Ge)\n                      return;\n                  } else {\n                    if (ct = K(ie, Ze))\n                      return ct;\n                    if (ie.host == \"localhost\" && (ie.host = \"\"), Ge)\n                      return;\n                    Ze = \"\";\n                  }\n                  qe = at;\n                }\n                continue;\n              }\n              Ze += Pe;\n              break;\n            case at:\n              if (Me(ie)) {\n                if (qe = ot, Pe != \"/\" && Pe != \"\\\\\")\n                  continue;\n              } else if (Ge || Pe != \"?\")\n                if (Ge || Pe != \"#\") {\n                  if (Pe != f && (qe = ot, Pe != \"/\"))\n                    continue;\n                } else\n                  ie.fragment = \"\", qe = Mt;\n              else\n                ie.query = \"\", qe = It;\n              break;\n            case ot:\n              if (Pe == f || Pe == \"/\" || Pe == \"\\\\\" && Me(ie) || !Ge && (Pe == \"?\" || Pe == \"#\")) {\n                if (ve(Ze) ? (Xe(ie), Pe == \"/\" || Pe == \"\\\\\" && Me(ie) || ie.path.push(\"\")) : He(Ze) ? Pe == \"/\" || Pe == \"\\\\\" && Me(ie) || ie.path.push(\"\") : (ie.scheme == \"file\" && !ie.path.length && ze(Ze) && (ie.host && (ie.host = \"\"), Ze = Ze.charAt(0) + \":\"), ie.path.push(Ze)), Ze = \"\", ie.scheme == \"file\" && (Pe == f || Pe == \"?\" || Pe == \"#\"))\n                  for (; 1 < ie.path.length && ie.path[0] === \"\"; )\n                    ie.path.shift();\n                Pe == \"?\" ? (ie.query = \"\", qe = It) : Pe == \"#\" && (ie.fragment = \"\", qe = Mt);\n              } else\n                Ze += xe(Pe, fe);\n              break;\n            case bt:\n              Pe == \"?\" ? (ie.query = \"\", qe = It) : Pe == \"#\" ? (ie.fragment = \"\", qe = Mt) : Pe != f && (ie.path[0] += xe(Pe, he));\n              break;\n            case It:\n              Ge || Pe != \"#\" ? Pe != f && (Pe == \"'\" && Me(ie) ? ie.query += \"%27\" : ie.query += Pe == \"#\" ? \"%23\" : xe(Pe, he)) : (ie.fragment = \"\", qe = Mt);\n              break;\n            case Mt:\n              Pe != f && (ie.fragment += xe(Pe, _e));\n          }\n          ut++;\n        }\n      }\n      function h(Pe) {\n        var Oe, Ge, Le = c(this, h, \"URL\"), rt = 1 < arguments.length ? arguments[1] : void 0, Pe = String(Pe), ct = L(Le, { type: \"URL\" });\n        if (rt !== void 0) {\n          if (rt instanceof h)\n            Oe = F(rt);\n          else if (Ge = u(Oe = {}, String(rt)))\n            throw TypeError(Ge);\n        }\n        if (Ge = u(ct, Pe, null, Oe))\n          throw TypeError(Ge);\n        var qe = ct.searchParams = new M();\n        (rt = R(qe)).updateSearchParams(ct.query), rt.updateURL = function() {\n          ct.query = String(qe) || null;\n        }, i || (Le.href = jt.call(Le), Le.origin = ht.call(Le), Le.protocol = Dt.call(Le), Le.username = Pt.call(Le), Le.password = gt.call(Le), Le.host = Ft.call(Le), Le.hostname = me.call(Le), Le.port = Ue.call(Le), Le.pathname = Ye.call(Le), Le.search = it.call(Le), Le.searchParams = ft.call(Le), Le.hash = pt.call(Le));\n      }\n      function g(ie, Oe) {\n        return { get: ie, set: Oe, configurable: !0, enumerable: !0 };\n      }\n      var f, r, s, o = x(\"../internals/export\"), i = x(\"../internals/descriptors\"), l = x(\"../internals/native-url\"), mt = x(\"../internals/global\"), n = x(\"../internals/object-define-properties\"), a = x(\"../internals/redefine\"), c = x(\"../internals/an-instance\"), p = x(\"../internals/has\"), j = x(\"../internals/object-assign\"), T = x(\"../internals/array-from\"), _ = x(\"../internals/string-multibyte\").codeAt, S = x(\"../internals/string-punycode-to-ascii\"), E = x(\"../internals/set-to-string-tag\"), A = x(\"../modules/web.url-search-params\"), x = x(\"../internals/internal-state\"), P = mt.URL, M = A.URLSearchParams, R = A.getState, L = x.set, F = x.getterFor(\"URL\"), V = Math.floor, G = Math.pow, U = \"Invalid authority\", W = \"Invalid scheme\", X = \"Invalid host\", ne = \"Invalid port\", b = /[A-Za-z]/, O = /[\\d+-.A-Za-z]/, D = /\\d/, B = /^(0x|0X)/, Y = /^[0-7]+$/, J = /^\\d+$/, te = /^[\\dA-Fa-f]+$/, ce = /[\\u0000\\u0009\\u000A\\u000D #%/:?@[\\\\]]/, re = /[\\u0000\\u0009\\u000A\\u000D #/:?@[\\\\]]/, ue = /^[\\u0000-\\u001F ]+|[\\u0000-\\u001F ]+$/g, le = /[\\u0009\\u000A\\u000D]/g, K = function(ie, Oe) {\n        var Ge, Le, rt;\n        if (Oe.charAt(0) == \"[\")\n          return Oe.charAt(Oe.length - 1) == \"]\" && (Ge = function(Pe) {\n            var ct = [0, 0, 0, 0, 0, 0, 0, 0], qe = 0, ut = null, Ze = 0, At, Ut, Ct, Nt, Kt, Xt, Jt, Bt = function() {\n              return Pe.charAt(Ze);\n            };\n            if (Bt() == \":\") {\n              if (Pe.charAt(1) != \":\")\n                return;\n              Ze += 2, qe++, ut = qe;\n            }\n            for (; Bt(); ) {\n              if (qe == 8)\n                return;\n              if (Bt() == \":\") {\n                if (ut !== null)\n                  return;\n                Ze++, qe++, ut = qe;\n                continue;\n              }\n              for (At = Ut = 0; Ut < 4 && te.test(Bt()); )\n                At = At * 16 + parseInt(Bt(), 16), Ze++, Ut++;\n              if (Bt() == \".\") {\n                if (Ut == 0 || (Ze -= Ut, qe > 6))\n                  return;\n                for (Ct = 0; Bt(); ) {\n                  if (Nt = null, Ct > 0)\n                    if (Bt() == \".\" && Ct < 4)\n                      Ze++;\n                    else\n                      return;\n                  if (!D.test(Bt()))\n                    return;\n                  for (; D.test(Bt()); ) {\n                    if (Kt = parseInt(Bt(), 10), Nt === null)\n                      Nt = Kt;\n                    else {\n                      if (Nt == 0)\n                        return;\n                      Nt = Nt * 10 + Kt;\n                    }\n                    if (Nt > 255)\n                      return;\n                    Ze++;\n                  }\n                  ct[qe] = ct[qe] * 256 + Nt, Ct++, (Ct == 2 || Ct == 4) && qe++;\n                }\n                if (Ct != 4)\n                  return;\n                break;\n              } else if (Bt() == \":\") {\n                if (Ze++, !Bt())\n                  return;\n              } else if (Bt())\n                return;\n              ct[qe++] = At;\n            }\n            if (ut !== null)\n              for (Xt = qe - ut, qe = 7; qe != 0 && Xt > 0; )\n                Jt = ct[qe], ct[qe--] = ct[ut + Xt - 1], ct[ut + --Xt] = Jt;\n            else if (qe != 8)\n              return;\n            return ct;\n          }(Oe.slice(1, -1))) ? void (ie.host = Ge) : X;\n        if (Me(ie))\n          return Oe = S(Oe), ce.test(Oe) || (Ge = function(Pe) {\n            var ct = Pe.split(\".\"), qe, ut, Ze, At, Ut, Ct, Nt;\n            if (ct.length && ct[ct.length - 1] == \"\" && ct.pop(), (qe = ct.length) > 4)\n              return Pe;\n            for (ut = [], Ze = 0; Ze < qe; Ze++) {\n              if (At = ct[Ze], At == \"\")\n                return Pe;\n              if (Ut = 10, At.length > 1 && At.charAt(0) == \"0\" && (Ut = B.test(At) ? 16 : 8, At = At.slice(Ut == 8 ? 1 : 2)), At === \"\")\n                Ct = 0;\n              else {\n                if (!(Ut == 10 ? J : Ut == 8 ? Y : te).test(At))\n                  return Pe;\n                Ct = parseInt(At, Ut);\n              }\n              ut.push(Ct);\n            }\n            for (Ze = 0; Ze < qe; Ze++)\n              if (Ct = ut[Ze], Ze == qe - 1) {\n                if (Ct >= G(256, 5 - qe))\n                  return null;\n              } else if (Ct > 255)\n                return null;\n            for (Nt = ut.pop(), Ze = 0; Ze < ut.length; Ze++)\n              Nt += ut[Ze] * G(256, 3 - Ze);\n            return Nt;\n          }(Oe)) === null ? X : void (ie.host = Ge);\n        if (re.test(Oe))\n          return X;\n        for (Ge = \"\", Le = T(Oe), rt = 0; rt < Le.length; rt++)\n          Ge += xe(Le[rt], he);\n        ie.host = Ge;\n      }, ae = function(ie) {\n        for (var Oe = null, Ge = 1, Le = null, rt = 0, Pe = 0; Pe < 8; Pe++)\n          ie[Pe] !== 0 ? (Ge < rt && (Oe = Le, Ge = rt), Le = null, rt = 0) : (Le === null && (Le = Pe), ++rt);\n        return Ge < rt && (Oe = Le, Ge = rt), Oe;\n      }, he = {}, _e = j({}, he, { \" \": 1, '\"': 1, \"<\": 1, \">\": 1, \"`\": 1 }), fe = j({}, _e, { \"#\": 1, \"?\": 1, \"{\": 1, \"}\": 1 }), ge = j({}, fe, { \"/\": 1, \":\": 1, \";\": 1, \"=\": 1, \"@\": 1, \"[\": 1, \"\\\\\": 1, \"]\": 1, \"^\": 1, \"|\": 1 }), xe = function(ie, Oe) {\n        var Ge = _(ie, 0);\n        return 32 < Ge && Ge < 127 && !p(Oe, ie) ? ie : encodeURIComponent(ie);\n      }, De = { ftp: 21, file: null, http: 80, https: 443, ws: 80, wss: 443 }, Me = function(ie) {\n        return p(De, ie.scheme);\n      }, Qe = function(ie) {\n        return ie.username != \"\" || ie.password != \"\";\n      }, ze = function(ie, Oe) {\n        return ie.length == 2 && b.test(ie.charAt(0)) && ((ie = ie.charAt(1)) == \":\" || !Oe && ie == \"|\");\n      }, Ve = function(ie) {\n        return 1 < ie.length && ze(ie.slice(0, 2)) && (ie.length == 2 || (ie = ie.charAt(2)) === \"/\" || ie === \"\\\\\" || ie === \"?\" || ie === \"#\");\n      }, Xe = function(ie) {\n        var Oe = ie.path, Ge = Oe.length;\n        !Ge || ie.scheme == \"file\" && Ge == 1 && ze(Oe[0], !0) || Oe.pop();\n      }, He = function(ie) {\n        return ie === \".\" || ie.toLowerCase() === \"%2e\";\n      }, ve = function(ie) {\n        return (ie = ie.toLowerCase()) === \"..\" || ie === \"%2e.\" || ie === \".%2e\" || ie === \"%2e%2e\";\n      }, Re = {}, we = {}, Z = {}, $ = {}, q = {}, ee = {}, pe = {}, je = {}, Ce = {}, Fe = {}, Ne = {}, Be = {}, We = {}, st = {}, nt = {}, Ke = {}, at = {}, ot = {}, bt = {}, It = {}, Mt = {}, mt = h.prototype, jt = function() {\n        var ie = F(this), Oe = ie.scheme, Ge = ie.username, Le = ie.password, rt = ie.host, Pe = ie.port, ct = ie.path, qe = ie.query, ut = ie.fragment, Ze = Oe + \":\";\n        return rt !== null ? (Ze += \"//\", Qe(ie) && (Ze += Ge + (Le ? \":\" + Le : \"\") + \"@\"), Ze += m(rt), Pe !== null && (Ze += \":\" + Pe)) : Oe == \"file\" && (Ze += \"//\"), Ze += ie.cannotBeABaseURL ? ct[0] : ct.length ? \"/\" + ct.join(\"/\") : \"\", qe !== null && (Ze += \"?\" + qe), ut !== null && (Ze += \"#\" + ut), Ze;\n      }, ht = function() {\n        var ie = F(this), Oe = ie.scheme, Ge = ie.port;\n        if (Oe == \"blob\")\n          try {\n            return new URL(Oe.path[0]).origin;\n          } catch {\n            return \"null\";\n          }\n        return Oe != \"file\" && Me(ie) ? Oe + \"://\" + m(ie.host) + (Ge !== null ? \":\" + Ge : \"\") : \"null\";\n      }, Dt = function() {\n        return F(this).scheme + \":\";\n      }, Pt = function() {\n        return F(this).username;\n      }, gt = function() {\n        return F(this).password;\n      }, Ft = function() {\n        var Oe = F(this), ie = Oe.host, Oe = Oe.port;\n        return ie === null ? \"\" : Oe === null ? m(ie) : m(ie) + \":\" + Oe;\n      }, me = function() {\n        var ie = F(this).host;\n        return ie === null ? \"\" : m(ie);\n      }, Ue = function() {\n        var ie = F(this).port;\n        return ie === null ? \"\" : String(ie);\n      }, Ye = function() {\n        var ie = F(this), Oe = ie.path;\n        return ie.cannotBeABaseURL ? Oe[0] : Oe.length ? \"/\" + Oe.join(\"/\") : \"\";\n      }, it = function() {\n        var ie = F(this).query;\n        return ie ? \"?\" + ie : \"\";\n      }, ft = function() {\n        return F(this).searchParams;\n      }, pt = function() {\n        var ie = F(this).fragment;\n        return ie ? \"#\" + ie : \"\";\n      };\n      i && n(mt, { href: g(jt, function(Ge) {\n        var Oe = F(this), Ge = String(Ge), Ge = u(Oe, Ge);\n        if (Ge)\n          throw TypeError(Ge);\n        R(Oe.searchParams).updateSearchParams(Oe.query);\n      }), origin: g(ht), protocol: g(Dt, function(ie) {\n        var Oe = F(this);\n        u(Oe, String(ie) + \":\", Re);\n      }), username: g(Pt, function(ie) {\n        var Oe = F(this), Ge = T(String(ie));\n        if (!y(Oe)) {\n          Oe.username = \"\";\n          for (var Le = 0; Le < Ge.length; Le++)\n            Oe.username += xe(Ge[Le], ge);\n        }\n      }), password: g(gt, function(ie) {\n        var Oe = F(this), Ge = T(String(ie));\n        if (!y(Oe)) {\n          Oe.password = \"\";\n          for (var Le = 0; Le < Ge.length; Le++)\n            Oe.password += xe(Ge[Le], ge);\n        }\n      }), host: g(Ft, function(ie) {\n        var Oe = F(this);\n        Oe.cannotBeABaseURL || u(Oe, String(ie), Ne);\n      }), hostname: g(me, function(ie) {\n        var Oe = F(this);\n        Oe.cannotBeABaseURL || u(Oe, String(ie), Be);\n      }), port: g(Ue, function(ie) {\n        var Oe = F(this);\n        y(Oe) || ((ie = String(ie)) == \"\" ? Oe.port = null : u(Oe, ie, We));\n      }), pathname: g(Ye, function(ie) {\n        var Oe = F(this);\n        Oe.cannotBeABaseURL || (Oe.path = [], u(Oe, ie + \"\", at));\n      }), search: g(it, function(ie) {\n        var Oe = F(this);\n        (ie = String(ie)) == \"\" ? Oe.query = null : (ie.charAt(0) == \"?\" && (ie = ie.slice(1)), Oe.query = \"\", u(Oe, ie, It)), R(Oe.searchParams).updateSearchParams(Oe.query);\n      }), searchParams: g(ft), hash: g(pt, function(ie) {\n        var Oe = F(this);\n        (ie = String(ie)) == \"\" ? Oe.fragment = null : (ie.charAt(0) == \"#\" && (ie = ie.slice(1)), Oe.fragment = \"\", u(Oe, ie, Mt));\n      }) }), a(mt, \"toJSON\", function() {\n        return jt.call(this);\n      }, { enumerable: !0 }), a(mt, \"toString\", function() {\n        return jt.call(this);\n      }, { enumerable: !0 }), P && (r = P.createObjectURL, s = P.revokeObjectURL, r && a(h, \"createObjectURL\", function(ie) {\n        return r.apply(P, arguments);\n      }), s && a(h, \"revokeObjectURL\", function(ie) {\n        return s.apply(P, arguments);\n      })), E(h, \"URL\"), o({ global: !0, forced: !l, sham: !i }, { URL: h });\n    }, { \"../internals/an-instance\": 9, \"../internals/array-from\": 17, \"../internals/descriptors\": 43, \"../internals/export\": 50, \"../internals/global\": 60, \"../internals/has\": 61, \"../internals/internal-state\": 71, \"../internals/native-url\": 85, \"../internals/object-assign\": 90, \"../internals/object-define-properties\": 92, \"../internals/redefine\": 109, \"../internals/set-to-string-tag\": 118, \"../internals/string-multibyte\": 124, \"../internals/string-punycode-to-ascii\": 127, \"../modules/es.string.iterator\": 197, \"../modules/web.url-search-params\": 244 }], 246: [function(t, H, C) {\n      H.exports = t(\"./\").polyfill();\n    }, { \"./\": 247 }], 247: [function(t, H, C) {\n      (function(m, y) {\n        var u, h;\n        u = this, h = function() {\n          function g(K) {\n            return typeof K == \"function\";\n          }\n          var f = Array.isArray || function(K) {\n            return Object.prototype.toString.call(K) === \"[object Array]\";\n          }, r = 0, s = void 0, o = void 0, i = function(K, ae) {\n            j[r] = K, j[r + 1] = ae, (r += 2) === 2 && (o ? o(T) : M());\n          }, l = typeof window < \"u\" ? window : void 0, n = l || {}, n = n.MutationObserver || n.WebKitMutationObserver, a = typeof self > \"u\" && m !== void 0 && {}.toString.call(m) === \"[object process]\", c = typeof Uint8ClampedArray < \"u\" && typeof importScripts < \"u\" && typeof MessageChannel < \"u\";\n          function p() {\n            var K = setTimeout;\n            return function() {\n              return K(T, 1);\n            };\n          }\n          var j = new Array(1e3);\n          function T() {\n            for (var K = 0; K < r; K += 2)\n              (0, j[K])(j[K + 1]), j[K] = void 0, j[K + 1] = void 0;\n            r = 0;\n          }\n          function _() {\n            try {\n              var K = Function(\"return this\")().require(\"vertx\");\n              return (s = K.runOnLoop || K.runOnContext) !== void 0 ? function() {\n                s(T);\n              } : p();\n            } catch {\n              return p();\n            }\n          }\n          var S, E, A, M = void 0;\n          function x(K, ae) {\n            var he, _e = this, fe = new this.constructor(L), ge = (fe[R] === void 0 && te(fe), _e._state);\n            return ge ? (he = arguments[ge - 1], i(function() {\n              return Y(ge, fe, he, _e._result);\n            })) : D(_e, fe, K, ae), fe;\n          }\n          function P(K) {\n            var ae;\n            return K && typeof K == \"object\" && K.constructor === this ? K : (X(ae = new this(L), K), ae);\n          }\n          var M = a ? function() {\n            return m.nextTick(T);\n          } : n ? (E = 0, a = new n(T), A = document.createTextNode(\"\"), a.observe(A, { characterData: !0 }), function() {\n            A.data = E = ++E % 2;\n          }) : c ? ((S = new MessageChannel()).port1.onmessage = T, function() {\n            return S.port2.postMessage(0);\n          }) : (l === void 0 && typeof t == \"function\" ? _ : p)(), R = Math.random().toString(36).substring(2);\n          function L() {\n          }\n          var F = void 0, V = 1, G = 2;\n          function U(K, ae, he) {\n            i(function(_e) {\n              var fe = !1, ge = function(xe, De, Me, Qe) {\n                try {\n                  xe.call(De, Me, Qe);\n                } catch (ze) {\n                  return ze;\n                }\n              }(he, ae, function(xe) {\n                fe || (fe = !0, (ae !== xe ? X : b)(_e, xe));\n              }, function(xe) {\n                fe || (fe = !0, O(_e, xe));\n              }, _e._label);\n              !fe && ge && (fe = !0, O(_e, ge));\n            }, K);\n          }\n          function W(K, ae, he) {\n            var _e, fe;\n            ae.constructor === K.constructor && he === x && ae.constructor.resolve === P ? (_e = K, (fe = ae)._state === V ? b(_e, fe._result) : fe._state === G ? O(_e, fe._result) : D(fe, void 0, function(ge) {\n              return X(_e, ge);\n            }, function(ge) {\n              return O(_e, ge);\n            })) : he !== void 0 && g(he) ? U(K, ae, he) : b(K, ae);\n          }\n          function X(K, ae) {\n            if (K === ae)\n              O(K, new TypeError(\"You cannot resolve a promise with itself\"));\n            else if (he = typeof ae, ae === null || he != \"object\" && he != \"function\")\n              b(K, ae);\n            else {\n              he = void 0;\n              try {\n                he = ae.then;\n              } catch (_e) {\n                return void O(K, _e);\n              }\n              W(K, ae, he);\n            }\n            var he;\n          }\n          function ne(K) {\n            K._onerror && K._onerror(K._result), B(K);\n          }\n          function b(K, ae) {\n            K._state === F && (K._result = ae, K._state = V, K._subscribers.length !== 0 && i(B, K));\n          }\n          function O(K, ae) {\n            K._state === F && (K._state = G, K._result = ae, i(ne, K));\n          }\n          function D(K, ae, he, _e) {\n            var fe = K._subscribers, ge = fe.length;\n            K._onerror = null, fe[ge] = ae, fe[ge + V] = he, fe[ge + G] = _e, ge === 0 && K._state && i(B, K);\n          }\n          function B(K) {\n            var ae = K._subscribers, he = K._state;\n            if (ae.length !== 0) {\n              for (var _e, fe = void 0, ge = K._result, xe = 0; xe < ae.length; xe += 3)\n                _e = ae[xe], fe = ae[xe + he], _e ? Y(he, _e, fe, ge) : fe(ge);\n              K._subscribers.length = 0;\n            }\n          }\n          function Y(K, ae, he, _e) {\n            var fe = g(he), ge = void 0, xe = void 0, De = !0;\n            if (fe) {\n              try {\n                ge = he(_e);\n              } catch (Me) {\n                De = !1, xe = Me;\n              }\n              if (ae === ge)\n                return void O(ae, new TypeError(\"A promises callback cannot return that same promise.\"));\n            } else\n              ge = _e;\n            ae._state === F && (fe && De ? X(ae, ge) : De === !1 ? O(ae, xe) : K === V ? b(ae, ge) : K === G && O(ae, ge));\n          }\n          var J = 0;\n          function te(K) {\n            K[R] = J++, K._state = void 0, K._result = void 0, K._subscribers = [];\n          }\n          re.prototype._enumerate = function(K) {\n            for (var ae = 0; this._state === F && ae < K.length; ae++)\n              this._eachEntry(K[ae], ae);\n          }, re.prototype._eachEntry = function(K, ae) {\n            var he = this._instanceConstructor, _e = he.resolve;\n            if (_e === P) {\n              var fe, ge = void 0, xe = void 0, De = !1;\n              try {\n                ge = K.then;\n              } catch (Me) {\n                De = !0, xe = Me;\n              }\n              ge === x && K._state !== F ? this._settledAt(K._state, ae, K._result) : typeof ge != \"function\" ? (this._remaining--, this._result[ae] = K) : he === ue ? (fe = new he(L), De ? O(fe, xe) : W(fe, K, ge), this._willSettleAt(fe, ae)) : this._willSettleAt(new he(function(Me) {\n                return Me(K);\n              }), ae);\n            } else\n              this._willSettleAt(_e(K), ae);\n          }, re.prototype._settledAt = function(K, ae, he) {\n            var _e = this.promise;\n            _e._state === F && (this._remaining--, K === G ? O(_e, he) : this._result[ae] = he), this._remaining === 0 && b(_e, this._result);\n          }, re.prototype._willSettleAt = function(K, ae) {\n            var he = this;\n            D(K, void 0, function(_e) {\n              return he._settledAt(V, ae, _e);\n            }, function(_e) {\n              return he._settledAt(G, ae, _e);\n            });\n          };\n          var ce = re;\n          function re(K, ae) {\n            this._instanceConstructor = K, this.promise = new K(L), this.promise[R] || te(this.promise), f(ae) ? (this.length = ae.length, this._remaining = ae.length, this._result = new Array(this.length), this.length !== 0 && (this.length = this.length || 0, this._enumerate(ae), this._remaining !== 0) || b(this.promise, this._result)) : O(this.promise, new Error(\"Array Methods must be provided an Array\"));\n          }\n          le.prototype.catch = function(K) {\n            return this.then(null, K);\n          }, le.prototype.finally = function(K) {\n            var ae = this.constructor;\n            return g(K) ? this.then(function(he) {\n              return ae.resolve(K()).then(function() {\n                return he;\n              });\n            }, function(he) {\n              return ae.resolve(K()).then(function() {\n                throw he;\n              });\n            }) : this.then(K, K);\n          };\n          var ue = le;\n          function le(K) {\n            if (this[R] = J++, this._result = this._state = void 0, this._subscribers = [], L !== K) {\n              if (typeof K != \"function\")\n                throw new TypeError(\"You must pass a resolver function as the first argument to the promise constructor\");\n              if (!(this instanceof le))\n                throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n              var ae = this;\n              try {\n                K(function(he) {\n                  X(ae, he);\n                }, function(he) {\n                  O(ae, he);\n                });\n              } catch (he) {\n                O(ae, he);\n              }\n            }\n          }\n          return ue.prototype.then = x, ue.all = function(K) {\n            return new ce(this, K).promise;\n          }, ue.race = function(K) {\n            var ae = this;\n            return f(K) ? new ae(function(he, _e) {\n              for (var fe = K.length, ge = 0; ge < fe; ge++)\n                ae.resolve(K[ge]).then(he, _e);\n            }) : new ae(function(he, _e) {\n              return _e(new TypeError(\"You must pass an array to race.\"));\n            });\n          }, ue.resolve = P, ue.reject = function(K) {\n            var ae = new this(L);\n            return O(ae, K), ae;\n          }, ue._setScheduler = function(K) {\n            o = K;\n          }, ue._setAsap = function(K) {\n            i = K;\n          }, ue._asap = i, ue.polyfill = function() {\n            var K = void 0;\n            if (y !== void 0)\n              K = y;\n            else if (typeof self < \"u\")\n              K = self;\n            else\n              try {\n                K = Function(\"return this\")();\n              } catch {\n                throw new Error(\"polyfill failed because global object is unavailable in this environment\");\n              }\n            var ae = K.Promise;\n            if (ae) {\n              var he = null;\n              try {\n                he = Object.prototype.toString.call(ae.resolve());\n              } catch {\n              }\n              if (he === \"[object Promise]\" && !ae.cast)\n                return;\n            }\n            K.Promise = ue;\n          }, ue.Promise = ue;\n        }, typeof C == \"object\" && H !== void 0 ? H.exports = h() : u.ES6Promise = h();\n      }).call(this, t(\"_process\"), typeof _r < \"u\" ? _r : typeof self < \"u\" ? self : typeof window < \"u\" ? window : {});\n    }, { _process: 256 }], 248: [function(t, H, C) {\n      var m, y;\n      m = this, y = function(u, h) {\n        var g = 5e3, f = \"callback\";\n        function r(o) {\n          try {\n            delete window[o];\n          } catch {\n            window[o] = void 0;\n          }\n        }\n        function s(o) {\n          o = document.getElementById(o), o && document.getElementsByTagName(\"head\")[0].removeChild(o);\n        }\n        h.exports = function(o) {\n          var i = arguments.length <= 1 || arguments[1] === void 0 ? {} : arguments[1], l = o, n = i.timeout || g, a = i.jsonpCallback || f, c = void 0;\n          return new Promise(function(p, j) {\n            var T = i.jsonpCallbackFunction || \"jsonp_\" + Date.now() + \"_\" + Math.ceil(1e5 * Math.random()), _ = a + \"_\" + T, S = (window[T] = function(E) {\n              p({ ok: !0, json: function() {\n                return Promise.resolve(E);\n              } }), c && clearTimeout(c), s(_), r(T);\n            }, l += l.indexOf(\"?\") === -1 ? \"?\" : \"&\", document.createElement(\"script\"));\n            S.setAttribute(\"src\", \"\" + l + a + \"=\" + T), i.charset && S.setAttribute(\"charset\", i.charset), S.id = _, document.getElementsByTagName(\"head\")[0].appendChild(S), c = setTimeout(function() {\n              j(new Error(\"JSONP request to \" + o + \" timed out\")), r(T), s(_), window[T] = function() {\n                r(T);\n              };\n            }, n), S.onerror = function() {\n              j(new Error(\"JSONP request to \" + o + \" failed\")), r(T), s(_), c && clearTimeout(c);\n            };\n          });\n        };\n      }, C !== void 0 && H !== void 0 ? y(0, H) : (y(y = { exports: {} }, y), m.fetchJsonp = y.exports);\n    }, {}], 249: [function(t, H, C) {\n      var m = function(y) {\n        var u, h, g, f, r, s, o, i, l, n, a;\n        if (!(y === void 0 || typeof navigator < \"u\" && /MSIE [1-9]\\./.test(navigator.userAgent)))\n          return a = y.document, u = function() {\n            return y.URL || y.webkitURL || y;\n          }, h = a.createElementNS(\"http://www.w3.org/1999/xhtml\", \"a\"), g = \"download\" in h, f = /constructor/i.test(y.HTMLElement) || y.safari, r = /CriOS\\/[\\d]+/.test(navigator.userAgent), s = function(c) {\n            (y.setImmediate || y.setTimeout)(function() {\n              throw c;\n            }, 0);\n          }, o = 4e4, i = function(c) {\n            setTimeout(function() {\n              typeof c == \"string\" ? u().revokeObjectURL(c) : c.remove();\n            }, o);\n          }, l = function(c) {\n            return /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(c.type) ? new Blob([\"\\uFEFF\", c], { type: c.type }) : c;\n          }, a = (n = function(c, p, E) {\n            E || (c = l(c));\n            var T, _, S = this, E = c.type === \"application/octet-stream\", A = function() {\n              for (var x = S, P = \"writestart progress write writeend\".split(\" \"), M = void 0, R = (P = [].concat(P)).length; R--; ) {\n                var L = x[\"on\" + P[R]];\n                if (typeof L == \"function\")\n                  try {\n                    L.call(x, M || x);\n                  } catch (F) {\n                    s(F);\n                  }\n              }\n            };\n            S.readyState = S.INIT, g ? (T = u().createObjectURL(c), setTimeout(function() {\n              var x, P;\n              h.href = T, h.download = p, x = h, P = new MouseEvent(\"click\"), x.dispatchEvent(P), A(), i(T), S.readyState = S.DONE;\n            })) : (r || E && f) && y.FileReader ? ((_ = new FileReader()).onloadend = function() {\n              var x = r ? _.result : _.result.replace(/^data:[^;]*;/, \"data:attachment/file;\");\n              y.open(x, \"_blank\") || (y.location.href = x), x = void 0, S.readyState = S.DONE, A();\n            }, _.readAsDataURL(c), S.readyState = S.INIT) : (T = T || u().createObjectURL(c), !E && y.open(T, \"_blank\") || (y.location.href = T), S.readyState = S.DONE, A(), i(T));\n          }).prototype, typeof navigator < \"u\" && navigator.msSaveOrOpenBlob ? function(c, p, j) {\n            return p = p || c.name || \"download\", j || (c = l(c)), navigator.msSaveOrOpenBlob(c, p);\n          } : (a.abort = function() {\n          }, a.readyState = a.INIT = 0, a.WRITING = 1, a.DONE = 2, a.error = a.onwritestart = a.onprogress = a.onwrite = a.onabort = a.onerror = a.onwriteend = null, function(c, p, j) {\n            return new n(c, p || c.name || \"download\", j);\n          });\n      }(typeof self < \"u\" && self || typeof window < \"u\" && window || this.content);\n      H !== void 0 && H.exports ? H.exports.saveAs = m : Vt != null;\n    }, {}], 250: [function(t, H, C) {\n      var m, y = Object.defineProperty, u = (y(C, \"__esModule\", { value: !0 }), C), h = { GIFEncoder: () => A, applyPalette: () => function(F, V, G = \"rgb565\") {\n        if (!F || !F.buffer)\n          throw new Error(\"quantize() expected RGBA Uint8Array data\");\n        if (!(F instanceof Uint8Array || F instanceof Uint8ClampedArray))\n          throw new Error(\"quantize() expected RGBA Uint8Array data\");\n        if (256 < V.length)\n          throw new Error(\"applyPalette() only works with 256 colors or less\");\n        const U = new Uint32Array(F.buffer), W = U.length, X = G === \"rgb444\" ? 4096 : 65536, ne = new Uint8Array(W), b = new Array(X);\n        if (G === \"rgba4444\")\n          for (let le = 0; le < W; le++) {\n            var Y = U[le], O = Y >> 24 & 255, D = Y >> 16 & 255, B = Y >> 8 & 255, Y = 255 & Y, J = i(Y, B, D, O), J = J in b ? b[J] : b[J] = function(K, ae, he, _e, fe) {\n              let ge = 0, xe = 1e100;\n              for (let ze = 0; ze < fe.length; ze++) {\n                var De, Me = fe[ze], Qe = _(Me[3] - _e);\n                Qe > xe || (De = Me[0], (Qe += _(De - K)) > xe || (De = Me[1], (Qe += _(De - ae)) > xe || (De = Me[2], (Qe += _(De - he)) > xe || (xe = Qe, ge = ze))));\n              }\n              return ge;\n            }(Y, B, D, O, V);\n            ne[le] = J;\n          }\n        else {\n          const le = G === \"rgb444\" ? l : o;\n          for (let K = 0; K < W; K++) {\n            var re = U[K], te = re >> 16 & 255, ce = re >> 8 & 255, re = 255 & re, ue = le(re, ce, te), ue = ue in b ? b[ue] : b[ue] = function(ae, he, _e, fe) {\n              let ge = 0, xe = 1e100;\n              for (let ze = 0; ze < fe.length; ze++) {\n                var De, Me = fe[ze], Qe = _(Me[0] - ae);\n                Qe > xe || (De = Me[1], (Qe += _(De - he)) > xe || (De = Me[2], (Qe += _(De - _e)) > xe || (xe = Qe, ge = ze)));\n              }\n              return ge;\n            }(re, ce, te, V);\n            ne[K] = ue;\n          }\n        }\n        return ne;\n      }, default: () => L, nearestColor: () => function(F, V, G = j) {\n        return F[S(F, V, G)];\n      }, nearestColorIndex: () => S, nearestColorIndexWithDistance: () => E, prequantize: () => function(F, { roundRGB: V = 5, roundAlpha: G = 10, oneBitAlpha: U = null } = {}) {\n        const W = new Uint32Array(F.buffer);\n        for (let D = 0; D < W.length; D++) {\n          var O = W[D];\n          let B = O >> 24 & 255;\n          var X, ne = O >> 16 & 255, b = O >> 8 & 255, O = 255 & O;\n          B = T(B, G), U && (X = typeof U == \"number\" ? U : 127, B = B <= X ? 0 : 255), O = T(O, V), b = T(b, V), ne = T(ne, V), W[D] = B << 24 | ne << 16 | b << 8 | O << 0;\n        }\n      }, quantize: () => function(F, V, G = {}) {\n        var { format: U = \"rgb565\", clearAlpha: W = !0, clearAlphaColor: X = 0, clearAlphaThreshold: ne = 0, oneBitAlpha: b = !1 } = G;\n        if (!F || !F.buffer)\n          throw new Error(\"quantize() expected RGBA Uint8Array data\");\n        if (!(F instanceof Uint8Array || F instanceof Uint8ClampedArray))\n          throw new Error(\"quantize() expected RGBA Uint8Array data\");\n        F = new Uint32Array(F.buffer);\n        let O = G.useSqrt !== !1;\n        const D = U === \"rgba4444\", B = function(Ve, Xe) {\n          const He = Xe === \"rgb444\" ? 4096 : 65536, ve = new Array(He), Re = Ve.length;\n          if (Xe === \"rgba4444\")\n            for (let nt = 0; nt < Re; ++nt) {\n              var q = Ve[nt], we = q >> 24 & 255, Z = q >> 16 & 255, $ = q >> 8 & 255, q = 255 & q, ee = i(q, $, Z, we);\n              let Ke = ee in ve ? ve[ee] : ve[ee] = p();\n              Ke.rc += q, Ke.gc += $, Ke.bc += Z, Ke.ac += we, Ke.cnt++;\n            }\n          else if (Xe === \"rgb444\")\n            for (let nt = 0; nt < Re; ++nt) {\n              var Ce = Ve[nt], pe = Ce >> 16 & 255, je = Ce >> 8 & 255, Ce = 255 & Ce, Fe = l(Ce, je, pe);\n              let Ke = Fe in ve ? ve[Fe] : ve[Fe] = p();\n              Ke.rc += Ce, Ke.gc += je, Ke.bc += pe, Ke.cnt++;\n            }\n          else\n            for (let nt = 0; nt < Re; ++nt) {\n              var We = Ve[nt], Ne = We >> 16 & 255, Be = We >> 8 & 255, We = 255 & We, st = o(We, Be, Ne);\n              let Ke = st in ve ? ve[st] : ve[st] = p();\n              Ke.rc += We, Ke.gc += Be, Ke.bc += Ne, Ke.cnt++;\n            }\n          return ve;\n        }(F, U), Y = B.length, J = Y - 1, te = new Uint32Array(Y + 1);\n        for (var ce = 0, re = 0; re < Y; ++re) {\n          const Ve = B[re];\n          Ve != null && (Me = 1 / Ve.cnt, D && (Ve.ac *= Me), Ve.rc *= Me, Ve.gc *= Me, Ve.bc *= Me, B[ce++] = Ve);\n        }\n        a(V) / ce < 0.022 && (O = !1);\n        for (var ue, le, K, re = 0; re < ce - 1; ++re)\n          B[re].fw = re + 1, B[re + 1].bk = re, O && (B[re].cnt = Math.sqrt(B[re].cnt));\n        for (O && (B[re].cnt = Math.sqrt(B[re].cnt)), re = 0; re < ce; ++re) {\n          c(B, re);\n          var ae = B[re].err;\n          for (le = ++te[0]; 1 < le && (K = le >> 1, !(B[ue = te[K]].err <= ae)); le = K)\n            te[le] = ue;\n          te[le] = re;\n        }\n        var he, _e = ce - V;\n        for (re = 0; re < _e; ) {\n          for (; ; ) {\n            var fe = te[1];\n            if ((he = B[fe]).tm >= he.mtm && B[he.nn].mtm <= he.tm)\n              break;\n            for (he.mtm == J ? fe = te[1] = te[te[0]--] : (c(B, fe), he.tm = re), ae = B[fe].err, le = 1; (K = le + le) <= te[0] && (K < te[0] && B[te[K]].err > B[te[K + 1]].err && K++, !(ae <= B[ue = te[K]].err)); le = K)\n              te[le] = ue;\n            te[le] = fe;\n          }\n          var ge = B[he.nn], xe = he.cnt, De = ge.cnt, Me = 1 / (xe + De);\n          D && (he.ac = Me * (xe * he.ac + De * ge.ac)), he.rc = Me * (xe * he.rc + De * ge.rc), he.gc = Me * (xe * he.gc + De * ge.gc), he.bc = Me * (xe * he.bc + De * ge.bc), he.cnt += ge.cnt, he.mtm = ++re, B[ge.bk].fw = ge.fw, B[ge.fw].bk = ge.bk, ge.mtm = J;\n        }\n        let Qe = [];\n        for (re = 0; ; 0) {\n          let Ve = n(Math.round(B[re].rc), 0, 255), Xe = n(Math.round(B[re].gc), 0, 255), He = n(Math.round(B[re].bc), 0, 255), ve = 255;\n          D && (ve = n(Math.round(B[re].ac), 0, 255), b && (ze = typeof b == \"number\" ? b : 127, ve = ve <= ze ? 0 : 255), W && ve <= ne && (Ve = Xe = He = X, ve = 0));\n          var ze = D ? [Ve, Xe, He, ve] : [Ve, Xe, He];\n          if (function(Re, we) {\n            for (let q = 0; q < Re.length; q++) {\n              var $ = Re[q], Z = $[0] === we[0] && $[1] === we[1] && $[2] === we[2], $ = !(4 <= $.length && 4 <= we.length) || $[3] === we[3];\n              if (Z && $)\n                return !0;\n            }\n            return !1;\n          }(Qe, ze) || Qe.push(ze), (re = B[re].fw) == 0)\n            break;\n        }\n        return Qe;\n      }, snapColorsToPalette: () => function(F, V, G = 5) {\n        if (F.length && V.length) {\n          var U = F.map((O) => O.slice(0, 3)), W = G * G, X = F[0].length;\n          for (let O = 0; O < V.length; O++) {\n            let D = V[O];\n            D = D.length < X ? [D[0], D[1], D[2], 255] : D.length > X ? D.slice(0, 3) : D.slice();\n            var b = E(U, D.slice(0, 3), j), ne = b[0], b = b[1];\n            0 < b && b <= W && (F[ne] = D);\n          }\n        }\n      } };\n      for (m in h)\n        y(u, m, { get: h[m], enumerable: !0 });\n      var g = { signature: \"GIF\", version: \"89a\", trailer: 59, extensionIntroducer: 33, applicationExtensionLabel: 255, graphicControlExtensionLabel: 249, imageSeparator: 44, signatureSize: 3, versionSize: 3, globalColorTableFlagMask: 128, colorResolutionMask: 112, sortFlagMask: 8, globalColorTableSizeMask: 7, applicationIdentifierSize: 8, applicationAuthCodeSize: 3, disposalMethodMask: 28, userInputFlagMask: 2, transparentColorFlagMask: 1, localColorTableFlagMask: 128, interlaceFlagMask: 64, idSortFlagMask: 32, localColorTableSizeMask: 7 };\n      function f(F = 256) {\n        let V = 0, G = new Uint8Array(F);\n        return { get buffer() {\n          return G.buffer;\n        }, reset() {\n          V = 0;\n        }, bytesView() {\n          return G.subarray(0, V);\n        }, bytes() {\n          return G.slice(0, V);\n        }, writeByte(W) {\n          U(V + 1), G[V] = W, V++;\n        }, writeBytes(W, X = 0, ne = W.length) {\n          U(V + ne);\n          for (let b = 0; b < ne; b++)\n            G[V++] = W[b + X];\n        }, writeBytesView(W, X = 0, ne = W.byteLength) {\n          U(V + ne), G.set(W.subarray(X, X + ne), V), V += ne;\n        } };\n        function U(W) {\n          var X = G.length;\n          if (!(W <= X)) {\n            W = Math.max(W, X * (X < 1048576 ? 2 : 1.125) >>> 0), X != 0 && (W = Math.max(W, 256));\n            const ne = G;\n            G = new Uint8Array(W), 0 < V && G.set(ne.subarray(0, V), 0);\n          }\n        }\n      }\n      var r = [0, 1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535], s = function(F, V, G, D, W = f(512), X = new Uint8Array(256), ne = new Int32Array(5003), b = new Int32Array(5003)) {\n        var O = ne.length, D = Math.max(2, D);\n        X.fill(0), b.fill(0), ne.fill(-1);\n        let B = 0, Y = 0;\n        var J = D + 1;\n        const te = J;\n        let ce = !1, re = te, ue = (1 << re) - 1;\n        var le = 1 << J - 1;\n        const K = 1 + le;\n        let ae = 2 + le, he = 0, _e = G[0], fe = 0;\n        for (let ze = O; ze < 65536; ze *= 2)\n          ++fe;\n        fe = 8 - fe, W.writeByte(D), Qe(le);\n        var ge = G.length;\n        for (let ze = 1; ze < ge; ze++)\n          e: {\n            var xe = G[ze], De = (xe << 12) + _e;\n            let Ve = xe << fe ^ _e;\n            if (ne[Ve] === De)\n              _e = b[Ve];\n            else {\n              for (var Me = Ve === 0 ? 1 : O - Ve; 0 <= ne[Ve]; )\n                if ((Ve -= Me) < 0 && (Ve += O), ne[Ve] === De) {\n                  _e = b[Ve];\n                  break e;\n                }\n              Qe(_e), _e = xe, ae < 4096 ? (b[Ve] = ae++, ne[Ve] = De) : (ne.fill(-1), ae = 2 + le, ce = !0, Qe(le));\n            }\n          }\n        return Qe(_e), Qe(K), W.writeByte(0), W.bytesView();\n        function Qe(ze) {\n          for (B &= r[Y], 0 < Y ? B |= ze << Y : B = ze, Y += re; 8 <= Y; )\n            X[he++] = 255 & B, 254 <= he && (W.writeByte(he), W.writeBytesView(X, 0, he), he = 0), B >>= 8, Y -= 8;\n          if ((ae > ue || ce) && (ce ? (re = te, ue = (1 << re) - 1, ce = !1) : (++re, ue = re === 12 ? 1 << re : (1 << re) - 1)), ze == K) {\n            for (; 0 < Y; )\n              X[he++] = 255 & B, 254 <= he && (W.writeByte(he), W.writeBytesView(X, 0, he), he = 0), B >>= 8, Y -= 8;\n            0 < he && (W.writeByte(he), W.writeBytesView(X, 0, he), he = 0);\n          }\n        }\n      };\n      function o(F, V, G) {\n        return F << 8 & 63488 | V << 2 & 992 | G >> 3;\n      }\n      function i(F, V, G, U) {\n        return F >> 4 | 240 & V | (240 & G) << 4 | (240 & U) << 8;\n      }\n      function l(F, V, G) {\n        return F >> 4 << 8 | 240 & V | G >> 4;\n      }\n      function n(F, V, G) {\n        return F < V ? V : G < F ? G : F;\n      }\n      function a(F) {\n        return F * F;\n      }\n      function c(F, V, G) {\n        var U = 0, W = 1e100;\n        const X = F[V];\n        for (var ne = X.cnt, b = X.ac, O = X.rc, D = X.gc, B = X.bc, Y = X.fw; Y != 0; Y = F[Y].fw) {\n          var J, te = F[Y], ce = te.cnt, ce = ne * ce / (ne + ce);\n          W <= ce || (J = 0, W <= (J += ce * a(te.rc - O)) || W <= (J += ce * a(te.gc - D)) || W <= (J += ce * a(te.bc - B)) || (W = J, U = Y));\n        }\n        X.err = W, X.nn = U;\n      }\n      function p() {\n        return { ac: 0, rc: 0, gc: 0, bc: 0, cnt: 0, nn: 0, fw: 0, bk: 0, tm: 0, mtm: 0, err: 0 };\n      }\n      function j(F, V) {\n        for (var G = 0, U = 0; U < F.length; U++) {\n          var W = F[U] - V[U];\n          G += W * W;\n        }\n        return G;\n      }\n      function T(F, V) {\n        return 1 < V ? Math.round(F / V) * V : F;\n      }\n      function _(F) {\n        return F * F;\n      }\n      function S(F, V, G = j) {\n        let U = 1 / 0, W = -1;\n        for (let ne = 0; ne < F.length; ne++) {\n          var X = G(V, F[ne]);\n          X < U && (U = X, W = ne);\n        }\n        return W;\n      }\n      function E(F, V, G = j) {\n        let U = 1 / 0, W = -1;\n        for (let ne = 0; ne < F.length; ne++) {\n          var X = G(V, F[ne]);\n          X < U && (U = X, W = ne);\n        }\n        return [W, U];\n      }\n      function A(F = {}) {\n        const { initialCapacity: V = 4096, auto: G = !0 } = F, U = f(V), W = new Uint8Array(256), X = new Int32Array(5003), ne = new Int32Array(5003);\n        let b = !1;\n        return { reset() {\n          U.reset(), b = !1;\n        }, finish() {\n          U.writeByte(g.trailer);\n        }, bytes() {\n          return U.bytes();\n        }, bytesView() {\n          return U.bytesView();\n        }, get buffer() {\n          return U.buffer;\n        }, get stream() {\n          return U;\n        }, writeHeader: O, writeFrame(D, B, Y, _e = {}) {\n          var { transparent: te = !1, transparentIndex: ce = 0, delay: Me = 0, palette: re = null, repeat: ge = 0, colorDepth: ue = 8, dispose: le = -1 } = _e;\n          let K = !1;\n          if (G ? b || (K = !0, O(), b = !0) : K = !!_e.first, B = Math.max(0, Math.floor(B)), Y = Math.max(0, Math.floor(Y)), K) {\n            if (!re)\n              throw new Error(\"First frame must include a { palette } option\");\n            var [_e, xe, he, De, fe = 8] = [U, B, Y, re, ue];\n            De = R(De.length) - 1, fe = 128 | fe - 1 << 4 | De, P(_e, xe), P(_e, he), _e.writeBytes([fe, 0, 0]), x(U, re), 0 <= ge && (De = U, xe = ge, De.writeByte(33), De.writeByte(255), De.writeByte(11), M(De, \"NETSCAPE2.0\"), De.writeByte(3), De.writeByte(1), P(De, xe), De.writeByte(0));\n          }\n          var ae, he = Math.round(Me / 10), _e = U, fe = le, ge = he, xe = te, De = ce, Me = (_e.writeByte(33), _e.writeByte(249), _e.writeByte(4), De < 0 && (De = 0, xe = !1), xe = xe ? (ae = 1, 2) : ae = 0, 0 <= fe && (xe = 7 & fe), xe <<= 2, _e.writeByte(0 | xe | ae), P(_e, ge), _e.writeByte(De || 0), _e.writeByte(0), !!re && !K);\n          le = U, te = B, ce = Y, ae = Me ? re : null, le.writeByte(44), P(le, 0), P(le, 0), P(le, te), P(le, ce), ae ? (te = R(ae.length) - 1, le.writeByte(128 | te)) : le.writeByte(0), Me && x(U, re), [ge, _e, ce, te, le = 8, Me, re, D] = [U, D, B, Y, ue, W, X, ne], s(ce, te, _e, le, ge, Me, re, D);\n        } };\n        function O() {\n          M(U, \"GIF89a\");\n        }\n      }\n      function x(F, V) {\n        var G = 1 << R(V.length);\n        for (let U = 0; U < G; U++) {\n          let W = [0, 0, 0];\n          U < V.length && (W = V[U]), F.writeByte(W[0]), F.writeByte(W[1]), F.writeByte(W[2]);\n        }\n      }\n      function P(F, V) {\n        F.writeByte(255 & V), F.writeByte(V >> 8 & 255);\n      }\n      function M(F, V) {\n        for (var G = 0; G < V.length; G++)\n          F.writeByte(V.charCodeAt(G));\n      }\n      function R(F) {\n        return Math.max(Math.ceil(Math.log2(F)), 1);\n      }\n      var L = A;\n    }, {}], 251: [function(t, H, C) {\n      C.read = function(m, y, u, h, c) {\n        var f, r, s = 8 * c - h - 1, o = (1 << s) - 1, i = o >> 1, l = -7, n = u ? c - 1 : 0, a = u ? -1 : 1, c = m[y + n];\n        for (n += a, f = c & (1 << -l) - 1, c >>= -l, l += s; 0 < l; f = 256 * f + m[y + n], n += a, l -= 8)\n          ;\n        for (r = f & (1 << -l) - 1, f >>= -l, l += h; 0 < l; r = 256 * r + m[y + n], n += a, l -= 8)\n          ;\n        if (f === 0)\n          f = 1 - i;\n        else {\n          if (f === o)\n            return r ? NaN : 1 / 0 * (c ? -1 : 1);\n          r += Math.pow(2, h), f -= i;\n        }\n        return (c ? -1 : 1) * r * Math.pow(2, f - h);\n      }, C.write = function(m, y, u, h, g, p) {\n        var r, s, o = 8 * p - g - 1, i = (1 << o) - 1, l = i >> 1, n = g === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, a = h ? 0 : p - 1, c = h ? 1 : -1, p = y < 0 || y === 0 && 1 / y < 0 ? 1 : 0;\n        for (y = Math.abs(y), isNaN(y) || y === 1 / 0 ? (s = isNaN(y) ? 1 : 0, r = i) : (r = Math.floor(Math.log(y) / Math.LN2), y * (h = Math.pow(2, -r)) < 1 && (r--, h *= 2), 2 <= (y += 1 <= r + l ? n / h : n * Math.pow(2, 1 - l)) * h && (r++, h /= 2), i <= r + l ? (s = 0, r = i) : 1 <= r + l ? (s = (y * h - 1) * Math.pow(2, g), r += l) : (s = y * Math.pow(2, l - 1) * Math.pow(2, g), r = 0)); 8 <= g; m[u + a] = 255 & s, a += c, s /= 256, g -= 8)\n          ;\n        for (r = r << g | s, o += g; 0 < o; m[u + a] = 255 & r, a += c, r /= 256, o -= 8)\n          ;\n        m[u + a - c] |= 128 * p;\n      };\n    }, {}], 252: [function(t, H, C) {\n      var m;\n      function y(Z, $) {\n        return Z.b === $.b && Z.a === $.a;\n      }\n      function u(Z, $) {\n        return Z.b < $.b || Z.b === $.b && Z.a <= $.a;\n      }\n      function h(Z, $, q) {\n        var ee = $.b - Z.b, pe = q.b - $.b;\n        return 0 < ee + pe ? ee < pe ? $.a - Z.a + ee / (ee + pe) * (Z.a - q.a) : $.a - q.a + pe / (ee + pe) * (q.a - Z.a) : 0;\n      }\n      function g(Z, $, q) {\n        var ee = $.b - Z.b, pe = q.b - $.b;\n        return 0 < ee + pe ? ($.a - q.a) * ee + ($.a - Z.a) * pe : 0;\n      }\n      function f(Z, $) {\n        return Z.a < $.a || Z.a === $.a && Z.b <= $.b;\n      }\n      function r(Z, $, q) {\n        var ee = $.a - Z.a, pe = q.a - $.a;\n        return 0 < ee + pe ? ee < pe ? $.b - Z.b + ee / (ee + pe) * (Z.b - q.b) : $.b - q.b + pe / (ee + pe) * (q.b - Z.b) : 0;\n      }\n      function s(Z, $, q) {\n        var ee = $.a - Z.a, pe = q.a - $.a;\n        return 0 < ee + pe ? ($.b - q.b) * ee + ($.b - Z.b) * pe : 0;\n      }\n      function o(Z, $, q, ee) {\n        return (Z = Z < 0 ? 0 : Z) <= (q = q < 0 ? 0 : q) ? q === 0 ? ($ + ee) / 2 : $ + Z / (Z + q) * (ee - $) : ee + q / (Z + q) * ($ - ee);\n      }\n      function i(Z) {\n        var $ = p(Z.b);\n        return T($, Z.c), T($.b, Z.c), _($, Z.a), $;\n      }\n      function l(Z, $) {\n        var q = !1, ee = !1;\n        Z !== $ && ($.a !== Z.a && (ee = !0, E($.a, Z.a)), $.d !== Z.d && (q = !0, A($.d, Z.d)), j($, Z), ee || (T($, Z.a), Z.a.c = Z), q || (_($, Z.d), Z.d.a = Z));\n      }\n      function n(Z) {\n        var $ = Z.b, q = !1;\n        Z.d !== Z.b.d && (q = !0, A(Z.d, Z.b.d)), Z.c === Z ? E(Z.a, null) : (Z.b.d.a = Z.b.e, Z.a.c = Z.c, j(Z, Z.b.e), q || _(Z, Z.d)), $.c === $ ? (E($.a, null), A($.d, null)) : (Z.d.a = $.b.e, $.a.c = $.c, j($, $.b.e)), S(Z);\n      }\n      function a(Z) {\n        var $ = p(Z), q = $.b;\n        return j($, Z.e), $.a = Z.b.a, T(q, $.a), $.d = q.d = Z.d, $ = $.b, j(Z.b, Z.b.b.e), j(Z.b, $), Z.b.a = $.a, $.b.a.c = $.b, $.b.d = Z.b.d, $.f = Z.f, $.b.f = Z.b.f, $;\n      }\n      function c(Z, $) {\n        var q = !1, ee = p(Z), pe = ee.b;\n        return $.d !== Z.d && (q = !0, A($.d, Z.d)), j(ee, Z.e), j(pe, $), ee.a = Z.b.a, pe.a = $.a, ee.d = pe.d = Z.d, Z.d.a = pe, q || _(ee, Z.d), ee;\n      }\n      function p(Z) {\n        var $ = new he(), q = new he(), ee = Z.b.h;\n        return (((q.h = ee).b.h = $).h = Z).b.h = q, $.b = q, (($.c = $).e = q).b = $, (q.c = q).e = $;\n      }\n      function j(Z, $) {\n        var q = Z.c, ee = $.c;\n        q.b.e = $, (ee.b.e = Z).c = ee, $.c = q;\n      }\n      function T(Z, $) {\n        var q = $.f, ee = new fe($, q);\n        for (q.e = ee, q = ($.f = ee).c = Z; q.a = ee, (q = q.c) !== Z; )\n          ;\n      }\n      function _(Z, $) {\n        var q = $.d, ee = new ae($, q);\n        for (q.b = ee, ($.d = ee).a = Z, ee.c = $.c, q = Z; q.d = ee, (q = q.e) !== Z; )\n          ;\n      }\n      function S(Z) {\n        var $ = Z.h;\n        Z = Z.b.h, ($.b.h = Z).b.h = $;\n      }\n      function E(Z, $) {\n        for (var q = Z.c, ee = q; ee.a = $, (ee = ee.c) !== q; )\n          ;\n        q = Z.f, ((ee = Z.e).f = q).e = ee;\n      }\n      function A(Z, $) {\n        for (var q = Z.a, ee = q; ee.d = $, (ee = ee.e) !== q; )\n          ;\n        q = Z.d, ((ee = Z.b).d = q).b = ee;\n      }\n      function x(Z) {\n        var $ = 0;\n        return Math.abs(Z[1]) > Math.abs(Z[0]) && ($ = 1), $ = Math.abs(Z[2]) > Math.abs(Z[$]) ? 2 : $;\n      }\n      function P(Z, $) {\n        Z.f += $.f, Z.b.f += $.b.f;\n      }\n      function M(Z, $, q) {\n        return Z = Z.a, $ = $.a, q = q.a, $.b.a === Z ? q.b.a === Z ? u($.a, q.a) ? g(q.b.a, $.a, q.a) <= 0 : 0 <= g($.b.a, q.a, $.a) : g(q.b.a, Z, q.a) <= 0 : q.b.a === Z ? 0 <= g($.b.a, Z, $.a) : ($ = h($.b.a, Z, $.a), (Z = h(q.b.a, Z, q.a)) <= $);\n      }\n      function R(Z) {\n        Z.a.i = null;\n        var $ = Z.e;\n        $.a.c = $.c, $.c.a = $.a, Z.e = null;\n      }\n      function L(Z, $) {\n        n(Z.a), Z.c = !1, (Z.a = $).i = Z;\n      }\n      function F(Z) {\n        for (var $ = Z.a.a; (Z = we(Z)).a.a === $; )\n          ;\n        return Z.c && (L(Z, $ = c(Re(Z).a.b, Z.a.e)), Z = we(Z)), Z;\n      }\n      function V(Z, $, q) {\n        var ee = new ve();\n        return ee.a = q, ee.e = ce(Z.f, $.e, ee), q.i = ee;\n      }\n      function G(Z, $) {\n        switch (Z.s) {\n          case 100130:\n            return (1 & $) != 0;\n          case 100131:\n            return $ !== 0;\n          case 100132:\n            return 0 < $;\n          case 100133:\n            return $ < 0;\n          case 100134:\n            return 2 <= $ || $ <= -2;\n        }\n        return !1;\n      }\n      function U(Z) {\n        var $ = Z.a, q = $.d;\n        q.c = Z.d, q.a = $, R(Z);\n      }\n      function W(Z, $, q) {\n        for ($ = (Z = $).a; Z !== q; ) {\n          Z.c = !1;\n          var ee = Re(Z), pe = ee.a;\n          if (pe.a !== $.a) {\n            if (!ee.c) {\n              U(Z);\n              break;\n            }\n            L(ee, pe = c($.c.b, pe.b));\n          }\n          $.c !== pe && (l(pe.b.e, pe), l($, pe)), U(Z), $ = ee.a, Z = ee;\n        }\n        return $;\n      }\n      function X(Z, $, q, ee, pe, je) {\n        for (var Ce = !0; V(Z, $, q.b), (q = q.c) !== ee; )\n          ;\n        for (pe === null && (pe = Re($).a.b.c); (q = (ee = Re($)).a.b).a === pe.a; )\n          q.c !== pe && (l(q.b.e, q), l(pe.b.e, q)), ee.f = $.f - q.f, ee.d = G(Z, ee.f), $.b = !0, !Ce && D(Z, $) && (P(q, pe), R($), n(pe)), Ce = !1, $ = ee, pe = q;\n        $.b = !0, je && Y(Z, $);\n      }\n      function ne(Z, $, q, ee, pe) {\n        var je = [$.g[0], $.g[1], $.g[2]];\n        $.d = null, $.d = Z.o && Z.o(je, q, ee, Z.c) || null, $.d === null && (pe ? Z.n || (K(Z, 100156), Z.n = !0) : $.d = q[0]);\n      }\n      function b(Z, $, q) {\n        var ee = [null, null, null, null];\n        ee[0] = $.a.d, ee[1] = q.a.d, ne(Z, $.a, ee, [0.5, 0.5, 0, 0], !1), l($, q);\n      }\n      function O(Z, $, q, ee, pe) {\n        var je = Math.abs($.b - Z.b) + Math.abs($.a - Z.a), Ce = Math.abs(q.b - Z.b) + Math.abs(q.a - Z.a), Fe = pe + 1;\n        ee[pe] = 0.5 * Ce / (je + Ce), ee[Fe] = 0.5 * je / (je + Ce), Z.g[0] += ee[pe] * $.g[0] + ee[Fe] * q.g[0], Z.g[1] += ee[pe] * $.g[1] + ee[Fe] * q.g[1], Z.g[2] += ee[pe] * $.g[2] + ee[Fe] * q.g[2];\n      }\n      function D(Z, $) {\n        var q = Re($), ee = $.a, pe = q.a;\n        if (u(ee.a, pe.a)) {\n          if (0 < g(pe.b.a, ee.a, pe.a))\n            return;\n          if (y(ee.a, pe.a)) {\n            if (ee.a !== pe.a) {\n              var q = Z.e, je = ee.a.h;\n              if (0 <= je) {\n                var Ce = (q = q.b).d, Fe = q.e, Ne = q.c, Be = Ne[je];\n                Ce[Be] = Ce[q.a], (Ne[Ce[Be]] = Be) <= --q.a && (Be <= 1 || u(Fe[Ce[Be >> 1]], Fe[Ce[Be]]) ? Xe : He)(q, Be), Fe[je] = null, Ne[je] = q.b, q.b = je;\n              } else\n                for (q.c[-(je + 1)] = null; 0 < q.a && q.c[q.d[q.a - 1]] === null; )\n                  --q.a;\n              b(Z, pe.b.e, ee);\n            }\n          } else\n            a(pe.b), l(ee, pe.b.e), $.b = q.b = !0;\n        } else {\n          if (g(ee.b.a, pe.a, ee.a) < 0)\n            return;\n          we($).b = $.b = !0, a(ee.b), l(pe.b.e, ee);\n        }\n        return 1;\n      }\n      function B(Z, $) {\n        var q = Re($), ee = $.a, pe = q.a, je = ee.a, Ce = pe.a, Fe = ee.b.a, Ne = pe.b.a, Be = new fe();\n        if (g(Fe, Z.a, je), g(Ne, Z.a, Ce), !(je === Ce || Math.min(je.a, Fe.a) > Math.max(Ce.a, Ne.a))) {\n          if (u(je, Ce)) {\n            if (0 < g(Ne, je, Ce))\n              return;\n          } else if (g(Fe, Ce, je) < 0)\n            return;\n          var We, st, nt = Fe, Ke = je, at = Ne, ot = Ce;\n          if (u(nt, Ke) || (We = nt, nt = Ke, Ke = We), u(at, ot) || (We = at, at = ot, ot = We), u(nt, at) || (We = nt, nt = at, at = We, We = Ke, Ke = ot, ot = We), u(at, Ke) ? u(Ke, ot) ? ((We = h(nt, at, Ke)) + (st = h(at, Ke, ot)) < 0 && (We = -We, st = -st), Be.b = o(We, at.b, st, Ke.b)) : ((We = g(nt, at, Ke)) + (st = -g(nt, ot, Ke)) < 0 && (We = -We, st = -st), Be.b = o(We, at.b, st, ot.b)) : Be.b = (at.b + Ke.b) / 2, f(nt, Ke) || (We = nt, nt = Ke, Ke = We), f(at, ot) || (We = at, at = ot, ot = We), f(nt, at) || (We = nt, nt = at, at = We, We = Ke, Ke = ot, ot = We), f(at, Ke) ? f(Ke, ot) ? ((We = r(nt, at, Ke)) + (st = r(at, Ke, ot)) < 0 && (We = -We, st = -st), Be.a = o(We, at.a, st, Ke.a)) : ((We = s(nt, at, Ke)) + (st = -s(nt, ot, Ke)) < 0 && (We = -We, st = -st), Be.a = o(We, at.a, st, ot.a)) : Be.a = (at.a + Ke.a) / 2, u(Be, Z.a) && (Be.b = Z.a.b, Be.a = Z.a.a), nt = u(je, Ce) ? je : Ce, u(nt, Be) && (Be.b = nt.b, Be.a = nt.a), y(Be, je) || y(Be, Ce))\n            return D(Z, $), 0;\n          if (!y(Fe, Z.a) && 0 <= g(Fe, Z.a, Be) || !y(Ne, Z.a) && g(Ne, Z.a, Be) <= 0) {\n            if (Ne === Z.a)\n              a(ee.b), l(pe.b, ee), ee = Re($ = F($)).a, W(Z, Re($), q), X(Z, $, ee.b.e, ee, ee, !0);\n            else {\n              if (Fe !== Z.a)\n                return 0 <= g(Fe, Z.a, Be) && (we($).b = $.b = !0, a(ee.b), ee.a.b = Z.a.b, ee.a.a = Z.a.a), void (g(Ne, Z.a, Be) <= 0 && ($.b = q.b = !0, a(pe.b), pe.a.b = Z.a.b, pe.a.a = Z.a.a));\n              for (a(pe.b), l(ee.e, pe.b.e), Ce = (je = q = $).a.b.a; (je = we(je)).a.b.a === Ce; )\n                ;\n              je = Re($ = je).a.b.c, q.a = pe.b.e, X(Z, $, (pe = W(Z, q, null)).c, ee.b.c, je, !0);\n            }\n            return 1;\n          }\n          a(ee.b), a(pe.b), l(pe.b.e, ee), ee.a.b = Be.b, ee.a.a = Be.a, ee.a.h = xe(Z.e, ee.a), ee = ee.a, pe = [0, 0, 0, 0], Be = [je.d, Fe.d, Ce.d, Ne.d], ee.g[0] = ee.g[1] = ee.g[2] = 0, O(ee, je, Fe, pe, 0), O(ee, Ce, Ne, pe, 2), ne(Z, ee, Be, pe, !0), we($).b = $.b = q.b = !0;\n        }\n      }\n      function Y(Z, $) {\n        for (var q = Re($); ; ) {\n          for (; q.b; )\n            q = Re($ = q);\n          if (!$.b && (($ = we(q = $)) === null || !$.b))\n            break;\n          $.b = !1;\n          var ee = $.a, pe = q.a;\n          if (je = ee.b.a !== pe.b.a)\n            e: {\n              var je, Ce = Re(je = $), Fe = je.a, Ne = Ce.a, Be = void 0;\n              if (u(Fe.b.a, Ne.b.a)) {\n                if (g(Fe.b.a, Ne.b.a, Fe.a) < 0) {\n                  je = !1;\n                  break e;\n                }\n                we(je).b = je.b = !0, Be = a(Fe), l(Ne.b, Be), Be.d.c = je.d;\n              } else {\n                if (0 < g(Ne.b.a, Fe.b.a, Ne.a)) {\n                  je = !1;\n                  break e;\n                }\n                je.b = Ce.b = !0, Be = a(Ne), l(Fe.e, Ne.b), Be.b.d.c = je.d;\n              }\n              je = !0;\n            }\n          if (je && (q.c ? (R(q), n(pe), pe = (q = Re($)).a) : $.c && (R($), n(ee), ee = ($ = we(q)).a)), ee.a !== pe.a) {\n            if (ee.b.a === pe.b.a || $.c || q.c || ee.b.a !== Z.a && pe.b.a !== Z.a)\n              D(Z, $);\n            else if (B(Z, $))\n              break;\n          }\n          ee.a === pe.a && ee.b.a === pe.b.a && (P(pe, ee), R($), n(ee), $ = we(q));\n        }\n      }\n      function J(Z, $) {\n        var q = new ve(), ee = i(Z.b);\n        ee.a.b = 4e150, ee.a.a = $, ee.b.a.b = -4e150, ee.b.a.a = $, Z.a = ee.b.a, q.a = ee, q.f = 0, q.d = !1, q.c = !1, q.h = !0, q.b = !1, ee = ce(ee = Z.f, ee.a, q), q.e = ee;\n      }\n      function te(Z) {\n        this.a = new re(), this.b = Z, this.c = M;\n      }\n      function ce(Z, $, q) {\n        for (; ($ = $.c).b !== null && !Z.c(Z.b, $.b, q); )\n          ;\n        return Z = new re(q, $.a, $), $.a.c = Z, $.a = Z;\n      }\n      function re(Z, $, q) {\n        this.b = Z || null, this.a = $ || this, this.c = q || this;\n      }\n      function ue() {\n        this.d = 0, this.p = this.b = this.q = null, this.j = [0, 0, 0], this.s = 100130, this.n = !1, this.o = this.a = this.e = this.f = null, this.m = !1, this.c = this.r = this.i = this.k = this.l = this.h = null;\n      }\n      function le(Z, $) {\n        if (Z.d !== $)\n          for (; Z.d !== $; )\n            if (Z.d < $)\n              switch (Z.d) {\n                case 0:\n                  K(Z, 100151), Z.u(null);\n                  break;\n                case 1:\n                  K(Z, 100152), Z.t();\n              }\n            else\n              switch (Z.d) {\n                case 2:\n                  K(Z, 100154), Z.v();\n                  break;\n                case 1:\n                  K(Z, 100153), Z.w();\n              }\n      }\n      function K(Z, $) {\n        Z.p && Z.p($, Z.c);\n      }\n      function ae(Z, $) {\n        this.b = Z || this, this.d = $ || this, this.a = null, this.c = !1;\n      }\n      function he() {\n        (this.h = this).i = this.d = this.a = this.e = this.c = this.b = null, this.f = 0;\n      }\n      function _e() {\n        this.c = new fe(), this.a = new ae(), this.b = new he(), this.d = new he(), this.b.b = this.d, this.d.b = this.b;\n      }\n      function fe(Z, $) {\n        this.e = Z || this, this.f = $ || this, this.d = this.c = null, this.g = [0, 0, 0], this.h = this.a = this.b = 0;\n      }\n      function ge() {\n        this.c = [], this.d = null, this.a = 0, this.e = !1, this.b = new Me();\n      }\n      function xe(Z, $) {\n        var q, ee, pe;\n        return Z.e ? (2 * (ee = ++(q = Z.b).a) > q.f && (q.f *= 2, q.c = Qe(q.c, q.f + 1)), q.b === 0 ? pe = ee : (pe = q.b, q.b = q.c[q.b]), q.e[pe] = $, q.c[pe] = ee, q.d[ee] = pe, q.h && He(q, ee), pe) : (q = Z.a++, Z.c[q] = $, -(q + 1));\n      }\n      function De(Z) {\n        if (Z.a === 0)\n          return Ve(Z.b);\n        var $ = Z.c[Z.d[Z.a - 1]];\n        if (Z.b.a !== 0 && u(ze(Z.b), $))\n          return Ve(Z.b);\n        for (; --Z.a, 0 < Z.a && Z.c[Z.d[Z.a - 1]] === null; )\n          ;\n        return $;\n      }\n      function Me() {\n        this.d = Qe([0], 33), this.e = [null, null], this.c = [0, 0], this.a = 0, this.f = 32, this.b = 0, this.h = !1, this.d[1] = 1;\n      }\n      function Qe(Z, $) {\n        for (var q = Array($), ee = 0; ee < Z.length; ee++)\n          q[ee] = Z[ee];\n        for (; ee < $; ee++)\n          q[ee] = 0;\n        return q;\n      }\n      function ze(Z) {\n        return Z.e[Z.d[1]];\n      }\n      function Ve(Z) {\n        var $ = Z.d, q = Z.e, ee = Z.c, pe = $[1], je = q[pe];\n        return 0 < Z.a && ($[1] = $[Z.a], ee[$[1]] = 1, q[pe] = null, ee[pe] = Z.b, Z.b = pe, 0 < --Z.a && Xe(Z, 1)), je;\n      }\n      function Xe(Z, $) {\n        for (var q = Z.d, ee = Z.e, pe = Z.c, je = $, Ce = q[je]; ; ) {\n          var Fe = je << 1, Ne = (Fe < Z.a && u(ee[q[Fe + 1]], ee[q[Fe]]) && (Fe += 1), q[Fe]);\n          if (Fe > Z.a || u(ee[Ce], ee[Ne])) {\n            pe[q[je] = Ce] = je;\n            break;\n          }\n          pe[q[je] = Ne] = je, je = Fe;\n        }\n      }\n      function He(Z, $) {\n        for (var q = Z.d, ee = Z.e, pe = Z.c, je = $, Ce = q[je]; ; ) {\n          var Fe = je >> 1, Ne = q[Fe];\n          if (Fe == 0 || u(ee[Ne], ee[Ce])) {\n            pe[q[je] = Ce] = je;\n            break;\n          }\n          pe[q[je] = Ne] = je, je = Fe;\n        }\n      }\n      function ve() {\n        this.e = this.a = null, this.f = 0, this.c = this.b = this.h = this.d = !1;\n      }\n      function Re(Z) {\n        return Z.e.c.b;\n      }\n      function we(Z) {\n        return Z.e.a.b;\n      }\n      (m = ue.prototype).x = function() {\n        le(this, 0);\n      }, m.B = function(Z, $) {\n        switch (Z) {\n          case 100142:\n            return;\n          case 100140:\n            switch ($) {\n              case 100130:\n              case 100131:\n              case 100132:\n              case 100133:\n              case 100134:\n                return void (this.s = $);\n            }\n            break;\n          case 100141:\n            return void (this.m = !!$);\n          default:\n            return void K(this, 100900);\n        }\n        K(this, 100901);\n      }, m.y = function(Z) {\n        switch (Z) {\n          case 100142:\n            return 0;\n          case 100140:\n            return this.s;\n          case 100141:\n            return this.m;\n          default:\n            K(this, 100900);\n        }\n        return !1;\n      }, m.A = function(Z, $, q) {\n        this.j[0] = Z, this.j[1] = $, this.j[2] = q;\n      }, m.z = function(Z, $) {\n        var q = $ || null;\n        switch (Z) {\n          case 100100:\n          case 100106:\n            this.h = q;\n            break;\n          case 100104:\n          case 100110:\n            this.l = q;\n            break;\n          case 100101:\n          case 100107:\n            this.k = q;\n            break;\n          case 100102:\n          case 100108:\n            this.i = q;\n            break;\n          case 100103:\n          case 100109:\n            this.p = q;\n            break;\n          case 100105:\n          case 100111:\n            this.o = q;\n            break;\n          case 100112:\n            this.r = q;\n            break;\n          default:\n            K(this, 100900);\n        }\n      }, m.C = function(Z, $) {\n        var q = !1, ee = [0, 0, 0];\n        le(this, 2);\n        for (var pe = 0; pe < 3; ++pe) {\n          var je = Z[pe];\n          je < -1e150 && (je = -1e150, q = !0), 1e150 < je && (je = 1e150, q = !0), ee[pe] = je;\n        }\n        q && K(this, 100155), (q = this.q) === null ? l(q = i(this.b), q.b) : (a(q), q = q.e), q.a.d = $, q.a.g[0] = ee[0], q.a.g[1] = ee[1], q.a.g[2] = ee[2], q.f = 1, q.b.f = -1, this.q = q;\n      }, m.u = function(Z) {\n        le(this, 0), this.d = 1, this.b = new _e(), this.c = Z;\n      }, m.t = function() {\n        le(this, 1), this.d = 2, this.q = null;\n      }, m.v = function() {\n        le(this, 2), this.d = 1;\n      }, m.w = function() {\n        le(this, 1), this.d = 0;\n        var Z, $, q = this.j[0], ee = this.j[1], pe = this.j[2], je = !1, Ce = [q, ee, pe];\n        if (q === 0 && ee === 0 && pe === 0) {\n          for (var ee = [-2e150, -2e150, -2e150], Fe = [2e150, 2e150, 2e150], pe = [], Ne = [], q = (je = this.b.c).e; q !== je; q = q.e)\n            for (var Be = 0; Be < 3; ++Be) {\n              var We = q.g[Be];\n              We < Fe[Be] && (Fe[Be] = We, Ne[Be] = q), We > ee[Be] && (ee[Be] = We, pe[Be] = q);\n            }\n          if (ee[1] - Fe[1] > ee[q = 0] - Fe[0] && (q = 1), Fe[q = ee[2] - Fe[2] > ee[q] - Fe[q] ? 2 : q] >= ee[q])\n            Ce[0] = 0, Ce[1] = 0, Ce[2] = 1;\n          else {\n            for (Fe = Ne[q], pe = pe[q], Ne = [ee = 0, 0, 0], Fe = [Fe.g[0] - pe.g[0], Fe.g[1] - pe.g[1], Fe.g[2] - pe.g[2]], Be = [0, 0, 0], q = je.e; q !== je; q = q.e)\n              Be[0] = q.g[0] - pe.g[0], Be[1] = q.g[1] - pe.g[1], Be[2] = q.g[2] - pe.g[2], Ne[0] = Fe[1] * Be[2] - Fe[2] * Be[1], Ne[1] = Fe[2] * Be[0] - Fe[0] * Be[2], Ne[2] = Fe[0] * Be[1] - Fe[1] * Be[0], ee < (We = Ne[0] * Ne[0] + Ne[1] * Ne[1] + Ne[2] * Ne[2]) && (ee = We, Ce[0] = Ne[0], Ce[1] = Ne[1], Ce[2] = Ne[2]);\n            ee <= 0 && (Ce[0] = Ce[1] = Ce[2] = 0, Ce[x(Fe)] = 1);\n          }\n          je = !0;\n        }\n        for (Ne = x(Ce), q = this.b.c, ee = (Ne + 1) % 3, pe = (Ne + 2) % 3, Ne = 0 < Ce[Ne] ? 1 : -1, Ce = q.e; Ce !== q; Ce = Ce.e)\n          Ce.b = Ce.g[ee], Ce.a = Ne * Ce.g[pe];\n        if (je) {\n          for (Ce = 0, q = (je = this.b.a).b; q !== je; q = q.b)\n            if (!((ee = q.a).f <= 0))\n              for (; Ce += (ee.a.b - ee.b.a.b) * (ee.a.a + ee.b.a.a), (ee = ee.e) !== q.a; )\n                ;\n          if (Ce < 0)\n            for (je = (Ce = this.b.c).e; je !== Ce; je = je.e)\n              je.a = -je.a;\n        }\n        for (this.n = !1, Ce = this.b.b, q = Ce.h; q !== Ce; q = je)\n          je = q.h, ee = q.e, y(q.a, q.b.a) && q.e.e !== q && (b(this, ee, q), n(q), ee = (q = ee).e), ee.e === q && (ee !== q && (ee !== je && ee !== je.b || (je = je.h), n(ee)), q !== je && q !== je.b || (je = je.h), n(q));\n        for (this.e = Ce = new ge(), je = this.b.c, q = je.e; q !== je; q = q.e)\n          q.h = xe(Ce, q);\n        var st = Ce;\n        st.d = [];\n        for (var nt = 0; nt < st.a; nt++)\n          st.d[nt] = nt;\n        st.d.sort(/* @__PURE__ */ function(ot) {\n          return function(bt, It) {\n            return u(ot[bt], ot[It]) ? 1 : -1;\n          };\n        }(st.c)), st.e = !0;\n        for (var Ke = st.b, at = Ke.a; 1 <= at; --at)\n          Xe(Ke, at);\n        for (Ke.h = !0, this.f = new te(this), J(this, -4e150), J(this, 4e150); (Ce = De(this.e)) !== null; ) {\n          for (; ; ) {\n            e:\n              if ((q = this.e).a === 0)\n                je = ze(q.b);\n              else if (je = q.c[q.d[q.a - 1]], q.b.a !== 0 && u(q = ze(q.b), je)) {\n                je = q;\n                break e;\n              }\n            if (je === null || !y(je, Ce))\n              break;\n            je = De(this.e), b(this, Ce.c, je.c);\n          }\n          (function ot(bt, It) {\n            for (var Mt, mt = (bt.a = It).c; mt.i === null; )\n              if ((mt = mt.c) === It.c) {\n                var mt = bt, jt = It;\n                (gt = new ve()).a = jt.c.b;\n                for (var Ft = (ht = mt.f).a; (Ft = Ft.a).b !== null && !ht.c(ht.b, gt, Ft.b); )\n                  ;\n                var ht, Dt, Pt = Re(ht = Ft.b), gt = ht.a, Ft = Pt.a;\n                return void (g(gt.b.a, jt, gt.a) === 0 ? y((gt = ht.a).a, jt) || y(gt.b.a, jt) || (a(gt.b), ht.c && (n(gt.c), ht.c = !1), l(jt.c, gt), ot(mt, jt)) : (Dt = u(Ft.b.a, gt.b.a) ? ht : Pt, Pt = void 0, ht.d || Dt.c ? (Pt = Dt === ht ? c(jt.c.b, gt.e) : c(Ft.b.c.b, jt.c).b, Dt.c ? L(Dt, Pt) : ((ht = V(gt = mt, ht, Pt)).f = we(ht).f + ht.a.f, ht.d = G(gt, ht.f)), ot(mt, jt)) : X(mt, ht, jt.c, jt.c, null, !0)));\n              }\n            ht = (gt = Re(mt = F(mt.i))).a, (gt = W(bt, gt, null)).c === ht ? (gt = (ht = gt).c, Ft = Re(mt), Pt = mt.a, Dt = Ft.a, Mt = !1, Pt.b.a !== Dt.b.a && B(bt, mt), y(Pt.a, bt.a) && (l(gt.b.e, Pt), gt = Re(mt = F(mt)).a, W(bt, Re(mt), Ft), Mt = !0), y(Dt.a, bt.a) && (l(ht, Dt.b.e), ht = W(bt, Ft, null), Mt = !0), Mt ? X(bt, mt, ht.c, gt, gt, !0) : (jt = u(Dt.a, Pt.a) ? Dt.b.e : Pt, X(bt, mt, jt = c(ht.c.b, jt), jt.c, jt.c, !1), jt.b.i.c = !0, Y(bt, mt))) : X(bt, mt, gt.c, ht, ht, !0);\n          })(this, Ce);\n        }\n        for (this.a = this.f.a.a.b.a.a, Ce = 0; (je = this.f.a.a.b) !== null; )\n          je.h || ++Ce, R(je);\n        for (this.f = null, (Ce = this.e).b = null, Ce.d = null, this.e = Ce.c = null, Ce = this.b, q = Ce.a.b; q !== Ce.a; q = je)\n          je = q.b, (q = q.a).e.e === q && (P(q.c, q), n(q));\n        if (!this.n) {\n          if (Ce = this.b, this.m)\n            for (q = Ce.b.h; q !== Ce.b; q = je)\n              je = q.h, q.b.d.c !== q.d.c ? q.f = q.d.c ? 1 : -1 : n(q);\n          else\n            for (q = Ce.a.b; q !== Ce.a; q = je)\n              if (je = q.b, q.c) {\n                for (q = q.a; u(q.b.a, q.a); q = q.c.b)\n                  ;\n                for (; u(q.a, q.b.a); q = q.e)\n                  ;\n                for (ee = q.c.b, pe = void 0; q.e !== ee; )\n                  if (u(q.b.a, ee.a)) {\n                    for (; ee.e !== q && (u(($ = ee.e).b.a, $.a) || g(ee.a, ee.b.a, ee.e.b.a) <= 0); )\n                      ee = (pe = c(ee.e, ee)).b;\n                    ee = ee.c.b;\n                  } else {\n                    for (; ee.e !== q && (u((Z = q.c.b).a, Z.b.a) || 0 <= g(q.b.a, q.a, q.c.b.a)); )\n                      q = (pe = c(q, q.c.b)).b;\n                    q = q.e;\n                  }\n                for (; ee.e.e !== q; )\n                  pe = c(ee.e, ee), ee = pe.b;\n              }\n          if (this.h || this.i || this.k || this.l)\n            if (this.m) {\n              for (je = (Ce = this.b).a.b; je !== Ce.a; je = je.b)\n                if (je.c) {\n                  for (this.h && this.h(2, this.c), q = je.a; this.k && this.k(q.a.d, this.c), (q = q.e) !== je.a; )\n                    ;\n                  this.i && this.i(this.c);\n                }\n            } else {\n              for (Ce = this.b, je = !!this.l, q = !1, ee = -1, pe = Ce.a.d; pe !== Ce.a; pe = pe.d)\n                if (pe.c)\n                  for (q || (this.h && this.h(4, this.c), q = !0), Ne = pe.a; je && (Fe = Ne.b.d.c ? 0 : 1, ee !== Fe && (ee = Fe, this.l && this.l(!!ee, this.c))), this.k && this.k(Ne.a.d, this.c), (Ne = Ne.e) !== pe.a; )\n                    ;\n              q && this.i && this.i(this.c);\n            }\n          if (this.r) {\n            for (Ce = this.b, q = Ce.a.b; q !== Ce.a; q = je)\n              if (je = q.b, !q.c) {\n                for (pe = (ee = q.a).e, Ne = void 0; pe = (Ne = pe).e, (Ne.d = null) === Ne.b.d && (Ne.c === Ne ? E(Ne.a, null) : (Ne.a.c = Ne.c, j(Ne, Ne.b.e)), (Fe = Ne.b).c === Fe ? E(Fe.a, null) : (Fe.a.c = Fe.c, j(Fe, Fe.b.e)), S(Ne)), Ne !== ee; )\n                  ;\n                ee = q.d, ((q = q.b).d = ee).b = q;\n              }\n            return this.r(this.b), void (this.c = this.b = null);\n          }\n        }\n        this.b = this.c = null;\n      }, this.libtess = { GluTesselator: ue, windingRule: { GLU_TESS_WINDING_ODD: 100130, GLU_TESS_WINDING_NONZERO: 100131, GLU_TESS_WINDING_POSITIVE: 100132, GLU_TESS_WINDING_NEGATIVE: 100133, GLU_TESS_WINDING_ABS_GEQ_TWO: 100134 }, primitiveType: { GL_LINE_LOOP: 2, GL_TRIANGLES: 4, GL_TRIANGLE_STRIP: 5, GL_TRIANGLE_FAN: 6 }, errorType: { GLU_TESS_MISSING_BEGIN_POLYGON: 100151, GLU_TESS_MISSING_END_POLYGON: 100153, GLU_TESS_MISSING_BEGIN_CONTOUR: 100152, GLU_TESS_MISSING_END_CONTOUR: 100154, GLU_TESS_COORD_TOO_LARGE: 100155, GLU_TESS_NEED_COMBINE_CALLBACK: 100156 }, gluEnum: { GLU_TESS_MESH: 100112, GLU_TESS_TOLERANCE: 100142, GLU_TESS_WINDING_RULE: 100140, GLU_TESS_BOUNDARY_ONLY: 100141, GLU_INVALID_ENUM: 100900, GLU_INVALID_VALUE: 100901, GLU_TESS_BEGIN: 100100, GLU_TESS_VERTEX: 100101, GLU_TESS_END: 100102, GLU_TESS_ERROR: 100103, GLU_TESS_EDGE_FLAG: 100104, GLU_TESS_COMBINE: 100105, GLU_TESS_BEGIN_DATA: 100106, GLU_TESS_VERTEX_DATA: 100107, GLU_TESS_END_DATA: 100108, GLU_TESS_ERROR_DATA: 100109, GLU_TESS_EDGE_FLAG_DATA: 100110, GLU_TESS_COMBINE_DATA: 100111 } }, ue.prototype.gluDeleteTess = ue.prototype.x, ue.prototype.gluTessProperty = ue.prototype.B, ue.prototype.gluGetTessProperty = ue.prototype.y, ue.prototype.gluTessNormal = ue.prototype.A, ue.prototype.gluTessCallback = ue.prototype.z, ue.prototype.gluTessVertex = ue.prototype.C, ue.prototype.gluTessBeginPolygon = ue.prototype.u, ue.prototype.gluTessBeginContour = ue.prototype.t, ue.prototype.gluTessEndContour = ue.prototype.v, ue.prototype.gluTessEndPolygon = ue.prototype.w, H !== void 0 && (H.exports = this.libtess);\n    }, {}], 253: [function(t, H, C) {\n      function m(u, h, g, f) {\n        var r = 0, s = (f = f === void 0 ? {} : f).loop === void 0 ? null : f.loop, o = f.palette === void 0 ? null : f.palette;\n        if (h <= 0 || g <= 0 || 65535 < h || 65535 < g)\n          throw new Error(\"Width/Height invalid.\");\n        function i(_) {\n          if (_ = _.length, _ < 2 || 256 < _ || _ & _ - 1)\n            throw new Error(\"Invalid code/color length, must be power of 2 and 2 .. 256.\");\n          return _;\n        }\n        u[r++] = 71, u[r++] = 73, u[r++] = 70, u[r++] = 56, u[r++] = 57, u[r++] = 97;\n        var l = 0, n = 0;\n        if (o !== null) {\n          for (var a = i(o); a >>= 1; )\n            ++l;\n          if (a = 1 << l, --l, f.background !== void 0) {\n            if (a <= (n = f.background))\n              throw new Error(\"Background index out of range.\");\n            if (n === 0)\n              throw new Error(\"Background index explicitly passed as 0.\");\n          }\n        }\n        if (u[r++] = 255 & h, u[r++] = h >> 8 & 255, u[r++] = 255 & g, u[r++] = g >> 8 & 255, u[r++] = (o !== null ? 128 : 0) | l, u[r++] = n, u[r++] = 0, o !== null)\n          for (var c = 0, p = o.length; c < p; ++c) {\n            var j = o[c];\n            u[r++] = j >> 16 & 255, u[r++] = j >> 8 & 255, u[r++] = 255 & j;\n          }\n        if (s !== null) {\n          if (s < 0 || 65535 < s)\n            throw new Error(\"Loop count invalid.\");\n          u[r++] = 33, u[r++] = 255, u[r++] = 11, u[r++] = 78, u[r++] = 69, u[r++] = 84, u[r++] = 83, u[r++] = 67, u[r++] = 65, u[r++] = 80, u[r++] = 69, u[r++] = 50, u[r++] = 46, u[r++] = 48, u[r++] = 3, u[r++] = 1, u[r++] = 255 & s, u[r++] = s >> 8 & 255, u[r++] = 0;\n        }\n        var T = !1;\n        this.addFrame = function(_, S, E, A, x, P) {\n          if (T === !0 && (--r, T = !1), P = P === void 0 ? {} : P, _ < 0 || S < 0 || 65535 < _ || 65535 < S)\n            throw new Error(\"x/y invalid.\");\n          if (E <= 0 || A <= 0 || 65535 < E || 65535 < A)\n            throw new Error(\"Width/Height invalid.\");\n          if (x.length < E * A)\n            throw new Error(\"Not enough pixels for the frame size.\");\n          var M = !0, R = P.palette;\n          if (R == null && (M = !1, R = o), R == null)\n            throw new Error(\"Must supply either a local or global palette.\");\n          for (var F = i(R), L = 0; F >>= 1; )\n            ++L;\n          var F = 1 << L, V = P.delay === void 0 ? 0 : P.delay, G = P.disposal === void 0 ? 0 : P.disposal;\n          if (G < 0 || 3 < G)\n            throw new Error(\"Disposal out of range.\");\n          var U = !1, W = 0;\n          if (P.transparent !== void 0 && P.transparent !== null && (U = !0, (W = P.transparent) < 0 || F <= W))\n            throw new Error(\"Transparent color index.\");\n          if (G === 0 && !U && V === 0 || (u[r++] = 33, u[r++] = 249, u[r++] = 4, u[r++] = G << 2 | (U === !0 ? 1 : 0), u[r++] = 255 & V, u[r++] = V >> 8 & 255, u[r++] = W, u[r++] = 0), u[r++] = 44, u[r++] = 255 & _, u[r++] = _ >> 8 & 255, u[r++] = 255 & S, u[r++] = S >> 8 & 255, u[r++] = 255 & E, u[r++] = E >> 8 & 255, u[r++] = 255 & A, u[r++] = A >> 8 & 255, u[r++] = M === !0 ? 128 | L - 1 : 0, M === !0)\n            for (var X = 0, ne = R.length; X < ne; ++X) {\n              var b = R[X];\n              u[r++] = b >> 16 & 255, u[r++] = b >> 8 & 255, u[r++] = 255 & b;\n            }\n          return r = function(O, D, B, Y) {\n            O[D++] = B;\n            var J = D++, te = 1 << B, ce = te - 1, re = 1 + te, ue = 1 + re, le = B + 1, K = 0, ae = 0;\n            function he(Ve) {\n              for (; Ve <= K; )\n                O[D++] = 255 & ae, ae >>= 8, K -= 8, D === J + 256 && (O[J] = 255, J = D++);\n            }\n            function _e(Ve) {\n              ae |= Ve << K, K += le, he(8);\n            }\n            var fe = Y[0] & ce, ge = {};\n            _e(te);\n            for (var xe = 1, De = Y.length; xe < De; ++xe) {\n              var Me = Y[xe] & ce, Qe = fe << 8 | Me, ze = ge[Qe];\n              if (ze === void 0) {\n                for (ae |= fe << K, K += le; 8 <= K; )\n                  O[D++] = 255 & ae, ae >>= 8, K -= 8, D === J + 256 && (O[J] = 255, J = D++);\n                ue === 4096 ? (_e(te), ue = 1 + re, le = B + 1, ge = {}) : (1 << le <= ue && ++le, ge[Qe] = ue++), fe = Me;\n              } else\n                fe = ze;\n            }\n            return _e(fe), _e(re), he(1), J + 1 === D ? O[J] = 0 : (O[J] = D - J - 1, O[D++] = 0), D;\n          }(u, r, L < 2 ? 2 : L, x);\n        }, this.end = function() {\n          return T === !1 && (u[r++] = 59, T = !0), r;\n        }, this.getOutputBuffer = function() {\n          return u;\n        }, this.setOutputBuffer = function(_) {\n          u = _;\n        }, this.getOutputBufferPosition = function() {\n          return r;\n        }, this.setOutputBufferPosition = function(_) {\n          r = _;\n        };\n      }\n      function y(u, h, g, f) {\n        for (var r = u[h++], s = 1 << r, o = 1 + s, i = 1 + o, l = r + 1, n = (1 << l) - 1, a = 0, c = 0, p = 0, j = u[h++], T = new Int32Array(4096), _ = null; ; ) {\n          for (; a < 16 && j !== 0; )\n            c |= u[h++] << a, a += 8, j === 1 ? j = u[h++] : --j;\n          if (a < l)\n            break;\n          var S = c & n;\n          if (c >>= l, a -= l, S == s)\n            i = 1 + o, n = (1 << (l = r + 1)) - 1, _ = null;\n          else {\n            if (S == o)\n              break;\n            for (var E = S < i ? S : _, A = 0, x = E; s < x; )\n              x = T[x] >> 8, ++A;\n            var P = x;\n            if (f < p + A + (E !== S ? 1 : 0))\n              return void console.log(\"Warning, gif stream longer than expected.\");\n            g[p++] = P;\n            var M = p += A;\n            for (E !== S && (g[p++] = P), x = E; A--; )\n              x = T[x], g[--M] = 255 & x, x >>= 8;\n            _ !== null && i < 4096 && (T[i++] = _ << 8 | P, n + 1 <= i && l < 12 && (++l, n = n << 1 | 1)), _ = S;\n          }\n        }\n        p !== f && console.log(\"Warning, gif stream shorter than expected.\");\n      }\n      try {\n        C.GifWriter = m, C.GifReader = function(u) {\n          var h = 0;\n          if (u[h++] !== 71 || u[h++] !== 73 || u[h++] !== 70 || u[h++] !== 56 || (u[h++] + 1 & 253) != 56 || u[h++] !== 97)\n            throw new Error(\"Invalid GIF 87a/89a header.\");\n          var g = u[h++] | u[h++] << 8, f = u[h++] | u[h++] << 8, r = u[h++], s = 1 << 1 + (7 & r), o = (u[h++], u[h++], null), i = null, l = (r >> 7 && (o = h, h += 3 * (i = s)), !0), n = [], a = 0, c = null, p = 0, j = null;\n          for (this.width = g, this.height = f; l && h < u.length; )\n            switch (u[h++]) {\n              case 33:\n                switch (u[h++]) {\n                  case 255:\n                    if (u[h] !== 11 || u[h + 1] == 78 && u[h + 2] == 69 && u[h + 3] == 84 && u[h + 4] == 83 && u[h + 5] == 67 && u[h + 6] == 65 && u[h + 7] == 80 && u[h + 8] == 69 && u[h + 9] == 50 && u[h + 10] == 46 && u[h + 11] == 48 && u[h + 12] == 3 && u[h + 13] == 1 && u[h + 16] == 0)\n                      h += 14, j = u[h++] | u[h++] << 8, h++;\n                    else\n                      for (h += 12; ; ) {\n                        if (!(0 <= (_ = u[h++])))\n                          throw Error(\"Invalid block size\");\n                        if (_ === 0)\n                          break;\n                        h += _;\n                      }\n                    break;\n                  case 249:\n                    if (u[h++] !== 4 || u[h + 4] !== 0)\n                      throw new Error(\"Invalid graphics extension block.\");\n                    var T = u[h++], a = u[h++] | u[h++] << 8, c = u[h++];\n                    !(1 & T) && (c = null), p = T >> 2 & 7, h++;\n                    break;\n                  case 254:\n                    for (; ; ) {\n                      if (!(0 <= (_ = u[h++])))\n                        throw Error(\"Invalid block size\");\n                      if (_ === 0)\n                        break;\n                      h += _;\n                    }\n                    break;\n                  default:\n                    throw new Error(\"Unknown graphic control label: 0x\" + u[h - 1].toString(16));\n                }\n                break;\n              case 44:\n                var _, S = u[h++] | u[h++] << 8, E = u[h++] | u[h++] << 8, A = u[h++] | u[h++] << 8, x = u[h++] | u[h++] << 8, V = u[h++], P = V >> 6 & 1, M = 1 << 1 + (7 & V), R = o, L = i, F = !1, V = (V >> 7 && (F = !0, R = h, h += 3 * (L = M)), h);\n                for (h++; ; ) {\n                  if (!(0 <= (_ = u[h++])))\n                    throw Error(\"Invalid block size\");\n                  if (_ === 0)\n                    break;\n                  h += _;\n                }\n                n.push({ x: S, y: E, width: A, height: x, has_local_palette: F, palette_offset: R, palette_size: L, data_offset: V, data_length: h - V, transparent_index: c, interlaced: !!P, delay: a, disposal: p });\n                break;\n              case 59:\n                l = !1;\n                break;\n              default:\n                throw new Error(\"Unknown gif block: 0x\" + u[h - 1].toString(16));\n            }\n          this.numFrames = function() {\n            return n.length;\n          }, this.loopCount = function() {\n            return j;\n          }, this.frameInfo = function(G) {\n            if (G < 0 || G >= n.length)\n              throw new Error(\"Frame index out of range.\");\n            return n[G];\n          }, this.decodeAndBlitFrameBGRA = function(G, U) {\n            for (var G = this.frameInfo(G), W = G.width * G.height, X = new Uint8Array(W), ne = (y(u, G.data_offset, X, W), G.palette_offset), b = G.transparent_index, O = (b === null && (b = 256), G.width), D = g - O, B = O, Y = 4 * (G.y * g + G.x), J = 4 * ((G.y + G.height) * g + G.x), te = Y, ce = 4 * D, re = (G.interlaced === !0 && (ce += 4 * g * 7), 8), ue = 0, le = X.length; ue < le; ++ue) {\n              var K, ae, he = X[ue];\n              B === 0 && (B = O, J <= (te += ce) && (ce = 4 * D + 4 * g * (re - 1), te = Y + (O + D) * (re << 1), re >>= 1)), he === b ? te += 4 : (K = u[ne + 3 * he], ae = u[ne + 3 * he + 1], he = u[ne + 3 * he + 2], U[te++] = he, U[te++] = ae, U[te++] = K, U[te++] = 255), --B;\n            }\n          }, this.decodeAndBlitFrameRGBA = function(G, U) {\n            for (var G = this.frameInfo(G), W = G.width * G.height, X = new Uint8Array(W), ne = (y(u, G.data_offset, X, W), G.palette_offset), b = G.transparent_index, O = (b === null && (b = 256), G.width), D = g - O, B = O, Y = 4 * (G.y * g + G.x), J = 4 * ((G.y + G.height) * g + G.x), te = Y, ce = 4 * D, re = (G.interlaced === !0 && (ce += 4 * g * 7), 8), ue = 0, le = X.length; ue < le; ++ue) {\n              var K, ae, he = X[ue];\n              B === 0 && (B = O, J <= (te += ce) && (ce = 4 * D + 4 * g * (re - 1), te = Y + (O + D) * (re << 1), re >>= 1)), he === b ? te += 4 : (K = u[ne + 3 * he], ae = u[ne + 3 * he + 1], he = u[ne + 3 * he + 2], U[te++] = K, U[te++] = ae, U[te++] = he, U[te++] = 255), --B;\n            }\n          };\n        };\n      } catch {\n      }\n    }, {}], 254: [function(t, H, C) {\n      (function(m) {\n        var y, u;\n        y = this, u = function(h) {\n          function g(I) {\n            if (this == null)\n              throw TypeError();\n            var v, w = String(this), k = w.length, I = I ? Number(I) : 0;\n            if (!((I = I != I ? 0 : I) < 0 || k <= I))\n              return 55296 <= (v = w.charCodeAt(I)) && v <= 56319 && I + 1 < k && 56320 <= (k = w.charCodeAt(I + 1)) && k <= 57343 ? 1024 * (v - 55296) + k - 56320 + 65536 : v;\n          }\n          String.prototype.codePointAt || ((f = function() {\n            try {\n              var d = {}, v = Object.defineProperty, w = v(d, d, d) && v;\n            } catch {\n            }\n            return w;\n          }()) ? f(String.prototype, \"codePointAt\", { value: g, configurable: !0, writable: !0 }) : String.prototype.codePointAt = g);\n          var f, r = 0, s = -3;\n          function o() {\n            this.table = new Uint16Array(16), this.trans = new Uint16Array(288);\n          }\n          function i(d, v) {\n            this.source = d, this.sourceIndex = 0, this.tag = 0, this.bitcount = 0, this.dest = v, this.destLen = 0, this.ltree = new o(), this.dtree = new o();\n          }\n          var l = new o(), n = new o(), a = new Uint8Array(30), c = new Uint16Array(30), p = new Uint8Array(30), j = new Uint16Array(30), T = new Uint8Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), _ = new o(), S = new Uint8Array(320);\n          function E(d, v, w, k) {\n            for (var I, N = 0; N < w; ++N)\n              d[N] = 0;\n            for (N = 0; N < 30 - w; ++N)\n              d[N + w] = N / w | 0;\n            for (I = k, N = 0; N < 30; ++N)\n              v[N] = I, I += 1 << d[N];\n          }\n          var A = new Uint16Array(16);\n          function x(d, v, w, k) {\n            for (var I, N = 0; N < 16; ++N)\n              d.table[N] = 0;\n            for (N = 0; N < k; ++N)\n              d.table[v[w + N]]++;\n            for (N = I = d.table[0] = 0; N < 16; ++N)\n              A[N] = I, I += d.table[N];\n            for (N = 0; N < k; ++N)\n              v[w + N] && (d.trans[A[v[w + N]]++] = N);\n          }\n          function P(d, v, w) {\n            if (!v)\n              return w;\n            for (; d.bitcount < 24; )\n              d.tag |= d.source[d.sourceIndex++] << d.bitcount, d.bitcount += 8;\n            var k = d.tag & 65535 >>> 16 - v;\n            return d.tag >>>= v, d.bitcount -= v, k + w;\n          }\n          function M(d, v) {\n            for (; d.bitcount < 24; )\n              d.tag |= d.source[d.sourceIndex++] << d.bitcount, d.bitcount += 8;\n            for (var w = 0, k = 0, I = 0, N = d.tag; k = 2 * k + (1 & N), N >>>= 1, w += v.table[++I], 0 <= (k -= v.table[I]); )\n              ;\n            return d.tag = N, d.bitcount -= I, v.trans[w + k];\n          }\n          function R(d, v, w) {\n            for (; ; ) {\n              var k = M(d, v);\n              if (k === 256)\n                return r;\n              if (k < 256)\n                d.dest[d.destLen++] = k;\n              else\n                for (var I, N = P(d, a[k -= 257], c[k]), k = M(d, w), z = I = d.destLen - P(d, p[k], j[k]); z < I + N; ++z)\n                  d.dest[d.destLen++] = d.dest[z];\n            }\n          }\n          for (var L = l, F = n, V = 0; V < 7; ++V)\n            L.table[V] = 0;\n          for (L.table[7] = 24, L.table[8] = 152, L.table[9] = 112, V = 0; V < 24; ++V)\n            L.trans[V] = 256 + V;\n          for (V = 0; V < 144; ++V)\n            L.trans[24 + V] = V;\n          for (V = 0; V < 8; ++V)\n            L.trans[168 + V] = 280 + V;\n          for (V = 0; V < 112; ++V)\n            L.trans[176 + V] = 144 + V;\n          for (V = 0; V < 5; ++V)\n            F.table[V] = 0;\n          for (F.table[5] = 32, V = 0; V < 32; ++V)\n            F.trans[V] = V;\n          E(a, c, 4, 3), E(p, j, 2, 1), a[28] = 0, c[28] = 258;\n          var G = function(d, v) {\n            var w, k, I, N = new i(d, v);\n            do {\n              switch (I = void 0, (k = N).bitcount-- || (k.tag = k.source[k.sourceIndex++], k.bitcount = 7), I = 1 & k.tag, k.tag >>>= 1, k = I, P(N, 2, 0)) {\n                case 0:\n                  w = function(Ee) {\n                    for (var $e, lt; 8 < Ee.bitcount; )\n                      Ee.sourceIndex--, Ee.bitcount -= 8;\n                    if (($e = 256 * Ee.source[Ee.sourceIndex + 1] + Ee.source[Ee.sourceIndex]) !== (65535 & ~(256 * Ee.source[Ee.sourceIndex + 3] + Ee.source[Ee.sourceIndex + 2])))\n                      return s;\n                    for (Ee.sourceIndex += 4, lt = $e; lt; --lt)\n                      Ee.dest[Ee.destLen++] = Ee.source[Ee.sourceIndex++];\n                    return Ee.bitcount = 0, r;\n                  }(N);\n                  break;\n                case 1:\n                  w = R(N, l, n);\n                  break;\n                case 2:\n                  Ae = ke = Ie = Te = z = de = be = Se = ye = oe = se = Q = void 0;\n                  for (var z, Q = N, se = N.ltree, oe = N.dtree, ye = P(Q, 5, 257), Se = P(Q, 5, 1), be = P(Q, 4, 4), de = 0; de < 19; ++de)\n                    S[de] = 0;\n                  for (de = 0; de < be; ++de) {\n                    var Ie = P(Q, 3, 0);\n                    S[T[de]] = Ie;\n                  }\n                  for (x(_, S, 0, 19), z = 0; z < ye + Se; ) {\n                    var ke = M(Q, _);\n                    switch (ke) {\n                      case 16:\n                        for (var Ae = S[z - 1], Te = P(Q, 2, 3); Te; --Te)\n                          S[z++] = Ae;\n                        break;\n                      case 17:\n                        for (Te = P(Q, 3, 3); Te; --Te)\n                          S[z++] = 0;\n                        break;\n                      case 18:\n                        for (Te = P(Q, 7, 11); Te; --Te)\n                          S[z++] = 0;\n                        break;\n                      default:\n                        S[z++] = ke;\n                    }\n                  }\n                  x(se, S, 0, ye), x(oe, S, ye, Se), w = R(N, N.ltree, N.dtree);\n                  break;\n                default:\n                  w = s;\n              }\n              if (w !== r)\n                throw new Error(\"Data error\");\n            } while (!k);\n            return N.destLen < N.dest.length ? typeof N.dest.slice == \"function\" ? N.dest.slice(0, N.destLen) : N.dest.subarray(0, N.destLen) : N.dest;\n          };\n          function U(d, v, w, k, I) {\n            return Math.pow(1 - I, 3) * d + 3 * Math.pow(1 - I, 2) * I * v + 3 * (1 - I) * Math.pow(I, 2) * w + Math.pow(I, 3) * k;\n          }\n          function W() {\n            this.x1 = Number.NaN, this.y1 = Number.NaN, this.x2 = Number.NaN, this.y2 = Number.NaN;\n          }\n          function X() {\n            this.commands = [], this.fill = \"black\", this.stroke = null, this.strokeWidth = 1;\n          }\n          function ne(d) {\n            throw new Error(d);\n          }\n          function b(d, v) {\n            d || ne(v);\n          }\n          W.prototype.isEmpty = function() {\n            return isNaN(this.x1) || isNaN(this.y1) || isNaN(this.x2) || isNaN(this.y2);\n          }, W.prototype.addPoint = function(d, v) {\n            typeof d == \"number\" && ((isNaN(this.x1) || isNaN(this.x2)) && (this.x1 = d, this.x2 = d), d < this.x1 && (this.x1 = d), d > this.x2 && (this.x2 = d)), typeof v == \"number\" && ((isNaN(this.y1) || isNaN(this.y2)) && (this.y1 = v, this.y2 = v), v < this.y1 && (this.y1 = v), v > this.y2 && (this.y2 = v));\n          }, W.prototype.addX = function(d) {\n            this.addPoint(d, null);\n          }, W.prototype.addY = function(d) {\n            this.addPoint(null, d);\n          }, W.prototype.addBezier = function(d, v, w, k, I, N, z, Q) {\n            var se = [d, v], oe = [w, k], ye = [I, N], Se = [z, Q];\n            this.addPoint(d, v), this.addPoint(z, Q);\n            for (var be = 0; be <= 1; be++) {\n              var de, Ie = 6 * se[be] - 12 * oe[be] + 6 * ye[be], ke = -3 * se[be] + 9 * oe[be] - 9 * ye[be] + 3 * Se[be], Ae = 3 * oe[be] - 3 * se[be];\n              ke == 0 ? Ie == 0 || 0 < (de = -Ae / Ie) && de < 1 && (be === 0 && this.addX(U(se[be], oe[be], ye[be], Se[be], de)), be === 1 && this.addY(U(se[be], oe[be], ye[be], Se[be], de))) : (de = Math.pow(Ie, 2) - 4 * Ae * ke) < 0 || (0 < (Ae = (-Ie + Math.sqrt(de)) / (2 * ke)) && Ae < 1 && (be === 0 && this.addX(U(se[be], oe[be], ye[be], Se[be], Ae)), be === 1 && this.addY(U(se[be], oe[be], ye[be], Se[be], Ae))), 0 < (Ae = (-Ie - Math.sqrt(de)) / (2 * ke)) && Ae < 1 && (be === 0 && this.addX(U(se[be], oe[be], ye[be], Se[be], Ae)), be === 1 && this.addY(U(se[be], oe[be], ye[be], Se[be], Ae))));\n            }\n          }, W.prototype.addQuad = function(d, v, w, k, I, N) {\n            w = d + 2 / 3 * (w - d), k = v + 2 / 3 * (k - v), this.addBezier(d, v, w, k, w + 1 / 3 * (I - d), k + 1 / 3 * (N - v), I, N);\n          }, X.prototype.moveTo = function(d, v) {\n            this.commands.push({ type: \"M\", x: d, y: v });\n          }, X.prototype.lineTo = function(d, v) {\n            this.commands.push({ type: \"L\", x: d, y: v });\n          }, X.prototype.curveTo = X.prototype.bezierCurveTo = function(d, v, w, k, I, N) {\n            this.commands.push({ type: \"C\", x1: d, y1: v, x2: w, y2: k, x: I, y: N });\n          }, X.prototype.quadTo = X.prototype.quadraticCurveTo = function(d, v, w, k) {\n            this.commands.push({ type: \"Q\", x1: d, y1: v, x: w, y: k });\n          }, X.prototype.close = X.prototype.closePath = function() {\n            this.commands.push({ type: \"Z\" });\n          }, X.prototype.extend = function(d) {\n            var v;\n            if (d.commands)\n              d = d.commands;\n            else if (d instanceof W)\n              return v = d, this.moveTo(v.x1, v.y1), this.lineTo(v.x2, v.y1), this.lineTo(v.x2, v.y2), this.lineTo(v.x1, v.y2), void this.close();\n            Array.prototype.push.apply(this.commands, d);\n          }, X.prototype.getBoundingBox = function() {\n            for (var d = new W(), v = 0, w = 0, k = 0, I = 0, N = 0; N < this.commands.length; N++) {\n              var z = this.commands[N];\n              switch (z.type) {\n                case \"M\":\n                  d.addPoint(z.x, z.y), v = k = z.x, w = I = z.y;\n                  break;\n                case \"L\":\n                  d.addPoint(z.x, z.y), k = z.x, I = z.y;\n                  break;\n                case \"Q\":\n                  d.addQuad(k, I, z.x1, z.y1, z.x, z.y), k = z.x, I = z.y;\n                  break;\n                case \"C\":\n                  d.addBezier(k, I, z.x1, z.y1, z.x2, z.y2, z.x, z.y), k = z.x, I = z.y;\n                  break;\n                case \"Z\":\n                  k = v, I = w;\n                  break;\n                default:\n                  throw new Error(\"Unexpected path command \" + z.type);\n              }\n            }\n            return d.isEmpty() && d.addPoint(0, 0), d;\n          }, X.prototype.draw = function(d) {\n            d.beginPath();\n            for (var v = 0; v < this.commands.length; v += 1) {\n              var w = this.commands[v];\n              w.type === \"M\" ? d.moveTo(w.x, w.y) : w.type === \"L\" ? d.lineTo(w.x, w.y) : w.type === \"C\" ? d.bezierCurveTo(w.x1, w.y1, w.x2, w.y2, w.x, w.y) : w.type === \"Q\" ? d.quadraticCurveTo(w.x1, w.y1, w.x, w.y) : w.type === \"Z\" && d.closePath();\n            }\n            this.fill && (d.fillStyle = this.fill, d.fill()), this.stroke && (d.strokeStyle = this.stroke, d.lineWidth = this.strokeWidth, d.stroke());\n          }, X.prototype.toPathData = function(d) {\n            function v() {\n              for (var N = arguments, z = \"\", Q = 0; Q < arguments.length; Q += 1) {\n                var se = N[Q];\n                0 <= se && 0 < Q && (z += \" \"), z += (se = se, Math.round(se) === se ? \"\" + Math.round(se) : se.toFixed(d));\n              }\n              return z;\n            }\n            d = d !== void 0 ? d : 2;\n            for (var w = \"\", k = 0; k < this.commands.length; k += 1) {\n              var I = this.commands[k];\n              I.type === \"M\" ? w += \"M\" + v(I.x, I.y) : I.type === \"L\" ? w += \"L\" + v(I.x, I.y) : I.type === \"C\" ? w += \"C\" + v(I.x1, I.y1, I.x2, I.y2, I.x, I.y) : I.type === \"Q\" ? w += \"Q\" + v(I.x1, I.y1, I.x, I.y) : I.type === \"Z\" && (w += \"Z\");\n            }\n            return w;\n          }, X.prototype.toSVG = function(d) {\n            var v = (v = '<path d=\"') + this.toPathData(d) + '\"';\n            return this.fill && this.fill !== \"black\" && (this.fill === null ? v += ' fill=\"none\"' : v += ' fill=\"' + this.fill + '\"'), this.stroke && (v += ' stroke=\"' + this.stroke + '\" stroke-width=\"' + this.strokeWidth + '\"'), v += \"/>\";\n          }, X.prototype.toDOMElement = function(v) {\n            var v = this.toPathData(v), w = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n            return w.setAttribute(\"d\", v), w;\n          };\n          var O = { fail: ne, argument: b, assert: b }, D = {}, B = {}, Y = {};\n          function J(d) {\n            return function() {\n              return d;\n            };\n          }\n          B.BYTE = function(d) {\n            return O.argument(0 <= d && d <= 255, \"Byte value should be between 0 and 255.\"), [d];\n          }, Y.BYTE = J(1), B.CHAR = function(d) {\n            return [d.charCodeAt(0)];\n          }, Y.CHAR = J(1), B.CHARARRAY = function(d) {\n            for (var v = [], w = 0; w < d.length; w += 1)\n              v[w] = d.charCodeAt(w);\n            return v;\n          }, Y.CHARARRAY = function(d) {\n            return d.length;\n          }, B.USHORT = function(d) {\n            return [d >> 8 & 255, 255 & d];\n          }, Y.USHORT = J(2), B.SHORT = function(d) {\n            return [(d = 32768 <= d ? -(65536 - d) : d) >> 8 & 255, 255 & d];\n          }, Y.SHORT = J(2), B.UINT24 = function(d) {\n            return [d >> 16 & 255, d >> 8 & 255, 255 & d];\n          }, Y.UINT24 = J(3), B.ULONG = function(d) {\n            return [d >> 24 & 255, d >> 16 & 255, d >> 8 & 255, 255 & d];\n          }, Y.ULONG = J(4), B.LONG = function(d) {\n            return [(d = 2147483648 <= d ? -(4294967296 - d) : d) >> 24 & 255, d >> 16 & 255, d >> 8 & 255, 255 & d];\n          }, Y.LONG = J(4), B.FIXED = B.ULONG, Y.FIXED = Y.ULONG, B.FWORD = B.SHORT, Y.FWORD = Y.SHORT, B.UFWORD = B.USHORT, Y.UFWORD = Y.USHORT, B.LONGDATETIME = function(d) {\n            return [0, 0, 0, 0, d >> 24 & 255, d >> 16 & 255, d >> 8 & 255, 255 & d];\n          }, Y.LONGDATETIME = J(8), B.TAG = function(d) {\n            return O.argument(d.length === 4, \"Tag should be exactly 4 ASCII characters.\"), [d.charCodeAt(0), d.charCodeAt(1), d.charCodeAt(2), d.charCodeAt(3)];\n          }, Y.TAG = J(4), B.Card8 = B.BYTE, Y.Card8 = Y.BYTE, B.Card16 = B.USHORT, Y.Card16 = Y.USHORT, B.OffSize = B.BYTE, Y.OffSize = Y.BYTE, B.SID = B.USHORT, Y.SID = Y.USHORT, B.NUMBER = function(d) {\n            return -107 <= d && d <= 107 ? [d + 139] : 108 <= d && d <= 1131 ? [247 + ((d -= 108) >> 8), 255 & d] : -1131 <= d && d <= -108 ? [251 + ((d = -d - 108) >> 8), 255 & d] : -32768 <= d && d <= 32767 ? B.NUMBER16(d) : B.NUMBER32(d);\n          }, Y.NUMBER = function(d) {\n            return B.NUMBER(d).length;\n          }, B.NUMBER16 = function(d) {\n            return [28, d >> 8 & 255, 255 & d];\n          }, Y.NUMBER16 = J(3), B.NUMBER32 = function(d) {\n            return [29, d >> 24 & 255, d >> 16 & 255, d >> 8 & 255, 255 & d];\n          }, Y.NUMBER32 = J(5), B.REAL = function(d) {\n            for (var v = d.toString(), w = /\\.(\\d*?)(?:9{5,20}|0{5,20})\\d{0,2}(?:e(.+)|$)/.exec(v), k = (w && (w = parseFloat(\"1e\" + ((w[2] ? +w[2] : 0) + w[1].length)), v = (Math.round(d * w) / w).toString()), \"\"), I = 0, N = v.length; I < N; I += 1) {\n              var z = v[I];\n              k += z === \"e\" ? v[++I] === \"-\" ? \"c\" : \"b\" : z === \".\" ? \"a\" : z === \"-\" ? \"e\" : z;\n            }\n            for (var Q = [30], se = 0, oe = (k += 1 & k.length ? \"f\" : \"ff\").length; se < oe; se += 2)\n              Q.push(parseInt(k.substr(se, 2), 16));\n            return Q;\n          }, Y.REAL = function(d) {\n            return B.REAL(d).length;\n          }, B.NAME = B.CHARARRAY, Y.NAME = Y.CHARARRAY, B.STRING = B.CHARARRAY, Y.STRING = Y.CHARARRAY, D.UTF8 = function(d, v, w) {\n            for (var k = [], I = w, N = 0; N < I; N++, v += 1)\n              k[N] = d.getUint8(v);\n            return String.fromCharCode.apply(null, k);\n          }, D.UTF16 = function(d, v, w) {\n            for (var k = [], I = w / 2, N = 0; N < I; N++, v += 2)\n              k[N] = d.getUint16(v);\n            return String.fromCharCode.apply(null, k);\n          }, B.UTF16 = function(d) {\n            for (var v = [], w = 0; w < d.length; w += 1) {\n              var k = d.charCodeAt(w);\n              v[v.length] = k >> 8 & 255, v[v.length] = 255 & k;\n            }\n            return v;\n          }, Y.UTF16 = function(d) {\n            return 2 * d.length;\n          };\n          var te, ce = { \"x-mac-croatian\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊©⁄€‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ\", \"x-mac-cyrillic\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю\", \"x-mac-gaelic\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØḂ±≤≥ḃĊċḊḋḞḟĠġṀæøṁṖṗɼƒſṠ«»… ÀÃÕŒœ–—“”‘’ṡẛÿŸṪ€‹›Ŷŷṫ·Ỳỳ⁊ÂÊÁËÈÍÎÏÌÓÔ♣ÒÚÛÙıÝýŴŵẄẅẀẁẂẃ\", \"x-mac-greek\": \"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦€ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ­\", \"x-mac-icelandic\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\", \"x-mac-inuit\": \"ᐃᐄᐅᐆᐊᐋᐱᐲᐳᐴᐸᐹᑉᑎᑏᑐᑑᑕᑖᑦᑭᑮᑯᑰᑲᑳᒃᒋᒌᒍᒎᒐᒑ°ᒡᒥᒦ•¶ᒧ®©™ᒨᒪᒫᒻᓂᓃᓄᓅᓇᓈᓐᓯᓰᓱᓲᓴᓵᔅᓕᓖᓗᓘᓚᓛᓪᔨᔩᔪᔫᔭ… ᔮᔾᕕᕖᕗ–—“”‘’ᕘᕙᕚᕝᕆᕇᕈᕉᕋᕌᕐᕿᖀᖁᖂᖃᖄᖅᖏᖐᖑᖒᖓᖔᖕᙱᙲᙳᙴᙵᙶᖖᖠᖡᖢᖣᖤᖥᖦᕼŁł\", \"x-mac-ce\": \"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\", macintosh: \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\", \"x-mac-romanian\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂȘ∞±≤≥¥µ∂∑∏π∫ªºΩăș¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄€‹›Țț‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\", \"x-mac-turkish\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔÒÚÛÙˆ˜¯˘˙˚¸˝˛ˇ\" }, re = (D.MACSTRING = function(d, v, w, k) {\n            var I = ce[k];\n            if (I !== void 0) {\n              for (var N = \"\", z = 0; z < w; z++) {\n                var Q = d.getUint8(v + z);\n                N += Q <= 127 ? String.fromCharCode(Q) : I[127 & Q];\n              }\n              return N;\n            }\n          }, typeof WeakMap == \"function\" && /* @__PURE__ */ new WeakMap());\n          function ue(d) {\n            return -128 <= d && d <= 127;\n          }\n          B.MACSTRING = function(d, v) {\n            var w = function(z) {\n              if (!te)\n                for (var Q in te = {}, ce)\n                  te[Q] = new String(Q);\n              var se = te[z];\n              if (se !== void 0) {\n                if (re) {\n                  var oe = re.get(se);\n                  if (oe !== void 0)\n                    return oe;\n                }\n                var ye = ce[z];\n                if (ye !== void 0) {\n                  for (var Se = {}, be = 0; be < ye.length; be++)\n                    Se[ye.charCodeAt(be)] = be + 128;\n                  return re && re.set(se, Se), Se;\n                }\n              }\n            }(v);\n            if (w !== void 0) {\n              for (var k = [], I = 0; I < d.length; I++) {\n                var N = d.charCodeAt(I);\n                if (128 <= N && (N = w[N]) === void 0)\n                  return;\n                k[I] = N;\n              }\n              return k;\n            }\n          }, Y.MACSTRING = function(d, v) {\n            return d = B.MACSTRING(d, v), d !== void 0 ? d.length : 0;\n          }, B.VARDELTAS = function(d) {\n            for (var k = 0, v = []; k < d.length; )\n              var w = d[k], k = (w === 0 ? function(I, N, z) {\n                for (var Q = 0, se = I.length; N < se && Q < 64 && I[N] === 0; )\n                  ++N, ++Q;\n                return z.push(128 | Q - 1), N;\n              } : -128 <= w && w <= 127 ? function(I, N, z) {\n                for (var Q = 0, se = I.length, oe = N; oe < se && Q < 64; ) {\n                  var ye = I[oe];\n                  if (!ue(ye) || ye === 0 && oe + 1 < se && I[oe + 1] === 0)\n                    break;\n                  ++oe, ++Q;\n                }\n                z.push(Q - 1);\n                for (var Se = N; Se < oe; ++Se)\n                  z.push(I[Se] + 256 & 255);\n                return oe;\n              } : function(I, N, z) {\n                for (var Q = 0, se = I.length, oe = N; oe < se && Q < 64; ) {\n                  var ye = I[oe];\n                  if (ye === 0 || ue(ye) && oe + 1 < se && ue(I[oe + 1]))\n                    break;\n                  ++oe, ++Q;\n                }\n                z.push(64 | Q - 1);\n                for (var Se = N; Se < oe; ++Se) {\n                  var be = I[Se];\n                  z.push(be + 65536 >> 8 & 255, be + 256 & 255);\n                }\n                return oe;\n              })(d, k, v);\n            return v;\n          }, B.INDEX = function(d) {\n            for (var v = 1, w = [v], k = [], I = 0; I < d.length; I += 1) {\n              var N = B.OBJECT(d[I]);\n              Array.prototype.push.apply(k, N), v += N.length, w.push(v);\n            }\n            if (k.length === 0)\n              return [0, 0];\n            for (var z = [], Q = 1 + Math.floor(Math.log(v) / Math.log(2)) / 8 | 0, se = [void 0, B.BYTE, B.USHORT, B.UINT24, B.ULONG][Q], oe = 0; oe < w.length; oe += 1) {\n              var ye = se(w[oe]);\n              Array.prototype.push.apply(z, ye);\n            }\n            return Array.prototype.concat(B.Card16(d.length), B.OffSize(Q), z, k);\n          }, Y.INDEX = function(d) {\n            return B.INDEX(d).length;\n          }, B.DICT = function(d) {\n            for (var v = [], w = Object.keys(d), k = w.length, I = 0; I < k; I += 1) {\n              var N = parseInt(w[I], 0), z = d[N];\n              v = (v = v.concat(B.OPERAND(z.value, z.type))).concat(B.OPERATOR(N));\n            }\n            return v;\n          }, Y.DICT = function(d) {\n            return B.DICT(d).length;\n          }, B.OPERATOR = function(d) {\n            return d < 1200 ? [d] : [12, d - 1200];\n          }, B.OPERAND = function(d, v) {\n            var w = [];\n            if (Array.isArray(v))\n              for (var k = 0; k < v.length; k += 1)\n                O.argument(d.length === v.length, \"Not enough arguments given for type\" + v), w = w.concat(B.OPERAND(d[k], v[k]));\n            else if (v === \"SID\")\n              w = w.concat(B.NUMBER(d));\n            else if (v === \"offset\")\n              w = w.concat(B.NUMBER32(d));\n            else if (v === \"number\")\n              w = w.concat(B.NUMBER(d));\n            else {\n              if (v !== \"real\")\n                throw new Error(\"Unknown operand type \" + v);\n              w = w.concat(B.REAL(d));\n            }\n            return w;\n          }, B.OP = B.BYTE, Y.OP = Y.BYTE;\n          var le = typeof WeakMap == \"function\" && /* @__PURE__ */ new WeakMap();\n          function K(d, v, w) {\n            for (var k = 0; k < v.length; k += 1) {\n              var I = v[k];\n              this[I.name] = I.value;\n            }\n            if (this.tableName = d, this.fields = v, w)\n              for (var N = Object.keys(w), z = 0; z < N.length; z += 1) {\n                var Q = N[z], se = w[Q];\n                this[Q] !== void 0 && (this[Q] = se);\n              }\n          }\n          function ae(d, v, w) {\n            w === void 0 && (w = v.length);\n            var k = new Array(v.length + 1);\n            k[0] = { name: d + \"Count\", type: \"USHORT\", value: w };\n            for (var I = 0; I < v.length; I++)\n              k[I + 1] = { name: d + I, type: \"USHORT\", value: v[I] };\n            return k;\n          }\n          function he(d, v, w) {\n            var k = v.length, I = new Array(k + 1);\n            I[0] = { name: d + \"Count\", type: \"USHORT\", value: k };\n            for (var N = 0; N < k; N++)\n              I[N + 1] = { name: d + N, type: \"TABLE\", value: w(v[N], N) };\n            return I;\n          }\n          function _e(d, v, w) {\n            var k = v.length, I = [];\n            I[0] = { name: d + \"Count\", type: \"USHORT\", value: k };\n            for (var N = 0; N < k; N++)\n              I = I.concat(w(v[N], N));\n            return I;\n          }\n          function fe(d) {\n            d.format === 1 ? K.call(this, \"coverageTable\", [{ name: \"coverageFormat\", type: \"USHORT\", value: 1 }].concat(ae(\"glyph\", d.glyphs))) : O.assert(!1, \"Can't create coverage table format 2 yet.\");\n          }\n          function ge(d) {\n            K.call(this, \"scriptListTable\", _e(\"scriptRecord\", d, function(v, w) {\n              var k = v.script, I = k.defaultLangSys;\n              return O.assert(!!I, \"Unable to write GSUB: script \" + v.tag + \" has no default language system.\"), [{ name: \"scriptTag\" + w, type: \"TAG\", value: v.tag }, { name: \"script\" + w, type: \"TABLE\", value: new K(\"scriptTable\", [{ name: \"defaultLangSys\", type: \"TABLE\", value: new K(\"defaultLangSys\", [{ name: \"lookupOrder\", type: \"USHORT\", value: 0 }, { name: \"reqFeatureIndex\", type: \"USHORT\", value: I.reqFeatureIndex }].concat(ae(\"featureIndex\", I.featureIndexes))) }].concat(_e(\"langSys\", k.langSysRecords, function(N, z) {\n                var Q = N.langSys;\n                return [{ name: \"langSysTag\" + z, type: \"TAG\", value: N.tag }, { name: \"langSys\" + z, type: \"TABLE\", value: new K(\"langSys\", [{ name: \"lookupOrder\", type: \"USHORT\", value: 0 }, { name: \"reqFeatureIndex\", type: \"USHORT\", value: Q.reqFeatureIndex }].concat(ae(\"featureIndex\", Q.featureIndexes))) }];\n              }))) }];\n            }));\n          }\n          function xe(d) {\n            K.call(this, \"featureListTable\", _e(\"featureRecord\", d, function(v, w) {\n              var k = v.feature;\n              return [{ name: \"featureTag\" + w, type: \"TAG\", value: v.tag }, { name: \"feature\" + w, type: \"TABLE\", value: new K(\"featureTable\", [{ name: \"featureParams\", type: \"USHORT\", value: k.featureParams }].concat(ae(\"lookupListIndex\", k.lookupListIndexes))) }];\n            }));\n          }\n          function De(d, v) {\n            K.call(this, \"lookupListTable\", he(\"lookup\", d, function(w) {\n              var k = v[w.lookupType];\n              return O.assert(!!k, \"Unable to write GSUB lookup type \" + w.lookupType + \" tables.\"), new K(\"lookupTable\", [{ name: \"lookupType\", type: \"USHORT\", value: w.lookupType }, { name: \"lookupFlag\", type: \"USHORT\", value: w.lookupFlag }].concat(he(\"subtable\", w.subtables, k)));\n            }));\n          }\n          B.CHARSTRING = function(d) {\n            if (le) {\n              var v = le.get(d);\n              if (v !== void 0)\n                return v;\n            }\n            for (var N = [], w = d.length, k = 0; k < w; k += 1)\n              var I = d[k], N = N.concat(B[I.type](I.value));\n            return le && le.set(d, N), N;\n          }, Y.CHARSTRING = function(d) {\n            return B.CHARSTRING(d).length;\n          }, B.OBJECT = function(d) {\n            var v = B[d.type];\n            return O.argument(v !== void 0, \"No encoding function for type \" + d.type), v(d.value);\n          }, Y.OBJECT = function(d) {\n            var v = Y[d.type];\n            return O.argument(v !== void 0, \"No sizeOf function for type \" + d.type), v(d.value);\n          }, B.TABLE = function(d) {\n            for (var v = [], w = d.fields.length, k = [], I = [], N = 0; N < w; N += 1) {\n              var z = d.fields[N], se = B[z.type], Q = (O.argument(se !== void 0, \"No encoding function for field type \" + z.type + \" (\" + z.name + \")\"), d[z.name]), se = se(Q = Q === void 0 ? z.value : Q);\n              z.type === \"TABLE\" ? (I.push(v.length), v = v.concat([0, 0]), k.push(se)) : v = v.concat(se);\n            }\n            for (var oe = 0; oe < k.length; oe += 1) {\n              var ye = I[oe], Se = v.length;\n              O.argument(Se < 65536, \"Table \" + d.tableName + \" too big.\"), v[ye] = Se >> 8, v[ye + 1] = 255 & Se, v = v.concat(k[oe]);\n            }\n            return v;\n          }, Y.TABLE = function(d) {\n            for (var v = 0, w = d.fields.length, k = 0; k < w; k += 1) {\n              var I = d.fields[k], N = Y[I.type], z = (O.argument(N !== void 0, \"No sizeOf function for field type \" + I.type + \" (\" + I.name + \")\"), d[I.name]);\n              v += N(z = z === void 0 ? I.value : z), I.type === \"TABLE\" && (v += 2);\n            }\n            return v;\n          }, B.RECORD = B.TABLE, Y.RECORD = Y.TABLE, B.LITERAL = function(d) {\n            return d;\n          }, Y.LITERAL = function(d) {\n            return d.length;\n          }, K.prototype.encode = function() {\n            return B.TABLE(this);\n          }, K.prototype.sizeOf = function() {\n            return Y.TABLE(this);\n          };\n          var Me = { Table: K, Record: K, Coverage: (fe.prototype = Object.create(K.prototype)).constructor = fe, ScriptList: (ge.prototype = Object.create(K.prototype)).constructor = ge, FeatureList: (xe.prototype = Object.create(K.prototype)).constructor = xe, LookupList: (De.prototype = Object.create(K.prototype)).constructor = De, ushortList: ae, tableList: he, recordList: _e };\n          function Qe(d, v) {\n            return d.getUint8(v);\n          }\n          function ze(d, v) {\n            return d.getUint16(v, !1);\n          }\n          function Ve(d, v) {\n            return d.getUint32(v, !1);\n          }\n          function Xe(d, v) {\n            return d.getInt16(v, !1) + d.getUint16(v + 2, !1) / 65535;\n          }\n          var He = { byte: 1, uShort: 2, short: 2, uLong: 4, fixed: 4, longDateTime: 8, tag: 4 };\n          function ve(d, v) {\n            this.data = d, this.offset = v, this.relativeOffset = 0;\n          }\n          ve.prototype.parseByte = function() {\n            var d = this.data.getUint8(this.offset + this.relativeOffset);\n            return this.relativeOffset += 1, d;\n          }, ve.prototype.parseChar = function() {\n            var d = this.data.getInt8(this.offset + this.relativeOffset);\n            return this.relativeOffset += 1, d;\n          }, ve.prototype.parseCard8 = ve.prototype.parseByte, ve.prototype.parseCard16 = ve.prototype.parseUShort = function() {\n            var d = this.data.getUint16(this.offset + this.relativeOffset);\n            return this.relativeOffset += 2, d;\n          }, ve.prototype.parseSID = ve.prototype.parseUShort, ve.prototype.parseOffset16 = ve.prototype.parseUShort, ve.prototype.parseShort = function() {\n            var d = this.data.getInt16(this.offset + this.relativeOffset);\n            return this.relativeOffset += 2, d;\n          }, ve.prototype.parseF2Dot14 = function() {\n            var d = this.data.getInt16(this.offset + this.relativeOffset) / 16384;\n            return this.relativeOffset += 2, d;\n          }, ve.prototype.parseOffset32 = ve.prototype.parseULong = function() {\n            var d = Ve(this.data, this.offset + this.relativeOffset);\n            return this.relativeOffset += 4, d;\n          }, ve.prototype.parseFixed = function() {\n            var d = Xe(this.data, this.offset + this.relativeOffset);\n            return this.relativeOffset += 4, d;\n          }, ve.prototype.parseString = function(d) {\n            var v = this.data, w = this.offset + this.relativeOffset, k = \"\";\n            this.relativeOffset += d;\n            for (var I = 0; I < d; I++)\n              k += String.fromCharCode(v.getUint8(w + I));\n            return k;\n          }, ve.prototype.parseTag = function() {\n            return this.parseString(4);\n          }, ve.prototype.parseLongDateTime = function() {\n            var d = Ve(this.data, this.offset + this.relativeOffset + 4);\n            return d -= 2082844800, this.relativeOffset += 8, d;\n          }, ve.prototype.parseVersion = function(d) {\n            var v = ze(this.data, this.offset + this.relativeOffset), w = ze(this.data, this.offset + this.relativeOffset + 2);\n            return this.relativeOffset += 4, v + w / (d = d === void 0 ? 4096 : d) / 10;\n          }, ve.prototype.skip = function(d, v) {\n            this.relativeOffset += He[d] * (v = v === void 0 ? 1 : v);\n          }, ve.prototype.parseULongList = function(d) {\n            d === void 0 && (d = this.parseULong());\n            for (var v = new Array(d), w = this.data, k = this.offset + this.relativeOffset, I = 0; I < d; I++)\n              v[I] = w.getUint32(k), k += 4;\n            return this.relativeOffset += 4 * d, v;\n          }, ve.prototype.parseOffset16List = ve.prototype.parseUShortList = function(d) {\n            d === void 0 && (d = this.parseUShort());\n            for (var v = new Array(d), w = this.data, k = this.offset + this.relativeOffset, I = 0; I < d; I++)\n              v[I] = w.getUint16(k), k += 2;\n            return this.relativeOffset += 2 * d, v;\n          }, ve.prototype.parseShortList = function(d) {\n            for (var v = new Array(d), w = this.data, k = this.offset + this.relativeOffset, I = 0; I < d; I++)\n              v[I] = w.getInt16(k), k += 2;\n            return this.relativeOffset += 2 * d, v;\n          }, ve.prototype.parseByteList = function(d) {\n            for (var v = new Array(d), w = this.data, k = this.offset + this.relativeOffset, I = 0; I < d; I++)\n              v[I] = w.getUint8(k++);\n            return this.relativeOffset += d, v;\n          }, ve.prototype.parseList = function(d, v) {\n            v || (v = d, d = this.parseUShort());\n            for (var w = new Array(d), k = 0; k < d; k++)\n              w[k] = v.call(this);\n            return w;\n          }, ve.prototype.parseList32 = function(d, v) {\n            v || (v = d, d = this.parseULong());\n            for (var w = new Array(d), k = 0; k < d; k++)\n              w[k] = v.call(this);\n            return w;\n          }, ve.prototype.parseRecordList = function(d, v) {\n            v || (v = d, d = this.parseUShort());\n            for (var w = new Array(d), k = Object.keys(v), I = 0; I < d; I++) {\n              for (var N = {}, z = 0; z < k.length; z++) {\n                var Q = k[z], se = v[Q];\n                N[Q] = se.call(this);\n              }\n              w[I] = N;\n            }\n            return w;\n          }, ve.prototype.parseRecordList32 = function(d, v) {\n            v || (v = d, d = this.parseULong());\n            for (var w = new Array(d), k = Object.keys(v), I = 0; I < d; I++) {\n              for (var N = {}, z = 0; z < k.length; z++) {\n                var Q = k[z], se = v[Q];\n                N[Q] = se.call(this);\n              }\n              w[I] = N;\n            }\n            return w;\n          }, ve.prototype.parseStruct = function(d) {\n            if (typeof d == \"function\")\n              return d.call(this);\n            for (var v = Object.keys(d), w = {}, k = 0; k < v.length; k++) {\n              var I = v[k], N = d[I];\n              w[I] = N.call(this);\n            }\n            return w;\n          }, ve.prototype.parseValueRecord = function(d) {\n            var v;\n            if ((d = d === void 0 ? this.parseUShort() : d) !== 0)\n              return v = {}, 1 & d && (v.xPlacement = this.parseShort()), 2 & d && (v.yPlacement = this.parseShort()), 4 & d && (v.xAdvance = this.parseShort()), 8 & d && (v.yAdvance = this.parseShort()), 16 & d && (v.xPlaDevice = void 0, this.parseShort()), 32 & d && (v.yPlaDevice = void 0, this.parseShort()), 64 & d && (v.xAdvDevice = void 0, this.parseShort()), 128 & d && (v.yAdvDevice = void 0, this.parseShort()), v;\n          }, ve.prototype.parseValueRecordList = function() {\n            for (var d = this.parseUShort(), v = this.parseUShort(), w = new Array(v), k = 0; k < v; k++)\n              w[k] = this.parseValueRecord(d);\n            return w;\n          }, ve.prototype.parsePointer = function(d) {\n            var v = this.parseOffset16();\n            if (0 < v)\n              return new ve(this.data, this.offset + v).parseStruct(d);\n          }, ve.prototype.parsePointer32 = function(d) {\n            var v = this.parseOffset32();\n            if (0 < v)\n              return new ve(this.data, this.offset + v).parseStruct(d);\n          }, ve.prototype.parseListOfLists = function(d) {\n            for (var v = this.parseOffset16List(), w = v.length, k = this.relativeOffset, I = new Array(w), N = 0; N < w; N++) {\n              var z = v[N];\n              if (z === 0)\n                I[N] = void 0;\n              else if (this.relativeOffset = z, d) {\n                for (var Q = this.parseOffset16List(), se = new Array(Q.length), oe = 0; oe < Q.length; oe++)\n                  this.relativeOffset = z + Q[oe], se[oe] = d.call(this);\n                I[N] = se;\n              } else\n                I[N] = this.parseUShortList();\n            }\n            return this.relativeOffset = k, I;\n          }, ve.prototype.parseCoverage = function() {\n            var d = this.offset + this.relativeOffset, v = this.parseUShort(), w = this.parseUShort();\n            if (v === 1)\n              return { format: 1, glyphs: this.parseUShortList(w) };\n            if (v !== 2)\n              throw new Error(\"0x\" + d.toString(16) + \": Coverage format must be 1 or 2.\");\n            for (var k = new Array(w), I = 0; I < w; I++)\n              k[I] = { start: this.parseUShort(), end: this.parseUShort(), index: this.parseUShort() };\n            return { format: 2, ranges: k };\n          }, ve.prototype.parseClassDef = function() {\n            var d = this.offset + this.relativeOffset, v = this.parseUShort();\n            if (v === 1)\n              return { format: 1, startGlyph: this.parseUShort(), classes: this.parseUShortList() };\n            if (v === 2)\n              return { format: 2, ranges: this.parseRecordList({ start: ve.uShort, end: ve.uShort, classId: ve.uShort }) };\n            throw new Error(\"0x\" + d.toString(16) + \": ClassDef format must be 1 or 2.\");\n          }, ve.list = function(d, v) {\n            return function() {\n              return this.parseList(d, v);\n            };\n          }, ve.list32 = function(d, v) {\n            return function() {\n              return this.parseList32(d, v);\n            };\n          }, ve.recordList = function(d, v) {\n            return function() {\n              return this.parseRecordList(d, v);\n            };\n          }, ve.recordList32 = function(d, v) {\n            return function() {\n              return this.parseRecordList32(d, v);\n            };\n          }, ve.pointer = function(d) {\n            return function() {\n              return this.parsePointer(d);\n            };\n          }, ve.pointer32 = function(d) {\n            return function() {\n              return this.parsePointer32(d);\n            };\n          }, ve.tag = ve.prototype.parseTag, ve.byte = ve.prototype.parseByte, ve.uShort = ve.offset16 = ve.prototype.parseUShort, ve.uShortList = ve.prototype.parseUShortList, ve.uLong = ve.offset32 = ve.prototype.parseULong, ve.uLongList = ve.prototype.parseULongList, ve.struct = ve.prototype.parseStruct, ve.coverage = ve.prototype.parseCoverage, ve.classDef = ve.prototype.parseClassDef;\n          var Re = { reserved: ve.uShort, reqFeatureIndex: ve.uShort, featureIndexes: ve.uShortList }, we = (ve.prototype.parseScriptList = function() {\n            return this.parsePointer(ve.recordList({ tag: ve.tag, script: ve.pointer({ defaultLangSys: ve.pointer(Re), langSysRecords: ve.recordList({ tag: ve.tag, langSys: ve.pointer(Re) }) }) })) || [];\n          }, ve.prototype.parseFeatureList = function() {\n            return this.parsePointer(ve.recordList({ tag: ve.tag, feature: ve.pointer({ featureParams: ve.offset16, lookupListIndexes: ve.uShortList }) })) || [];\n          }, ve.prototype.parseLookupList = function(d) {\n            return this.parsePointer(ve.list(ve.pointer(function() {\n              var v = this.parseUShort(), w = (O.argument(1 <= v && v <= 9, \"GPOS/GSUB lookup type \" + v + \" unknown.\"), this.parseUShort()), k = 16 & w;\n              return { lookupType: v, lookupFlag: w, subtables: this.parseList(ve.pointer(d[v])), markFilteringSet: k ? this.parseUShort() : void 0 };\n            }))) || [];\n          }, ve.prototype.parseFeatureVariationsList = function() {\n            return this.parsePointer32(function() {\n              var d = this.parseUShort(), v = this.parseUShort();\n              return O.argument(d === 1 && v < 1, \"GPOS/GSUB feature variations table unknown.\"), this.parseRecordList32({ conditionSetOffset: ve.offset32, featureTableSubstitutionOffset: ve.offset32 });\n            }) || [];\n          }, { getByte: Qe, getCard8: Qe, getUShort: ze, getCard16: ze, getShort: function(d, v) {\n            return d.getInt16(v, !1);\n          }, getULong: Ve, getFixed: Xe, getTag: function(d, v) {\n            for (var w = \"\", k = v; k < v + 4; k += 1)\n              w += String.fromCharCode(d.getInt8(k));\n            return w;\n          }, getOffset: function(d, v, w) {\n            for (var k = 0, I = 0; I < w; I += 1)\n              k = (k <<= 8) + d.getUint8(v + I);\n            return k;\n          }, getBytes: function(d, v, w) {\n            for (var k = [], I = v; I < w; I += 1)\n              k.push(d.getUint8(I));\n            return k;\n          }, bytesToString: function(d) {\n            for (var v = \"\", w = 0; w < d.length; w += 1)\n              v += String.fromCharCode(d[w]);\n            return v;\n          }, Parser: ve }), Z = { parse: function(d, v) {\n            for (var w = {}, k = (w.version = we.getUShort(d, v), O.argument(w.version === 0, \"cmap table version should be 0.\"), w.numTables = we.getUShort(d, v + 2), -1), I = w.numTables - 1; 0 <= I; --I) {\n              var N = we.getUShort(d, v + 4 + 8 * I), z = we.getUShort(d, v + 4 + 8 * I + 2);\n              if (N === 3 && (z === 0 || z === 1 || z === 10) || N === 0 && (z === 0 || z === 1 || z === 2 || z === 3 || z === 4)) {\n                k = we.getULong(d, v + 4 + 8 * I + 4);\n                break;\n              }\n            }\n            if (k === -1)\n              throw new Error(\"No valid cmap sub-tables found.\");\n            var Q = new we.Parser(d, v + k);\n            if (w.format = Q.parseUShort(), w.format === 12) {\n              var se, oe = w, ye = Q;\n              ye.parseUShort(), oe.length = ye.parseULong(), oe.language = ye.parseULong(), oe.groupCount = se = ye.parseULong(), oe.glyphIndexMap = {};\n              for (var Se = 0; Se < se; Se += 1)\n                for (var be = ye.parseULong(), de = ye.parseULong(), Ie = ye.parseULong(), ke = be; ke <= de; ke += 1)\n                  oe.glyphIndexMap[ke] = Ie, Ie++;\n            } else {\n              if (w.format !== 4)\n                throw new Error(\"Only format 4 and 12 cmap tables are supported (found format \" + w.format + \").\");\n              var Ae = w, Te = d, Ee = v, $e = k;\n              Ae.length = Q.parseUShort(), Ae.language = Q.parseUShort(), Ae.segCount = lt = Q.parseUShort() >> 1, Q.skip(\"uShort\", 3), Ae.glyphIndexMap = {};\n              for (var lt, et = new we.Parser(Te, Ee + $e + 14), tt = new we.Parser(Te, Ee + $e + 16 + 2 * lt), dt = new we.Parser(Te, Ee + $e + 16 + 4 * lt), wt = new we.Parser(Te, Ee + $e + 16 + 6 * lt), Ot = Ee + $e + 16 + 8 * lt, Rt = 0; Rt < lt - 1; Rt += 1)\n                for (var Ht = void 0, Wt = et.parseUShort(), Qt = tt.parseUShort(), xt = dt.parseShort(), St = wt.parseUShort(), vt = Qt; vt <= Wt; vt += 1)\n                  St !== 0 ? (Ot = (Ot = wt.offset + wt.relativeOffset - 2) + St + 2 * (vt - Qt), (Ht = we.getUShort(Te, Ot)) !== 0 && (Ht = Ht + xt & 65535)) : Ht = vt + xt & 65535, Ae.glyphIndexMap[vt] = Ht;\n            }\n            return w;\n          }, make: function(d) {\n            for (var v = !0, w = d.length - 1; 0 < w; --w)\n              if (65535 < d.get(w).unicode) {\n                console.log(\"Adding CMAP format 12 (needed!)\"), v = !1;\n                break;\n              }\n            var k, I, N = [{ name: \"version\", type: \"USHORT\", value: 0 }, { name: \"numTables\", type: \"USHORT\", value: v ? 1 : 2 }, { name: \"platformID\", type: \"USHORT\", value: 3 }, { name: \"encodingID\", type: \"USHORT\", value: 1 }, { name: \"offset\", type: \"ULONG\", value: v ? 12 : 20 }], z = (N = (N = v ? N : N.concat([{ name: \"cmap12PlatformID\", type: \"USHORT\", value: 3 }, { name: \"cmap12EncodingID\", type: \"USHORT\", value: 10 }, { name: \"cmap12Offset\", type: \"ULONG\", value: 0 }])).concat([{ name: \"format\", type: \"USHORT\", value: 4 }, { name: \"cmap4Length\", type: \"USHORT\", value: 0 }, { name: \"language\", type: \"USHORT\", value: 0 }, { name: \"segCountX2\", type: \"USHORT\", value: 0 }, { name: \"searchRange\", type: \"USHORT\", value: 0 }, { name: \"entrySelector\", type: \"USHORT\", value: 0 }, { name: \"rangeShift\", type: \"USHORT\", value: 0 }]), new Me.Table(\"cmap\", N));\n            for (z.segments = [], w = 0; w < d.length; w += 1) {\n              for (var Q = d.get(w), se = 0; se < Q.unicodes.length; se += 1)\n                k = Q.unicodes[se], I = w, z.segments.push({ end: k, start: k, delta: -(k - I), offset: 0, glyphIndex: I });\n              z.segments = z.segments.sort(function(Ee, $e) {\n                return Ee.start - $e.start;\n              });\n            }\n            z.segments.push({ end: 65535, start: 65535, delta: 1, offset: 0 });\n            var oe = z.segments.length, ye = 0, Se = [], be = [], de = [], Ie = [], ke = [], Ae = [];\n            for (w = 0; w < oe; w += 1) {\n              var Te = z.segments[w];\n              Te.end <= 65535 && Te.start <= 65535 ? (Se = Se.concat({ name: \"end_\" + w, type: \"USHORT\", value: Te.end }), be = be.concat({ name: \"start_\" + w, type: \"USHORT\", value: Te.start }), de = de.concat({ name: \"idDelta_\" + w, type: \"SHORT\", value: Te.delta }), Ie = Ie.concat({ name: \"idRangeOffset_\" + w, type: \"USHORT\", value: Te.offset }), Te.glyphId !== void 0 && (ke = ke.concat({ name: \"glyph_\" + w, type: \"USHORT\", value: Te.glyphId }))) : ye += 1, v || Te.glyphIndex === void 0 || (Ae = (Ae = (Ae = Ae.concat({ name: \"cmap12Start_\" + w, type: \"ULONG\", value: Te.start })).concat({ name: \"cmap12End_\" + w, type: \"ULONG\", value: Te.end })).concat({ name: \"cmap12Glyph_\" + w, type: \"ULONG\", value: Te.glyphIndex }));\n            }\n            return z.segCountX2 = 2 * (oe - ye), z.searchRange = 2 * Math.pow(2, Math.floor(Math.log(oe - ye) / Math.log(2))), z.entrySelector = Math.log(z.searchRange / 2) / Math.log(2), z.rangeShift = z.segCountX2 - z.searchRange, z.fields = z.fields.concat(Se), z.fields.push({ name: \"reservedPad\", type: \"USHORT\", value: 0 }), z.fields = z.fields.concat(be), z.fields = z.fields.concat(de), z.fields = z.fields.concat(Ie), z.fields = z.fields.concat(ke), z.cmap4Length = 14 + 2 * Se.length + 2 + 2 * be.length + 2 * de.length + 2 * Ie.length + 2 * ke.length, v || (N = 16 + 4 * Ae.length, z.cmap12Offset = 20 + z.cmap4Length, z.fields = z.fields.concat([{ name: \"cmap12Format\", type: \"USHORT\", value: 12 }, { name: \"cmap12Reserved\", type: \"USHORT\", value: 0 }, { name: \"cmap12Length\", type: \"ULONG\", value: N }, { name: \"cmap12Language\", type: \"ULONG\", value: 0 }, { name: \"cmap12nGroups\", type: \"ULONG\", value: Ae.length / 3 }]), z.fields = z.fields.concat(Ae)), z;\n          } }, $ = [\".notdef\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"questiondown\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"AE\", \"ordfeminine\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"ae\", \"dotlessi\", \"lslash\", \"oslash\", \"oe\", \"germandbls\", \"onesuperior\", \"logicalnot\", \"mu\", \"trademark\", \"Eth\", \"onehalf\", \"plusminus\", \"Thorn\", \"onequarter\", \"divide\", \"brokenbar\", \"degree\", \"thorn\", \"threequarters\", \"twosuperior\", \"registered\", \"minus\", \"eth\", \"multiply\", \"threesuperior\", \"copyright\", \"Aacute\", \"Acircumflex\", \"Adieresis\", \"Agrave\", \"Aring\", \"Atilde\", \"Ccedilla\", \"Eacute\", \"Ecircumflex\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Ntilde\", \"Oacute\", \"Ocircumflex\", \"Odieresis\", \"Ograve\", \"Otilde\", \"Scaron\", \"Uacute\", \"Ucircumflex\", \"Udieresis\", \"Ugrave\", \"Yacute\", \"Ydieresis\", \"Zcaron\", \"aacute\", \"acircumflex\", \"adieresis\", \"agrave\", \"aring\", \"atilde\", \"ccedilla\", \"eacute\", \"ecircumflex\", \"edieresis\", \"egrave\", \"iacute\", \"icircumflex\", \"idieresis\", \"igrave\", \"ntilde\", \"oacute\", \"ocircumflex\", \"odieresis\", \"ograve\", \"otilde\", \"scaron\", \"uacute\", \"ucircumflex\", \"udieresis\", \"ugrave\", \"yacute\", \"ydieresis\", \"zcaron\", \"exclamsmall\", \"Hungarumlautsmall\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"266 ff\", \"onedotenleader\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"isuperior\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"ff\", \"ffi\", \"ffl\", \"parenleftinferior\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"Dotaccentsmall\", \"Macronsmall\", \"figuredash\", \"hypheninferior\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"zerosuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\", \"001.000\", \"001.001\", \"001.002\", \"001.003\", \"Black\", \"Bold\", \"Book\", \"Light\", \"Medium\", \"Regular\", \"Roman\", \"Semibold\"], q = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quoteright\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"quoteleft\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdown\", \"cent\", \"sterling\", \"fraction\", \"yen\", \"florin\", \"section\", \"currency\", \"quotesingle\", \"quotedblleft\", \"guillemotleft\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"\", \"endash\", \"dagger\", \"daggerdbl\", \"periodcentered\", \"\", \"paragraph\", \"bullet\", \"quotesinglbase\", \"quotedblbase\", \"quotedblright\", \"guillemotright\", \"ellipsis\", \"perthousand\", \"\", \"questiondown\", \"\", \"grave\", \"acute\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"dieresis\", \"\", \"ring\", \"cedilla\", \"\", \"hungarumlaut\", \"ogonek\", \"caron\", \"emdash\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"AE\", \"\", \"ordfeminine\", \"\", \"\", \"\", \"\", \"Lslash\", \"Oslash\", \"OE\", \"ordmasculine\", \"\", \"\", \"\", \"\", \"\", \"ae\", \"\", \"\", \"\", \"dotlessi\", \"\", \"\", \"lslash\", \"oslash\", \"oe\", \"germandbls\"], ee = [\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"space\", \"exclamsmall\", \"Hungarumlautsmall\", \"\", \"dollaroldstyle\", \"dollarsuperior\", \"ampersandsmall\", \"Acutesmall\", \"parenleftsuperior\", \"parenrightsuperior\", \"twodotenleader\", \"onedotenleader\", \"comma\", \"hyphen\", \"period\", \"fraction\", \"zerooldstyle\", \"oneoldstyle\", \"twooldstyle\", \"threeoldstyle\", \"fouroldstyle\", \"fiveoldstyle\", \"sixoldstyle\", \"sevenoldstyle\", \"eightoldstyle\", \"nineoldstyle\", \"colon\", \"semicolon\", \"commasuperior\", \"threequartersemdash\", \"periodsuperior\", \"questionsmall\", \"\", \"asuperior\", \"bsuperior\", \"centsuperior\", \"dsuperior\", \"esuperior\", \"\", \"\", \"isuperior\", \"\", \"\", \"lsuperior\", \"msuperior\", \"nsuperior\", \"osuperior\", \"\", \"\", \"rsuperior\", \"ssuperior\", \"tsuperior\", \"\", \"ff\", \"fi\", \"fl\", \"ffi\", \"ffl\", \"parenleftinferior\", \"\", \"parenrightinferior\", \"Circumflexsmall\", \"hyphensuperior\", \"Gravesmall\", \"Asmall\", \"Bsmall\", \"Csmall\", \"Dsmall\", \"Esmall\", \"Fsmall\", \"Gsmall\", \"Hsmall\", \"Ismall\", \"Jsmall\", \"Ksmall\", \"Lsmall\", \"Msmall\", \"Nsmall\", \"Osmall\", \"Psmall\", \"Qsmall\", \"Rsmall\", \"Ssmall\", \"Tsmall\", \"Usmall\", \"Vsmall\", \"Wsmall\", \"Xsmall\", \"Ysmall\", \"Zsmall\", \"colonmonetary\", \"onefitted\", \"rupiah\", \"Tildesmall\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"exclamdownsmall\", \"centoldstyle\", \"Lslashsmall\", \"\", \"\", \"Scaronsmall\", \"Zcaronsmall\", \"Dieresissmall\", \"Brevesmall\", \"Caronsmall\", \"\", \"Dotaccentsmall\", \"\", \"\", \"Macronsmall\", \"\", \"\", \"figuredash\", \"hypheninferior\", \"\", \"\", \"Ogoneksmall\", \"Ringsmall\", \"Cedillasmall\", \"\", \"\", \"\", \"onequarter\", \"onehalf\", \"threequarters\", \"questiondownsmall\", \"oneeighth\", \"threeeighths\", \"fiveeighths\", \"seveneighths\", \"onethird\", \"twothirds\", \"\", \"\", \"zerosuperior\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"foursuperior\", \"fivesuperior\", \"sixsuperior\", \"sevensuperior\", \"eightsuperior\", \"ninesuperior\", \"zeroinferior\", \"oneinferior\", \"twoinferior\", \"threeinferior\", \"fourinferior\", \"fiveinferior\", \"sixinferior\", \"seveninferior\", \"eightinferior\", \"nineinferior\", \"centinferior\", \"dollarinferior\", \"periodinferior\", \"commainferior\", \"Agravesmall\", \"Aacutesmall\", \"Acircumflexsmall\", \"Atildesmall\", \"Adieresissmall\", \"Aringsmall\", \"AEsmall\", \"Ccedillasmall\", \"Egravesmall\", \"Eacutesmall\", \"Ecircumflexsmall\", \"Edieresissmall\", \"Igravesmall\", \"Iacutesmall\", \"Icircumflexsmall\", \"Idieresissmall\", \"Ethsmall\", \"Ntildesmall\", \"Ogravesmall\", \"Oacutesmall\", \"Ocircumflexsmall\", \"Otildesmall\", \"Odieresissmall\", \"OEsmall\", \"Oslashsmall\", \"Ugravesmall\", \"Uacutesmall\", \"Ucircumflexsmall\", \"Udieresissmall\", \"Yacutesmall\", \"Thornsmall\", \"Ydieresissmall\"], pe = [\".notdef\", \".null\", \"nonmarkingreturn\", \"space\", \"exclam\", \"quotedbl\", \"numbersign\", \"dollar\", \"percent\", \"ampersand\", \"quotesingle\", \"parenleft\", \"parenright\", \"asterisk\", \"plus\", \"comma\", \"hyphen\", \"period\", \"slash\", \"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\", \"colon\", \"semicolon\", \"less\", \"equal\", \"greater\", \"question\", \"at\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"bracketleft\", \"backslash\", \"bracketright\", \"asciicircum\", \"underscore\", \"grave\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\", \"braceleft\", \"bar\", \"braceright\", \"asciitilde\", \"Adieresis\", \"Aring\", \"Ccedilla\", \"Eacute\", \"Ntilde\", \"Odieresis\", \"Udieresis\", \"aacute\", \"agrave\", \"acircumflex\", \"adieresis\", \"atilde\", \"aring\", \"ccedilla\", \"eacute\", \"egrave\", \"ecircumflex\", \"edieresis\", \"iacute\", \"igrave\", \"icircumflex\", \"idieresis\", \"ntilde\", \"oacute\", \"ograve\", \"ocircumflex\", \"odieresis\", \"otilde\", \"uacute\", \"ugrave\", \"ucircumflex\", \"udieresis\", \"dagger\", \"degree\", \"cent\", \"sterling\", \"section\", \"bullet\", \"paragraph\", \"germandbls\", \"registered\", \"copyright\", \"trademark\", \"acute\", \"dieresis\", \"notequal\", \"AE\", \"Oslash\", \"infinity\", \"plusminus\", \"lessequal\", \"greaterequal\", \"yen\", \"mu\", \"partialdiff\", \"summation\", \"product\", \"pi\", \"integral\", \"ordfeminine\", \"ordmasculine\", \"Omega\", \"ae\", \"oslash\", \"questiondown\", \"exclamdown\", \"logicalnot\", \"radical\", \"florin\", \"approxequal\", \"Delta\", \"guillemotleft\", \"guillemotright\", \"ellipsis\", \"nonbreakingspace\", \"Agrave\", \"Atilde\", \"Otilde\", \"OE\", \"oe\", \"endash\", \"emdash\", \"quotedblleft\", \"quotedblright\", \"quoteleft\", \"quoteright\", \"divide\", \"lozenge\", \"ydieresis\", \"Ydieresis\", \"fraction\", \"currency\", \"guilsinglleft\", \"guilsinglright\", \"fi\", \"fl\", \"daggerdbl\", \"periodcentered\", \"quotesinglbase\", \"quotedblbase\", \"perthousand\", \"Acircumflex\", \"Ecircumflex\", \"Aacute\", \"Edieresis\", \"Egrave\", \"Iacute\", \"Icircumflex\", \"Idieresis\", \"Igrave\", \"Oacute\", \"Ocircumflex\", \"apple\", \"Ograve\", \"Uacute\", \"Ucircumflex\", \"Ugrave\", \"dotlessi\", \"circumflex\", \"tilde\", \"macron\", \"breve\", \"dotaccent\", \"ring\", \"cedilla\", \"hungarumlaut\", \"ogonek\", \"caron\", \"Lslash\", \"lslash\", \"Scaron\", \"scaron\", \"Zcaron\", \"zcaron\", \"brokenbar\", \"Eth\", \"eth\", \"Yacute\", \"yacute\", \"Thorn\", \"thorn\", \"minus\", \"multiply\", \"onesuperior\", \"twosuperior\", \"threesuperior\", \"onehalf\", \"onequarter\", \"threequarters\", \"franc\", \"Gbreve\", \"gbreve\", \"Idotaccent\", \"Scedilla\", \"scedilla\", \"Cacute\", \"cacute\", \"Ccaron\", \"ccaron\", \"dcroat\"];\n          function je(d) {\n            this.font = d;\n          }\n          function Ce(d) {\n            this.cmap = d;\n          }\n          function Fe(d, v) {\n            this.encoding = d, this.charset = v;\n          }\n          function Ne(d) {\n            switch (d.version) {\n              case 1:\n                this.names = pe.slice();\n                break;\n              case 2:\n                this.names = new Array(d.numberOfGlyphs);\n                for (var v = 0; v < d.numberOfGlyphs; v++)\n                  d.glyphNameIndex[v] < pe.length ? this.names[v] = pe[d.glyphNameIndex[v]] : this.names[v] = d.names[d.glyphNameIndex[v] - pe.length];\n                break;\n              case 2.5:\n                this.names = new Array(d.numberOfGlyphs);\n                for (var w = 0; w < d.numberOfGlyphs; w++)\n                  this.names[w] = pe[w + d.glyphNameIndex[w]];\n                break;\n              default:\n                this.names = [];\n            }\n          }\n          je.prototype.charToGlyphIndex = function(d) {\n            var v = d.codePointAt(0), w = this.font.glyphs;\n            if (w) {\n              for (var k = 0; k < w.length; k += 1)\n                for (var I = w.get(k), N = 0; N < I.unicodes.length; N += 1)\n                  if (I.unicodes[N] === v)\n                    return k;\n            }\n            return null;\n          }, Ce.prototype.charToGlyphIndex = function(d) {\n            return this.cmap.glyphIndexMap[d.codePointAt(0)] || 0;\n          }, Fe.prototype.charToGlyphIndex = function(d) {\n            return d = d.codePointAt(0), d = this.encoding[d], this.charset.indexOf(d);\n          }, Ne.prototype.nameToGlyphIndex = function(d) {\n            return this.names.indexOf(d);\n          }, Ne.prototype.glyphIndexToName = function(d) {\n            return this.names[d];\n          };\n          var Be = { line: function(d, v, w, k, I) {\n            d.beginPath(), d.moveTo(v, w), d.lineTo(k, I), d.stroke();\n          } };\n          function We(d) {\n            this.bindConstructorValues(d);\n          }\n          function st(d, v, w) {\n            Object.defineProperty(d, v, { get: function() {\n              return d.path, d[w];\n            }, set: function(k) {\n              d[w] = k;\n            }, enumerable: !0, configurable: !0 });\n          }\n          function nt(d, v) {\n            if (this.font = d, this.glyphs = {}, Array.isArray(v))\n              for (var w = 0; w < v.length; w++)\n                this.glyphs[w] = v[w];\n            this.length = v && v.length || 0;\n          }\n          We.prototype.bindConstructorValues = function(d) {\n            var v;\n            this.index = d.index || 0, this.name = d.name || null, this.unicode = d.unicode || void 0, this.unicodes = d.unicodes || d.unicode !== void 0 ? [d.unicode] : [], d.xMin && (this.xMin = d.xMin), d.yMin && (this.yMin = d.yMin), d.xMax && (this.xMax = d.xMax), d.yMax && (this.yMax = d.yMax), d.advanceWidth && (this.advanceWidth = d.advanceWidth), Object.defineProperty(this, \"path\", (d = d.path, v = d || new X(), { configurable: !0, get: function() {\n              return v = typeof v == \"function\" ? v() : v;\n            }, set: function(w) {\n              v = w;\n            } }));\n          }, We.prototype.addUnicode = function(d) {\n            this.unicodes.length === 0 && (this.unicode = d), this.unicodes.push(d);\n          }, We.prototype.getBoundingBox = function() {\n            return this.path.getBoundingBox();\n          }, We.prototype.getPath = function(d, v, w, k, I) {\n            d = d !== void 0 ? d : 0, v = v !== void 0 ? v : 0, w = w !== void 0 ? w : 72;\n            for (var N, z, Q = (k = k || {}).xScale, se = k.yScale, oe = ((N = k.hinting && I && I.hinting ? this.path && I.hinting.exec(this, w) : N) ? (z = I.hinting.getCommands(N), d = Math.round(d), v = Math.round(v), Q = se = 1) : (z = this.path.commands, k = 1 / this.path.unitsPerEm * w, Q === void 0 && (Q = k), se === void 0 && (se = k)), new X()), ye = 0; ye < z.length; ye += 1) {\n              var Se = z[ye];\n              Se.type === \"M\" ? oe.moveTo(d + Se.x * Q, v + -Se.y * se) : Se.type === \"L\" ? oe.lineTo(d + Se.x * Q, v + -Se.y * se) : Se.type === \"Q\" ? oe.quadraticCurveTo(d + Se.x1 * Q, v + -Se.y1 * se, d + Se.x * Q, v + -Se.y * se) : Se.type === \"C\" ? oe.curveTo(d + Se.x1 * Q, v + -Se.y1 * se, d + Se.x2 * Q, v + -Se.y2 * se, d + Se.x * Q, v + -Se.y * se) : Se.type === \"Z\" && oe.closePath();\n            }\n            return oe;\n          }, We.prototype.getContours = function() {\n            if (this.points === void 0)\n              return [];\n            for (var d = [], v = [], w = 0; w < this.points.length; w += 1) {\n              var k = this.points[w];\n              v.push(k), k.lastPointOfContour && (d.push(v), v = []);\n            }\n            return O.argument(v.length === 0, \"There are still points left in the current contour.\"), d;\n          }, We.prototype.getMetrics = function() {\n            for (var d = this.path.commands, v = [], w = [], k = 0; k < d.length; k += 1) {\n              var I = d[k];\n              I.type !== \"Z\" && (v.push(I.x), w.push(I.y)), I.type !== \"Q\" && I.type !== \"C\" || (v.push(I.x1), w.push(I.y1)), I.type === \"C\" && (v.push(I.x2), w.push(I.y2));\n            }\n            var N = { xMin: Math.min.apply(null, v), yMin: Math.min.apply(null, w), xMax: Math.max.apply(null, v), yMax: Math.max.apply(null, w), leftSideBearing: this.leftSideBearing };\n            return isFinite(N.xMin) || (N.xMin = 0), isFinite(N.xMax) || (N.xMax = this.advanceWidth), isFinite(N.yMin) || (N.yMin = 0), isFinite(N.yMax) || (N.yMax = 0), N.rightSideBearing = this.advanceWidth - N.leftSideBearing - (N.xMax - N.xMin), N;\n          }, We.prototype.draw = function(d, v, w, k, I) {\n            this.getPath(v, w, k, I).draw(d);\n          }, We.prototype.drawPoints = function(d, v, w, k) {\n            function I(ye, Se, be, de) {\n              var Ie = 2 * Math.PI;\n              d.beginPath();\n              for (var ke = 0; ke < ye.length; ke += 1)\n                d.moveTo(Se + ye[ke].x * de, be + ye[ke].y * de), d.arc(Se + ye[ke].x * de, be + ye[ke].y * de, 2, 0, Ie, !1);\n              d.closePath(), d.fill();\n            }\n            v = v !== void 0 ? v : 0, w = w !== void 0 ? w : 0;\n            for (var k = 1 / this.path.unitsPerEm * (k = k !== void 0 ? k : 24), N = [], z = [], Q = this.path, se = 0; se < Q.commands.length; se += 1) {\n              var oe = Q.commands[se];\n              oe.x !== void 0 && N.push({ x: oe.x, y: -oe.y }), oe.x1 !== void 0 && z.push({ x: oe.x1, y: -oe.y1 }), oe.x2 !== void 0 && z.push({ x: oe.x2, y: -oe.y2 });\n            }\n            d.fillStyle = \"blue\", I(N, v, w, k), d.fillStyle = \"red\", I(z, v, w, k);\n          }, We.prototype.drawMetrics = function(d, v, w, k) {\n            v = v !== void 0 ? v : 0, w = w !== void 0 ? w : 0, k = 1 / this.path.unitsPerEm * (k = k !== void 0 ? k : 24), d.lineWidth = 1, d.strokeStyle = \"black\", Be.line(d, v, -1e4, v, 1e4), Be.line(d, -1e4, w, 1e4, w);\n            var I = this.xMin || 0, N = this.yMin || 0, z = this.xMax || 0, Q = this.yMax || 0, se = this.advanceWidth || 0;\n            d.strokeStyle = \"blue\", Be.line(d, v + I * k, -1e4, v + I * k, 1e4), Be.line(d, v + z * k, -1e4, v + z * k, 1e4), Be.line(d, -1e4, w + -N * k, 1e4, w + -N * k), Be.line(d, -1e4, w + -Q * k, 1e4, w + -Q * k), d.strokeStyle = \"green\", Be.line(d, v + se * k, -1e4, v + se * k, 1e4);\n          }, nt.prototype.get = function(d) {\n            return typeof this.glyphs[d] == \"function\" && (this.glyphs[d] = this.glyphs[d]()), this.glyphs[d];\n          }, nt.prototype.push = function(d, v) {\n            this.glyphs[d] = v, this.length++;\n          };\n          var Ke = { GlyphSet: nt, glyphLoader: function(d, v) {\n            return new We({ index: v, font: d });\n          }, ttfGlyphLoader: function(d, v, w, k, I, N) {\n            return function() {\n              var z = new We({ index: v, font: d });\n              return z.path = function() {\n                w(z, k, I);\n                var Q = N(d.glyphs, z);\n                return Q.unitsPerEm = d.unitsPerEm, Q;\n              }, st(z, \"xMin\", \"_xMin\"), st(z, \"xMax\", \"_xMax\"), st(z, \"yMin\", \"_yMin\"), st(z, \"yMax\", \"_yMax\"), z;\n            };\n          }, cffGlyphLoader: function(d, v, w, k) {\n            return function() {\n              var I = new We({ index: v, font: d });\n              return I.path = function() {\n                var N = w(d, I, k);\n                return N.unitsPerEm = d.unitsPerEm, N;\n              }, I;\n            };\n          } };\n          function at(d) {\n            return d = d.length < 1240 ? 107 : d.length < 33900 ? 1131 : 32768, d;\n          }\n          function ot(d, v, w) {\n            var k, I = [], N = [], z = we.getCard16(d, v);\n            if (z !== 0) {\n              for (var Q = we.getByte(d, v + 2), se = v + (z + 1) * Q + 2, oe = v + 3, ye = 0; ye < z + 1; ye += 1)\n                I.push(we.getOffset(d, oe, Q)), oe += Q;\n              k = se + I[z];\n            } else\n              k = v + 2;\n            for (var Se = 0; Se < I.length - 1; Se += 1) {\n              var be = we.getBytes(d, se + I[Se], se + I[Se + 1]);\n              w && (be = w(be)), N.push(be);\n            }\n            return { objects: N, startOffset: v, endOffset: k };\n          }\n          function bt(d, v) {\n            if (v === 28)\n              return d.parseByte() << 8 | d.parseByte();\n            if (v === 29)\n              return d.parseByte() << 24 | d.parseByte() << 16 | d.parseByte() << 8 | d.parseByte();\n            if (v === 30) {\n              for (var w = d, k = \"\", I = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \".\", \"E\", \"E-\", null, \"-\"]; ; ) {\n                var z = w.parseByte(), N = z >> 4, z = 15 & z;\n                if (N == 15 || (k += I[N], z == 15))\n                  break;\n                k += I[z];\n              }\n              return parseFloat(k);\n            }\n            if (32 <= v && v <= 246)\n              return v - 139;\n            if (247 <= v && v <= 250)\n              return 256 * (v - 247) + d.parseByte() + 108;\n            if (251 <= v && v <= 254)\n              return 256 * -(v - 251) - d.parseByte() - 108;\n            throw new Error(\"Invalid b0 \" + v);\n          }\n          function It(d, v, w) {\n            var k = new we.Parser(d, v = v !== void 0 ? v : 0), I = [], N = [];\n            for (w = w !== void 0 ? w : d.length; k.relativeOffset < w; ) {\n              var z = k.parseByte();\n              z <= 21 ? (z === 12 && (z = 1200 + k.parseByte()), I.push([z, N]), N = []) : N.push(bt(k, z));\n            }\n            for (var Q = I, se = {}, oe = 0; oe < Q.length; oe += 1) {\n              var ye = Q[oe][0], Se = Q[oe][1], be = void 0, be = Se.length === 1 ? Se[0] : Se;\n              if (se.hasOwnProperty(ye) && !isNaN(se[ye]))\n                throw new Error(\"Object \" + se + \" already has key \" + ye);\n              se[ye] = be;\n            }\n            return se;\n          }\n          function Mt(d, v) {\n            return v = v <= 390 ? $[v] : d[v - 391];\n          }\n          function mt(d, v, w) {\n            for (var k, I = {}, N = 0; N < v.length; N += 1) {\n              var z = v[N];\n              if (Array.isArray(z.type)) {\n                var Q = [];\n                Q.length = z.type.length;\n                for (var se = 0; se < z.type.length; se++)\n                  (k = d[z.op] !== void 0 ? d[z.op][se] : void 0) === void 0 && (k = z.value !== void 0 && z.value[se] !== void 0 ? z.value[se] : null), z.type[se] === \"SID\" && (k = Mt(w, k)), Q[se] = k;\n                I[z.name] = Q;\n              } else\n                (k = d[z.op]) === void 0 && (k = z.value !== void 0 ? z.value : null), z.type === \"SID\" && (k = Mt(w, k)), I[z.name] = k;\n            }\n            return I;\n          }\n          var jt = [{ name: \"version\", op: 0, type: \"SID\" }, { name: \"notice\", op: 1, type: \"SID\" }, { name: \"copyright\", op: 1200, type: \"SID\" }, { name: \"fullName\", op: 2, type: \"SID\" }, { name: \"familyName\", op: 3, type: \"SID\" }, { name: \"weight\", op: 4, type: \"SID\" }, { name: \"isFixedPitch\", op: 1201, type: \"number\", value: 0 }, { name: \"italicAngle\", op: 1202, type: \"number\", value: 0 }, { name: \"underlinePosition\", op: 1203, type: \"number\", value: -100 }, { name: \"underlineThickness\", op: 1204, type: \"number\", value: 50 }, { name: \"paintType\", op: 1205, type: \"number\", value: 0 }, { name: \"charstringType\", op: 1206, type: \"number\", value: 2 }, { name: \"fontMatrix\", op: 1207, type: [\"real\", \"real\", \"real\", \"real\", \"real\", \"real\"], value: [1e-3, 0, 0, 1e-3, 0, 0] }, { name: \"uniqueId\", op: 13, type: \"number\" }, { name: \"fontBBox\", op: 5, type: [\"number\", \"number\", \"number\", \"number\"], value: [0, 0, 0, 0] }, { name: \"strokeWidth\", op: 1208, type: \"number\", value: 0 }, { name: \"xuid\", op: 14, type: [], value: null }, { name: \"charset\", op: 15, type: \"offset\", value: 0 }, { name: \"encoding\", op: 16, type: \"offset\", value: 0 }, { name: \"charStrings\", op: 17, type: \"offset\", value: 0 }, { name: \"private\", op: 18, type: [\"number\", \"offset\"], value: [0, 0] }, { name: \"ros\", op: 1230, type: [\"SID\", \"SID\", \"number\"] }, { name: \"cidFontVersion\", op: 1231, type: \"number\", value: 0 }, { name: \"cidFontRevision\", op: 1232, type: \"number\", value: 0 }, { name: \"cidFontType\", op: 1233, type: \"number\", value: 0 }, { name: \"cidCount\", op: 1234, type: \"number\", value: 8720 }, { name: \"uidBase\", op: 1235, type: \"number\" }, { name: \"fdArray\", op: 1236, type: \"offset\" }, { name: \"fdSelect\", op: 1237, type: \"offset\" }, { name: \"fontName\", op: 1238, type: \"SID\" }], ht = [{ name: \"subrs\", op: 19, type: \"offset\", value: 0 }, { name: \"defaultWidthX\", op: 20, type: \"number\", value: 0 }, { name: \"nominalWidthX\", op: 21, type: \"number\", value: 0 }];\n          function Dt(d, v, w, k) {\n            return mt(It(d, v, w), ht, k);\n          }\n          function Pt(d, v, w, k) {\n            for (var I = [], N = 0; N < w.length; N += 1) {\n              var z = new DataView(new Uint8Array(w[N]).buffer), z = (Q = k, mt(It(z, 0, z.byteLength), jt, Q)), Q = (z._subrs = [], z._subrsBias = 0, z.private[0]), se = z.private[1];\n              Q !== 0 && se !== 0 && (Q = Dt(d, se + v, Q, k), z._defaultWidthX = Q.defaultWidthX, z._nominalWidthX = Q.nominalWidthX, Q.subrs !== 0 && (se = ot(d, se + Q.subrs + v), z._subrs = se.objects, z._subrsBias = at(z._subrs)), z._privateDict = Q), I.push(z);\n            }\n            return I;\n          }\n          function gt(d, v, w) {\n            var k, I, N, z, Q, se, oe, ye, Se, be = new X(), de = [], Ie = 0, ke = !1, Ae = !1, Te = 0, Ee = 0, $e = (Se = (d.isCIDFont ? (Q = d.tables.cff.topDict._fdSelect[v.index], Q = d.tables.cff.topDict._fdArray[Q], se = Q._subrs, oe = Q._subrsBias, ye = Q._defaultWidthX, Q) : (se = d.tables.cff.topDict._subrs, oe = d.tables.cff.topDict._subrsBias, ye = d.tables.cff.topDict._defaultWidthX, d.tables.cff.topDict))._nominalWidthX, ye);\n            function lt(tt, dt) {\n              Ae && be.closePath(), be.moveTo(tt, dt), Ae = !0;\n            }\n            function et() {\n              de.length % 2 == 0 || ke || ($e = de.shift() + Se), Ie += de.length >> 1, de.length = 0, ke = !0;\n            }\n            return function tt(dt) {\n              for (var wt, Ot, Rt, Ht, Wt, Qt, xt, St, vt, qt, kt, zt, Tt = 0; Tt < dt.length; ) {\n                var Gt = dt[Tt];\n                switch (Tt += 1, Gt) {\n                  case 1:\n                  case 3:\n                    et();\n                    break;\n                  case 4:\n                    1 < de.length && !ke && ($e = de.shift() + Se, ke = !0), Ee += de.pop(), lt(Te, Ee);\n                    break;\n                  case 5:\n                    for (; 0 < de.length; )\n                      Te += de.shift(), Ee += de.shift(), be.lineTo(Te, Ee);\n                    break;\n                  case 6:\n                    for (; 0 < de.length && (Te += de.shift(), be.lineTo(Te, Ee), de.length !== 0); )\n                      Ee += de.shift(), be.lineTo(Te, Ee);\n                    break;\n                  case 7:\n                    for (; 0 < de.length && (Ee += de.shift(), be.lineTo(Te, Ee), de.length !== 0); )\n                      Te += de.shift(), be.lineTo(Te, Ee);\n                    break;\n                  case 8:\n                    for (; 0 < de.length; )\n                      k = Te + de.shift(), I = Ee + de.shift(), N = k + de.shift(), z = I + de.shift(), Te = N + de.shift(), Ee = z + de.shift(), be.curveTo(k, I, N, z, Te, Ee);\n                    break;\n                  case 10:\n                    Wt = de.pop() + oe, (Qt = se[Wt]) && tt(Qt);\n                    break;\n                  case 11:\n                    return;\n                  case 12:\n                    switch (Gt = dt[Tt], Tt += 1, Gt) {\n                      case 35:\n                        k = Te + de.shift(), I = Ee + de.shift(), N = k + de.shift(), z = I + de.shift(), xt = N + de.shift(), St = z + de.shift(), vt = xt + de.shift(), qt = St + de.shift(), kt = vt + de.shift(), zt = qt + de.shift(), Te = kt + de.shift(), Ee = zt + de.shift(), de.shift(), be.curveTo(k, I, N, z, xt, St), be.curveTo(vt, qt, kt, zt, Te, Ee);\n                        break;\n                      case 34:\n                        k = Te + de.shift(), I = Ee, N = k + de.shift(), z = I + de.shift(), xt = N + de.shift(), St = z, vt = xt + de.shift(), qt = z, kt = vt + de.shift(), zt = Ee, Te = kt + de.shift(), be.curveTo(k, I, N, z, xt, St), be.curveTo(vt, qt, kt, zt, Te, Ee);\n                        break;\n                      case 36:\n                        k = Te + de.shift(), I = Ee + de.shift(), N = k + de.shift(), z = I + de.shift(), xt = N + de.shift(), St = z, vt = xt + de.shift(), qt = z, kt = vt + de.shift(), zt = qt + de.shift(), Te = kt + de.shift(), be.curveTo(k, I, N, z, xt, St), be.curveTo(vt, qt, kt, zt, Te, Ee);\n                        break;\n                      case 37:\n                        k = Te + de.shift(), I = Ee + de.shift(), N = k + de.shift(), z = I + de.shift(), xt = N + de.shift(), St = z + de.shift(), vt = xt + de.shift(), qt = St + de.shift(), kt = vt + de.shift(), zt = qt + de.shift(), Math.abs(kt - Te) > Math.abs(zt - Ee) ? Te = kt + de.shift() : Ee = zt + de.shift(), be.curveTo(k, I, N, z, xt, St), be.curveTo(vt, qt, kt, zt, Te, Ee);\n                        break;\n                      default:\n                        console.log(\"Glyph \" + v.index + \": unknown operator 1200\" + Gt), de.length = 0;\n                    }\n                    break;\n                  case 14:\n                    0 < de.length && !ke && ($e = de.shift() + Se, ke = !0), Ae && (be.closePath(), Ae = !1);\n                    break;\n                  case 18:\n                    et();\n                    break;\n                  case 19:\n                  case 20:\n                    et(), Tt += Ie + 7 >> 3;\n                    break;\n                  case 21:\n                    2 < de.length && !ke && ($e = de.shift() + Se, ke = !0), Ee += de.pop(), lt(Te += de.pop(), Ee);\n                    break;\n                  case 22:\n                    1 < de.length && !ke && ($e = de.shift() + Se, ke = !0), lt(Te += de.pop(), Ee);\n                    break;\n                  case 23:\n                    et();\n                    break;\n                  case 24:\n                    for (; 2 < de.length; )\n                      k = Te + de.shift(), I = Ee + de.shift(), N = k + de.shift(), z = I + de.shift(), Te = N + de.shift(), Ee = z + de.shift(), be.curveTo(k, I, N, z, Te, Ee);\n                    Te += de.shift(), Ee += de.shift(), be.lineTo(Te, Ee);\n                    break;\n                  case 25:\n                    for (; 6 < de.length; )\n                      Te += de.shift(), Ee += de.shift(), be.lineTo(Te, Ee);\n                    k = Te + de.shift(), I = Ee + de.shift(), N = k + de.shift(), z = I + de.shift(), Te = N + de.shift(), Ee = z + de.shift(), be.curveTo(k, I, N, z, Te, Ee);\n                    break;\n                  case 26:\n                    for (de.length % 2 && (Te += de.shift()); 0 < de.length; )\n                      k = Te, I = Ee + de.shift(), N = k + de.shift(), z = I + de.shift(), Te = N, Ee = z + de.shift(), be.curveTo(k, I, N, z, Te, Ee);\n                    break;\n                  case 27:\n                    for (de.length % 2 && (Ee += de.shift()); 0 < de.length; )\n                      k = Te + de.shift(), I = Ee, N = k + de.shift(), z = I + de.shift(), Te = N + de.shift(), Ee = z, be.curveTo(k, I, N, z, Te, Ee);\n                    break;\n                  case 28:\n                    wt = dt[Tt], Ot = dt[Tt + 1], de.push((wt << 24 | Ot << 16) >> 16), Tt += 2;\n                    break;\n                  case 29:\n                    Wt = de.pop() + d.gsubrsBias, (Qt = d.gsubrs[Wt]) && tt(Qt);\n                    break;\n                  case 30:\n                    for (; 0 < de.length && (k = Te, I = Ee + de.shift(), N = k + de.shift(), z = I + de.shift(), Te = N + de.shift(), Ee = z + (de.length === 1 ? de.shift() : 0), be.curveTo(k, I, N, z, Te, Ee), de.length !== 0); )\n                      k = Te + de.shift(), I = Ee, N = k + de.shift(), z = I + de.shift(), Ee = z + de.shift(), Te = N + (de.length === 1 ? de.shift() : 0), be.curveTo(k, I, N, z, Te, Ee);\n                    break;\n                  case 31:\n                    for (; 0 < de.length && (k = Te + de.shift(), I = Ee, N = k + de.shift(), z = I + de.shift(), Ee = z + de.shift(), Te = N + (de.length === 1 ? de.shift() : 0), be.curveTo(k, I, N, z, Te, Ee), de.length !== 0); )\n                      k = Te, I = Ee + de.shift(), N = k + de.shift(), z = I + de.shift(), Te = N + de.shift(), Ee = z + (de.length === 1 ? de.shift() : 0), be.curveTo(k, I, N, z, Te, Ee);\n                    break;\n                  default:\n                    Gt < 32 ? console.log(\"Glyph \" + v.index + \": unknown operator \" + Gt) : Gt < 247 ? de.push(Gt - 139) : Gt < 251 ? (wt = dt[Tt], Tt += 1, de.push(256 * (Gt - 247) + wt + 108)) : Gt < 255 ? (wt = dt[Tt], Tt += 1, de.push(256 * -(Gt - 251) - wt - 108)) : (wt = dt[Tt], Ot = dt[Tt + 1], Rt = dt[Tt + 2], Ht = dt[Tt + 3], Tt += 4, de.push((wt << 24 | Ot << 16 | Rt << 8 | Ht) / 65536));\n                }\n              }\n            }(w), v.advanceWidth = $e, be;\n          }\n          function Ft(d, v) {\n            var w, k = $.indexOf(d);\n            return 0 <= k && (w = k), 0 <= (k = v.indexOf(d)) ? w = k + $.length : (w = $.length + v.length, v.push(d)), w;\n          }\n          function me(d, v, w) {\n            for (var k = {}, I = 0; I < d.length; I += 1) {\n              var N = d[I], z = v[N.name];\n              z === void 0 || function Q(se, oe) {\n                if (se === oe)\n                  return 1;\n                if (Array.isArray(se) && Array.isArray(oe) && se.length === oe.length) {\n                  for (var ye = 0; ye < se.length; ye += 1)\n                    if (!Q(se[ye], oe[ye]))\n                      return;\n                  return 1;\n                }\n              }(z, N.value) || (N.type === \"SID\" && (z = Ft(z, w)), k[N.op] = { name: N.name, type: N.type, value: z });\n            }\n            return k;\n          }\n          function Ue(d, v) {\n            var w = new Me.Record(\"Top DICT\", [{ name: \"dict\", type: \"DICT\", value: {} }]);\n            return w.dict = me(jt, d, v), w;\n          }\n          function Ye(d) {\n            var v = new Me.Record(\"Top DICT INDEX\", [{ name: \"topDicts\", type: \"INDEX\", value: [] }]);\n            return v.topDicts = [{ name: \"topDict_0\", type: \"TABLE\", value: d }], v;\n          }\n          function it(d) {\n            for (var v = new Me.Record(\"CharStrings INDEX\", [{ name: \"charStrings\", type: \"INDEX\", value: [] }]), w = 0; w < d.length; w += 1) {\n              var k = d.get(w), I = function(N) {\n                for (var z = [], Q = N.path, se = (z.push({ name: \"width\", type: \"NUMBER\", value: N.advanceWidth }), 0), oe = 0, ye = 0; ye < Q.commands.length; ye += 1) {\n                  var Se, be, de, Ie, ke = void 0, Ae = void 0, Te = Q.commands[ye];\n                  (Te = Te.type === \"Q\" ? { type: \"C\", x: Te.x, y: Te.y, x1: 1 / 3 * se + 2 / 3 * Te.x1, y1: 1 / 3 * oe + 2 / 3 * Te.y1, x2: 1 / 3 * Te.x + 2 / 3 * Te.x1, y2: 1 / 3 * Te.y + 2 / 3 * Te.y1 } : Te).type === \"M\" ? (ke = Math.round(Te.x - se), Ae = Math.round(Te.y - oe), z.push({ name: \"dx\", type: \"NUMBER\", value: ke }), z.push({ name: \"dy\", type: \"NUMBER\", value: Ae }), z.push({ name: \"rmoveto\", type: \"OP\", value: 21 }), se = Math.round(Te.x), oe = Math.round(Te.y)) : Te.type === \"L\" ? (ke = Math.round(Te.x - se), Ae = Math.round(Te.y - oe), z.push({ name: \"dx\", type: \"NUMBER\", value: ke }), z.push({ name: \"dy\", type: \"NUMBER\", value: Ae }), z.push({ name: \"rlineto\", type: \"OP\", value: 5 }), se = Math.round(Te.x), oe = Math.round(Te.y)) : Te.type === \"C\" && (Se = Math.round(Te.x1 - se), be = Math.round(Te.y1 - oe), de = Math.round(Te.x2 - Te.x1), Ie = Math.round(Te.y2 - Te.y1), ke = Math.round(Te.x - Te.x2), Ae = Math.round(Te.y - Te.y2), z.push({ name: \"dx1\", type: \"NUMBER\", value: Se }), z.push({ name: \"dy1\", type: \"NUMBER\", value: be }), z.push({ name: \"dx2\", type: \"NUMBER\", value: de }), z.push({ name: \"dy2\", type: \"NUMBER\", value: Ie }), z.push({ name: \"dx\", type: \"NUMBER\", value: ke }), z.push({ name: \"dy\", type: \"NUMBER\", value: Ae }), z.push({ name: \"rrcurveto\", type: \"OP\", value: 8 }), se = Math.round(Te.x), oe = Math.round(Te.y));\n                }\n                return z.push({ name: \"endchar\", type: \"OP\", value: 14 }), z;\n              }(k);\n              v.charStrings.push({ name: k.name, type: \"CHARSTRING\", value: I });\n            }\n            return v;\n          }\n          var ft = { parse: function(d, v, w) {\n            w.tables.cff = {}, Q = d, k = v, (I = {}).formatMajor = we.getCard8(Q, k), I.formatMinor = we.getCard8(Q, k + 1), I.size = we.getCard8(Q, k + 2), I.offsetSize = we.getCard8(Q, k + 3), I.startOffset = k, I.endOffset = k + 4;\n            var Q = ot(d, I.endOffset, we.bytesToString), k = ot(d, Q.endOffset), I = ot(d, k.endOffset, we.bytesToString), Q = ot(d, I.endOffset);\n            if (w.gsubrs = Q.objects, w.gsubrsBias = at(w.gsubrs), (Q = Pt(d, v, k.objects, I.objects)).length !== 1)\n              throw new Error(\"CFF table has too many fonts in 'FontSet' - count of fonts NameIndex.length = \" + Q.length);\n            if (k = Q[0], (w.tables.cff.topDict = k)._privateDict && (w.defaultWidthX = k._privateDict.defaultWidthX, w.nominalWidthX = k._privateDict.nominalWidthX), k.ros[0] !== void 0 && k.ros[1] !== void 0 && (w.isCIDFont = !0), w.isCIDFont) {\n              var Q = k.fdArray, N = k.fdSelect;\n              if (Q === 0 || N === 0)\n                throw new Error(\"Font is marked as a CID font, but FDArray and/or FDSelect information is missing\");\n              Q = Pt(d, v, ot(d, Q += v).objects, I.objects), k._fdArray = Q, k._fdSelect = function(be, de, Ie, ke) {\n                var Ae, Te = [], Ee = new we.Parser(be, de);\n                if ((be = Ee.parseCard8()) === 0)\n                  for (var $e = 0; $e < Ie; $e++) {\n                    if (ke <= (Ae = Ee.parseCard8()))\n                      throw new Error(\"CFF table CID Font FDSelect has bad FD index value \" + Ae + \" (FD count \" + ke + \")\");\n                    Te.push(Ae);\n                  }\n                else {\n                  if (be !== 3)\n                    throw new Error(\"CFF Table CID Font FDSelect table has unsupported format \" + be);\n                  var lt, et = Ee.parseCard16(), tt = Ee.parseCard16();\n                  if (tt !== 0)\n                    throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad initial GID \" + tt);\n                  for (var dt = 0; dt < et; dt++) {\n                    if (Ae = Ee.parseCard8(), lt = Ee.parseCard16(), ke <= Ae)\n                      throw new Error(\"CFF table CID Font FDSelect has bad FD index value \" + Ae + \" (FD count \" + ke + \")\");\n                    if (Ie < lt)\n                      throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad GID \" + lt);\n                    for (; tt < lt; tt++)\n                      Te.push(Ae);\n                    tt = lt;\n                  }\n                  if (lt !== Ie)\n                    throw new Error(\"CFF Table CID Font FDSelect format 3 range has bad final GID \" + lt);\n                }\n                return Te;\n              }(d, N += v, w.numGlyphs, Q.length);\n            }\n            var N = v + k.private[1], Q = Dt(d, N, k.private[0], I.objects), z = (w.defaultWidthX = Q.defaultWidthX, w.nominalWidthX = Q.nominalWidthX, Q.subrs !== 0 ? (N = ot(d, N + Q.subrs), w.subrs = N.objects, w.subrsBias = at(w.subrs)) : (w.subrs = [], w.subrsBias = 0), ot(d, v + k.charStrings)), Q = (w.nGlyphs = z.objects.length, function(ye, Se, be, de) {\n              var Ie = new we.Parser(ye, Se), ke = (--be, [\".notdef\"]);\n              if ((ye = Ie.parseCard8()) === 0)\n                for (var Ae = 0; Ae < be; Ae += 1)\n                  Te = Ie.parseSID(), ke.push(Mt(de, Te));\n              else if (ye === 1)\n                for (; ke.length <= be; )\n                  for (var Te = Ie.parseSID(), Ee = Ie.parseCard8(), $e = 0; $e <= Ee; $e += 1)\n                    ke.push(Mt(de, Te)), Te += 1;\n              else {\n                if (ye !== 2)\n                  throw new Error(\"Unknown charset format \" + ye);\n                for (; ke.length <= be; ) {\n                  Te = Ie.parseSID(), Ee = Ie.parseCard16();\n                  for (var lt = 0; lt <= Ee; lt += 1)\n                    ke.push(Mt(de, Te)), Te += 1;\n                }\n              }\n              return ke;\n            }(d, v + k.charset, w.nGlyphs, I.objects));\n            k.encoding === 0 ? w.cffEncoding = new Fe(q, Q) : k.encoding === 1 ? w.cffEncoding = new Fe(ee, Q) : w.cffEncoding = function(ye, Se, be) {\n              var de = {}, Ie = new we.Parser(ye, Se);\n              if ((ye = Ie.parseCard8()) === 0)\n                for (var ke = Ie.parseCard8(), Ae = 0; Ae < ke; Ae += 1)\n                  de[Ee = Ie.parseCard8()] = Ae;\n              else {\n                if (ye !== 1)\n                  throw new Error(\"Unknown encoding format \" + ye);\n                for (var Te = Ie.parseCard8(), Ee = 1, $e = 0; $e < Te; $e += 1)\n                  for (var lt = Ie.parseCard8(), et = Ie.parseCard8(), tt = lt; tt <= lt + et; tt += 1)\n                    de[tt] = Ee, Ee += 1;\n              }\n              return new Fe(de, be);\n            }(d, v + k.encoding, Q), w.encoding = w.encoding || w.cffEncoding, w.glyphs = new Ke.GlyphSet(w);\n            for (var se = 0; se < w.nGlyphs; se += 1) {\n              var oe = z.objects[se];\n              w.glyphs.push(se, Ke.cffGlyphLoader(w, se, gt, oe));\n            }\n          }, make: function(d, ye) {\n            for (var w, k = new Me.Table(\"CFF \", [{ name: \"header\", type: \"RECORD\" }, { name: \"nameIndex\", type: \"RECORD\" }, { name: \"topDictIndex\", type: \"RECORD\" }, { name: \"stringIndex\", type: \"RECORD\" }, { name: \"globalSubrIndex\", type: \"RECORD\" }, { name: \"charsets\", type: \"RECORD\" }, { name: \"charStringsIndex\", type: \"RECORD\" }, { name: \"privateDict\", type: \"RECORD\" }]), I = 1 / ye.unitsPerEm, I = { version: ye.version, fullName: ye.fullName, familyName: ye.familyName, weight: ye.weightName, fontBBox: ye.fontBBox || [0, 0, 0, 0], fontMatrix: [I, 0, 0, I, 0, 0], charset: 999, encoding: 0, charStrings: 999, private: [0, 999] }, N = [], z = 1; z < d.length; z += 1)\n              w = d.get(z), N.push(w.name);\n            var Q, se, oe = [], ye = (k.header = new Me.Record(\"Header\", [{ name: \"major\", type: \"Card8\", value: 1 }, { name: \"minor\", type: \"Card8\", value: 0 }, { name: \"hdrSize\", type: \"Card8\", value: 4 }, { name: \"major\", type: \"Card8\", value: 1 }]), k.nameIndex = function(be) {\n              var de = new Me.Record(\"Name INDEX\", [{ name: \"names\", type: \"INDEX\", value: [] }]);\n              de.names = [];\n              for (var Ie = 0; Ie < be.length; Ie += 1)\n                de.names.push({ name: \"name_\" + Ie, type: \"NAME\", value: be[Ie] });\n              return de;\n            }([ye.postScriptName]), Ue(I, oe)), Se = (k.topDictIndex = Ye(ye), k.globalSubrIndex = new Me.Record(\"Global Subr INDEX\", [{ name: \"subrs\", type: \"INDEX\", value: [] }]), k.charsets = function(be, de) {\n              for (var Ie = new Me.Record(\"Charsets\", [{ name: \"format\", type: \"Card8\", value: 0 }]), ke = 0; ke < be.length; ke += 1) {\n                var Ae = Ft(be[ke], de);\n                Ie.fields.push({ name: \"glyph_\" + ke, type: \"SID\", value: Ae });\n              }\n              return Ie;\n            }(N, oe), k.charStringsIndex = it(d), k.privateDict = (Se = {}, Q = oe, (se = new Me.Record(\"Private DICT\", [{ name: \"dict\", type: \"DICT\", value: {} }])).dict = me(ht, Se, Q), se), k.stringIndex = function(be) {\n              var de = new Me.Record(\"String INDEX\", [{ name: \"strings\", type: \"INDEX\", value: [] }]);\n              de.strings = [];\n              for (var Ie = 0; Ie < be.length; Ie += 1)\n                de.strings.push({ name: \"string_\" + Ie, type: \"STRING\", value: be[Ie] });\n              return de;\n            }(oe), k.header.sizeOf() + k.nameIndex.sizeOf() + k.topDictIndex.sizeOf() + k.stringIndex.sizeOf() + k.globalSubrIndex.sizeOf());\n            return I.charset = Se, I.encoding = 0, I.charStrings = I.charset + k.charsets.sizeOf(), I.private[1] = I.charStrings + k.charStringsIndex.sizeOf(), ye = Ue(I, oe), k.topDictIndex = Ye(ye), k;\n          } }, pt = { parse: function(k, v) {\n            var w = {}, k = new we.Parser(k, v);\n            return w.version = k.parseVersion(), w.fontRevision = Math.round(1e3 * k.parseFixed()) / 1e3, w.checkSumAdjustment = k.parseULong(), w.magicNumber = k.parseULong(), O.argument(w.magicNumber === 1594834165, \"Font header has wrong magic number.\"), w.flags = k.parseUShort(), w.unitsPerEm = k.parseUShort(), w.created = k.parseLongDateTime(), w.modified = k.parseLongDateTime(), w.xMin = k.parseShort(), w.yMin = k.parseShort(), w.xMax = k.parseShort(), w.yMax = k.parseShort(), w.macStyle = k.parseUShort(), w.lowestRecPPEM = k.parseUShort(), w.fontDirectionHint = k.parseShort(), w.indexToLocFormat = k.parseShort(), w.glyphDataFormat = k.parseShort(), w;\n          }, make: function(d) {\n            var v = Math.round((/* @__PURE__ */ new Date()).getTime() / 1e3) + 2082844800, w = v;\n            return d.createdTimestamp && (w = d.createdTimestamp + 2082844800), new Me.Table(\"head\", [{ name: \"version\", type: \"FIXED\", value: 65536 }, { name: \"fontRevision\", type: \"FIXED\", value: 65536 }, { name: \"checkSumAdjustment\", type: \"ULONG\", value: 0 }, { name: \"magicNumber\", type: \"ULONG\", value: 1594834165 }, { name: \"flags\", type: \"USHORT\", value: 0 }, { name: \"unitsPerEm\", type: \"USHORT\", value: 1e3 }, { name: \"created\", type: \"LONGDATETIME\", value: w }, { name: \"modified\", type: \"LONGDATETIME\", value: v }, { name: \"xMin\", type: \"SHORT\", value: 0 }, { name: \"yMin\", type: \"SHORT\", value: 0 }, { name: \"xMax\", type: \"SHORT\", value: 0 }, { name: \"yMax\", type: \"SHORT\", value: 0 }, { name: \"macStyle\", type: \"USHORT\", value: 0 }, { name: \"lowestRecPPEM\", type: \"USHORT\", value: 0 }, { name: \"fontDirectionHint\", type: \"SHORT\", value: 2 }, { name: \"indexToLocFormat\", type: \"SHORT\", value: 0 }, { name: \"glyphDataFormat\", type: \"SHORT\", value: 0 }], d);\n          } }, ie = { parse: function(k, v) {\n            var w = {}, k = new we.Parser(k, v);\n            return w.version = k.parseVersion(), w.ascender = k.parseShort(), w.descender = k.parseShort(), w.lineGap = k.parseShort(), w.advanceWidthMax = k.parseUShort(), w.minLeftSideBearing = k.parseShort(), w.minRightSideBearing = k.parseShort(), w.xMaxExtent = k.parseShort(), w.caretSlopeRise = k.parseShort(), w.caretSlopeRun = k.parseShort(), w.caretOffset = k.parseShort(), k.relativeOffset += 8, w.metricDataFormat = k.parseShort(), w.numberOfHMetrics = k.parseUShort(), w;\n          }, make: function(d) {\n            return new Me.Table(\"hhea\", [{ name: \"version\", type: \"FIXED\", value: 65536 }, { name: \"ascender\", type: \"FWORD\", value: 0 }, { name: \"descender\", type: \"FWORD\", value: 0 }, { name: \"lineGap\", type: \"FWORD\", value: 0 }, { name: \"advanceWidthMax\", type: \"UFWORD\", value: 0 }, { name: \"minLeftSideBearing\", type: \"FWORD\", value: 0 }, { name: \"minRightSideBearing\", type: \"FWORD\", value: 0 }, { name: \"xMaxExtent\", type: \"FWORD\", value: 0 }, { name: \"caretSlopeRise\", type: \"SHORT\", value: 1 }, { name: \"caretSlopeRun\", type: \"SHORT\", value: 0 }, { name: \"caretOffset\", type: \"SHORT\", value: 0 }, { name: \"reserved1\", type: \"SHORT\", value: 0 }, { name: \"reserved2\", type: \"SHORT\", value: 0 }, { name: \"reserved3\", type: \"SHORT\", value: 0 }, { name: \"reserved4\", type: \"SHORT\", value: 0 }, { name: \"metricDataFormat\", type: \"SHORT\", value: 0 }, { name: \"numberOfHMetrics\", type: \"USHORT\", value: 0 }], d);\n          } }, Oe = { parse: function(d, v, w, k, I) {\n            for (var N, z, Q = new we.Parser(d, v), se = 0; se < k; se += 1) {\n              se < w && (N = Q.parseUShort(), z = Q.parseShort());\n              var oe = I.get(se);\n              oe.advanceWidth = N, oe.leftSideBearing = z;\n            }\n          }, make: function(d) {\n            for (var v = new Me.Table(\"hmtx\", []), w = 0; w < d.length; w += 1) {\n              var I = d.get(w), k = I.advanceWidth || 0, I = I.leftSideBearing || 0;\n              v.fields.push({ name: \"advanceWidth_\" + w, type: \"USHORT\", value: k }), v.fields.push({ name: \"leftSideBearing_\" + w, type: \"SHORT\", value: I });\n            }\n            return v;\n          } }, Ge = { make: function(d) {\n            for (var v = new Me.Table(\"ltag\", [{ name: \"version\", type: \"ULONG\", value: 1 }, { name: \"flags\", type: \"ULONG\", value: 0 }, { name: \"numTags\", type: \"ULONG\", value: d.length }]), w = \"\", k = 12 + 4 * d.length, I = 0; I < d.length; ++I) {\n              var N = w.indexOf(d[I]);\n              N < 0 && (N = w.length, w += d[I]), v.fields.push({ name: \"offset \" + I, type: \"USHORT\", value: k + N }), v.fields.push({ name: \"length \" + I, type: \"USHORT\", value: d[I].length });\n            }\n            return v.fields.push({ name: \"stringPool\", type: \"CHARARRAY\", value: w }), v;\n          }, parse: function(d, v) {\n            for (var w = new we.Parser(d, v), k = w.parseULong(), I = (O.argument(k === 1, \"Unsupported ltag table version.\"), w.skip(\"uLong\", 1), w.parseULong()), N = [], z = 0; z < I; z++) {\n              for (var Q = \"\", se = v + w.parseUShort(), oe = w.parseUShort(), ye = se; ye < se + oe; ++ye)\n                Q += String.fromCharCode(d.getInt8(ye));\n              N.push(Q);\n            }\n            return N;\n          } }, Le = { parse: function(k, v) {\n            var w = {}, k = new we.Parser(k, v);\n            return w.version = k.parseVersion(), w.numGlyphs = k.parseUShort(), w.version === 1 && (w.maxPoints = k.parseUShort(), w.maxContours = k.parseUShort(), w.maxCompositePoints = k.parseUShort(), w.maxCompositeContours = k.parseUShort(), w.maxZones = k.parseUShort(), w.maxTwilightPoints = k.parseUShort(), w.maxStorage = k.parseUShort(), w.maxFunctionDefs = k.parseUShort(), w.maxInstructionDefs = k.parseUShort(), w.maxStackElements = k.parseUShort(), w.maxSizeOfInstructions = k.parseUShort(), w.maxComponentElements = k.parseUShort(), w.maxComponentDepth = k.parseUShort()), w;\n          }, make: function(d) {\n            return new Me.Table(\"maxp\", [{ name: \"version\", type: \"FIXED\", value: 20480 }, { name: \"numGlyphs\", type: \"USHORT\", value: d }]);\n          } }, rt = [\"copyright\", \"fontFamily\", \"fontSubfamily\", \"uniqueID\", \"fullName\", \"version\", \"postScriptName\", \"trademark\", \"manufacturer\", \"designer\", \"description\", \"manufacturerURL\", \"designerURL\", \"license\", \"licenseURL\", \"reserved\", \"preferredFamily\", \"preferredSubfamily\", \"compatibleFullName\", \"sampleText\", \"postScriptFindFontName\", \"wwsFamily\", \"wwsSubfamily\"], Pe = { 0: \"en\", 1: \"fr\", 2: \"de\", 3: \"it\", 4: \"nl\", 5: \"sv\", 6: \"es\", 7: \"da\", 8: \"pt\", 9: \"no\", 10: \"he\", 11: \"ja\", 12: \"ar\", 13: \"fi\", 14: \"el\", 15: \"is\", 16: \"mt\", 17: \"tr\", 18: \"hr\", 19: \"zh-Hant\", 20: \"ur\", 21: \"hi\", 22: \"th\", 23: \"ko\", 24: \"lt\", 25: \"pl\", 26: \"hu\", 27: \"es\", 28: \"lv\", 29: \"se\", 30: \"fo\", 31: \"fa\", 32: \"ru\", 33: \"zh\", 34: \"nl-BE\", 35: \"ga\", 36: \"sq\", 37: \"ro\", 38: \"cz\", 39: \"sk\", 40: \"si\", 41: \"yi\", 42: \"sr\", 43: \"mk\", 44: \"bg\", 45: \"uk\", 46: \"be\", 47: \"uz\", 48: \"kk\", 49: \"az-Cyrl\", 50: \"az-Arab\", 51: \"hy\", 52: \"ka\", 53: \"mo\", 54: \"ky\", 55: \"tg\", 56: \"tk\", 57: \"mn-CN\", 58: \"mn\", 59: \"ps\", 60: \"ks\", 61: \"ku\", 62: \"sd\", 63: \"bo\", 64: \"ne\", 65: \"sa\", 66: \"mr\", 67: \"bn\", 68: \"as\", 69: \"gu\", 70: \"pa\", 71: \"or\", 72: \"ml\", 73: \"kn\", 74: \"ta\", 75: \"te\", 76: \"si\", 77: \"my\", 78: \"km\", 79: \"lo\", 80: \"vi\", 81: \"id\", 82: \"tl\", 83: \"ms\", 84: \"ms-Arab\", 85: \"am\", 86: \"ti\", 87: \"om\", 88: \"so\", 89: \"sw\", 90: \"rw\", 91: \"rn\", 92: \"ny\", 93: \"mg\", 94: \"eo\", 128: \"cy\", 129: \"eu\", 130: \"ca\", 131: \"la\", 132: \"qu\", 133: \"gn\", 134: \"ay\", 135: \"tt\", 136: \"ug\", 137: \"dz\", 138: \"jv\", 139: \"su\", 140: \"gl\", 141: \"af\", 142: \"br\", 143: \"iu\", 144: \"gd\", 145: \"gv\", 146: \"ga\", 147: \"to\", 148: \"el-polyton\", 149: \"kl\", 150: \"az\", 151: \"nn\" }, ct = { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0, 10: 5, 11: 1, 12: 4, 13: 0, 14: 6, 15: 0, 16: 0, 17: 0, 18: 0, 19: 2, 20: 4, 21: 9, 22: 21, 23: 3, 24: 29, 25: 29, 26: 29, 27: 29, 28: 29, 29: 0, 30: 0, 31: 4, 32: 7, 33: 25, 34: 0, 35: 0, 36: 0, 37: 0, 38: 29, 39: 29, 40: 0, 41: 5, 42: 7, 43: 7, 44: 7, 45: 7, 46: 7, 47: 7, 48: 7, 49: 7, 50: 4, 51: 24, 52: 23, 53: 7, 54: 7, 55: 7, 56: 7, 57: 27, 58: 7, 59: 4, 60: 4, 61: 4, 62: 4, 63: 26, 64: 9, 65: 9, 66: 9, 67: 13, 68: 13, 69: 11, 70: 10, 71: 12, 72: 17, 73: 16, 74: 14, 75: 15, 76: 18, 77: 19, 78: 20, 79: 22, 80: 30, 81: 0, 82: 0, 83: 0, 84: 4, 85: 28, 86: 28, 87: 28, 88: 0, 89: 0, 90: 0, 91: 0, 92: 0, 93: 0, 94: 0, 128: 0, 129: 0, 130: 0, 131: 0, 132: 0, 133: 0, 134: 0, 135: 7, 136: 4, 137: 26, 138: 0, 139: 0, 140: 0, 141: 0, 142: 0, 143: 28, 144: 0, 145: 0, 146: 0, 147: 0, 148: 6, 149: 0, 150: 0, 151: 0 }, qe = { 1078: \"af\", 1052: \"sq\", 1156: \"gsw\", 1118: \"am\", 5121: \"ar-DZ\", 15361: \"ar-BH\", 3073: \"ar\", 2049: \"ar-IQ\", 11265: \"ar-JO\", 13313: \"ar-KW\", 12289: \"ar-LB\", 4097: \"ar-LY\", 6145: \"ary\", 8193: \"ar-OM\", 16385: \"ar-QA\", 1025: \"ar-SA\", 10241: \"ar-SY\", 7169: \"aeb\", 14337: \"ar-AE\", 9217: \"ar-YE\", 1067: \"hy\", 1101: \"as\", 2092: \"az-Cyrl\", 1068: \"az\", 1133: \"ba\", 1069: \"eu\", 1059: \"be\", 2117: \"bn\", 1093: \"bn-IN\", 8218: \"bs-Cyrl\", 5146: \"bs\", 1150: \"br\", 1026: \"bg\", 1027: \"ca\", 3076: \"zh-HK\", 5124: \"zh-MO\", 2052: \"zh\", 4100: \"zh-SG\", 1028: \"zh-TW\", 1155: \"co\", 1050: \"hr\", 4122: \"hr-BA\", 1029: \"cs\", 1030: \"da\", 1164: \"prs\", 1125: \"dv\", 2067: \"nl-BE\", 1043: \"nl\", 3081: \"en-AU\", 10249: \"en-BZ\", 4105: \"en-CA\", 9225: \"en-029\", 16393: \"en-IN\", 6153: \"en-IE\", 8201: \"en-JM\", 17417: \"en-MY\", 5129: \"en-NZ\", 13321: \"en-PH\", 18441: \"en-SG\", 7177: \"en-ZA\", 11273: \"en-TT\", 2057: \"en-GB\", 1033: \"en\", 12297: \"en-ZW\", 1061: \"et\", 1080: \"fo\", 1124: \"fil\", 1035: \"fi\", 2060: \"fr-BE\", 3084: \"fr-CA\", 1036: \"fr\", 5132: \"fr-LU\", 6156: \"fr-MC\", 4108: \"fr-CH\", 1122: \"fy\", 1110: \"gl\", 1079: \"ka\", 3079: \"de-AT\", 1031: \"de\", 5127: \"de-LI\", 4103: \"de-LU\", 2055: \"de-CH\", 1032: \"el\", 1135: \"kl\", 1095: \"gu\", 1128: \"ha\", 1037: \"he\", 1081: \"hi\", 1038: \"hu\", 1039: \"is\", 1136: \"ig\", 1057: \"id\", 1117: \"iu\", 2141: \"iu-Latn\", 2108: \"ga\", 1076: \"xh\", 1077: \"zu\", 1040: \"it\", 2064: \"it-CH\", 1041: \"ja\", 1099: \"kn\", 1087: \"kk\", 1107: \"km\", 1158: \"quc\", 1159: \"rw\", 1089: \"sw\", 1111: \"kok\", 1042: \"ko\", 1088: \"ky\", 1108: \"lo\", 1062: \"lv\", 1063: \"lt\", 2094: \"dsb\", 1134: \"lb\", 1071: \"mk\", 2110: \"ms-BN\", 1086: \"ms\", 1100: \"ml\", 1082: \"mt\", 1153: \"mi\", 1146: \"arn\", 1102: \"mr\", 1148: \"moh\", 1104: \"mn\", 2128: \"mn-CN\", 1121: \"ne\", 1044: \"nb\", 2068: \"nn\", 1154: \"oc\", 1096: \"or\", 1123: \"ps\", 1045: \"pl\", 1046: \"pt\", 2070: \"pt-PT\", 1094: \"pa\", 1131: \"qu-BO\", 2155: \"qu-EC\", 3179: \"qu\", 1048: \"ro\", 1047: \"rm\", 1049: \"ru\", 9275: \"smn\", 4155: \"smj-NO\", 5179: \"smj\", 3131: \"se-FI\", 1083: \"se\", 2107: \"se-SE\", 8251: \"sms\", 6203: \"sma-NO\", 7227: \"sms\", 1103: \"sa\", 7194: \"sr-Cyrl-BA\", 3098: \"sr\", 6170: \"sr-Latn-BA\", 2074: \"sr-Latn\", 1132: \"nso\", 1074: \"tn\", 1115: \"si\", 1051: \"sk\", 1060: \"sl\", 11274: \"es-AR\", 16394: \"es-BO\", 13322: \"es-CL\", 9226: \"es-CO\", 5130: \"es-CR\", 7178: \"es-DO\", 12298: \"es-EC\", 17418: \"es-SV\", 4106: \"es-GT\", 18442: \"es-HN\", 2058: \"es-MX\", 19466: \"es-NI\", 6154: \"es-PA\", 15370: \"es-PY\", 10250: \"es-PE\", 20490: \"es-PR\", 3082: \"es\", 1034: \"es\", 21514: \"es-US\", 14346: \"es-UY\", 8202: \"es-VE\", 2077: \"sv-FI\", 1053: \"sv\", 1114: \"syr\", 1064: \"tg\", 2143: \"tzm\", 1097: \"ta\", 1092: \"tt\", 1098: \"te\", 1054: \"th\", 1105: \"bo\", 1055: \"tr\", 1090: \"tk\", 1152: \"ug\", 1058: \"uk\", 1070: \"hsb\", 1056: \"ur\", 2115: \"uz-Cyrl\", 1091: \"uz\", 1066: \"vi\", 1106: \"cy\", 1160: \"wo\", 1157: \"sah\", 1144: \"ii\", 1130: \"yo\" }, ut = \"utf-16\", Ze = { 0: \"macintosh\", 1: \"x-mac-japanese\", 2: \"x-mac-chinesetrad\", 3: \"x-mac-korean\", 6: \"x-mac-greek\", 7: \"x-mac-cyrillic\", 9: \"x-mac-devanagai\", 10: \"x-mac-gurmukhi\", 11: \"x-mac-gujarati\", 12: \"x-mac-oriya\", 13: \"x-mac-bengali\", 14: \"x-mac-tamil\", 15: \"x-mac-telugu\", 16: \"x-mac-kannada\", 17: \"x-mac-malayalam\", 18: \"x-mac-sinhalese\", 19: \"x-mac-burmese\", 20: \"x-mac-khmer\", 21: \"x-mac-thai\", 22: \"x-mac-lao\", 23: \"x-mac-georgian\", 24: \"x-mac-armenian\", 25: \"x-mac-chinesesimp\", 26: \"x-mac-tibetan\", 27: \"x-mac-mongolian\", 28: \"x-mac-ethiopic\", 29: \"x-mac-ce\", 30: \"x-mac-vietnamese\", 31: \"x-mac-extarabic\" }, At = { 15: \"x-mac-icelandic\", 17: \"x-mac-turkish\", 18: \"x-mac-croatian\", 24: \"x-mac-ce\", 25: \"x-mac-ce\", 26: \"x-mac-ce\", 27: \"x-mac-ce\", 28: \"x-mac-ce\", 30: \"x-mac-icelandic\", 37: \"x-mac-romanian\", 38: \"x-mac-ce\", 39: \"x-mac-ce\", 40: \"x-mac-ce\", 143: \"x-mac-inuit\", 146: \"x-mac-gaelic\" };\n          function Ut(d, v, w) {\n            switch (d) {\n              case 0:\n                return ut;\n              case 1:\n                return At[w] || Ze[v];\n              case 3:\n                if (v === 1 || v === 10)\n                  return ut;\n            }\n          }\n          function Ct(d) {\n            var v, w = {};\n            for (v in d)\n              w[d[v]] = parseInt(v);\n            return w;\n          }\n          function Nt(d, v, w, k, I, N) {\n            return new Me.Record(\"NameRecord\", [{ name: \"platformID\", type: \"USHORT\", value: d }, { name: \"encodingID\", type: \"USHORT\", value: v }, { name: \"languageID\", type: \"USHORT\", value: w }, { name: \"nameID\", type: \"USHORT\", value: k }, { name: \"length\", type: \"USHORT\", value: I }, { name: \"offset\", type: \"USHORT\", value: N }]);\n          }\n          function Kt(d, v) {\n            if ((w = function(N, z) {\n              var Q = N.length, se = z.length - Q + 1;\n              e:\n                for (var oe = 0; oe < se; oe++)\n                  for (; oe < se; oe++) {\n                    for (var ye = 0; ye < Q; ye++)\n                      if (z[oe + ye] !== N[ye])\n                        continue e;\n                    return oe;\n                  }\n              return -1;\n            }(d, v)) < 0)\n              for (var w = v.length, k = 0, I = d.length; k < I; ++k)\n                v.push(d[k]);\n            return w;\n          }\n          var Xt = { parse: function(d, v, w) {\n            for (var k = {}, I = new we.Parser(d, v), v = I.parseUShort(), N = I.parseUShort(), z = I.offset + I.parseUShort(), Q = 0; Q < N; Q++) {\n              var Ie = I.parseUShort(), se = I.parseUShort(), oe = I.parseUShort(), ye = I.parseUShort(), ye = rt[ye] || ye, Se = I.parseUShort(), be = I.parseUShort(), de = function(Ae, Te, Ee) {\n                switch (Ae) {\n                  case 0:\n                    if (Te === 65535)\n                      return \"und\";\n                    if (Ee)\n                      return Ee[Te];\n                    break;\n                  case 1:\n                    return Pe[Te];\n                  case 3:\n                    return qe[Te];\n                }\n              }(Ie, oe, w), Ie = Ut(Ie, se, oe);\n              Ie !== void 0 && de !== void 0 && (se = void 0, (se = Ie === ut ? D.UTF16(d, z + be, Se) : D.MACSTRING(d, z + be, Se, Ie)) && ((oe = (oe = k[ye]) === void 0 ? k[ye] = {} : oe)[de] = se));\n            }\n            return v === 1 && I.parseUShort(), k;\n          }, make: function(d, v) {\n            var w, k = [], I = {}, N = Ct(rt);\n            for (w in d) {\n              var z = N[w];\n              if (z === void 0 && (z = w), be = parseInt(z), isNaN(be))\n                throw new Error('Name table entry \"' + w + '\" does not exist, see nameTableNames for complete list.');\n              I[be] = d[w], k.push(be);\n            }\n            for (var Q = Ct(Pe), se = Ct(qe), oe = [], ye = [], Se = 0; Se < k.length; Se++) {\n              var be, de, Ie = I[be = k[Se]];\n              for (de in Ie) {\n                var ke = Ie[de], lt = 1, Ae = Q[de], Te = ct[Ae], Ee = Ut(lt, Te, Ae), Ee = B.MACSTRING(ke, Ee), $e = (Ee === void 0 && (lt = 0, (Ae = v.indexOf(de)) < 0 && (Ae = v.length, v.push(de)), Te = 4, Ee = B.UTF16(ke)), Kt(Ee, ye)), lt = (oe.push(Nt(lt, Te, Ae, be, Ee.length, $e)), se[de]);\n                lt !== void 0 && (Ae = Kt(Te = B.UTF16(ke), ye), oe.push(Nt(3, 1, lt, be, Te.length, Ae)));\n              }\n            }\n            oe.sort(function(dt, wt) {\n              return dt.platformID - wt.platformID || dt.encodingID - wt.encodingID || dt.languageID - wt.languageID || dt.nameID - wt.nameID;\n            });\n            for (var et = new Me.Table(\"name\", [{ name: \"format\", type: \"USHORT\", value: 0 }, { name: \"count\", type: \"USHORT\", value: oe.length }, { name: \"stringOffset\", type: \"USHORT\", value: 6 + 12 * oe.length }]), tt = 0; tt < oe.length; tt++)\n              et.fields.push({ name: \"record_\" + tt, type: \"RECORD\", value: oe[tt] });\n            return et.fields.push({ name: \"strings\", type: \"LITERAL\", value: ye }), et;\n          } }, Jt = [{ begin: 0, end: 127 }, { begin: 128, end: 255 }, { begin: 256, end: 383 }, { begin: 384, end: 591 }, { begin: 592, end: 687 }, { begin: 688, end: 767 }, { begin: 768, end: 879 }, { begin: 880, end: 1023 }, { begin: 11392, end: 11519 }, { begin: 1024, end: 1279 }, { begin: 1328, end: 1423 }, { begin: 1424, end: 1535 }, { begin: 42240, end: 42559 }, { begin: 1536, end: 1791 }, { begin: 1984, end: 2047 }, { begin: 2304, end: 2431 }, { begin: 2432, end: 2559 }, { begin: 2560, end: 2687 }, { begin: 2688, end: 2815 }, { begin: 2816, end: 2943 }, { begin: 2944, end: 3071 }, { begin: 3072, end: 3199 }, { begin: 3200, end: 3327 }, { begin: 3328, end: 3455 }, { begin: 3584, end: 3711 }, { begin: 3712, end: 3839 }, { begin: 4256, end: 4351 }, { begin: 6912, end: 7039 }, { begin: 4352, end: 4607 }, { begin: 7680, end: 7935 }, { begin: 7936, end: 8191 }, { begin: 8192, end: 8303 }, { begin: 8304, end: 8351 }, { begin: 8352, end: 8399 }, { begin: 8400, end: 8447 }, { begin: 8448, end: 8527 }, { begin: 8528, end: 8591 }, { begin: 8592, end: 8703 }, { begin: 8704, end: 8959 }, { begin: 8960, end: 9215 }, { begin: 9216, end: 9279 }, { begin: 9280, end: 9311 }, { begin: 9312, end: 9471 }, { begin: 9472, end: 9599 }, { begin: 9600, end: 9631 }, { begin: 9632, end: 9727 }, { begin: 9728, end: 9983 }, { begin: 9984, end: 10175 }, { begin: 12288, end: 12351 }, { begin: 12352, end: 12447 }, { begin: 12448, end: 12543 }, { begin: 12544, end: 12591 }, { begin: 12592, end: 12687 }, { begin: 43072, end: 43135 }, { begin: 12800, end: 13055 }, { begin: 13056, end: 13311 }, { begin: 44032, end: 55215 }, { begin: 55296, end: 57343 }, { begin: 67840, end: 67871 }, { begin: 19968, end: 40959 }, { begin: 57344, end: 63743 }, { begin: 12736, end: 12783 }, { begin: 64256, end: 64335 }, { begin: 64336, end: 65023 }, { begin: 65056, end: 65071 }, { begin: 65040, end: 65055 }, { begin: 65104, end: 65135 }, { begin: 65136, end: 65279 }, { begin: 65280, end: 65519 }, { begin: 65520, end: 65535 }, { begin: 3840, end: 4095 }, { begin: 1792, end: 1871 }, { begin: 1920, end: 1983 }, { begin: 3456, end: 3583 }, { begin: 4096, end: 4255 }, { begin: 4608, end: 4991 }, { begin: 5024, end: 5119 }, { begin: 5120, end: 5759 }, { begin: 5760, end: 5791 }, { begin: 5792, end: 5887 }, { begin: 6016, end: 6143 }, { begin: 6144, end: 6319 }, { begin: 10240, end: 10495 }, { begin: 40960, end: 42127 }, { begin: 5888, end: 5919 }, { begin: 66304, end: 66351 }, { begin: 66352, end: 66383 }, { begin: 66560, end: 66639 }, { begin: 118784, end: 119039 }, { begin: 119808, end: 120831 }, { begin: 1044480, end: 1048573 }, { begin: 65024, end: 65039 }, { begin: 917504, end: 917631 }, { begin: 6400, end: 6479 }, { begin: 6480, end: 6527 }, { begin: 6528, end: 6623 }, { begin: 6656, end: 6687 }, { begin: 11264, end: 11359 }, { begin: 11568, end: 11647 }, { begin: 19904, end: 19967 }, { begin: 43008, end: 43055 }, { begin: 65536, end: 65663 }, { begin: 65856, end: 65935 }, { begin: 66432, end: 66463 }, { begin: 66464, end: 66527 }, { begin: 66640, end: 66687 }, { begin: 66688, end: 66735 }, { begin: 67584, end: 67647 }, { begin: 68096, end: 68191 }, { begin: 119552, end: 119647 }, { begin: 73728, end: 74751 }, { begin: 119648, end: 119679 }, { begin: 7040, end: 7103 }, { begin: 7168, end: 7247 }, { begin: 7248, end: 7295 }, { begin: 43136, end: 43231 }, { begin: 43264, end: 43311 }, { begin: 43312, end: 43359 }, { begin: 43520, end: 43615 }, { begin: 65936, end: 65999 }, { begin: 66e3, end: 66047 }, { begin: 66208, end: 66271 }, { begin: 127024, end: 127135 }], Bt = { parse: function(d, v) {\n            var w = {}, k = new we.Parser(d, v);\n            w.version = k.parseUShort(), w.xAvgCharWidth = k.parseShort(), w.usWeightClass = k.parseUShort(), w.usWidthClass = k.parseUShort(), w.fsType = k.parseUShort(), w.ySubscriptXSize = k.parseShort(), w.ySubscriptYSize = k.parseShort(), w.ySubscriptXOffset = k.parseShort(), w.ySubscriptYOffset = k.parseShort(), w.ySuperscriptXSize = k.parseShort(), w.ySuperscriptYSize = k.parseShort(), w.ySuperscriptXOffset = k.parseShort(), w.ySuperscriptYOffset = k.parseShort(), w.yStrikeoutSize = k.parseShort(), w.yStrikeoutPosition = k.parseShort(), w.sFamilyClass = k.parseShort(), w.panose = [];\n            for (var I = 0; I < 10; I++)\n              w.panose[I] = k.parseByte();\n            return w.ulUnicodeRange1 = k.parseULong(), w.ulUnicodeRange2 = k.parseULong(), w.ulUnicodeRange3 = k.parseULong(), w.ulUnicodeRange4 = k.parseULong(), w.achVendID = String.fromCharCode(k.parseByte(), k.parseByte(), k.parseByte(), k.parseByte()), w.fsSelection = k.parseUShort(), w.usFirstCharIndex = k.parseUShort(), w.usLastCharIndex = k.parseUShort(), w.sTypoAscender = k.parseShort(), w.sTypoDescender = k.parseShort(), w.sTypoLineGap = k.parseShort(), w.usWinAscent = k.parseUShort(), w.usWinDescent = k.parseUShort(), 1 <= w.version && (w.ulCodePageRange1 = k.parseULong(), w.ulCodePageRange2 = k.parseULong()), 2 <= w.version && (w.sxHeight = k.parseShort(), w.sCapHeight = k.parseShort(), w.usDefaultChar = k.parseUShort(), w.usBreakChar = k.parseUShort(), w.usMaxContent = k.parseUShort()), w;\n          }, make: function(d) {\n            return new Me.Table(\"OS/2\", [{ name: \"version\", type: \"USHORT\", value: 3 }, { name: \"xAvgCharWidth\", type: \"SHORT\", value: 0 }, { name: \"usWeightClass\", type: \"USHORT\", value: 0 }, { name: \"usWidthClass\", type: \"USHORT\", value: 0 }, { name: \"fsType\", type: \"USHORT\", value: 0 }, { name: \"ySubscriptXSize\", type: \"SHORT\", value: 650 }, { name: \"ySubscriptYSize\", type: \"SHORT\", value: 699 }, { name: \"ySubscriptXOffset\", type: \"SHORT\", value: 0 }, { name: \"ySubscriptYOffset\", type: \"SHORT\", value: 140 }, { name: \"ySuperscriptXSize\", type: \"SHORT\", value: 650 }, { name: \"ySuperscriptYSize\", type: \"SHORT\", value: 699 }, { name: \"ySuperscriptXOffset\", type: \"SHORT\", value: 0 }, { name: \"ySuperscriptYOffset\", type: \"SHORT\", value: 479 }, { name: \"yStrikeoutSize\", type: \"SHORT\", value: 49 }, { name: \"yStrikeoutPosition\", type: \"SHORT\", value: 258 }, { name: \"sFamilyClass\", type: \"SHORT\", value: 0 }, { name: \"bFamilyType\", type: \"BYTE\", value: 0 }, { name: \"bSerifStyle\", type: \"BYTE\", value: 0 }, { name: \"bWeight\", type: \"BYTE\", value: 0 }, { name: \"bProportion\", type: \"BYTE\", value: 0 }, { name: \"bContrast\", type: \"BYTE\", value: 0 }, { name: \"bStrokeVariation\", type: \"BYTE\", value: 0 }, { name: \"bArmStyle\", type: \"BYTE\", value: 0 }, { name: \"bLetterform\", type: \"BYTE\", value: 0 }, { name: \"bMidline\", type: \"BYTE\", value: 0 }, { name: \"bXHeight\", type: \"BYTE\", value: 0 }, { name: \"ulUnicodeRange1\", type: \"ULONG\", value: 0 }, { name: \"ulUnicodeRange2\", type: \"ULONG\", value: 0 }, { name: \"ulUnicodeRange3\", type: \"ULONG\", value: 0 }, { name: \"ulUnicodeRange4\", type: \"ULONG\", value: 0 }, { name: \"achVendID\", type: \"CHARARRAY\", value: \"XXXX\" }, { name: \"fsSelection\", type: \"USHORT\", value: 0 }, { name: \"usFirstCharIndex\", type: \"USHORT\", value: 0 }, { name: \"usLastCharIndex\", type: \"USHORT\", value: 0 }, { name: \"sTypoAscender\", type: \"SHORT\", value: 0 }, { name: \"sTypoDescender\", type: \"SHORT\", value: 0 }, { name: \"sTypoLineGap\", type: \"SHORT\", value: 0 }, { name: \"usWinAscent\", type: \"USHORT\", value: 0 }, { name: \"usWinDescent\", type: \"USHORT\", value: 0 }, { name: \"ulCodePageRange1\", type: \"ULONG\", value: 0 }, { name: \"ulCodePageRange2\", type: \"ULONG\", value: 0 }, { name: \"sxHeight\", type: \"SHORT\", value: 0 }, { name: \"sCapHeight\", type: \"SHORT\", value: 0 }, { name: \"usDefaultChar\", type: \"USHORT\", value: 0 }, { name: \"usBreakChar\", type: \"USHORT\", value: 0 }, { name: \"usMaxContext\", type: \"USHORT\", value: 0 }], d);\n          }, unicodeRanges: Jt, getUnicodeRange: function(d) {\n            for (var v = 0; v < Jt.length; v += 1) {\n              var w = Jt[v];\n              if (d >= w.begin && d < w.end)\n                return v;\n            }\n            return -1;\n          } }, Lr = { parse: function(d, v) {\n            var w = {}, k = new we.Parser(d, v);\n            switch (w.version = k.parseVersion(), w.italicAngle = k.parseFixed(), w.underlinePosition = k.parseShort(), w.underlineThickness = k.parseShort(), w.isFixedPitch = k.parseULong(), w.minMemType42 = k.parseULong(), w.maxMemType42 = k.parseULong(), w.minMemType1 = k.parseULong(), w.maxMemType1 = k.parseULong(), w.version) {\n              case 1:\n                w.names = pe.slice();\n                break;\n              case 2:\n                w.numberOfGlyphs = k.parseUShort(), w.glyphNameIndex = new Array(w.numberOfGlyphs);\n                for (var I = 0; I < w.numberOfGlyphs; I++)\n                  w.glyphNameIndex[I] = k.parseUShort();\n                w.names = [];\n                for (var N, z = 0; z < w.numberOfGlyphs; z++)\n                  w.glyphNameIndex[z] >= pe.length && (N = k.parseChar(), w.names.push(k.parseString(N)));\n                break;\n              case 2.5:\n                w.numberOfGlyphs = k.parseUShort(), w.offset = new Array(w.numberOfGlyphs);\n                for (var Q = 0; Q < w.numberOfGlyphs; Q++)\n                  w.offset[Q] = k.parseChar();\n            }\n            return w;\n          }, make: function() {\n            return new Me.Table(\"post\", [{ name: \"version\", type: \"FIXED\", value: 196608 }, { name: \"italicAngle\", type: \"FIXED\", value: 0 }, { name: \"underlinePosition\", type: \"FWORD\", value: 0 }, { name: \"underlineThickness\", type: \"FWORD\", value: 0 }, { name: \"isFixedPitch\", type: \"ULONG\", value: 0 }, { name: \"minMemType42\", type: \"ULONG\", value: 0 }, { name: \"maxMemType42\", type: \"ULONG\", value: 0 }, { name: \"minMemType1\", type: \"ULONG\", value: 0 }, { name: \"maxMemType1\", type: \"ULONG\", value: 0 }]);\n          } }, Yt = new Array(9), ar = (Yt[1] = function() {\n            var d = this.offset + this.relativeOffset, v = this.parseUShort();\n            return v === 1 ? { substFormat: 1, coverage: this.parsePointer(ve.coverage), deltaGlyphId: this.parseUShort() } : v === 2 ? { substFormat: 2, coverage: this.parsePointer(ve.coverage), substitute: this.parseOffset16List() } : void O.assert(!1, \"0x\" + d.toString(16) + \": lookup type 1 format must be 1 or 2.\");\n          }, Yt[2] = function() {\n            var d = this.parseUShort();\n            return O.argument(d === 1, \"GSUB Multiple Substitution Subtable identifier-format must be 1\"), { substFormat: d, coverage: this.parsePointer(ve.coverage), sequences: this.parseListOfLists() };\n          }, Yt[3] = function() {\n            var d = this.parseUShort();\n            return O.argument(d === 1, \"GSUB Alternate Substitution Subtable identifier-format must be 1\"), { substFormat: d, coverage: this.parsePointer(ve.coverage), alternateSets: this.parseListOfLists() };\n          }, Yt[4] = function() {\n            var d = this.parseUShort();\n            return O.argument(d === 1, \"GSUB ligature table identifier-format must be 1\"), { substFormat: d, coverage: this.parsePointer(ve.coverage), ligatureSets: this.parseListOfLists(function() {\n              return { ligGlyph: this.parseUShort(), components: this.parseUShortList(this.parseUShort() - 1) };\n            }) };\n          }, { sequenceIndex: ve.uShort, lookupListIndex: ve.uShort });\n          Yt[5] = function() {\n            var d, v, w = this.offset + this.relativeOffset, k = this.parseUShort();\n            return k === 1 ? { substFormat: k, coverage: this.parsePointer(ve.coverage), ruleSets: this.parseListOfLists(function() {\n              var I = this.parseUShort(), N = this.parseUShort();\n              return { input: this.parseUShortList(I - 1), lookupRecords: this.parseRecordList(N, ar) };\n            }) } : k === 2 ? { substFormat: k, coverage: this.parsePointer(ve.coverage), classDef: this.parsePointer(ve.classDef), classSets: this.parseListOfLists(function() {\n              var I = this.parseUShort(), N = this.parseUShort();\n              return { classes: this.parseUShortList(I - 1), lookupRecords: this.parseRecordList(N, ar) };\n            }) } : k === 3 ? (d = this.parseUShort(), v = this.parseUShort(), { substFormat: k, coverages: this.parseList(d, ve.pointer(ve.coverage)), lookupRecords: this.parseRecordList(v, ar) }) : void O.assert(!1, \"0x\" + w.toString(16) + \": lookup type 5 format must be 1, 2 or 3.\");\n          }, Yt[6] = function() {\n            var d = this.offset + this.relativeOffset, v = this.parseUShort();\n            return v === 1 ? { substFormat: 1, coverage: this.parsePointer(ve.coverage), chainRuleSets: this.parseListOfLists(function() {\n              return { backtrack: this.parseUShortList(), input: this.parseUShortList(this.parseShort() - 1), lookahead: this.parseUShortList(), lookupRecords: this.parseRecordList(ar) };\n            }) } : v === 2 ? { substFormat: 2, coverage: this.parsePointer(ve.coverage), backtrackClassDef: this.parsePointer(ve.classDef), inputClassDef: this.parsePointer(ve.classDef), lookaheadClassDef: this.parsePointer(ve.classDef), chainClassSet: this.parseListOfLists(function() {\n              return { backtrack: this.parseUShortList(), input: this.parseUShortList(this.parseShort() - 1), lookahead: this.parseUShortList(), lookupRecords: this.parseRecordList(ar) };\n            }) } : v === 3 ? { substFormat: 3, backtrackCoverage: this.parseList(ve.pointer(ve.coverage)), inputCoverage: this.parseList(ve.pointer(ve.coverage)), lookaheadCoverage: this.parseList(ve.pointer(ve.coverage)), lookupRecords: this.parseRecordList(ar) } : void O.assert(!1, \"0x\" + d.toString(16) + \": lookup type 6 format must be 1, 2 or 3.\");\n          }, Yt[7] = function() {\n            var d = this.parseUShort(), d = (O.argument(d === 1, \"GSUB Extension Substitution subtable identifier-format must be 1\"), this.parseUShort()), v = new ve(this.data, this.offset + this.parseULong());\n            return { substFormat: 1, lookupType: d, extension: Yt[d].call(v) };\n          }, Yt[8] = function() {\n            var d = this.parseUShort();\n            return O.argument(d === 1, \"GSUB Reverse Chaining Contextual Single Substitution Subtable identifier-format must be 1\"), { substFormat: d, coverage: this.parsePointer(ve.coverage), backtrackCoverage: this.parseList(ve.pointer(ve.coverage)), lookaheadCoverage: this.parseList(ve.pointer(ve.coverage)), substitutes: this.parseUShortList() };\n          };\n          var yr = new Array(9);\n          yr[1] = function(d) {\n            return d.substFormat === 1 ? new Me.Table(\"substitutionTable\", [{ name: \"substFormat\", type: \"USHORT\", value: 1 }, { name: \"coverage\", type: \"TABLE\", value: new Me.Coverage(d.coverage) }, { name: \"deltaGlyphID\", type: \"USHORT\", value: d.deltaGlyphId }]) : new Me.Table(\"substitutionTable\", [{ name: \"substFormat\", type: \"USHORT\", value: 2 }, { name: \"coverage\", type: \"TABLE\", value: new Me.Coverage(d.coverage) }].concat(Me.ushortList(\"substitute\", d.substitute)));\n          }, yr[3] = function(d) {\n            return O.assert(d.substFormat === 1, \"Lookup type 3 substFormat must be 1.\"), new Me.Table(\"substitutionTable\", [{ name: \"substFormat\", type: \"USHORT\", value: 1 }, { name: \"coverage\", type: \"TABLE\", value: new Me.Coverage(d.coverage) }].concat(Me.tableList(\"altSet\", d.alternateSets, function(v) {\n              return new Me.Table(\"alternateSetTable\", Me.ushortList(\"alternate\", v));\n            })));\n          }, yr[4] = function(d) {\n            return O.assert(d.substFormat === 1, \"Lookup type 4 substFormat must be 1.\"), new Me.Table(\"substitutionTable\", [{ name: \"substFormat\", type: \"USHORT\", value: 1 }, { name: \"coverage\", type: \"TABLE\", value: new Me.Coverage(d.coverage) }].concat(Me.tableList(\"ligSet\", d.ligatureSets, function(v) {\n              return new Me.Table(\"ligatureSetTable\", Me.tableList(\"ligature\", v, function(w) {\n                return new Me.Table(\"ligatureTable\", [{ name: \"ligGlyph\", type: \"USHORT\", value: w.ligGlyph }].concat(Me.ushortList(\"component\", w.components, w.components.length + 1)));\n              }));\n            })));\n          };\n          var Rr = { parse: function(d, v) {\n            return v = (d = new ve(d, v = v || 0)).parseVersion(1), O.argument(v === 1 || v === 1.1, \"Unsupported GSUB table version.\"), v === 1 ? { version: v, scripts: d.parseScriptList(), features: d.parseFeatureList(), lookups: d.parseLookupList(Yt) } : { version: v, scripts: d.parseScriptList(), features: d.parseFeatureList(), lookups: d.parseLookupList(Yt), variations: d.parseFeatureVariationsList() };\n          }, make: function(d) {\n            return new Me.Table(\"GSUB\", [{ name: \"version\", type: \"ULONG\", value: 65536 }, { name: \"scripts\", type: \"TABLE\", value: new Me.ScriptList(d.scripts) }, { name: \"features\", type: \"TABLE\", value: new Me.FeatureList(d.features) }, { name: \"lookups\", type: \"TABLE\", value: new Me.LookupList(d.lookups, yr) }]);\n          } }, Ir = { parse: function(d, v) {\n            for (var w = new we.Parser(d, v), k = w.parseULong(), I = (O.argument(k === 1, \"Unsupported META table version.\"), w.parseULong(), w.parseULong(), w.parseULong()), N = {}, z = 0; z < I; z++) {\n              var Q = w.parseTag(), oe = w.parseULong(), se = w.parseULong(), oe = D.UTF8(d, v + oe, se);\n              N[Q] = oe;\n            }\n            return N;\n          }, make: function(d) {\n            var v, w = Object.keys(d).length, k = \"\", I = 16 + 12 * w, N = new Me.Table(\"meta\", [{ name: \"version\", type: \"ULONG\", value: 1 }, { name: \"flags\", type: \"ULONG\", value: 0 }, { name: \"offset\", type: \"ULONG\", value: I }, { name: \"numTags\", type: \"ULONG\", value: w }]);\n            for (v in d) {\n              var z = k.length;\n              k += d[v], N.fields.push({ name: \"tag \" + v, type: \"TAG\", value: v }), N.fields.push({ name: \"offset \" + v, type: \"ULONG\", value: I + z }), N.fields.push({ name: \"length \" + v, type: \"ULONG\", value: d[v].length });\n            }\n            return N.fields.push({ name: \"stringPool\", type: \"CHARARRAY\", value: k }), N;\n          } };\n          function Dr(d) {\n            return Math.log(d) / Math.log(2) | 0;\n          }\n          function Sr(d) {\n            for (; d.length % 4 != 0; )\n              d.push(0);\n            for (var v = 0, w = 0; w < d.length; w += 4)\n              v += (d[w] << 24) + (d[w + 1] << 16) + (d[w + 2] << 8) + d[w + 3];\n            return v %= Math.pow(2, 32);\n          }\n          function Fr(d, v, w, k) {\n            return new Me.Record(\"Table Record\", [{ name: \"tag\", type: \"TAG\", value: d !== void 0 ? d : \"\" }, { name: \"checkSum\", type: \"ULONG\", value: v !== void 0 ? v : 0 }, { name: \"offset\", type: \"ULONG\", value: w !== void 0 ? w : 0 }, { name: \"length\", type: \"ULONG\", value: k !== void 0 ? k : 0 }]);\n          }\n          function Ur(d) {\n            for (var v = new Me.Table(\"sfnt\", [{ name: \"version\", type: \"TAG\", value: \"OTTO\" }, { name: \"numTables\", type: \"USHORT\", value: 0 }, { name: \"searchRange\", type: \"USHORT\", value: 0 }, { name: \"entrySelector\", type: \"USHORT\", value: 0 }, { name: \"rangeShift\", type: \"USHORT\", value: 0 }]), w = (v.tables = d, v.numTables = d.length, Math.pow(2, Dr(v.numTables))), k = (v.searchRange = 16 * w, v.entrySelector = Dr(w), v.rangeShift = 16 * v.numTables - v.searchRange, []), I = [], N = v.sizeOf() + Fr().sizeOf() * v.numTables; N % 4 != 0; )\n              N += 1, I.push({ name: \"padding\", type: \"BYTE\", value: 0 });\n            for (var z = 0; z < d.length; z += 1) {\n              var Q = d[z], se = (O.argument(Q.tableName.length === 4, \"Table name\" + Q.tableName + \" is invalid.\"), Q.sizeOf()), oe = Fr(Q.tableName, Sr(Q.encode()), N, se);\n              for (k.push({ name: oe.tag + \" Table Record\", type: \"RECORD\", value: oe }), I.push({ name: Q.tableName + \" table\", type: \"RECORD\", value: Q }), N += se, O.argument(!isNaN(N), \"Something went wrong calculating the offset.\"); N % 4 != 0; )\n                N += 1, I.push({ name: \"padding\", type: \"BYTE\", value: 0 });\n            }\n            return k.sort(function(ye, Se) {\n              return ye.value.tag > Se.value.tag ? 1 : -1;\n            }), v.fields = v.fields.concat(k), v.fields = v.fields.concat(I), v;\n          }\n          function Nr(d, v, w) {\n            for (var k = 0; k < v.length; k += 1) {\n              var I = d.charToGlyphIndex(v[k]);\n              if (0 < I)\n                return d.glyphs.get(I).getMetrics();\n            }\n            return w;\n          }\n          var Sn = { make: Ur, fontToTable: function(d) {\n            for (var v, w = [], k = [], I = [], N = [], z = [], Q = [], se = [], oe = 0, ye = 0, Se = 0, be = 0, de = 0, Ie = 0; Ie < d.glyphs.length; Ie += 1) {\n              var ke = d.glyphs.get(Ie), Ae = 0 | ke.unicode;\n              if (isNaN(ke.advanceWidth))\n                throw new Error(\"Glyph \" + ke.name + \" (\" + Ie + \"): advanceWidth is not a number.\");\n              (Ae < v || v === void 0) && 0 < Ae && (v = Ae), oe < Ae && (oe = Ae);\n              var Ae = Bt.getUnicodeRange(Ae);\n              if (Ae < 32)\n                ye |= 1 << Ae;\n              else if (Ae < 64)\n                Se |= 1 << Ae - 32;\n              else if (Ae < 96)\n                be |= 1 << Ae - 64;\n              else {\n                if (!(Ae < 123))\n                  throw new Error(\"Unicode ranges bits > 123 are reserved for internal usage\");\n                de |= 1 << Ae - 96;\n              }\n              ke.name !== \".notdef\" && (Ae = ke.getMetrics(), w.push(Ae.xMin), k.push(Ae.yMin), I.push(Ae.xMax), N.push(Ae.yMax), Q.push(Ae.leftSideBearing), se.push(Ae.rightSideBearing), z.push(ke.advanceWidth));\n            }\n            var Te, Ee = { xMin: Math.min.apply(null, w), yMin: Math.min.apply(null, k), xMax: Math.max.apply(null, I), yMax: Math.max.apply(null, N), advanceWidthMax: Math.max.apply(null, z), advanceWidthAvg: function(Gt) {\n              for (var fr = 0, ur = 0; ur < Gt.length; ur += 1)\n                fr += Gt[ur];\n              return fr / Gt.length;\n            }(z), minLeftSideBearing: Math.min.apply(null, Q), maxLeftSideBearing: Math.max.apply(null, Q), minRightSideBearing: Math.min.apply(null, se) }, $e = (Ee.ascender = d.ascender, Ee.descender = d.descender, pt.make({ flags: 3, unitsPerEm: d.unitsPerEm, xMin: Ee.xMin, yMin: Ee.yMin, xMax: Ee.xMax, yMax: Ee.yMax, lowestRecPPEM: 3, createdTimestamp: d.createdTimestamp })), lt = ie.make({ ascender: Ee.ascender, descender: Ee.descender, advanceWidthMax: Ee.advanceWidthMax, minLeftSideBearing: Ee.minLeftSideBearing, minRightSideBearing: Ee.minRightSideBearing, xMaxExtent: Ee.maxLeftSideBearing + (Ee.xMax - Ee.xMin), numberOfHMetrics: d.glyphs.length }), et = Le.make(d.glyphs.length), tt = Bt.make({ xAvgCharWidth: Math.round(Ee.advanceWidthAvg), usWeightClass: d.tables.os2.usWeightClass, usWidthClass: d.tables.os2.usWidthClass, usFirstCharIndex: v, usLastCharIndex: oe, ulUnicodeRange1: ye, ulUnicodeRange2: Se, ulUnicodeRange3: be, ulUnicodeRange4: de, fsSelection: d.tables.os2.fsSelection, sTypoAscender: Ee.ascender, sTypoDescender: Ee.descender, sTypoLineGap: 0, usWinAscent: Ee.yMax, usWinDescent: Math.abs(Ee.yMin), ulCodePageRange1: 1, sxHeight: Nr(d, \"xyvw\", { yMax: Math.round(Ee.ascender / 2) }).yMax, sCapHeight: Nr(d, \"HIKLEFJMNTZBDPRAGOQSUVWXY\", Ee).yMax, usDefaultChar: d.hasChar(\" \") ? 32 : 0, usBreakChar: d.hasChar(\" \") ? 32 : 0 }), dt = Oe.make(d.glyphs), wt = Z.make(d.glyphs), St = d.getEnglishName(\"fontFamily\"), vt = d.getEnglishName(\"fontSubfamily\"), xt = St + \" \" + vt, Ot = (Ot = d.getEnglishName(\"postScriptName\")) || St.replace(/\\s/g, \"\") + \"-\" + vt, Rt = {};\n            for (Te in d.names)\n              Rt[Te] = d.names[Te];\n            Rt.uniqueID || (Rt.uniqueID = { en: d.getEnglishName(\"manufacturer\") + \":\" + xt }), Rt.postScriptName || (Rt.postScriptName = { en: Ot }), Rt.preferredFamily || (Rt.preferredFamily = d.names.fontFamily), Rt.preferredSubfamily || (Rt.preferredSubfamily = d.names.fontSubfamily);\n            var Wt = [], Ht = Xt.make(Rt, Wt), Wt = 0 < Wt.length ? Ge.make(Wt) : void 0, Qt = Lr.make(), xt = ft.make(d.glyphs, { version: d.getEnglishName(\"version\"), fullName: xt, familyName: St, weightName: vt, postScriptName: Ot, unitsPerEm: d.unitsPerEm, fontBBox: [0, Ee.yMin, Ee.ascender, Ee.advanceWidthMax] }), St = d.metas && 0 < Object.keys(d.metas).length ? Ir.make(d.metas) : void 0, vt = [$e, lt, et, tt, Ht, wt, Qt, xt, dt];\n            Wt && vt.push(Wt), d.tables.gsub && vt.push(Rr.make(d.tables.gsub)), St && vt.push(St);\n            for (var qt = Sr((Ot = Ur(vt)).encode()), kt = Ot.fields, zt = !1, Tt = 0; Tt < kt.length; Tt += 1)\n              if (kt[Tt].name === \"head table\") {\n                kt[Tt].value.checkSumAdjustment = 2981146554 - qt, zt = !0;\n                break;\n              }\n            if (zt)\n              return Ot;\n            throw new Error(\"Could not find head table with checkSum to adjust.\");\n          }, computeCheckSum: Sr };\n          function Tr(d, v) {\n            for (var w = 0, k = d.length - 1; w <= k; ) {\n              var I = w + k >>> 1, N = d[I].tag;\n              if (N === v)\n                return I;\n              N < v ? w = 1 + I : k = I - 1;\n            }\n            return -w - 1;\n          }\n          function Br(d, v) {\n            for (var w = 0, k = d.length - 1; w <= k; ) {\n              var I = w + k >>> 1, N = d[I];\n              if (N === v)\n                return I;\n              N < v ? w = 1 + I : k = I - 1;\n            }\n            return -w - 1;\n          }\n          function Gr(d, v) {\n            for (var w = 0, k = d.length - 1; w <= k; ) {\n              var I, N = w + k >>> 1, z = (I = d[N]).start;\n              if (z === v)\n                return I;\n              z < v ? w = 1 + N : k = N - 1;\n            }\n            if (0 < w)\n              return v > (I = d[w - 1]).end ? 0 : I;\n          }\n          function gr(d, v) {\n            this.font = d, this.tableName = v;\n          }\n          function vr(d) {\n            gr.call(this, d, \"gpos\");\n          }\n          function $t(d) {\n            gr.call(this, d, \"gsub\");\n          }\n          function Vr(d, v, w) {\n            for (var k = d.subtables, I = 0; I < k.length; I++) {\n              var N = k[I];\n              if (N.substFormat === v)\n                return N;\n            }\n            if (w)\n              return k.push(w), w;\n          }\n          function zr(d) {\n            for (var v = new ArrayBuffer(d.length), w = new Uint8Array(v), k = 0; k < d.length; ++k)\n              w[k] = d[k];\n            return v;\n          }\n          function ir(d, v) {\n            if (!d)\n              throw v;\n          }\n          function Hr(d, v, w, k, I) {\n            var N = 0 < (v & k) ? (N = d.parseByte(), w + (N = v & I ? N : -N)) : 0 < (v & I) ? w : w + d.parseShort();\n            return N;\n          }\n          function Tn(d, v, w) {\n            var k, I = new we.Parser(v, w);\n            if (d.numberOfContours = I.parseShort(), d._xMin = I.parseShort(), d._yMin = I.parseShort(), d._xMax = I.parseShort(), d._yMax = I.parseShort(), 0 < d.numberOfContours) {\n              for (var N = d.endPointIndices = [], z = 0; z < d.numberOfContours; z += 1)\n                N.push(I.parseUShort());\n              d.instructionLength = I.parseUShort(), d.instructions = [];\n              for (var Q = 0; Q < d.instructionLength; Q += 1)\n                d.instructions.push(I.parseByte());\n              for (var se = N[N.length - 1] + 1, oe = [], ye = 0; ye < se; ye += 1)\n                if (k = I.parseByte(), oe.push(k), 0 < (8 & k))\n                  for (var Se = I.parseByte(), be = 0; be < Se; be += 1)\n                    oe.push(k), ye += 1;\n              if (O.argument(oe.length === se, \"Bad flags.\"), 0 < N.length) {\n                var de, Ie = [];\n                if (0 < se) {\n                  for (var ke = 0; ke < se; ke += 1)\n                    k = oe[ke], (de = {}).onCurve = !!(1 & k), de.lastPointOfContour = 0 <= N.indexOf(ke), Ie.push(de);\n                  for (var Ae = 0, Te = 0; Te < se; Te += 1)\n                    k = oe[Te], (de = Ie[Te]).x = Hr(I, k, Ae, 2, 16), Ae = de.x;\n                  for (var Ee = 0, $e = 0; $e < se; $e += 1)\n                    k = oe[$e], (de = Ie[$e]).y = Hr(I, k, Ee, 4, 32), Ee = de.y;\n                }\n                d.points = Ie;\n              } else\n                d.points = [];\n            } else if (d.numberOfContours === 0)\n              d.points = [];\n            else {\n              d.isComposite = !0, d.points = [], d.components = [];\n              for (var lt = !0; lt; ) {\n                oe = I.parseUShort();\n                var et = { glyphIndex: I.parseUShort(), xScale: 1, scale01: 0, scale10: 0, yScale: 1, dx: 0, dy: 0 };\n                0 < (1 & oe) ? 0 < (2 & oe) ? (et.dx = I.parseShort(), et.dy = I.parseShort()) : et.matchedPoints = [I.parseUShort(), I.parseUShort()] : 0 < (2 & oe) ? (et.dx = I.parseChar(), et.dy = I.parseChar()) : et.matchedPoints = [I.parseByte(), I.parseByte()], 0 < (8 & oe) ? et.xScale = et.yScale = I.parseF2Dot14() : 0 < (64 & oe) ? (et.xScale = I.parseF2Dot14(), et.yScale = I.parseF2Dot14()) : 0 < (128 & oe) && (et.xScale = I.parseF2Dot14(), et.scale01 = I.parseF2Dot14(), et.scale10 = I.parseF2Dot14(), et.yScale = I.parseF2Dot14()), d.components.push(et), lt = !!(32 & oe);\n              }\n              if (256 & oe) {\n                d.instructionLength = I.parseUShort(), d.instructions = [];\n                for (var tt = 0; tt < d.instructionLength; tt += 1)\n                  d.instructions.push(I.parseByte());\n              }\n            }\n          }\n          function Er(d, v) {\n            for (var w = [], k = 0; k < d.length; k += 1) {\n              var I = d[k], I = { x: v.xScale * I.x + v.scale01 * I.y + v.dx, y: v.scale10 * I.x + v.yScale * I.y + v.dy, onCurve: I.onCurve, lastPointOfContour: I.lastPointOfContour };\n              w.push(I);\n            }\n            return w;\n          }\n          function Wr(d) {\n            var v = new X();\n            if (d)\n              for (var w = function(Se) {\n                for (var be = [], de = [], Ie = 0; Ie < Se.length; Ie += 1) {\n                  var ke = Se[Ie];\n                  de.push(ke), ke.lastPointOfContour && (be.push(de), de = []);\n                }\n                return O.argument(de.length === 0, \"There are still points left in the current contour.\"), be;\n              }(d), k = 0; k < w.length; ++k) {\n                var I, N = w[k], z = N[N.length - 1], Q = N[0];\n                z.onCurve ? v.moveTo(z.x, z.y) : Q.onCurve ? v.moveTo(Q.x, Q.y) : (I = { x: 0.5 * (z.x + Q.x), y: 0.5 * (z.y + Q.y) }, v.moveTo(I.x, I.y));\n                for (var se = 0; se < N.length; ++se) {\n                  var oe, ye = z, z = Q, Q = N[(se + 1) % N.length];\n                  z.onCurve ? v.lineTo(z.x, z.y) : (oe = Q, ye.onCurve || (z.x, ye.x, z.y, ye.y), Q.onCurve || (oe = { x: 0.5 * (z.x + Q.x), y: 0.5 * (z.y + Q.y) }), v.quadraticCurveTo(z.x, z.y, oe.x, oe.y));\n                }\n                v.closePath();\n              }\n            return v;\n          }\n          function En(d, v) {\n            if (v.isComposite)\n              for (var w = 0; w < v.components.length; w += 1) {\n                var k = v.components[w], I = d.get(k.glyphIndex);\n                if (I.getPath(), I.points) {\n                  var N = void 0;\n                  if (k.matchedPoints === void 0)\n                    N = Er(I.points, k);\n                  else {\n                    if (k.matchedPoints[0] > v.points.length - 1 || k.matchedPoints[1] > I.points.length - 1)\n                      throw Error(\"Matched points out of range in \" + v.name);\n                    var z = v.points[k.matchedPoints[0]], Q = I.points[k.matchedPoints[1]], k = { xScale: k.xScale, scale01: k.scale01, scale10: k.scale10, yScale: k.yScale, dx: 0, dy: 0 }, Q = Er([Q], k)[0];\n                    k.dx = z.x - Q.x, k.dy = z.y - Q.y, N = Er(I.points, k);\n                  }\n                  v.points = v.points.concat(N);\n                }\n              }\n            return Wr(v.points);\n          }\n          (vr.prototype = gr.prototype = { searchTag: Tr, binSearch: Br, getTable: function(d) {\n            var v = this.font.tables[this.tableName];\n            return v = !v && d ? this.font.tables[this.tableName] = this.createDefaultTable() : v;\n          }, getScriptNames: function() {\n            var d = this.getTable();\n            return d ? d.scripts.map(function(v) {\n              return v.tag;\n            }) : [];\n          }, getDefaultScriptName: function() {\n            var d = this.getTable();\n            if (d) {\n              for (var v = !1, w = 0; w < d.scripts.length; w++) {\n                var k = d.scripts[w].tag;\n                if (k === \"DFLT\")\n                  return k;\n                k === \"latn\" && (v = !0);\n              }\n              return v ? \"latn\" : void 0;\n            }\n          }, getScriptTable: function(d, v) {\n            var w, k = this.getTable(v);\n            if (k)\n              return w = k.scripts, 0 <= (k = Tr(k.scripts, d = d || \"DFLT\")) ? w[k].script : v ? (w.splice(-1 - k, 0, v = { tag: d, script: { defaultLangSys: { reserved: 0, reqFeatureIndex: 65535, featureIndexes: [] }, langSysRecords: [] } }), v.script) : void 0;\n          }, getLangSysTable: function(I, v, w) {\n            var k, I = this.getScriptTable(I, w);\n            if (I)\n              return v && v !== \"dflt\" && v !== \"DFLT\" ? 0 <= (k = Tr(I.langSysRecords, v)) ? I.langSysRecords[k].langSys : w ? (I.langSysRecords.splice(-1 - k, 0, w = { tag: v, langSys: { reserved: 0, reqFeatureIndex: 65535, featureIndexes: [] } }), w.langSys) : void 0 : I.defaultLangSys;\n          }, getFeatureTable: function(d, v, w, k) {\n            if (d = this.getLangSysTable(d, v, k), d) {\n              for (var I, N = d.featureIndexes, z = this.font.tables[this.tableName].features, Q = 0; Q < N.length; Q++)\n                if ((I = z[N[Q]]).tag === w)\n                  return I.feature;\n              if (k)\n                return v = z.length, O.assert(v === 0 || w >= z[v - 1].tag, \"Features must be added in alphabetical order.\"), z.push(I = { tag: w, feature: { params: 0, lookupListIndexes: [] } }), N.push(v), I.feature;\n            }\n          }, getLookupTables: function(N, v, w, k, I) {\n            var N = this.getFeatureTable(N, v, w, I), z = [];\n            if (N) {\n              for (var Q, se = N.lookupListIndexes, oe = this.font.tables[this.tableName].lookups, ye = 0; ye < se.length; ye++)\n                (Q = oe[se[ye]]).lookupType === k && z.push(Q);\n              if (z.length === 0 && I)\n                return v = oe.length, oe.push(Q = { lookupType: k, lookupFlag: 0, subtables: [], markFilteringSet: void 0 }), se.push(v), [Q];\n            }\n            return z;\n          }, getGlyphClass: function(d, v) {\n            switch (d.format) {\n              case 1:\n                return d.startGlyph <= v && v < d.startGlyph + d.classes.length ? d.classes[v - d.startGlyph] : 0;\n              case 2:\n                var w = Gr(d.ranges, v);\n                return w ? w.classId : 0;\n            }\n          }, getCoverageIndex: function(d, v) {\n            switch (d.format) {\n              case 1:\n                var w = Br(d.glyphs, v);\n                return 0 <= w ? w : -1;\n              case 2:\n                return w = Gr(d.ranges, v), w ? w.index + v - w.start : -1;\n            }\n          }, expandCoverage: function(d) {\n            if (d.format === 1)\n              return d.glyphs;\n            for (var v = [], w = d.ranges, k = 0; k < w.length; k++)\n              for (var I = w[k], N = I.start, z = I.end, Q = N; Q <= z; Q++)\n                v.push(Q);\n            return v;\n          } }).init = function() {\n            var d = this.getDefaultScriptName();\n            this.defaultKerningTables = this.getKerningTables(d);\n          }, vr.prototype.getKerningValue = function(d, v, w) {\n            for (var k = 0; k < d.length; k++)\n              for (var I = d[k].subtables, N = 0; N < I.length; N++) {\n                var z = I[N], Q = this.getCoverageIndex(z.coverage, v);\n                if (!(Q < 0))\n                  switch (z.posFormat) {\n                    case 1:\n                      for (var se = z.pairSets[Q], oe = 0; oe < se.length; oe++) {\n                        var ye = se[oe];\n                        if (ye.secondGlyph === w)\n                          return ye.value1 && ye.value1.xAdvance || 0;\n                      }\n                      break;\n                    case 2:\n                      var be = this.getGlyphClass(z.classDef1, v), Se = this.getGlyphClass(z.classDef2, w), be = z.classRecords[be][Se];\n                      return be.value1 && be.value1.xAdvance || 0;\n                  }\n              }\n            return 0;\n          }, vr.prototype.getKerningTables = function(d, v) {\n            if (this.font.tables.gpos)\n              return this.getLookupTables(d, v, \"kern\", 2);\n          }, ($t.prototype = gr.prototype).createDefaultTable = function() {\n            return { version: 1, scripts: [{ tag: \"DFLT\", script: { defaultLangSys: { reserved: 0, reqFeatureIndex: 65535, featureIndexes: [] }, langSysRecords: [] } }], features: [], lookups: [] };\n          }, $t.prototype.getSingle = function(d, v, w) {\n            for (var k = [], I = this.getLookupTables(v, w, d, 1), N = 0; N < I.length; N++)\n              for (var z = I[N].subtables, Q = 0; Q < z.length; Q++) {\n                var se = z[Q], oe = this.expandCoverage(se.coverage), ye = void 0;\n                if (se.substFormat === 1)\n                  for (var Se = se.deltaGlyphId, ye = 0; ye < oe.length; ye++) {\n                    var be = oe[ye];\n                    k.push({ sub: be, by: be + Se });\n                  }\n                else {\n                  var de = se.substitute;\n                  for (ye = 0; ye < oe.length; ye++)\n                    k.push({ sub: oe[ye], by: de[ye] });\n                }\n              }\n            return k;\n          }, $t.prototype.getAlternates = function(d, v, w) {\n            for (var k = [], I = this.getLookupTables(v, w, d, 3), N = 0; N < I.length; N++)\n              for (var z = I[N].subtables, Q = 0; Q < z.length; Q++)\n                for (var se = z[Q], oe = this.expandCoverage(se.coverage), ye = se.alternateSets, Se = 0; Se < oe.length; Se++)\n                  k.push({ sub: oe[Se], by: ye[Se] });\n            return k;\n          }, $t.prototype.getLigatures = function(d, v, w) {\n            for (var k = [], I = this.getLookupTables(v, w, d, 4), N = 0; N < I.length; N++)\n              for (var z = I[N].subtables, Q = 0; Q < z.length; Q++)\n                for (var se = z[Q], oe = this.expandCoverage(se.coverage), ye = se.ligatureSets, Se = 0; Se < oe.length; Se++)\n                  for (var be = oe[Se], de = ye[Se], Ie = 0; Ie < de.length; Ie++) {\n                    var ke = de[Ie];\n                    k.push({ sub: [be].concat(ke.components), by: ke.ligGlyph });\n                  }\n            return k;\n          }, $t.prototype.addSingle = function(d, v, w, k) {\n            w = Vr(this.getLookupTables(w, k, d, 1, !0)[0], 2, { substFormat: 2, coverage: { format: 1, glyphs: [] }, substitute: [] }), O.assert(w.coverage.format === 1, \"Ligature: unable to modify coverage table format \" + w.coverage.format), k = v.sub, d = this.binSearch(w.coverage.glyphs, k), d < 0 && (w.coverage.glyphs.splice(d = -1 - d, 0, k), w.substitute.splice(d, 0, 0)), w.substitute[d] = v.by;\n          }, $t.prototype.addAlternate = function(d, v, w, k) {\n            w = Vr(this.getLookupTables(w, k, d, 3, !0)[0], 1, { substFormat: 1, coverage: { format: 1, glyphs: [] }, alternateSets: [] }), O.assert(w.coverage.format === 1, \"Ligature: unable to modify coverage table format \" + w.coverage.format), k = v.sub, d = this.binSearch(w.coverage.glyphs, k), d < 0 && (w.coverage.glyphs.splice(d = -1 - d, 0, k), w.alternateSets.splice(d, 0, 0)), w.alternateSets[d] = v.by;\n          }, $t.prototype.addLigature = function(N, se, Q, I) {\n            var Q = this.getLookupTables(Q, I, N, 4, !0)[0], I = Q.subtables[0], N = (I || (Q.subtables[0] = I = { substFormat: 1, coverage: { format: 1, glyphs: [] }, ligatureSets: [] }), O.assert(I.coverage.format === 1, \"Ligature: unable to modify coverage table format \" + I.coverage.format), se.sub[0]), z = se.sub.slice(1), Q = { ligGlyph: se.by, components: z }, se = this.binSearch(I.coverage.glyphs, N);\n            if (0 <= se) {\n              for (var oe = I.ligatureSets[se], ye = 0; ye < oe.length; ye++)\n                if (function(Se, be) {\n                  var de = Se.length;\n                  if (de === be.length) {\n                    for (var Ie = 0; Ie < de; Ie++)\n                      if (Se[Ie] !== be[Ie])\n                        return;\n                    return 1;\n                  }\n                }(oe[ye].components, z))\n                  return;\n              oe.push(Q);\n            } else\n              I.coverage.glyphs.splice(se = -1 - se, 0, N), I.ligatureSets.splice(se, 0, [Q]);\n          }, $t.prototype.getFeature = function(d, v, w) {\n            if (/ss\\d\\d/.test(d))\n              return this.getSingle(d, v, w);\n            switch (d) {\n              case \"aalt\":\n              case \"salt\":\n                return this.getSingle(d, v, w).concat(this.getAlternates(d, v, w));\n              case \"dlig\":\n              case \"liga\":\n              case \"rlig\":\n                return this.getLigatures(d, v, w);\n            }\n          }, $t.prototype.add = function(d, v, w, k) {\n            if (/ss\\d\\d/.test(d))\n              return this.addSingle(d, v, w, k);\n            switch (d) {\n              case \"aalt\":\n              case \"salt\":\n                return typeof v.by == \"number\" ? this.addSingle(d, v, w, k) : this.addAlternate(d, v, w, k);\n              case \"dlig\":\n              case \"liga\":\n              case \"rlig\":\n                return this.addLigature(d, v, w, k);\n            }\n          };\n          var qr = { getPath: Wr, parse: function(d, v, w, k) {\n            for (var I = new Ke.GlyphSet(k), N = 0; N < w.length - 1; N += 1) {\n              var z = w[N];\n              z !== w[N + 1] ? I.push(N, Ke.ttfGlyphLoader(k, N, Tn, d, v + z, En)) : I.push(N, Ke.glyphLoader(k, N));\n            }\n            return I;\n          } };\n          function Xr(d) {\n            this.font = d, this.getCommands = function(v) {\n              return qr.getPath(v).commands;\n            }, this._fpgmState = this._prepState = void 0, this._errorState = 0;\n          }\n          function Mn(d) {\n            return d;\n          }\n          function Yr(d) {\n            return Math.sign(d) * Math.round(Math.abs(d));\n          }\n          function kn(d) {\n            return Math.sign(d) * Math.round(Math.abs(2 * d)) / 2;\n          }\n          function Cn(d) {\n            return Math.sign(d) * (Math.round(Math.abs(d) + 0.5) - 0.5);\n          }\n          function On(d) {\n            return Math.sign(d) * Math.ceil(Math.abs(d));\n          }\n          function An(d) {\n            return Math.sign(d) * Math.floor(Math.abs(d));\n          }\n          function Zr(d) {\n            var v = this.srPeriod, w = this.srPhase, k = 1;\n            return d < 0 && (d = -d, k = -1), d += this.srThreshold - w, d = Math.trunc(d / v) * v, (d += w) < 0 ? w * k : d * k;\n          }\n          var er = { x: 1, y: 0, axis: \"x\", distance: function(d, v, w, k) {\n            return (w ? d.xo : d.x) - (k ? v.xo : v.x);\n          }, interpolate: function(d, v, w, k) {\n            var I, N, z, Q, se, oe, ye;\n            if (!k || k === this)\n              return I = d.xo - v.xo, N = d.xo - w.xo, se = v.x - v.xo, oe = w.x - w.xo, (ye = (z = Math.abs(I)) + (Q = Math.abs(N))) === 0 ? void (d.x = d.xo + (se + oe) / 2) : void (d.x = d.xo + (se * Q + oe * z) / ye);\n            I = k.distance(d, v, !0, !0), N = k.distance(d, w, !0, !0), se = k.distance(v, v, !1, !0), oe = k.distance(w, w, !1, !0), (ye = (z = Math.abs(I)) + (Q = Math.abs(N))) === 0 ? er.setRelative(d, d, (se + oe) / 2, k, !0) : er.setRelative(d, d, (se * Q + oe * z) / ye, k, !0);\n          }, normalSlope: Number.NEGATIVE_INFINITY, setRelative: function(d, v, w, k, I) {\n            var N, z;\n            k && k !== this ? (N = I ? v.xo : v.x, z = I ? v.yo : v.y, N += w * k.x, z += w * k.y, d.x = N + (d.y - z) / k.normalSlope) : d.x = (I ? v.xo : v.x) + w;\n          }, slope: 0, touch: function(d) {\n            d.xTouched = !0;\n          }, touched: function(d) {\n            return d.xTouched;\n          }, untouch: function(d) {\n            d.xTouched = !1;\n          } }, tr = { x: 0, y: 1, axis: \"y\", distance: function(d, v, w, k) {\n            return (w ? d.yo : d.y) - (k ? v.yo : v.y);\n          }, interpolate: function(d, v, w, k) {\n            var I, N, z, Q, se, oe, ye;\n            if (!k || k === this)\n              return I = d.yo - v.yo, N = d.yo - w.yo, se = v.y - v.yo, oe = w.y - w.yo, (ye = (z = Math.abs(I)) + (Q = Math.abs(N))) === 0 ? void (d.y = d.yo + (se + oe) / 2) : void (d.y = d.yo + (se * Q + oe * z) / ye);\n            I = k.distance(d, v, !0, !0), N = k.distance(d, w, !0, !0), se = k.distance(v, v, !1, !0), oe = k.distance(w, w, !1, !0), (ye = (z = Math.abs(I)) + (Q = Math.abs(N))) === 0 ? tr.setRelative(d, d, (se + oe) / 2, k, !0) : tr.setRelative(d, d, (se * Q + oe * z) / ye, k, !0);\n          }, normalSlope: 0, setRelative: function(d, v, w, k, I) {\n            var N, z;\n            k && k !== this ? (N = I ? v.xo : v.x, z = I ? v.yo : v.y, N += w * k.x, z += w * k.y, d.y = z + k.normalSlope * (d.x - N)) : d.y = (I ? v.yo : v.y) + w;\n          }, slope: Number.POSITIVE_INFINITY, touch: function(d) {\n            d.yTouched = !0;\n          }, touched: function(d) {\n            return d.yTouched;\n          }, untouch: function(d) {\n            d.yTouched = !1;\n          } };\n          function cr(d, v) {\n            this.x = d, this.y = v, this.axis = void 0, this.slope = v / d, this.normalSlope = -d / v, Object.freeze(this);\n          }\n          function dr(d, v) {\n            var w = Math.sqrt(d * d + v * v);\n            return v /= w, (d /= w) === 1 && v === 0 ? er : d === 0 && v === 1 ? tr : new cr(d, v);\n          }\n          function rr(d, v, w, k) {\n            this.x = this.xo = Math.round(64 * d) / 64, this.y = this.yo = Math.round(64 * v) / 64, this.lastPointOfContour = w, this.onCurve = k, this.prevPointOnContour = void 0, this.nextPointOnContour = void 0, this.xTouched = !1, this.yTouched = !1, Object.preventExtensions(this);\n          }\n          Object.freeze(er), Object.freeze(tr), cr.prototype.distance = function(d, v, w, k) {\n            return this.x * er.distance(d, v, w, k) + this.y * tr.distance(d, v, w, k);\n          }, cr.prototype.interpolate = function(d, I, N, k) {\n            var z = k.distance(d, I, !0, !0), Q = k.distance(d, N, !0, !0), I = k.distance(I, I, !1, !0), N = k.distance(N, N, !1, !0), z = Math.abs(z), Q = Math.abs(Q), se = z + Q;\n            se === 0 ? this.setRelative(d, d, (I + N) / 2, k, !0) : this.setRelative(d, d, (I * Q + N * z) / se, k, !0);\n          }, cr.prototype.setRelative = function(d, N, se, oe, Q) {\n            var z = Q ? N.xo : N.x, Q = Q ? N.yo : N.y, N = z + se * (oe = oe || this).x, z = Q + se * oe.y, Q = oe.normalSlope, se = this.slope, oe = d.x, ye = d.y;\n            d.x = (se * oe - Q * N + z - ye) / (se - Q), d.y = se * (d.x - oe) + ye;\n          }, cr.prototype.touch = function(d) {\n            d.xTouched = !0, d.yTouched = !0;\n          }, rr.prototype.nextTouched = function(d) {\n            for (var v = this.nextPointOnContour; !d.touched(v) && v !== this; )\n              v = v.nextPointOnContour;\n            return v;\n          }, rr.prototype.prevTouched = function(d) {\n            for (var v = this.prevPointOnContour; !d.touched(v) && v !== this; )\n              v = v.prevPointOnContour;\n            return v;\n          };\n          var hr = Object.freeze(new rr(0, 0)), Pn = { cvCutIn: 17 / 16, deltaBase: 9, deltaShift: 0.125, loop: 1, minDis: 1, autoFlip: !0 };\n          function nr(d, v) {\n            switch (this.env = d, this.stack = [], this.prog = v, d) {\n              case \"glyf\":\n                this.zp0 = this.zp1 = this.zp2 = 1, this.rp0 = this.rp1 = this.rp2 = 0;\n              case \"prep\":\n                this.fv = this.pv = this.dpv = er, this.round = Yr;\n            }\n          }\n          function br(d) {\n            for (var v = d.tZone = new Array(d.gZone.length), w = 0; w < v.length; w++)\n              v[w] = new rr(0, 0);\n          }\n          function Qr(d, v) {\n            var w, k = d.prog, I = d.ip, N = 1;\n            do\n              if ((w = k[++I]) === 88)\n                N++;\n              else if (w === 89)\n                N--;\n              else if (w === 64)\n                I += k[I + 1] + 1;\n              else if (w === 65)\n                I += 2 * k[I + 1] + 1;\n              else if (176 <= w && w <= 183)\n                I += w - 176 + 1;\n              else if (184 <= w && w <= 191)\n                I += 2 * (w - 184 + 1);\n              else if (v && N === 1 && w === 27)\n                break;\n            while (0 < N);\n            d.ip = I;\n          }\n          function Kr(d, v) {\n            h.DEBUG && console.log(v.step, \"SVTCA[\" + d.axis + \"]\"), v.fv = v.pv = v.dpv = d;\n          }\n          function Jr(d, v) {\n            h.DEBUG && console.log(v.step, \"SPVTCA[\" + d.axis + \"]\"), v.pv = v.dpv = d;\n          }\n          function $r(d, v) {\n            h.DEBUG && console.log(v.step, \"SFVTCA[\" + d.axis + \"]\"), v.fv = d;\n          }\n          function en(d, v) {\n            var w, I = v.stack, k = I.pop(), I = I.pop(), N = v.z2[k], z = v.z1[I];\n            h.DEBUG && console.log(\"SPVTL[\" + d + \"]\", k, I), k = d ? (w = N.y - z.y, z.x - N.x) : (w = z.x - N.x, z.y - N.y), v.pv = v.dpv = dr(w, k);\n          }\n          function tn(d, v) {\n            var w, I = v.stack, k = I.pop(), I = I.pop(), N = v.z2[k], z = v.z1[I];\n            h.DEBUG && console.log(\"SFVTL[\" + d + \"]\", k, I), k = d ? (w = N.y - z.y, z.x - N.x) : (w = z.x - N.x, z.y - N.y), v.fv = dr(w, k);\n          }\n          function Mr(d) {\n            h.DEBUG && console.log(d.step, \"POP[]\"), d.stack.pop();\n          }\n          function rn(d, v) {\n            var w = v.stack.pop(), k = v.z0[w], I = v.fv, N = v.pv, z = (h.DEBUG && console.log(v.step, \"MDAP[\" + d + \"]\", w), N.distance(k, hr));\n            d && (z = v.round(z)), I.setRelative(k, hr, z, N), I.touch(k), v.rp0 = v.rp1 = w;\n          }\n          function nn(d, v) {\n            var w, k, I, N = v.z2, z = N.length - 2;\n            h.DEBUG && console.log(v.step, \"IUP[\" + d.axis + \"]\");\n            for (var Q = 0; Q < z; Q++)\n              w = N[Q], d.touched(w) || (k = w.prevTouched(d)) !== w && (k === (I = w.nextTouched(d)) && d.setRelative(w, w, d.distance(k, k, !1, !0), d, !0), d.interpolate(w, k, I, d));\n          }\n          function on(d, v) {\n            for (var w = v.stack, k = d ? v.rp1 : v.rp2, I = (d ? v.z0 : v.z1)[k], N = v.fv, z = v.pv, Q = v.loop, se = v.z2; Q--; ) {\n              var oe = w.pop(), ye = se[oe], Se = z.distance(I, I, !1, !0);\n              N.setRelative(ye, ye, Se, z), N.touch(ye), h.DEBUG && console.log(v.step, (1 < v.loop ? \"loop \" + (v.loop - Q) + \": \" : \"\") + \"SHP[\" + (d ? \"rp1\" : \"rp2\") + \"]\", oe);\n            }\n            v.loop = 1;\n          }\n          function sn(d, v) {\n            for (var w = v.stack, z = d ? v.rp1 : v.rp2, k = (d ? v.z0 : v.z1)[z], I = v.fv, N = v.pv, z = w.pop(), Q = v.z2[v.contours[z]], se = Q, oe = (h.DEBUG && console.log(v.step, \"SHC[\" + d + \"]\", z), N.distance(k, k, !1, !0)); se !== k && I.setRelative(se, se, oe, N), (se = se.nextPointOnContour) !== Q; )\n              ;\n          }\n          function an(d, v) {\n            var w, k, Q = v.stack, I = d ? v.rp1 : v.rp2, I = (d ? v.z0 : v.z1)[I], N = v.fv, z = v.pv, Q = Q.pop();\n            switch (h.DEBUG && console.log(v.step, \"SHZ[\" + d + \"]\", Q), Q) {\n              case 0:\n                w = v.tZone;\n                break;\n              case 1:\n                w = v.gZone;\n                break;\n              default:\n                throw new Error(\"Invalid zone\");\n            }\n            for (var se = z.distance(I, I, !1, !0), oe = w.length - 2, ye = 0; ye < oe; ye++)\n              k = w[ye], N.setRelative(k, k, se, z);\n          }\n          function ln(d, v) {\n            var k = v.stack, w = k.pop() / 64, k = k.pop(), I = v.z1[k], N = v.z0[v.rp0], z = v.fv, Q = v.pv;\n            z.setRelative(I, N, w, Q), z.touch(I), h.DEBUG && console.log(v.step, \"MSIRP[\" + d + \"]\", w, k), v.rp1 = v.rp0, v.rp2 = k, d && (v.rp0 = k);\n          }\n          function un(d, v) {\n            var w = v.stack, Q = w.pop(), w = w.pop(), k = v.z0[w], I = v.fv, N = v.pv, z = v.cvt[Q], Q = (h.DEBUG && console.log(v.step, \"MIAP[\" + d + \"]\", Q, \"(\", z, \")\", w), N.distance(k, hr));\n            d && (Math.abs(Q - z) < v.cvCutIn && (Q = z), Q = v.round(Q)), I.setRelative(k, hr, Q, N), v.zp0 === 0 && (k.xo = k.x, k.yo = k.y), I.touch(k), v.rp0 = v.rp1 = w;\n          }\n          function cn(d, v) {\n            var w = v.stack, k = w.pop(), I = v.z2[k];\n            h.DEBUG && console.log(v.step, \"GC[\" + d + \"]\", k), w.push(64 * v.dpv.distance(I, hr, d, !1));\n          }\n          function dn(d, v) {\n            var k = v.stack, w = k.pop(), k = k.pop(), I = v.z1[w], N = v.z0[k], N = v.dpv.distance(N, I, d, d);\n            h.DEBUG && console.log(v.step, \"MD[\" + d + \"]\", w, k, \"->\", N), v.stack.push(Math.round(64 * N));\n          }\n          function kr(d, v) {\n            var w = v.stack, k = w.pop(), I = v.fv, N = v.pv, z = v.ppem, Q = v.deltaBase + 16 * (d - 1), se = v.deltaShift, oe = v.z0;\n            h.DEBUG && console.log(v.step, \"DELTAP[\" + d + \"]\", k, w);\n            for (var ye = 0; ye < k; ye++) {\n              var Se = w.pop(), be = w.pop();\n              Q + ((240 & be) >> 4) === z && (0 <= (be = (15 & be) - 8) && be++, h.DEBUG && console.log(v.step, \"DELTAPFIX\", Se, \"by\", be * se), Se = oe[Se], I.setRelative(Se, Se, be * se, N));\n            }\n          }\n          function jr(d, v) {\n            var w = v.stack, k = w.pop();\n            h.DEBUG && console.log(v.step, \"ROUND[]\"), w.push(64 * v.round(k / 64));\n          }\n          function Cr(d, v) {\n            var w = v.stack, k = w.pop(), I = v.ppem, N = v.deltaBase + 16 * (d - 1), z = v.deltaShift;\n            h.DEBUG && console.log(v.step, \"DELTAC[\" + d + \"]\", k, w);\n            for (var Q = 0; Q < k; Q++) {\n              var se = w.pop(), oe = w.pop();\n              N + ((240 & oe) >> 4) === I && (0 <= (oe = (15 & oe) - 8) && oe++, oe = oe * z, h.DEBUG && console.log(v.step, \"DELTACFIX\", se, \"by\", oe), v.cvt[se] += oe);\n            }\n          }\n          function hn(d, v) {\n            var w, I = v.stack, k = I.pop(), I = I.pop(), N = v.z2[k], z = v.z1[I];\n            h.DEBUG && console.log(v.step, \"SDPVTL[\" + d + \"]\", k, I), k = d ? (w = N.y - z.y, z.x - N.x) : (w = z.x - N.x, z.y - N.y), v.dpv = dr(w, k);\n          }\n          function or(d, v) {\n            var w = v.stack, k = v.prog, I = v.ip;\n            h.DEBUG && console.log(v.step, \"PUSHB[\" + d + \"]\");\n            for (var N = 0; N < d; N++)\n              w.push(k[++I]);\n            v.ip = I;\n          }\n          function sr(d, v) {\n            var w = v.ip, k = v.prog, I = v.stack;\n            h.DEBUG && console.log(v.ip, \"PUSHW[\" + d + \"]\");\n            for (var N = 0; N < d; N++) {\n              var z = k[++w] << 8 | k[++w];\n              32768 & z && (z = -(1 + (65535 ^ z))), I.push(z);\n            }\n            v.ip = w;\n          }\n          function Je(d, v, w, k, I, N) {\n            var z, Q, oe = N.stack, se = d && oe.pop(), oe = oe.pop(), ye = N.rp0, ye = N.z0[ye], Se = N.z1[oe], be = N.minDis, de = N.fv, Ie = N.dpv, ke = z = Ie.distance(Se, ye, !0, !0), Ae = 0 <= ke ? 1 : -1;\n            ke = Math.abs(ke), d && (Q = N.cvt[se], k && Math.abs(ke - Q) < N.cvCutIn && (ke = Q)), w && ke < be && (ke = be), k && (ke = N.round(ke)), de.setRelative(Se, ye, Ae * ke, Ie), de.touch(Se), h.DEBUG && console.log(N.step, (d ? \"MIRP[\" : \"MDRP[\") + (v ? \"M\" : \"m\") + (w ? \">\" : \"_\") + (k ? \"R\" : \"_\") + (I === 0 ? \"Gr\" : I === 1 ? \"Bl\" : I === 2 ? \"Wh\" : \"\") + \"]\", d ? se + \"(\" + N.cvt[se] + \",\" + Q + \")\" : \"\", oe, \"(d =\", z, \"->\", Ae * ke, \")\"), N.rp1 = N.rp0, N.rp2 = oe, v && (N.rp0 = oe);\n          }\n          Xr.prototype.exec = function(d, v) {\n            if (typeof v != \"number\")\n              throw new Error(\"Point size is not a number!\");\n            if (!(2 < this._errorState)) {\n              var w = this.font, k = this._prepState;\n              if (!k || k.ppem !== v) {\n                var I = this._fpgmState;\n                if (!I) {\n                  nr.prototype = Pn, (I = this._fpgmState = new nr(\"fpgm\", w.tables.fpgm)).funcs = [], I.font = w, h.DEBUG && (console.log(\"---EXEC FPGM---\"), I.step = -1);\n                  try {\n                    lr(I);\n                  } catch (oe) {\n                    return console.log(\"Hinting error in FPGM:\" + oe), void (this._errorState = 3);\n                  }\n                }\n                nr.prototype = I, (k = this._prepState = new nr(\"prep\", w.tables.prep)).ppem = v;\n                var N = w.tables.cvt;\n                if (N)\n                  for (var z = k.cvt = new Array(N.length), Q = v / w.unitsPerEm, se = 0; se < N.length; se++)\n                    z[se] = N[se] * Q;\n                else\n                  k.cvt = [];\n                h.DEBUG && (console.log(\"---EXEC PREP---\"), k.step = -1);\n                try {\n                  lr(k);\n                } catch (oe) {\n                  this._errorState < 2 && console.log(\"Hinting error in PREP:\" + oe), this._errorState = 2;\n                }\n              }\n              if (!(1 < this._errorState))\n                try {\n                  return Ln(d, k);\n                } catch (oe) {\n                  this._errorState < 1 && (console.log(\"Hinting error:\" + oe), console.log(\"Note: further hinting errors are silenced\")), this._errorState = 1;\n                }\n            }\n          };\n          var Ln = function(d, v) {\n            var w = v.ppem / v.font.unitsPerEm, k = w, I = d.components;\n            if (nr.prototype = v, I) {\n              for (var N = v.font, z = [], Q = [], se = 0; se < I.length; se++) {\n                var oe = I[se], ye = N.glyphs.get(oe.glyphIndex), Se = new nr(\"glyf\", ye.instructions);\n                h.DEBUG && (console.log(\"---EXEC COMP \" + se + \"---\"), Se.step = -1), fn(ye, Se, w, k);\n                for (var be = Math.round(oe.dx * w), de = Math.round(oe.dy * k), Ie = Se.gZone, ke = Se.contours, Ae = 0; Ae < Ie.length; Ae++) {\n                  var Te = Ie[Ae];\n                  Te.xTouched = Te.yTouched = !1, Te.xo = Te.x = Te.x + be, Te.yo = Te.y = Te.y + de;\n                }\n                var Ee = z.length;\n                z.push.apply(z, Ie);\n                for (var $e = 0; $e < ke.length; $e++)\n                  Q.push(ke[$e] + Ee);\n              }\n              d.instructions && !Se.inhibitGridFit && ((Se = new nr(\"glyf\", d.instructions)).gZone = Se.z0 = Se.z1 = Se.z2 = z, Se.contours = Q, z.push(new rr(0, 0), new rr(Math.round(d.advanceWidth * w), 0)), h.DEBUG && (console.log(\"---EXEC COMPOSITE---\"), Se.step = -1), lr(Se), z.length -= 2);\n            } else\n              Se = new nr(\"glyf\", d.instructions), h.DEBUG && (console.log(\"---EXEC GLYPH---\"), Se.step = -1), fn(d, Se, w, k), z = Se.gZone;\n            return z;\n          }, fn = function(d, v, w, k) {\n            for (var I, N, z, Q = d.points || [], se = Q.length, oe = v.gZone = v.z0 = v.z1 = v.z2 = [], ye = v.contours = [], Se = 0; Se < se; Se++)\n              I = Q[Se], oe[Se] = new rr(I.x * w, I.y * k, I.lastPointOfContour, I.onCurve);\n            for (var be = 0; be < se; be++)\n              I = oe[be], N || (N = I, ye.push(be)), I.lastPointOfContour ? ((I.nextPointOnContour = N).prevPointOnContour = I, N = void 0) : (z = oe[be + 1], (I.nextPointOnContour = z).prevPointOnContour = I);\n            if (!v.inhibitGridFit) {\n              if (h.DEBUG) {\n                console.log(\"PROCESSING GLYPH\", v.stack);\n                for (var de = 0; de < se; de++)\n                  console.log(de, oe[de].x, oe[de].y);\n              }\n              if (oe.push(new rr(0, 0), new rr(Math.round(d.advanceWidth * w), 0)), lr(v), oe.length -= 2, h.DEBUG) {\n                console.log(\"FINISHED GLYPH\", v.stack);\n                for (var Ie = 0; Ie < se; Ie++)\n                  console.log(Ie, oe[Ie].x, oe[Ie].y);\n              }\n            }\n          }, lr = function(d) {\n            var v = d.prog;\n            if (v) {\n              var w, k = v.length;\n              for (d.ip = 0; d.ip < k; d.ip++) {\n                if (h.DEBUG && d.step++, !(w = Rn[v[d.ip]]))\n                  throw new Error(\"unknown instruction: 0x\" + Number(v[d.ip]).toString(16));\n                w(d);\n              }\n            }\n          }, Rn = [Kr.bind(void 0, tr), Kr.bind(void 0, er), Jr.bind(void 0, tr), Jr.bind(void 0, er), $r.bind(void 0, tr), $r.bind(void 0, er), en.bind(void 0, 0), en.bind(void 0, 1), tn.bind(void 0, 0), tn.bind(void 0, 1), function(d) {\n            var v = (w = d.stack).pop(), w = w.pop();\n            h.DEBUG && console.log(d.step, \"SPVFS[]\", v, w), d.pv = d.dpv = dr(w, v);\n          }, function(d) {\n            var v = (w = d.stack).pop(), w = w.pop();\n            h.DEBUG && console.log(d.step, \"SPVFS[]\", v, w), d.fv = dr(w, v);\n          }, function(d) {\n            var v = d.stack, w = d.pv;\n            h.DEBUG && console.log(d.step, \"GPV[]\"), v.push(16384 * w.x), v.push(16384 * w.y);\n          }, function(d) {\n            var v = d.stack, w = d.fv;\n            h.DEBUG && console.log(d.step, \"GFV[]\"), v.push(16384 * w.x), v.push(16384 * w.y);\n          }, function(d) {\n            d.fv = d.pv, h.DEBUG && console.log(d.step, \"SFVTPV[]\");\n          }, function(v) {\n            var w = (z = v.stack).pop(), k = z.pop(), I = z.pop(), N = z.pop(), z = z.pop(), se = v.z0, ye = v.z1, Q = se[w], se = se[k], oe = ye[I], ye = ye[N], v = v.z2[z], w = (h.DEBUG && console.log(\"ISECT[], \", w, k, I, N, z), Q.x), k = Q.y, I = se.x, N = se.y, z = oe.x, Q = oe.y, se = ye.x, oe = ye.y, ye = (w - I) * (Q - oe) - (k - N) * (z - se), Se = w * N - k * I, be = z * oe - Q * se;\n            v.x = (Se * (z - se) - be * (w - I)) / ye, v.y = (Se * (Q - oe) - be * (k - N)) / ye;\n          }, function(d) {\n            d.rp0 = d.stack.pop(), h.DEBUG && console.log(d.step, \"SRP0[]\", d.rp0);\n          }, function(d) {\n            d.rp1 = d.stack.pop(), h.DEBUG && console.log(d.step, \"SRP1[]\", d.rp1);\n          }, function(d) {\n            d.rp2 = d.stack.pop(), h.DEBUG && console.log(d.step, \"SRP2[]\", d.rp2);\n          }, function(d) {\n            var v = d.stack.pop();\n            switch (h.DEBUG && console.log(d.step, \"SZP0[]\", v), d.zp0 = v) {\n              case 0:\n                d.tZone || br(d), d.z0 = d.tZone;\n                break;\n              case 1:\n                d.z0 = d.gZone;\n                break;\n              default:\n                throw new Error(\"Invalid zone pointer\");\n            }\n          }, function(d) {\n            var v = d.stack.pop();\n            switch (h.DEBUG && console.log(d.step, \"SZP1[]\", v), d.zp1 = v) {\n              case 0:\n                d.tZone || br(d), d.z1 = d.tZone;\n                break;\n              case 1:\n                d.z1 = d.gZone;\n                break;\n              default:\n                throw new Error(\"Invalid zone pointer\");\n            }\n          }, function(d) {\n            var v = d.stack.pop();\n            switch (h.DEBUG && console.log(d.step, \"SZP2[]\", v), d.zp2 = v) {\n              case 0:\n                d.tZone || br(d), d.z2 = d.tZone;\n                break;\n              case 1:\n                d.z2 = d.gZone;\n                break;\n              default:\n                throw new Error(\"Invalid zone pointer\");\n            }\n          }, function(d) {\n            var v = d.stack.pop();\n            switch (h.DEBUG && console.log(d.step, \"SZPS[]\", v), d.zp0 = d.zp1 = d.zp2 = v) {\n              case 0:\n                d.tZone || br(d), d.z0 = d.z1 = d.z2 = d.tZone;\n                break;\n              case 1:\n                d.z0 = d.z1 = d.z2 = d.gZone;\n                break;\n              default:\n                throw new Error(\"Invalid zone pointer\");\n            }\n          }, function(d) {\n            d.loop = d.stack.pop(), h.DEBUG && console.log(d.step, \"SLOOP[]\", d.loop);\n          }, function(d) {\n            h.DEBUG && console.log(d.step, \"RTG[]\"), d.round = Yr;\n          }, function(d) {\n            h.DEBUG && console.log(d.step, \"RTHG[]\"), d.round = Cn;\n          }, function(d) {\n            var v = d.stack.pop();\n            h.DEBUG && console.log(d.step, \"SMD[]\", v), d.minDis = v / 64;\n          }, function(d) {\n            h.DEBUG && console.log(d.step, \"ELSE[]\"), Qr(d, !1);\n          }, function(d) {\n            var v = d.stack.pop();\n            h.DEBUG && console.log(d.step, \"JMPR[]\", v), d.ip += v - 1;\n          }, function(d) {\n            var v = d.stack.pop();\n            h.DEBUG && console.log(d.step, \"SCVTCI[]\", v), d.cvCutIn = v / 64;\n          }, void 0, void 0, function(d) {\n            var v = d.stack;\n            h.DEBUG && console.log(d.step, \"DUP[]\"), v.push(v[v.length - 1]);\n          }, Mr, function(d) {\n            h.DEBUG && console.log(d.step, \"CLEAR[]\"), d.stack.length = 0;\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"SWAP[]\"), v.push(w), v.push(k);\n          }, function(d) {\n            var v = d.stack;\n            h.DEBUG && console.log(d.step, \"DEPTH[]\"), v.push(v.length);\n          }, function(d) {\n            var v = d.stack, w = v.pop();\n            h.DEBUG && console.log(d.step, \"CINDEX[]\", w), v.push(v[v.length - w]);\n          }, function(d) {\n            var v = d.stack, w = v.pop();\n            h.DEBUG && console.log(d.step, \"MINDEX[]\", w), v.push(v.splice(v.length - w, 1)[0]);\n          }, void 0, void 0, void 0, function(d) {\n            var v = (k = d.stack).pop(), w = k.pop(), k = (h.DEBUG && console.log(d.step, \"LOOPCALL[]\", v, w), d.ip), I = d.prog;\n            d.prog = d.funcs[v];\n            for (var N = 0; N < w; N++)\n              lr(d), h.DEBUG && console.log(++d.step, N + 1 < w ? \"next loopcall\" : \"done loopcall\", N);\n            d.ip = k, d.prog = I;\n          }, function(d) {\n            var v = d.stack.pop(), w = (h.DEBUG && console.log(d.step, \"CALL[]\", v), d.ip), k = d.prog;\n            d.prog = d.funcs[v], lr(d), d.ip = w, d.prog = k, h.DEBUG && console.log(++d.step, \"returning from\", v);\n          }, function(d) {\n            if (d.env !== \"fpgm\")\n              throw new Error(\"FDEF not allowed here\");\n            var k = d.stack, v = d.prog, w = d.ip, k = k.pop(), I = w;\n            for (h.DEBUG && console.log(d.step, \"FDEF[]\", k); v[++w] !== 45; )\n              ;\n            d.ip = w, d.funcs[k] = v.slice(I + 1, w);\n          }, void 0, rn.bind(void 0, 0), rn.bind(void 0, 1), nn.bind(void 0, tr), nn.bind(void 0, er), on.bind(void 0, 0), on.bind(void 0, 1), sn.bind(void 0, 0), sn.bind(void 0, 1), an.bind(void 0, 0), an.bind(void 0, 1), function(d) {\n            for (var v = d.stack, w = d.loop, k = d.fv, I = v.pop() / 64, N = d.z2; w--; ) {\n              var z = v.pop(), Q = N[z];\n              h.DEBUG && console.log(d.step, (1 < d.loop ? \"loop \" + (d.loop - w) + \": \" : \"\") + \"SHPIX[]\", z, I), k.setRelative(Q, Q, I), k.touch(Q);\n            }\n            d.loop = 1;\n          }, function(d) {\n            for (var v = d.stack, w = d.rp1, k = d.rp2, I = d.loop, N = d.z0[w], z = d.z1[k], Q = d.fv, se = d.dpv, oe = d.z2; I--; ) {\n              var ye = v.pop(), Se = oe[ye];\n              h.DEBUG && console.log(d.step, (1 < d.loop ? \"loop \" + (d.loop - I) + \": \" : \"\") + \"IP[]\", ye, w, \"<->\", k), Q.interpolate(Se, N, z, se), Q.touch(Se);\n            }\n            d.loop = 1;\n          }, ln.bind(void 0, 0), ln.bind(void 0, 1), function(d) {\n            for (var v = d.stack, w = d.rp0, k = d.z0[w], I = d.loop, N = d.fv, z = d.pv, Q = d.z1; I--; ) {\n              var se = v.pop(), oe = Q[se];\n              h.DEBUG && console.log(d.step, (1 < d.loop ? \"loop \" + (d.loop - I) + \": \" : \"\") + \"ALIGNRP[]\", se), N.setRelative(oe, k, 0, z), N.touch(oe);\n            }\n            d.loop = 1;\n          }, function(d) {\n            h.DEBUG && console.log(d.step, \"RTDG[]\"), d.round = kn;\n          }, un.bind(void 0, 0), un.bind(void 0, 1), function(d) {\n            var v = d.prog, w = d.ip, k = d.stack, I = v[++w];\n            h.DEBUG && console.log(d.step, \"NPUSHB[]\", I);\n            for (var N = 0; N < I; N++)\n              k.push(v[++w]);\n            d.ip = w;\n          }, function(d) {\n            var v = d.ip, w = d.prog, k = d.stack, I = w[++v];\n            h.DEBUG && console.log(d.step, \"NPUSHW[]\", I);\n            for (var N = 0; N < I; N++) {\n              var z = w[++v] << 8 | w[++v];\n              32768 & z && (z = -(1 + (65535 ^ z))), k.push(z);\n            }\n            d.ip = v;\n          }, function(d) {\n            var k = d.stack, v = (v = d.store) || (d.store = []), w = k.pop(), k = k.pop();\n            h.DEBUG && console.log(d.step, \"WS\", w, k), v[k] = w;\n          }, function(I) {\n            var v = I.stack, w = I.store, k = v.pop(), I = (h.DEBUG && console.log(I.step, \"RS\", k), w && w[k] || 0);\n            v.push(I);\n          }, function(d) {\n            var v = (w = d.stack).pop(), w = w.pop();\n            h.DEBUG && console.log(d.step, \"WCVTP\", v, w), d.cvt[w] = v / 64;\n          }, function(d) {\n            var v = d.stack, w = v.pop();\n            h.DEBUG && console.log(d.step, \"RCVT\", w), v.push(64 * d.cvt[w]);\n          }, cn.bind(void 0, 0), cn.bind(void 0, 1), void 0, dn.bind(void 0, 0), dn.bind(void 0, 1), function(d) {\n            h.DEBUG && console.log(d.step, \"MPPEM[]\"), d.stack.push(d.ppem);\n          }, void 0, function(d) {\n            h.DEBUG && console.log(d.step, \"FLIPON[]\"), d.autoFlip = !0;\n          }, void 0, void 0, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"LT[]\", w, k), v.push(k < w ? 1 : 0);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"LTEQ[]\", w, k), v.push(k <= w ? 1 : 0);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"GT[]\", w, k), v.push(w < k ? 1 : 0);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"GTEQ[]\", w, k), v.push(w <= k ? 1 : 0);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"EQ[]\", w, k), v.push(w === k ? 1 : 0);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"NEQ[]\", w, k), v.push(w !== k ? 1 : 0);\n          }, function(d) {\n            var v = d.stack, w = v.pop();\n            h.DEBUG && console.log(d.step, \"ODD[]\", w), v.push(Math.trunc(w) % 2 ? 1 : 0);\n          }, function(d) {\n            var v = d.stack, w = v.pop();\n            h.DEBUG && console.log(d.step, \"EVEN[]\", w), v.push(Math.trunc(w) % 2 ? 0 : 1);\n          }, function(d) {\n            var v = d.stack.pop();\n            h.DEBUG && console.log(d.step, \"IF[]\", v), v || (Qr(d, !0), h.DEBUG && console.log(d.step, \"EIF[]\"));\n          }, function(d) {\n            h.DEBUG && console.log(d.step, \"EIF[]\");\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"AND[]\", w, k), v.push(w && k ? 1 : 0);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"OR[]\", w, k), v.push(w || k ? 1 : 0);\n          }, function(d) {\n            var v = d.stack, w = v.pop();\n            h.DEBUG && console.log(d.step, \"NOT[]\", w), v.push(w ? 0 : 1);\n          }, kr.bind(void 0, 1), function(d) {\n            var v = d.stack.pop();\n            h.DEBUG && console.log(d.step, \"SDB[]\", v), d.deltaBase = v;\n          }, function(d) {\n            var v = d.stack.pop();\n            h.DEBUG && console.log(d.step, \"SDS[]\", v), d.deltaShift = Math.pow(0.5, v);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"ADD[]\", w, k), v.push(k + w);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"SUB[]\", w, k), v.push(k - w);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"DIV[]\", w, k), v.push(64 * k / w);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"MUL[]\", w, k), v.push(k * w / 64);\n          }, function(d) {\n            var v = d.stack, w = v.pop();\n            h.DEBUG && console.log(d.step, \"ABS[]\", w), v.push(Math.abs(w));\n          }, function(d) {\n            var v = d.stack, w = v.pop();\n            h.DEBUG && console.log(d.step, \"NEG[]\", w), v.push(-w);\n          }, function(d) {\n            var v = d.stack, w = v.pop();\n            h.DEBUG && console.log(d.step, \"FLOOR[]\", w), v.push(64 * Math.floor(w / 64));\n          }, function(d) {\n            var v = d.stack, w = v.pop();\n            h.DEBUG && console.log(d.step, \"CEILING[]\", w), v.push(64 * Math.ceil(w / 64));\n          }, jr.bind(void 0, 0), jr.bind(void 0, 1), jr.bind(void 0, 2), jr.bind(void 0, 3), void 0, void 0, void 0, void 0, function(d) {\n            var v = (w = d.stack).pop(), w = w.pop();\n            h.DEBUG && console.log(d.step, \"WCVTF[]\", v, w), d.cvt[w] = v * d.ppem / d.font.unitsPerEm;\n          }, kr.bind(void 0, 2), kr.bind(void 0, 3), Cr.bind(void 0, 1), Cr.bind(void 0, 2), Cr.bind(void 0, 3), function(d) {\n            var v, w = d.stack.pop();\n            switch (h.DEBUG && console.log(d.step, \"SROUND[]\", w), d.round = Zr, 192 & w) {\n              case 0:\n                v = 0.5;\n                break;\n              case 64:\n                v = 1;\n                break;\n              case 128:\n                v = 2;\n                break;\n              default:\n                throw new Error(\"invalid SROUND value\");\n            }\n            switch (d.srPeriod = v, 48 & w) {\n              case 0:\n                d.srPhase = 0;\n                break;\n              case 16:\n                d.srPhase = 0.25 * v;\n                break;\n              case 32:\n                d.srPhase = 0.5 * v;\n                break;\n              case 48:\n                d.srPhase = 0.75 * v;\n                break;\n              default:\n                throw new Error(\"invalid SROUND value\");\n            }\n            d.srThreshold = (w &= 15) === 0 ? 0 : (w / 8 - 0.5) * v;\n          }, function(d) {\n            var v, w = d.stack.pop();\n            switch (h.DEBUG && console.log(d.step, \"S45ROUND[]\", w), d.round = Zr, 192 & w) {\n              case 0:\n                v = Math.sqrt(2) / 2;\n                break;\n              case 64:\n                v = Math.sqrt(2);\n                break;\n              case 128:\n                v = 2 * Math.sqrt(2);\n                break;\n              default:\n                throw new Error(\"invalid S45ROUND value\");\n            }\n            switch (d.srPeriod = v, 48 & w) {\n              case 0:\n                d.srPhase = 0;\n                break;\n              case 16:\n                d.srPhase = 0.25 * v;\n                break;\n              case 32:\n                d.srPhase = 0.5 * v;\n                break;\n              case 48:\n                d.srPhase = 0.75 * v;\n                break;\n              default:\n                throw new Error(\"invalid S45ROUND value\");\n            }\n            d.srThreshold = (w &= 15) === 0 ? 0 : (w / 8 - 0.5) * v;\n          }, void 0, void 0, function(d) {\n            h.DEBUG && console.log(d.step, \"ROFF[]\"), d.round = Mn;\n          }, void 0, function(d) {\n            h.DEBUG && console.log(d.step, \"RUTG[]\"), d.round = On;\n          }, function(d) {\n            h.DEBUG && console.log(d.step, \"RDTG[]\"), d.round = An;\n          }, Mr, Mr, void 0, void 0, void 0, void 0, void 0, function(d) {\n            var v = d.stack.pop();\n            h.DEBUG && console.log(d.step, \"SCANCTRL[]\", v);\n          }, hn.bind(void 0, 0), hn.bind(void 0, 1), function(d) {\n            var v = d.stack, w = v.pop(), k = 0;\n            h.DEBUG && console.log(d.step, \"GETINFO[]\", w), 1 & w && (k = 35), 32 & w && (k |= 4096), v.push(k);\n          }, void 0, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop(), I = v.pop();\n            h.DEBUG && console.log(d.step, \"ROLL[]\"), v.push(k), v.push(w), v.push(I);\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"MAX[]\", w, k), v.push(Math.max(k, w));\n          }, function(d) {\n            var v = d.stack, w = v.pop(), k = v.pop();\n            h.DEBUG && console.log(d.step, \"MIN[]\", w, k), v.push(Math.min(k, w));\n          }, function(d) {\n            var v = d.stack.pop();\n            h.DEBUG && console.log(d.step, \"SCANTYPE[]\", v);\n          }, function(d) {\n            var v = d.stack.pop(), w = d.stack.pop();\n            switch (h.DEBUG && console.log(d.step, \"INSTCTRL[]\", v, w), v) {\n              case 1:\n                return void (d.inhibitGridFit = !!w);\n              case 2:\n                return void (d.ignoreCvt = !!w);\n              default:\n                throw new Error(\"invalid INSTCTRL[] selector\");\n            }\n          }, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, void 0, or.bind(void 0, 1), or.bind(void 0, 2), or.bind(void 0, 3), or.bind(void 0, 4), or.bind(void 0, 5), or.bind(void 0, 6), or.bind(void 0, 7), or.bind(void 0, 8), sr.bind(void 0, 1), sr.bind(void 0, 2), sr.bind(void 0, 3), sr.bind(void 0, 4), sr.bind(void 0, 5), sr.bind(void 0, 6), sr.bind(void 0, 7), sr.bind(void 0, 8), Je.bind(void 0, 0, 0, 0, 0, 0), Je.bind(void 0, 0, 0, 0, 0, 1), Je.bind(void 0, 0, 0, 0, 0, 2), Je.bind(void 0, 0, 0, 0, 0, 3), Je.bind(void 0, 0, 0, 0, 1, 0), Je.bind(void 0, 0, 0, 0, 1, 1), Je.bind(void 0, 0, 0, 0, 1, 2), Je.bind(void 0, 0, 0, 0, 1, 3), Je.bind(void 0, 0, 0, 1, 0, 0), Je.bind(void 0, 0, 0, 1, 0, 1), Je.bind(void 0, 0, 0, 1, 0, 2), Je.bind(void 0, 0, 0, 1, 0, 3), Je.bind(void 0, 0, 0, 1, 1, 0), Je.bind(void 0, 0, 0, 1, 1, 1), Je.bind(void 0, 0, 0, 1, 1, 2), Je.bind(void 0, 0, 0, 1, 1, 3), Je.bind(void 0, 0, 1, 0, 0, 0), Je.bind(void 0, 0, 1, 0, 0, 1), Je.bind(void 0, 0, 1, 0, 0, 2), Je.bind(void 0, 0, 1, 0, 0, 3), Je.bind(void 0, 0, 1, 0, 1, 0), Je.bind(void 0, 0, 1, 0, 1, 1), Je.bind(void 0, 0, 1, 0, 1, 2), Je.bind(void 0, 0, 1, 0, 1, 3), Je.bind(void 0, 0, 1, 1, 0, 0), Je.bind(void 0, 0, 1, 1, 0, 1), Je.bind(void 0, 0, 1, 1, 0, 2), Je.bind(void 0, 0, 1, 1, 0, 3), Je.bind(void 0, 0, 1, 1, 1, 0), Je.bind(void 0, 0, 1, 1, 1, 1), Je.bind(void 0, 0, 1, 1, 1, 2), Je.bind(void 0, 0, 1, 1, 1, 3), Je.bind(void 0, 1, 0, 0, 0, 0), Je.bind(void 0, 1, 0, 0, 0, 1), Je.bind(void 0, 1, 0, 0, 0, 2), Je.bind(void 0, 1, 0, 0, 0, 3), Je.bind(void 0, 1, 0, 0, 1, 0), Je.bind(void 0, 1, 0, 0, 1, 1), Je.bind(void 0, 1, 0, 0, 1, 2), Je.bind(void 0, 1, 0, 0, 1, 3), Je.bind(void 0, 1, 0, 1, 0, 0), Je.bind(void 0, 1, 0, 1, 0, 1), Je.bind(void 0, 1, 0, 1, 0, 2), Je.bind(void 0, 1, 0, 1, 0, 3), Je.bind(void 0, 1, 0, 1, 1, 0), Je.bind(void 0, 1, 0, 1, 1, 1), Je.bind(void 0, 1, 0, 1, 1, 2), Je.bind(void 0, 1, 0, 1, 1, 3), Je.bind(void 0, 1, 1, 0, 0, 0), Je.bind(void 0, 1, 1, 0, 0, 1), Je.bind(void 0, 1, 1, 0, 0, 2), Je.bind(void 0, 1, 1, 0, 0, 3), Je.bind(void 0, 1, 1, 0, 1, 0), Je.bind(void 0, 1, 1, 0, 1, 1), Je.bind(void 0, 1, 1, 0, 1, 2), Je.bind(void 0, 1, 1, 0, 1, 3), Je.bind(void 0, 1, 1, 1, 0, 0), Je.bind(void 0, 1, 1, 1, 0, 1), Je.bind(void 0, 1, 1, 1, 0, 2), Je.bind(void 0, 1, 1, 1, 0, 3), Je.bind(void 0, 1, 1, 1, 1, 0), Je.bind(void 0, 1, 1, 1, 1, 1), Je.bind(void 0, 1, 1, 1, 1, 2), Je.bind(void 0, 1, 1, 1, 1, 3)], In = Array.from || function(d) {\n            return d.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]?|[^\\uD800-\\uDFFF]|./g) || [];\n          };\n          function _t(d) {\n            (d = d || {}).empty || (ir(d.familyName, \"When creating a new Font object, familyName is required.\"), ir(d.styleName, \"When creating a new Font object, styleName is required.\"), ir(d.unitsPerEm, \"When creating a new Font object, unitsPerEm is required.\"), ir(d.ascender, \"When creating a new Font object, ascender is required.\"), ir(d.descender, \"When creating a new Font object, descender is required.\"), ir(d.descender < 0, \"Descender should be negative (e.g. -512).\"), this.names = { fontFamily: { en: d.familyName || \" \" }, fontSubfamily: { en: d.styleName || \" \" }, fullName: { en: d.fullName || d.familyName + \" \" + d.styleName }, postScriptName: { en: d.postScriptName || (d.familyName + d.styleName).replace(/\\s/g, \"\") }, designer: { en: d.designer || \" \" }, designerURL: { en: d.designerURL || \" \" }, manufacturer: { en: d.manufacturer || \" \" }, manufacturerURL: { en: d.manufacturerURL || \" \" }, license: { en: d.license || \" \" }, licenseURL: { en: d.licenseURL || \" \" }, version: { en: d.version || \"Version 0.1\" }, description: { en: d.description || \" \" }, copyright: { en: d.copyright || \" \" }, trademark: { en: d.trademark || \" \" } }, this.unitsPerEm = d.unitsPerEm || 1e3, this.ascender = d.ascender, this.descender = d.descender, this.createdTimestamp = d.createdTimestamp, this.tables = { os2: { usWeightClass: d.weightClass || this.usWeightClasses.MEDIUM, usWidthClass: d.widthClass || this.usWidthClasses.MEDIUM, fsSelection: d.fsSelection || this.fsSelectionValues.REGULAR } }), this.supported = !0, this.glyphs = new Ke.GlyphSet(this, d.glyphs || []), this.encoding = new je(this), this.position = new vr(this), this.substitution = new $t(this), this.tables = this.tables || {}, Object.defineProperty(this, \"hinting\", { get: function() {\n              return this._hinting || (this.outlinesFormat === \"truetype\" ? this._hinting = new Xr(this) : void 0);\n            } });\n          }\n          function pn(d, v) {\n            var w, k = JSON.stringify(d), I = 256;\n            for (w in v) {\n              var N = parseInt(w);\n              if (N && !(N < 256)) {\n                if (JSON.stringify(v[w]) === k)\n                  return N;\n                I <= N && (I = N + 1);\n              }\n            }\n            return v[I] = d, I;\n          }\n          _t.prototype.hasChar = function(d) {\n            return this.encoding.charToGlyphIndex(d) !== null;\n          }, _t.prototype.charToGlyphIndex = function(d) {\n            return this.encoding.charToGlyphIndex(d);\n          }, _t.prototype.charToGlyph = function(d) {\n            return d = this.charToGlyphIndex(d), this.glyphs.get(d) || this.glyphs.get(0);\n          }, _t.prototype.stringToGlyphs = function(d, v) {\n            v = v || this.defaultRenderOptions;\n            for (var w = In(d), k = [], I = 0; I < w.length; I += 1) {\n              var N = w[I];\n              k.push(this.charToGlyphIndex(N));\n            }\n            var z = k.length;\n            if (v.features) {\n              var d = v.script || this.substitution.getDefaultScriptName(), Q = [];\n              v.features.liga && (Q = Q.concat(this.substitution.getFeature(\"liga\", d, v.language))), v.features.rlig && (Q = Q.concat(this.substitution.getFeature(\"rlig\", d, v.language)));\n              for (var se = 0; se < z; se += 1)\n                for (var oe = 0; oe < Q.length; oe++) {\n                  for (var ye = Q[oe], Se = ye.sub, be = Se.length, de = 0; de < be && Se[de] === k[se + de]; )\n                    de++;\n                  de === be && (k.splice(se, be, ye.by), z = z - be + 1);\n                }\n            }\n            for (var Ie = new Array(z), ke = this.glyphs.get(0), Ae = 0; Ae < z; Ae += 1)\n              Ie[Ae] = this.glyphs.get(k[Ae]) || ke;\n            return Ie;\n          }, _t.prototype.nameToGlyphIndex = function(d) {\n            return this.glyphNames.nameToGlyphIndex(d);\n          }, _t.prototype.nameToGlyph = function(d) {\n            return d = this.nameToGlyphIndex(d), this.glyphs.get(d) || this.glyphs.get(0);\n          }, _t.prototype.glyphIndexToName = function(d) {\n            return this.glyphNames.glyphIndexToName ? this.glyphNames.glyphIndexToName(d) : \"\";\n          }, _t.prototype.getKerningValue = function(d, v) {\n            d = d.index || d, v = v.index || v;\n            var w = this.position.defaultKerningTables;\n            return w ? this.position.getKerningValue(w, d, v) : this.kerningPairs[d + \",\" + v] || 0;\n          }, _t.prototype.defaultRenderOptions = { kerning: !0, features: { liga: !0, rlig: !0 } }, _t.prototype.forEachGlyph = function(d, v, w, k, I, N) {\n            v = v !== void 0 ? v : 0, w = w !== void 0 ? w : 0, I = I || this.defaultRenderOptions;\n            var z, Q = 1 / this.unitsPerEm * (k = k !== void 0 ? k : 72), se = this.stringToGlyphs(d, I);\n            I.kerning && (d = I.script || this.position.getDefaultScriptName(), z = this.position.getKerningTables(d, I.language));\n            for (var oe = 0; oe < se.length; oe += 1) {\n              var ye = se[oe];\n              N.call(this, ye, v, w, k, I), ye.advanceWidth && (v += ye.advanceWidth * Q), I.kerning && oe < se.length - 1 && (v += (z ? this.position.getKerningValue(z, ye.index, se[oe + 1].index) : this.getKerningValue(ye, se[oe + 1])) * Q), I.letterSpacing ? v += I.letterSpacing * k : I.tracking && (v += I.tracking / 1e3 * k);\n            }\n            return v;\n          }, _t.prototype.getPath = function(d, v, w, k, I) {\n            var N = new X();\n            return this.forEachGlyph(d, v, w, k, I, function(z, Q, se, oe) {\n              z = z.getPath(Q, se, oe, I, this), N.extend(z);\n            }), N;\n          }, _t.prototype.getPaths = function(d, v, w, k, I) {\n            var N = [];\n            return this.forEachGlyph(d, v, w, k, I, function(z, Q, se, oe) {\n              z = z.getPath(Q, se, oe, I, this), N.push(z);\n            }), N;\n          }, _t.prototype.getAdvanceWidth = function(d, v, w) {\n            return this.forEachGlyph(d, 0, 0, v, w, function() {\n            });\n          }, _t.prototype.draw = function(d, v, w, k, I, N) {\n            this.getPath(v, w, k, I, N).draw(d);\n          }, _t.prototype.drawPoints = function(d, v, w, k, I, N) {\n            this.forEachGlyph(v, w, k, I, N, function(z, Q, se, oe) {\n              z.drawPoints(d, Q, se, oe);\n            });\n          }, _t.prototype.drawMetrics = function(d, v, w, k, I, N) {\n            this.forEachGlyph(v, w, k, I, N, function(z, Q, se, oe) {\n              z.drawMetrics(d, Q, se, oe);\n            });\n          }, _t.prototype.getEnglishName = function(d) {\n            if (d = this.names[d], d)\n              return d.en;\n          }, _t.prototype.validate = function() {\n            var d = this;\n            function v(w) {\n              w = d.getEnglishName(w), w && w.trim().length;\n            }\n            v(\"fontFamily\"), v(\"weightName\"), v(\"manufacturer\"), v(\"copyright\"), v(\"version\"), this.unitsPerEm;\n          }, _t.prototype.toTables = function() {\n            return Sn.fontToTable(this);\n          }, _t.prototype.toBuffer = function() {\n            return console.warn(\"Font.toBuffer is deprecated. Use Font.toArrayBuffer instead.\"), this.toArrayBuffer();\n          }, _t.prototype.toArrayBuffer = function() {\n            for (var d = this.toTables().encode(), v = new ArrayBuffer(d.length), w = new Uint8Array(v), k = 0; k < d.length; k++)\n              w[k] = d[k];\n            return v;\n          }, _t.prototype.download = function(d) {\n            var v = this.getEnglishName(\"fontFamily\"), w = this.getEnglishName(\"fontSubfamily\"), k = (d = d || v.replace(/\\s/g, \"\") + \"-\" + w + \".otf\", this.toArrayBuffer());\n            typeof window < \"u\" ? (window.requestFileSystem = window.requestFileSystem || window.webkitRequestFileSystem, window.requestFileSystem(window.TEMPORARY, k.byteLength, function(I) {\n              I.root.getFile(d, { create: !0 }, function(N) {\n                N.createWriter(function(z) {\n                  var Q = new DataView(k), Q = new Blob([Q], { type: \"font/opentype\" });\n                  z.write(Q), z.addEventListener(\"writeend\", function() {\n                    location.href = N.toURL();\n                  }, !1);\n                });\n              });\n            }, function(I) {\n              throw new Error(I.name + \": \" + I.message);\n            })) : (v = t(\"fs\"), w = function(I) {\n              for (var N = new m(I.byteLength), z = new Uint8Array(I), Q = 0; Q < N.length; ++Q)\n                N[Q] = z[Q];\n              return N;\n            }(k), v.writeFileSync(d, w));\n          }, _t.prototype.fsSelectionValues = { ITALIC: 1, UNDERSCORE: 2, NEGATIVE: 4, OUTLINED: 8, STRIKEOUT: 16, BOLD: 32, REGULAR: 64, USER_TYPO_METRICS: 128, WWS: 256, OBLIQUE: 512 }, _t.prototype.usWidthClasses = { ULTRA_CONDENSED: 1, EXTRA_CONDENSED: 2, CONDENSED: 3, SEMI_CONDENSED: 4, MEDIUM: 5, SEMI_EXPANDED: 6, EXPANDED: 7, EXTRA_EXPANDED: 8, ULTRA_EXPANDED: 9 }, _t.prototype.usWeightClasses = { THIN: 100, EXTRA_LIGHT: 200, LIGHT: 300, NORMAL: 400, MEDIUM: 500, SEMI_BOLD: 600, BOLD: 700, EXTRA_BOLD: 800, BLACK: 900 };\n          var Dn = { make: function(d, v) {\n            var w = new Me.Table(\"fvar\", [{ name: \"version\", type: \"ULONG\", value: 65536 }, { name: \"offsetToData\", type: \"USHORT\", value: 0 }, { name: \"countSizePairs\", type: \"USHORT\", value: 2 }, { name: \"axisCount\", type: \"USHORT\", value: d.axes.length }, { name: \"axisSize\", type: \"USHORT\", value: 20 }, { name: \"instanceCount\", type: \"USHORT\", value: d.instances.length }, { name: \"instanceSize\", type: \"USHORT\", value: 4 + 4 * d.axes.length }]);\n            w.offsetToData = w.sizeOf();\n            for (var k, I, N, z = 0; z < d.axes.length; z++)\n              w.fields = w.fields.concat((k = z, I = d.axes[z], N = v, N = pn(I.name, v), [{ name: \"tag_\" + k, type: \"TAG\", value: I.tag }, { name: \"minValue_\" + k, type: \"FIXED\", value: I.minValue << 16 }, { name: \"defaultValue_\" + k, type: \"FIXED\", value: I.defaultValue << 16 }, { name: \"maxValue_\" + k, type: \"FIXED\", value: I.maxValue << 16 }, { name: \"flags_\" + k, type: \"USHORT\", value: 0 }, { name: \"nameID_\" + k, type: \"USHORT\", value: N }]));\n            for (var Q = 0; Q < d.instances.length; Q++)\n              w.fields = w.fields.concat(function(se, oe, ye, Se) {\n                for (var be = [{ name: \"nameID_\" + se, type: \"USHORT\", value: pn(oe.name, Se) }, { name: \"flags_\" + se, type: \"USHORT\", value: 0 }], de = 0; de < ye.length; ++de) {\n                  var Ie = ye[de].tag;\n                  be.push({ name: \"axis_\" + se + \" \" + Ie, type: \"FIXED\", value: oe.coordinates[Ie] << 16 });\n                }\n                return be;\n              }(Q, d.instances[Q], d.axes, v));\n            return w;\n          }, parse: function(d, v, w) {\n            for (var k, I, N, z, Q = new we.Parser(d, v), se = Q.parseULong(), oe = (O.argument(se === 65536, \"Unsupported fvar table version.\"), Q.parseOffset16()), ye = (Q.skip(\"uShort\", 1), Q.parseUShort()), Se = Q.parseUShort(), be = Q.parseUShort(), de = Q.parseUShort(), Ie = [], ke = 0; ke < ye; ke++)\n              Ie.push((k = d, I = v + oe + ke * Se, N = w, z = {}, k = new we.Parser(k, I), z.tag = k.parseTag(), z.minValue = k.parseFixed(), z.defaultValue = k.parseFixed(), z.maxValue = k.parseFixed(), k.skip(\"uShort\", 1), z.name = N[k.parseUShort()] || {}, z));\n            for (var Ae = [], Te = v + oe + ye * Se, Ee = 0; Ee < be; Ee++)\n              Ae.push(function($e, lt, et, tt) {\n                var dt = {}, wt = new we.Parser($e, lt);\n                dt.name = tt[wt.parseUShort()] || {}, wt.skip(\"uShort\", 1), dt.coordinates = {};\n                for (var Ot = 0; Ot < et.length; ++Ot)\n                  dt.coordinates[et[Ot].tag] = wt.parseFixed();\n                return dt;\n              }(d, Te + Ee * de, Ie, w));\n            return { axes: Ie, instances: Ae };\n          } }, Zt = new Array(10);\n          Zt[1] = function() {\n            var d = this.offset + this.relativeOffset, v = this.parseUShort();\n            return v === 1 ? { posFormat: 1, coverage: this.parsePointer(ve.coverage), value: this.parseValueRecord() } : v === 2 ? { posFormat: 2, coverage: this.parsePointer(ve.coverage), values: this.parseValueRecordList() } : void O.assert(!1, \"0x\" + d.toString(16) + \": GPOS lookup type 1 format must be 1 or 2.\");\n          }, Zt[2] = function() {\n            var d, v, w, k, N = this.offset + this.relativeOffset, I = this.parseUShort(), N = (O.assert(I === 1 || I === 2, \"0x\" + N.toString(16) + \": GPOS lookup type 2 format must be 1 or 2.\"), this.parsePointer(ve.coverage)), z = this.parseUShort(), Q = this.parseUShort();\n            return I === 1 ? { posFormat: I, coverage: N, valueFormat1: z, valueFormat2: Q, pairSets: this.parseList(ve.pointer(ve.list(function() {\n              return { secondGlyph: this.parseUShort(), value1: this.parseValueRecord(z), value2: this.parseValueRecord(Q) };\n            }))) } : I === 2 ? (d = this.parsePointer(ve.classDef), v = this.parsePointer(ve.classDef), w = this.parseUShort(), k = this.parseUShort(), { posFormat: I, coverage: N, valueFormat1: z, valueFormat2: Q, classDef1: d, classDef2: v, class1Count: w, class2Count: k, classRecords: this.parseList(w, ve.list(k, function() {\n              return { value1: this.parseValueRecord(z), value2: this.parseValueRecord(Q) };\n            })) }) : void 0;\n          }, Zt[3] = function() {\n            return { error: \"GPOS Lookup 3 not supported\" };\n          }, Zt[4] = function() {\n            return { error: \"GPOS Lookup 4 not supported\" };\n          }, Zt[5] = function() {\n            return { error: \"GPOS Lookup 5 not supported\" };\n          }, Zt[6] = function() {\n            return { error: \"GPOS Lookup 6 not supported\" };\n          }, Zt[7] = function() {\n            return { error: \"GPOS Lookup 7 not supported\" };\n          }, Zt[8] = function() {\n            return { error: \"GPOS Lookup 8 not supported\" };\n          }, Zt[9] = function() {\n            return { error: \"GPOS Lookup 9 not supported\" };\n          };\n          var Fn = new Array(10), Un = { parse: function(d, v) {\n            return v = (d = new ve(d, v = v || 0)).parseVersion(1), O.argument(v === 1 || v === 1.1, \"Unsupported GPOS table version \" + v), v === 1 ? { version: v, scripts: d.parseScriptList(), features: d.parseFeatureList(), lookups: d.parseLookupList(Zt) } : { version: v, scripts: d.parseScriptList(), features: d.parseFeatureList(), lookups: d.parseLookupList(Zt), variations: d.parseFeatureVariationsList() };\n          }, make: function(d) {\n            return new Me.Table(\"GPOS\", [{ name: \"version\", type: \"ULONG\", value: 65536 }, { name: \"scripts\", type: \"TABLE\", value: new Me.ScriptList(d.scripts) }, { name: \"features\", type: \"TABLE\", value: new Me.FeatureList(d.features) }, { name: \"lookups\", type: \"TABLE\", value: new Me.LookupList(d.lookups, Fn) }]);\n          } }, Nn = { parse: function(d, v) {\n            if (d = new we.Parser(d, v), (v = d.parseUShort()) === 0) {\n              var w = d, k = {}, Se = (w.skip(\"uShort\"), w.parseUShort()), I = (O.argument(Se === 0, \"Unsupported kern sub-table version.\"), w.skip(\"uShort\", 2), w.parseUShort());\n              w.skip(\"uShort\", 3);\n              for (var N = 0; N < I; N += 1) {\n                var z = w.parseUShort(), Q = w.parseUShort(), se = w.parseShort();\n                k[z + \",\" + Q] = se;\n              }\n              return k;\n            }\n            if (v !== 1)\n              throw new Error(\"Unsupported kern table version (\" + v + \").\");\n            var oe = d, ye = {}, Se = (oe.skip(\"uShort\"), 1 < oe.parseULong() && console.warn(\"Only the first kern subtable is supported.\"), oe.skip(\"uLong\"), 255 & oe.parseUShort());\n            if (oe.skip(\"uShort\"), Se == 0) {\n              var be = oe.parseUShort();\n              oe.skip(\"uShort\", 3);\n              for (var de = 0; de < be; de += 1) {\n                var Ie = oe.parseUShort(), ke = oe.parseUShort(), Ae = oe.parseShort();\n                ye[Ie + \",\" + ke] = Ae;\n              }\n            }\n            return ye;\n          } }, Bn = { parse: function(d, v, w, k) {\n            for (var I = new we.Parser(d, v), N = k ? I.parseUShort : I.parseULong, z = [], Q = 0; Q < w + 1; Q += 1) {\n              var se = N.call(I);\n              k && (se *= 2), z.push(se);\n            }\n            return z;\n          } };\n          function Gn(d, v) {\n            t(\"fs\").readFile(d, function(w, k) {\n              if (w)\n                return v(w.message);\n              v(null, zr(k));\n            });\n          }\n          function Vn(d, v) {\n            var w = new XMLHttpRequest();\n            w.open(\"get\", d, !0), w.responseType = \"arraybuffer\", w.onload = function() {\n              return w.response ? v(null, w.response) : v(\"Font could not be loaded: \" + w.statusText);\n            }, w.onerror = function() {\n              v(\"Font could not be loaded\");\n            }, w.send();\n          }\n          function mn(d, v) {\n            for (var w = [], k = 12, I = 0; I < v; I += 1) {\n              var N = we.getTag(d, k), z = we.getULong(d, k + 4), Q = we.getULong(d, k + 8), se = we.getULong(d, k + 12);\n              w.push({ tag: N, checksum: z, offset: Q, length: se, compression: !1 }), k += 16;\n            }\n            return w;\n          }\n          function Lt(w, v) {\n            if (v.compression !== \"WOFF\")\n              return { data: w, offset: v.offset };\n            var w = new Uint8Array(w.buffer, v.offset + 2, v.compressedLength - 2), k = new Uint8Array(v.length);\n            if (G(w, k), k.byteLength !== v.length)\n              throw new Error(\"Decompression error: \" + v.tag + \" decompressed length doesn't match recorded length\");\n            return { data: new DataView(k.buffer, 0), offset: 0 };\n          }\n          function Or(Ee) {\n            var v, w, k, I, N, z, Q, se, oe, ye, Se, be, de, Ie, ke = new _t({ empty: !0 }), Ae = new DataView(Ee, 0), Te = [], Ee = we.getTag(Ae, 0);\n            if (Ee === \"\\0\u0001\\0\\0\" || Ee === \"true\" || Ee === \"typ1\")\n              ke.outlinesFormat = \"truetype\", Te = mn(Ae, k = we.getUShort(Ae, 4));\n            else if (Ee === \"OTTO\")\n              ke.outlinesFormat = \"cff\", Te = mn(Ae, k = we.getUShort(Ae, 4));\n            else {\n              if (Ee !== \"wOFF\")\n                throw new Error(\"Unsupported OpenType signature \" + Ee);\n              var $e = we.getTag(Ae, 4);\n              if ($e === \"\\0\u0001\\0\\0\")\n                ke.outlinesFormat = \"truetype\";\n              else {\n                if ($e !== \"OTTO\")\n                  throw new Error(\"Unsupported OpenType flavor \" + Ee);\n                ke.outlinesFormat = \"cff\";\n              }\n              Te = function(St, vt) {\n                for (var qt = [], kt = 44, zt = 0; zt < vt; zt += 1) {\n                  var Tt = we.getTag(St, kt), Gt = we.getULong(St, kt + 4), fr = we.getULong(St, kt + 8), ur = we.getULong(St, kt + 12), yn = void 0, yn = fr < ur && \"WOFF\";\n                  qt.push({ tag: Tt, offset: Gt, compression: yn, compressedLength: fr, length: ur }), kt += 20;\n                }\n                return qt;\n              }(Ae, k = we.getUShort(Ae, 12));\n            }\n            for (var lt = 0; lt < k; lt += 1) {\n              var et = Te[lt], tt = void 0;\n              switch (et.tag) {\n                case \"cmap\":\n                  tt = Lt(Ae, et), ke.tables.cmap = Z.parse(tt.data, tt.offset), ke.encoding = new Ce(ke.tables.cmap);\n                  break;\n                case \"cvt \":\n                  tt = Lt(Ae, et), Ie = new we.Parser(tt.data, tt.offset), ke.tables.cvt = Ie.parseShortList(et.length / 2);\n                  break;\n                case \"fvar\":\n                  N = et;\n                  break;\n                case \"fpgm\":\n                  tt = Lt(Ae, et), Ie = new we.Parser(tt.data, tt.offset), ke.tables.fpgm = Ie.parseByteList(et.length);\n                  break;\n                case \"head\":\n                  tt = Lt(Ae, et), ke.tables.head = pt.parse(tt.data, tt.offset), ke.unitsPerEm = ke.tables.head.unitsPerEm, v = ke.tables.head.indexToLocFormat;\n                  break;\n                case \"hhea\":\n                  tt = Lt(Ae, et), ke.tables.hhea = ie.parse(tt.data, tt.offset), ke.ascender = ke.tables.hhea.ascender, ke.descender = ke.tables.hhea.descender, ke.numberOfHMetrics = ke.tables.hhea.numberOfHMetrics;\n                  break;\n                case \"hmtx\":\n                  oe = et;\n                  break;\n                case \"ltag\":\n                  tt = Lt(Ae, et), w = Ge.parse(tt.data, tt.offset);\n                  break;\n                case \"maxp\":\n                  tt = Lt(Ae, et), ke.tables.maxp = Le.parse(tt.data, tt.offset), ke.numGlyphs = ke.tables.maxp.numGlyphs;\n                  break;\n                case \"name\":\n                  be = et;\n                  break;\n                case \"OS/2\":\n                  tt = Lt(Ae, et), ke.tables.os2 = Bt.parse(tt.data, tt.offset);\n                  break;\n                case \"post\":\n                  tt = Lt(Ae, et), ke.tables.post = Lr.parse(tt.data, tt.offset), ke.glyphNames = new Ne(ke.tables.post);\n                  break;\n                case \"prep\":\n                  tt = Lt(Ae, et), Ie = new we.Parser(tt.data, tt.offset), ke.tables.prep = Ie.parseByteList(et.length);\n                  break;\n                case \"glyf\":\n                  z = et;\n                  break;\n                case \"loca\":\n                  Se = et;\n                  break;\n                case \"CFF \":\n                  I = et;\n                  break;\n                case \"kern\":\n                  ye = et;\n                  break;\n                case \"GPOS\":\n                  Q = et;\n                  break;\n                case \"GSUB\":\n                  se = et;\n                  break;\n                case \"meta\":\n                  de = et;\n              }\n            }\n            if ($e = Lt(Ae, be), ke.tables.name = Xt.parse($e.data, $e.offset, w), ke.names = ke.tables.name, z && Se)\n              Ee = v === 0, $e = Lt(Ae, Se), $e = Bn.parse($e.data, $e.offset, ke.numGlyphs, Ee), Ee = Lt(Ae, z), ke.glyphs = qr.parse(Ee.data, Ee.offset, $e, ke);\n            else {\n              if (!I)\n                throw new Error(\"Font doesn't contain TrueType or CFF outlines.\");\n              Ee = Lt(Ae, I), ft.parse(Ee.data, Ee.offset, ke);\n            }\n            for (var $e = Lt(Ae, oe), dt = (Oe.parse($e.data, $e.offset, ke.numberOfHMetrics, ke.numGlyphs, ke.glyphs), ke), wt = dt.tables.cmap.glyphIndexMap, Ot = Object.keys(wt), Rt = 0; Rt < Ot.length; Rt += 1) {\n              var Ht, Wt = Ot[Rt], Qt = wt[Wt];\n              (Ht = dt.glyphs.get(Qt)).addUnicode(parseInt(Wt));\n            }\n            for (var xt = 0; xt < dt.glyphs.length; xt += 1)\n              Ht = dt.glyphs.get(xt), dt.cffEncoding ? dt.isCIDFont ? Ht.name = \"gid\" + xt : Ht.name = dt.cffEncoding.charset[xt] : dt.glyphNames.names && (Ht.name = dt.glyphNames.glyphIndexToName(xt));\n            return ye ? (Ee = Lt(Ae, ye), ke.kerningPairs = Nn.parse(Ee.data, Ee.offset)) : ke.kerningPairs = {}, Q && ($e = Lt(Ae, Q), ke.tables.gpos = Un.parse($e.data, $e.offset), ke.position.init()), se && (Ee = Lt(Ae, se), ke.tables.gsub = Rr.parse(Ee.data, Ee.offset)), N && ($e = Lt(Ae, N), ke.tables.fvar = Dn.parse($e.data, $e.offset, ke.names)), de && (Ee = Lt(Ae, de), ke.tables.meta = Ir.parse(Ee.data, Ee.offset), ke.metas = ke.tables.meta), ke;\n          }\n          h.Font = _t, h.Glyph = We, h.Path = X, h.BoundingBox = W, h._parse = we, h.parse = Or, h.load = function(d, v) {\n            (typeof window > \"u\" ? Gn : Vn)(d, function(w, k) {\n              if (w)\n                return v(w);\n              var I;\n              try {\n                I = Or(k);\n              } catch (N) {\n                return v(N, null);\n              }\n              return v(null, I);\n            });\n          }, h.loadSync = function(d) {\n            return Or(zr(t(\"fs\").readFileSync(d)));\n          }, Object.defineProperty(h, \"__esModule\", { value: !0 });\n        }, u(typeof C == \"object\" && H !== void 0 ? C : y.opentype = {});\n      }).call(this, t(\"buffer\").Buffer);\n    }, { buffer: 4, fs: 2 }], 255: [function(t, H, C) {\n      (function(m) {\n        function y(g, f) {\n          for (var r = 0, s = g.length - 1; 0 <= s; s--) {\n            var o = g[s];\n            o === \".\" ? g.splice(s, 1) : o === \"..\" ? (g.splice(s, 1), r++) : r && (g.splice(s, 1), r--);\n          }\n          if (f)\n            for (; r--; )\n              g.unshift(\"..\");\n          return g;\n        }\n        function u(g, f) {\n          if (g.filter)\n            return g.filter(f);\n          for (var r = [], s = 0; s < g.length; s++)\n            f(g[s], s, g) && r.push(g[s]);\n          return r;\n        }\n        C.resolve = function() {\n          for (var g = \"\", f = !1, r = arguments.length - 1; -1 <= r && !f; r--) {\n            var s = 0 <= r ? arguments[r] : m.cwd();\n            if (typeof s != \"string\")\n              throw new TypeError(\"Arguments to path.resolve must be strings\");\n            s && (g = s + \"/\" + g, f = s.charAt(0) === \"/\");\n          }\n          return (f ? \"/\" : \"\") + (g = y(u(g.split(\"/\"), function(o) {\n            return !!o;\n          }), !f).join(\"/\")) || \".\";\n        }, C.normalize = function(g) {\n          var f = C.isAbsolute(g), r = h(g, -1) === \"/\";\n          return (g = (g = y(u(g.split(\"/\"), function(s) {\n            return !!s;\n          }), !f).join(\"/\")) || f ? g : \".\") && r && (g += \"/\"), (f ? \"/\" : \"\") + g;\n        }, C.isAbsolute = function(g) {\n          return g.charAt(0) === \"/\";\n        }, C.join = function() {\n          var g = Array.prototype.slice.call(arguments, 0);\n          return C.normalize(u(g, function(f, r) {\n            if (typeof f != \"string\")\n              throw new TypeError(\"Arguments to path.join must be strings\");\n            return f;\n          }).join(\"/\"));\n        }, C.relative = function(g, f) {\n          function r(c) {\n            for (var p = 0; p < c.length && c[p] === \"\"; p++)\n              ;\n            for (var j = c.length - 1; 0 <= j && c[j] === \"\"; j--)\n              ;\n            return j < p ? [] : c.slice(p, j - p + 1);\n          }\n          g = C.resolve(g).substr(1), f = C.resolve(f).substr(1);\n          for (var s = r(g.split(\"/\")), o = r(f.split(\"/\")), i = Math.min(s.length, o.length), l = i, n = 0; n < i; n++)\n            if (s[n] !== o[n]) {\n              l = n;\n              break;\n            }\n          for (var a = [], n = l; n < s.length; n++)\n            a.push(\"..\");\n          return (a = a.concat(o.slice(l))).join(\"/\");\n        }, C.sep = \"/\", C.delimiter = \":\", C.dirname = function(g) {\n          if (typeof g != \"string\" && (g += \"\"), g.length === 0)\n            return \".\";\n          for (var f = g.charCodeAt(0) === 47, r = -1, s = !0, o = g.length - 1; 1 <= o; --o)\n            if (g.charCodeAt(o) === 47) {\n              if (!s) {\n                r = o;\n                break;\n              }\n            } else\n              s = !1;\n          return r === -1 ? f ? \"/\" : \".\" : f && r === 1 ? \"/\" : g.slice(0, r);\n        }, C.basename = function(g, f) {\n          return g = function(r) {\n            typeof r != \"string\" && (r += \"\");\n            for (var s = 0, o = -1, i = !0, l = r.length - 1; 0 <= l; --l)\n              if (r.charCodeAt(l) === 47) {\n                if (!i) {\n                  s = l + 1;\n                  break;\n                }\n              } else\n                o === -1 && (i = !1, o = l + 1);\n            return o === -1 ? \"\" : r.slice(s, o);\n          }(g), g = f && g.substr(-1 * f.length) === f ? g.substr(0, g.length - f.length) : g;\n        }, C.extname = function(g) {\n          typeof g != \"string\" && (g += \"\");\n          for (var f = -1, r = 0, s = -1, o = !0, i = 0, l = g.length - 1; 0 <= l; --l) {\n            var n = g.charCodeAt(l);\n            if (n === 47) {\n              if (o)\n                continue;\n              r = l + 1;\n              break;\n            }\n            s === -1 && (o = !1, s = l + 1), n === 46 ? f === -1 ? f = l : i !== 1 && (i = 1) : f !== -1 && (i = -1);\n          }\n          return f === -1 || s === -1 || i === 0 || i === 1 && f === s - 1 && f === r + 1 ? \"\" : g.slice(f, s);\n        };\n        var h =  true ? function(g, f, r) {\n          return g.substr(f, r);\n        } : 0;\n      }).call(this, t(\"_process\"));\n    }, { _process: 256 }], 256: [function(t, u, C) {\n      var m, y, u = u.exports = {};\n      function h() {\n        throw new Error(\"setTimeout has not been defined\");\n      }\n      function g() {\n        throw new Error(\"clearTimeout has not been defined\");\n      }\n      try {\n        m = typeof setTimeout == \"function\" ? setTimeout : h;\n      } catch {\n        m = h;\n      }\n      try {\n        y = typeof clearTimeout == \"function\" ? clearTimeout : g;\n      } catch {\n        y = g;\n      }\n      function f(p) {\n        if (m === setTimeout)\n          return setTimeout(p, 0);\n        if ((m === h || !m) && setTimeout)\n          return (m = setTimeout)(p, 0);\n        try {\n          return m(p, 0);\n        } catch {\n          try {\n            return m.call(null, p, 0);\n          } catch {\n            return m.call(this, p, 0);\n          }\n        }\n      }\n      var r, s = [], o = !1, i = -1;\n      function l() {\n        o && r && (o = !1, r.length ? s = r.concat(s) : i = -1, s.length && n());\n      }\n      function n() {\n        if (!o) {\n          for (var p = f(l), j = (o = !0, s.length); j; ) {\n            for (r = s, s = []; ++i < j; )\n              r && r[i].run();\n            i = -1, j = s.length;\n          }\n          r = null, o = !1, function(T) {\n            if (y === clearTimeout)\n              return clearTimeout(T);\n            if ((y === g || !y) && clearTimeout)\n              return (y = clearTimeout)(T);\n            try {\n              y(T);\n            } catch {\n              try {\n                return y.call(null, T);\n              } catch {\n                return y.call(this, T);\n              }\n            }\n          }(p);\n        }\n      }\n      function a(p, j) {\n        this.fun = p, this.array = j;\n      }\n      function c() {\n      }\n      u.nextTick = function(p) {\n        var j = new Array(arguments.length - 1);\n        if (1 < arguments.length)\n          for (var T = 1; T < arguments.length; T++)\n            j[T - 1] = arguments[T];\n        s.push(new a(p, j)), s.length !== 1 || o || f(n);\n      }, a.prototype.run = function() {\n        this.fun.apply(null, this.array);\n      }, u.title = \"browser\", u.browser = !0, u.env = {}, u.argv = [], u.version = \"\", u.versions = {}, u.on = c, u.addListener = c, u.once = c, u.off = c, u.removeListener = c, u.removeAllListeners = c, u.emit = c, u.prependListener = c, u.prependOnceListener = c, u.listeners = function(p) {\n        return [];\n      }, u.binding = function(p) {\n        throw new Error(\"process.binding is not supported\");\n      }, u.cwd = function() {\n        return \"/\";\n      }, u.chdir = function(p) {\n        throw new Error(\"process.chdir is not supported\");\n      }, u.umask = function() {\n        return 0;\n      };\n    }, {}], 257: [function(t, H, C) {\n      H = function(m) {\n        var y, u = Object.prototype, h = u.hasOwnProperty, _ = typeof Symbol == \"function\" ? Symbol : {}, g = _.iterator || \"@@iterator\", f = _.asyncIterator || \"@@asyncIterator\", r = _.toStringTag || \"@@toStringTag\";\n        function s(V, D, U, B) {\n          var X, ne, b, O, D = D && D.prototype instanceof p ? D : p, D = Object.create(D.prototype), B = new R(B || []);\n          return D._invoke = (X = V, ne = U, b = B, O = i, function(Y, J) {\n            if (O === n)\n              throw new Error(\"Generator is already running\");\n            if (O === a) {\n              if (Y === \"throw\")\n                throw J;\n              return F();\n            }\n            for (b.method = Y, b.arg = J; ; ) {\n              var te = b.delegate;\n              if (te && (te = function ce(re, ue) {\n                var le = re.iterator[ue.method];\n                if (le === y) {\n                  if (ue.delegate = null, ue.method === \"throw\") {\n                    if (re.iterator.return && (ue.method = \"return\", ue.arg = y, ce(re, ue), ue.method === \"throw\"))\n                      return c;\n                    ue.method = \"throw\", ue.arg = new TypeError(\"The iterator does not provide a 'throw' method\");\n                  }\n                  return c;\n                }\n                if (le = o(le, re.iterator, ue.arg), le.type === \"throw\")\n                  return ue.method = \"throw\", ue.arg = le.arg, ue.delegate = null, c;\n                if (le = le.arg, !le)\n                  return ue.method = \"throw\", ue.arg = new TypeError(\"iterator result is not an object\"), ue.delegate = null, c;\n                {\n                  if (!le.done)\n                    return le;\n                  ue[re.resultName] = le.value, ue.next = re.nextLoc, ue.method !== \"return\" && (ue.method = \"next\", ue.arg = y);\n                }\n                return ue.delegate = null, c;\n              }(te, b), te)) {\n                if (te === c)\n                  continue;\n                return te;\n              }\n              if (b.method === \"next\")\n                b.sent = b._sent = b.arg;\n              else if (b.method === \"throw\") {\n                if (O === i)\n                  throw O = a, b.arg;\n                b.dispatchException(b.arg);\n              } else\n                b.method === \"return\" && b.abrupt(\"return\", b.arg);\n              if (O = n, te = o(X, ne, b), te.type === \"normal\") {\n                if (O = b.done ? a : l, te.arg !== c)\n                  return { value: te.arg, done: b.done };\n              } else\n                te.type === \"throw\" && (O = a, b.method = \"throw\", b.arg = te.arg);\n            }\n          }), D;\n        }\n        function o(V, G, U) {\n          try {\n            return { type: \"normal\", arg: V.call(G, U) };\n          } catch (W) {\n            return { type: \"throw\", arg: W };\n          }\n        }\n        m.wrap = s;\n        var i = \"suspendedStart\", l = \"suspendedYield\", n = \"executing\", a = \"completed\", c = {};\n        function p() {\n        }\n        function j() {\n        }\n        function T() {\n        }\n        var _ = {}, S = (_[g] = function() {\n          return this;\n        }, Object.getPrototypeOf), S = S && S(S(L([]))), E = (S && S !== u && h.call(S, g) && (_ = S), T.prototype = p.prototype = Object.create(_));\n        function A(V) {\n          [\"next\", \"throw\", \"return\"].forEach(function(G) {\n            V[G] = function(U) {\n              return this._invoke(G, U);\n            };\n          });\n        }\n        function x(V) {\n          var G;\n          this._invoke = function(U, W) {\n            function X() {\n              return new Promise(function(ne, b) {\n                (function O(ce, B, Y, J) {\n                  var te, ce = o(V[ce], V, B);\n                  if (ce.type !== \"throw\")\n                    return (B = (te = ce.arg).value) && typeof B == \"object\" && h.call(B, \"__await\") ? Promise.resolve(B.__await).then(function(re) {\n                      O(\"next\", re, Y, J);\n                    }, function(re) {\n                      O(\"throw\", re, Y, J);\n                    }) : Promise.resolve(B).then(function(re) {\n                      te.value = re, Y(te);\n                    }, function(re) {\n                      return O(\"throw\", re, Y, J);\n                    });\n                  J(ce.arg);\n                })(U, W, ne, b);\n              });\n            }\n            return G = G ? G.then(X, X) : X();\n          };\n        }\n        function P(V) {\n          var G = { tryLoc: V[0] };\n          1 in V && (G.catchLoc = V[1]), 2 in V && (G.finallyLoc = V[2], G.afterLoc = V[3]), this.tryEntries.push(G);\n        }\n        function M(V) {\n          var G = V.completion || {};\n          G.type = \"normal\", delete G.arg, V.completion = G;\n        }\n        function R(V) {\n          this.tryEntries = [{ tryLoc: \"root\" }], V.forEach(P, this), this.reset(!0);\n        }\n        function L(V) {\n          if (V) {\n            var G, U = V[g];\n            if (U)\n              return U.call(V);\n            if (typeof V.next == \"function\")\n              return V;\n            if (!isNaN(V.length))\n              return G = -1, (U = function W() {\n                for (; ++G < V.length; )\n                  if (h.call(V, G))\n                    return W.value = V[G], W.done = !1, W;\n                return W.value = y, W.done = !0, W;\n              }).next = U;\n          }\n          return { next: F };\n        }\n        function F() {\n          return { value: y, done: !0 };\n        }\n        return (j.prototype = E.constructor = T).constructor = j, T[r] = j.displayName = \"GeneratorFunction\", m.isGeneratorFunction = function(V) {\n          return V = typeof V == \"function\" && V.constructor, !!V && (V === j || (V.displayName || V.name) === \"GeneratorFunction\");\n        }, m.mark = function(V) {\n          return Object.setPrototypeOf ? Object.setPrototypeOf(V, T) : (V.__proto__ = T, r in V || (V[r] = \"GeneratorFunction\")), V.prototype = Object.create(E), V;\n        }, m.awrap = function(V) {\n          return { __await: V };\n        }, A(x.prototype), x.prototype[f] = function() {\n          return this;\n        }, m.AsyncIterator = x, m.async = function(V, G, U, W) {\n          var X = new x(s(V, G, U, W));\n          return m.isGeneratorFunction(G) ? X : X.next().then(function(ne) {\n            return ne.done ? ne.value : X.next();\n          });\n        }, A(E), E[r] = \"Generator\", E[g] = function() {\n          return this;\n        }, E.toString = function() {\n          return \"[object Generator]\";\n        }, m.keys = function(V) {\n          var G, U = [];\n          for (G in V)\n            U.push(G);\n          return U.reverse(), function W() {\n            for (; U.length; ) {\n              var X = U.pop();\n              if (X in V)\n                return W.value = X, W.done = !1, W;\n            }\n            return W.done = !0, W;\n          };\n        }, m.values = L, R.prototype = { constructor: R, reset: function(V) {\n          if (this.prev = 0, this.next = 0, this.sent = this._sent = y, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = y, this.tryEntries.forEach(M), !V)\n            for (var G in this)\n              G.charAt(0) === \"t\" && h.call(this, G) && !isNaN(+G.slice(1)) && (this[G] = y);\n        }, stop: function() {\n          this.done = !0;\n          var V = this.tryEntries[0].completion;\n          if (V.type === \"throw\")\n            throw V.arg;\n          return this.rval;\n        }, dispatchException: function(V) {\n          if (this.done)\n            throw V;\n          var G = this;\n          function U(D, B) {\n            return ne.type = \"throw\", ne.arg = V, G.next = D, B && (G.method = \"next\", G.arg = y), !!B;\n          }\n          for (var W = this.tryEntries.length - 1; 0 <= W; --W) {\n            var X = this.tryEntries[W], ne = X.completion;\n            if (X.tryLoc === \"root\")\n              return U(\"end\");\n            if (X.tryLoc <= this.prev) {\n              var b = h.call(X, \"catchLoc\"), O = h.call(X, \"finallyLoc\");\n              if (b && O) {\n                if (this.prev < X.catchLoc)\n                  return U(X.catchLoc, !0);\n                if (this.prev < X.finallyLoc)\n                  return U(X.finallyLoc);\n              } else if (b) {\n                if (this.prev < X.catchLoc)\n                  return U(X.catchLoc, !0);\n              } else {\n                if (!O)\n                  throw new Error(\"try statement without catch or finally\");\n                if (this.prev < X.finallyLoc)\n                  return U(X.finallyLoc);\n              }\n            }\n          }\n        }, abrupt: function(V, G) {\n          for (var U = this.tryEntries.length - 1; 0 <= U; --U) {\n            var W = this.tryEntries[U];\n            if (W.tryLoc <= this.prev && h.call(W, \"finallyLoc\") && this.prev < W.finallyLoc) {\n              var X = W;\n              break;\n            }\n          }\n          var ne = (X = X && (V === \"break\" || V === \"continue\") && X.tryLoc <= G && G <= X.finallyLoc ? null : X) ? X.completion : {};\n          return ne.type = V, ne.arg = G, X ? (this.method = \"next\", this.next = X.finallyLoc, c) : this.complete(ne);\n        }, complete: function(V, G) {\n          if (V.type === \"throw\")\n            throw V.arg;\n          return V.type === \"break\" || V.type === \"continue\" ? this.next = V.arg : V.type === \"return\" ? (this.rval = this.arg = V.arg, this.method = \"return\", this.next = \"end\") : V.type === \"normal\" && G && (this.next = G), c;\n        }, finish: function(V) {\n          for (var G = this.tryEntries.length - 1; 0 <= G; --G) {\n            var U = this.tryEntries[G];\n            if (U.finallyLoc === V)\n              return this.complete(U.completion, U.afterLoc), M(U), c;\n          }\n        }, catch: function(V) {\n          for (var G = this.tryEntries.length - 1; 0 <= G; --G) {\n            var U, W, X = this.tryEntries[G];\n            if (X.tryLoc === V)\n              return (U = X.completion).type === \"throw\" && (W = U.arg, M(X)), W;\n          }\n          throw new Error(\"illegal catch attempt\");\n        }, delegateYield: function(V, G, U) {\n          return this.delegate = { iterator: L(V), resultName: G, nextLoc: U }, this.method === \"next\" && (this.arg = y), c;\n        } }, m;\n      }(typeof H == \"object\" ? H.exports : {});\n      try {\n        regeneratorRuntime = H;\n      } catch {\n        Function(\"r\", \"regeneratorRuntime = r\")(H);\n      }\n    }, {}], 258: [function(t, H, C) {\n      (function(m) {\n        var y, u, h, g, f, r, s, o, i, l;\n        function n(M) {\n          if (typeof M != \"string\" && (M = String(M)), /[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(M))\n            throw new TypeError(\"Invalid character in header field name\");\n          return M.toLowerCase();\n        }\n        function a(M) {\n          return M = typeof M != \"string\" ? String(M) : M;\n        }\n        function c(M) {\n          var R = { next: function() {\n            var L = M.shift();\n            return { done: L === void 0, value: L };\n          } };\n          return u && (R[Symbol.iterator] = function() {\n            return R;\n          }), R;\n        }\n        function p(M) {\n          this.map = {}, M instanceof p ? M.forEach(function(R, L) {\n            this.append(L, R);\n          }, this) : Array.isArray(M) ? M.forEach(function(R) {\n            this.append(R[0], R[1]);\n          }, this) : M && Object.getOwnPropertyNames(M).forEach(function(R) {\n            this.append(R, M[R]);\n          }, this);\n        }\n        function j(M) {\n          if (M.bodyUsed)\n            return Promise.reject(new TypeError(\"Already read\"));\n          M.bodyUsed = !0;\n        }\n        function T(M) {\n          return new Promise(function(R, L) {\n            M.onload = function() {\n              R(M.result);\n            }, M.onerror = function() {\n              L(M.error);\n            };\n          });\n        }\n        function _(M) {\n          var R = new FileReader(), L = T(R);\n          return R.readAsArrayBuffer(M), L;\n        }\n        function S(M) {\n          var R;\n          return M.slice ? M.slice(0) : ((R = new Uint8Array(M.byteLength)).set(new Uint8Array(M)), R.buffer);\n        }\n        function E() {\n          return this.bodyUsed = !1, this._initBody = function(M) {\n            if (this._bodyInit = M)\n              if (typeof M == \"string\")\n                this._bodyText = M;\n              else if (h && Blob.prototype.isPrototypeOf(M))\n                this._bodyBlob = M;\n              else if (g && FormData.prototype.isPrototypeOf(M))\n                this._bodyFormData = M;\n              else if (y && URLSearchParams.prototype.isPrototypeOf(M))\n                this._bodyText = M.toString();\n              else if (f && h && s(M))\n                this._bodyArrayBuffer = S(M.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer]);\n              else {\n                if (!f || !ArrayBuffer.prototype.isPrototypeOf(M) && !o(M))\n                  throw new Error(\"unsupported BodyInit type\");\n                this._bodyArrayBuffer = S(M);\n              }\n            else\n              this._bodyText = \"\";\n            this.headers.get(\"content-type\") || (typeof M == \"string\" ? this.headers.set(\"content-type\", \"text/plain;charset=UTF-8\") : this._bodyBlob && this._bodyBlob.type ? this.headers.set(\"content-type\", this._bodyBlob.type) : y && URLSearchParams.prototype.isPrototypeOf(M) && this.headers.set(\"content-type\", \"application/x-www-form-urlencoded;charset=UTF-8\"));\n          }, h && (this.blob = function() {\n            var M = j(this);\n            if (M)\n              return M;\n            if (this._bodyBlob)\n              return Promise.resolve(this._bodyBlob);\n            if (this._bodyArrayBuffer)\n              return Promise.resolve(new Blob([this._bodyArrayBuffer]));\n            if (this._bodyFormData)\n              throw new Error(\"could not read FormData body as blob\");\n            return Promise.resolve(new Blob([this._bodyText]));\n          }, this.arrayBuffer = function() {\n            return this._bodyArrayBuffer ? j(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(_);\n          }), this.text = function() {\n            var M, R, L = j(this);\n            if (L)\n              return L;\n            if (this._bodyBlob)\n              return L = this._bodyBlob, M = new FileReader(), R = T(M), M.readAsText(L), R;\n            if (this._bodyArrayBuffer)\n              return Promise.resolve(function(F) {\n                for (var V = new Uint8Array(F), G = new Array(V.length), U = 0; U < V.length; U++)\n                  G[U] = String.fromCharCode(V[U]);\n                return G.join(\"\");\n              }(this._bodyArrayBuffer));\n            if (this._bodyFormData)\n              throw new Error(\"could not read FormData body as text\");\n            return Promise.resolve(this._bodyText);\n          }, g && (this.formData = function() {\n            return this.text().then(x);\n          }), this.json = function() {\n            return this.text().then(JSON.parse);\n          }, this;\n        }\n        function A(M, R) {\n          var L, F = (R = R || {}).body;\n          if (M instanceof A) {\n            if (M.bodyUsed)\n              throw new TypeError(\"Already read\");\n            this.url = M.url, this.credentials = M.credentials, R.headers || (this.headers = new p(M.headers)), this.method = M.method, this.mode = M.mode, F || M._bodyInit == null || (F = M._bodyInit, M.bodyUsed = !0);\n          } else\n            this.url = String(M);\n          if (this.credentials = R.credentials || this.credentials || \"omit\", !R.headers && this.headers || (this.headers = new p(R.headers)), this.method = (M = R.method || this.method || \"GET\", L = M.toUpperCase(), -1 < i.indexOf(L) ? L : M), this.mode = R.mode || this.mode || null, this.referrer = null, (this.method === \"GET\" || this.method === \"HEAD\") && F)\n            throw new TypeError(\"Body not allowed for GET or HEAD requests\");\n          this._initBody(F);\n        }\n        function x(M) {\n          var R = new FormData();\n          return M.trim().split(\"&\").forEach(function(L) {\n            var F;\n            L && (F = (L = L.split(\"=\")).shift().replace(/\\+/g, \" \"), L = L.join(\"=\").replace(/\\+/g, \" \"), R.append(decodeURIComponent(F), decodeURIComponent(L)));\n          }), R;\n        }\n        function P(M, R) {\n          R = R || {}, this.type = \"default\", this.status = R.status === void 0 ? 200 : R.status, this.ok = 200 <= this.status && this.status < 300, this.statusText = \"statusText\" in R ? R.statusText : \"OK\", this.headers = new p(R.headers), this.url = R.url || \"\", this._initBody(M);\n        }\n        m.fetch || (y = \"URLSearchParams\" in m, u = \"Symbol\" in m && \"iterator\" in Symbol, h = \"FileReader\" in m && \"Blob\" in m && function() {\n          try {\n            return new Blob(), !0;\n          } catch {\n            return !1;\n          }\n        }(), g = \"FormData\" in m, (f = \"ArrayBuffer\" in m) && (r = [\"[object Int8Array]\", \"[object Uint8Array]\", \"[object Uint8ClampedArray]\", \"[object Int16Array]\", \"[object Uint16Array]\", \"[object Int32Array]\", \"[object Uint32Array]\", \"[object Float32Array]\", \"[object Float64Array]\"], s = function(M) {\n          return M && DataView.prototype.isPrototypeOf(M);\n        }, o = ArrayBuffer.isView || function(M) {\n          return M && -1 < r.indexOf(Object.prototype.toString.call(M));\n        }), p.prototype.append = function(M, R) {\n          M = n(M), R = a(R);\n          var L = this.map[M];\n          this.map[M] = L ? L + \",\" + R : R;\n        }, p.prototype.delete = function(M) {\n          delete this.map[n(M)];\n        }, p.prototype.get = function(M) {\n          return M = n(M), this.has(M) ? this.map[M] : null;\n        }, p.prototype.has = function(M) {\n          return this.map.hasOwnProperty(n(M));\n        }, p.prototype.set = function(M, R) {\n          this.map[n(M)] = a(R);\n        }, p.prototype.forEach = function(M, R) {\n          for (var L in this.map)\n            this.map.hasOwnProperty(L) && M.call(R, this.map[L], L, this);\n        }, p.prototype.keys = function() {\n          var M = [];\n          return this.forEach(function(R, L) {\n            M.push(L);\n          }), c(M);\n        }, p.prototype.values = function() {\n          var M = [];\n          return this.forEach(function(R) {\n            M.push(R);\n          }), c(M);\n        }, p.prototype.entries = function() {\n          var M = [];\n          return this.forEach(function(R, L) {\n            M.push([L, R]);\n          }), c(M);\n        }, u && (p.prototype[Symbol.iterator] = p.prototype.entries), i = [\"DELETE\", \"GET\", \"HEAD\", \"OPTIONS\", \"POST\", \"PUT\"], A.prototype.clone = function() {\n          return new A(this, { body: this._bodyInit });\n        }, E.call(A.prototype), E.call(P.prototype), P.prototype.clone = function() {\n          return new P(this._bodyInit, { status: this.status, statusText: this.statusText, headers: new p(this.headers), url: this.url });\n        }, P.error = function() {\n          var M = new P(null, { status: 0, statusText: \"\" });\n          return M.type = \"error\", M;\n        }, l = [301, 302, 303, 307, 308], P.redirect = function(M, R) {\n          if (l.indexOf(R) === -1)\n            throw new RangeError(\"Invalid status code\");\n          return new P(null, { status: R, headers: { location: M } });\n        }, m.Headers = p, m.Request = A, m.Response = P, m.fetch = function(M, R) {\n          return new Promise(function(L, F) {\n            var V = new A(M, R), G = new XMLHttpRequest();\n            G.onload = function() {\n              var U, W = { status: G.status, statusText: G.statusText, headers: (W = G.getAllResponseHeaders() || \"\", U = new p(), W.replace(/\\r?\\n[\\t ]+/g, \" \").split(/\\r?\\n/).forEach(function(b) {\n                var b = b.split(\":\"), O = b.shift().trim();\n                O && (b = b.join(\":\").trim(), U.append(O, b));\n              }), U) }, X = (W.url = \"responseURL\" in G ? G.responseURL : W.headers.get(\"X-Request-URL\"), \"response\" in G ? G.response : G.responseText);\n              L(new P(X, W));\n            }, G.onerror = function() {\n              F(new TypeError(\"Network request failed\"));\n            }, G.ontimeout = function() {\n              F(new TypeError(\"Network request failed\"));\n            }, G.open(V.method, V.url, !0), V.credentials === \"include\" ? G.withCredentials = !0 : V.credentials === \"omit\" && (G.withCredentials = !1), \"responseType\" in G && h && (G.responseType = \"blob\"), V.headers.forEach(function(U, W) {\n              G.setRequestHeader(W, U);\n            }), G.send(V._bodyInit === void 0 ? null : V._bodyInit);\n          });\n        }, m.fetch.polyfill = !0);\n      })(typeof self < \"u\" ? self : this);\n    }, {}], 259: [function(t, H, C) {\n      t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.split\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m, y = h(t(\"../core/main\")), u = h(t(\"../color/color_conversion\"));\n      function h(r) {\n        return r && r.__esModule ? r : { default: r };\n      }\n      var g = [{ h: 0, s: 0, b: 0.8275, name: \"gray\" }, { h: 0, s: 0, b: 0.8627, name: \"gray\" }, { h: 0, s: 0, b: 0.7529, name: \"gray\" }, { h: 0.0167, s: 0.1176, b: 1, name: \"light pink\" }], f = [{ h: 0, s: 0, b: 0, name: \"black\" }, { h: 0, s: 0, b: 0.5, name: \"gray\" }, { h: 0, s: 0, b: 1, name: \"white\" }, { h: 0, s: 0.5, b: 0.5, name: \"dark maroon\" }, { h: 0, s: 0.5, b: 1, name: \"salmon pink\" }, { h: 0, s: 1, b: 0, name: \"black\" }, { h: 0, s: 1, b: 0.5, name: \"dark red\" }, { h: 0, s: 1, b: 1, name: \"red\" }, { h: 5, s: 0, b: 1, name: \"very light peach\" }, { h: 5, s: 0.5, b: 0.5, name: \"brown\" }, { h: 5, s: 0.5, b: 1, name: \"peach\" }, { h: 5, s: 1, b: 0.5, name: \"brick red\" }, { h: 5, s: 1, b: 1, name: \"crimson\" }, { h: 10, s: 0, b: 1, name: \"light peach\" }, { h: 10, s: 0.5, b: 0.5, name: \"brown\" }, { h: 10, s: 0.5, b: 1, name: \"light orange\" }, { h: 10, s: 1, b: 0.5, name: \"brown\" }, { h: 10, s: 1, b: 1, name: \"orange\" }, { h: 15, s: 0, b: 1, name: \"very light yellow\" }, { h: 15, s: 0.5, b: 0.5, name: \"olive green\" }, { h: 15, s: 0.5, b: 1, name: \"light yellow\" }, { h: 15, s: 1, b: 0, name: \"dark olive green\" }, { h: 15, s: 1, b: 0.5, name: \"olive green\" }, { h: 15, s: 1, b: 1, name: \"yellow\" }, { h: 20, s: 0, b: 1, name: \"very light yellow\" }, { h: 20, s: 0.5, b: 0.5, name: \"olive green\" }, { h: 20, s: 0.5, b: 1, name: \"light yellow green\" }, { h: 20, s: 1, b: 0, name: \"dark olive green\" }, { h: 20, s: 1, b: 0.5, name: \"dark yellow green\" }, { h: 20, s: 1, b: 1, name: \"yellow green\" }, { h: 25, s: 0.5, b: 0.5, name: \"dark yellow green\" }, { h: 25, s: 0.5, b: 1, name: \"light green\" }, { h: 25, s: 1, b: 0.5, name: \"dark green\" }, { h: 25, s: 1, b: 1, name: \"green\" }, { h: 30, s: 0.5, b: 1, name: \"light green\" }, { h: 30, s: 1, b: 0.5, name: \"dark green\" }, { h: 30, s: 1, b: 1, name: \"green\" }, { h: 35, s: 0, b: 0.5, name: \"light green\" }, { h: 35, s: 0, b: 1, name: \"very light green\" }, { h: 35, s: 0.5, b: 0.5, name: \"dark green\" }, { h: 35, s: 0.5, b: 1, name: \"light green\" }, { h: 35, s: 1, b: 0, name: \"very dark green\" }, { h: 35, s: 1, b: 0.5, name: \"dark green\" }, { h: 35, s: 1, b: 1, name: \"green\" }, { h: 40, s: 0, b: 1, name: \"very light green\" }, { h: 40, s: 0.5, b: 0.5, name: \"dark green\" }, { h: 40, s: 0.5, b: 1, name: \"light green\" }, { h: 40, s: 1, b: 0.5, name: \"dark green\" }, { h: 40, s: 1, b: 1, name: \"green\" }, { h: 45, s: 0.5, b: 1, name: \"light turquoise\" }, { h: 45, s: 1, b: 0.5, name: \"dark turquoise\" }, { h: 45, s: 1, b: 1, name: \"turquoise\" }, { h: 50, s: 0, b: 1, name: \"light sky blue\" }, { h: 50, s: 0.5, b: 0.5, name: \"dark cyan\" }, { h: 50, s: 0.5, b: 1, name: \"light cyan\" }, { h: 50, s: 1, b: 0.5, name: \"dark cyan\" }, { h: 50, s: 1, b: 1, name: \"cyan\" }, { h: 55, s: 0, b: 1, name: \"light sky blue\" }, { h: 55, s: 0.5, b: 1, name: \"light sky blue\" }, { h: 55, s: 1, b: 0.5, name: \"dark blue\" }, { h: 55, s: 1, b: 1, name: \"sky blue\" }, { h: 60, s: 0, b: 0.5, name: \"gray\" }, { h: 60, s: 0, b: 1, name: \"very light blue\" }, { h: 60, s: 0.5, b: 0.5, name: \"blue\" }, { h: 60, s: 0.5, b: 1, name: \"light blue\" }, { h: 60, s: 1, b: 0.5, name: \"navy blue\" }, { h: 60, s: 1, b: 1, name: \"blue\" }, { h: 65, s: 0, b: 1, name: \"lavender\" }, { h: 65, s: 0.5, b: 0.5, name: \"navy blue\" }, { h: 65, s: 0.5, b: 1, name: \"light purple\" }, { h: 65, s: 1, b: 0.5, name: \"dark navy blue\" }, { h: 65, s: 1, b: 1, name: \"blue\" }, { h: 70, s: 0, b: 1, name: \"lavender\" }, { h: 70, s: 0.5, b: 0.5, name: \"navy blue\" }, { h: 70, s: 0.5, b: 1, name: \"lavender blue\" }, { h: 70, s: 1, b: 0.5, name: \"dark navy blue\" }, { h: 70, s: 1, b: 1, name: \"blue\" }, { h: 75, s: 0.5, b: 1, name: \"lavender\" }, { h: 75, s: 1, b: 0.5, name: \"dark purple\" }, { h: 75, s: 1, b: 1, name: \"purple\" }, { h: 80, s: 0.5, b: 1, name: \"pinkish purple\" }, { h: 80, s: 1, b: 0.5, name: \"dark purple\" }, { h: 80, s: 1, b: 1, name: \"purple\" }, { h: 85, s: 0, b: 1, name: \"light pink\" }, { h: 85, s: 0.5, b: 0.5, name: \"purple\" }, { h: 85, s: 0.5, b: 1, name: \"light fuchsia\" }, { h: 85, s: 1, b: 0.5, name: \"dark fuchsia\" }, { h: 85, s: 1, b: 1, name: \"fuchsia\" }, { h: 90, s: 0.5, b: 0.5, name: \"dark fuchsia\" }, { h: 90, s: 0.5, b: 1, name: \"hot pink\" }, { h: 90, s: 1, b: 0.5, name: \"dark fuchsia\" }, { h: 90, s: 1, b: 1, name: \"fuchsia\" }, { h: 95, s: 0, b: 1, name: \"pink\" }, { h: 95, s: 0.5, b: 1, name: \"light pink\" }, { h: 95, s: 1, b: 0.5, name: \"dark magenta\" }, { h: 95, s: 1, b: 1, name: \"magenta\" }];\n      y.default.prototype._rgbColorName = function(i) {\n        var s, o, i = u.default._rgbaToHSBA(i), l = [(m = i)[0], i[1], i[2]];\n        l[0] !== 0 && (l[0] = Math.round(100 * l[0]), (i = l[0].toString().split(\"\"))[o = i.length - 1] = parseInt(i[o]), i[o] < 2.5 ? i[o] = 0 : 2.5 <= i[o] && i[o] < 7.5 && (i[o] = 5), i.length === 2 ? (i[0] = parseInt(i[0]), 7.5 <= i[o] && (i[o] = 0, i[0] = i[0] + 1), l[0] = 10 * i[0] + i[1]) : 7.5 <= i[o] ? l[0] = 10 : l[0] = i[o]), l[2] = l[2] / 255;\n        for (var n = l.length - 1; 1 <= n; n--)\n          l[n] <= 0.25 ? l[n] = 0 : 0.25 < l[n] && l[n] < 0.75 ? l[n] = 0.5 : l[n] = 1;\n        if (l[0] === 0 && l[1] === 0 && l[2] === 1) {\n          for (var a = 2; 0 <= a; a--)\n            m[a] = Math.round(1e4 * m[a]) / 1e4;\n          for (var c = 0; c < g.length; c++) {\n            if (g[c].h === m[0] && g[c].s === m[1] && g[c].b === m[2]) {\n              s = g[c].name;\n              break;\n            }\n            s = \"white\";\n          }\n        } else\n          for (var p = 0; p < f.length; p++)\n            if (f[p].h === l[0] && f[p].s === l[1] && f[p].b === l[2]) {\n              s = f[p].name;\n              break;\n            }\n        return s;\n      }, t = y.default, C.default = t;\n    }, { \"../color/color_conversion\": 265, \"../core/main\": 280, \"core-js/modules/es.function.name\": 173, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.split\": 203 }], 260: [function(t, H, C) {\n      t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.ends-with\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.ends-with\"), t(\"core-js/modules/es.string.replace\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t }, y = \"_Description\", u = \"_fallbackDesc\", h = \"_fallbackTable\", g = \"_Label\", f = \"_labelDesc\", r = \"_labelTable\";\n      function s(o) {\n        if (o === \"label\" || o === \"fallback\")\n          throw new Error(\"description should not be LABEL or FALLBACK\");\n        return o.endsWith(\".\") || o.endsWith(\";\") || o.endsWith(\",\") || o.endsWith(\"?\") || o.endsWith(\"!\") || (o += \".\"), o;\n      }\n      m.default.prototype.describe = function(o, i) {\n        var l;\n        m.default._validateParameters(\"describe\", arguments), typeof o == \"string\" && (l = this.canvas.id, o = s(o), this.dummyDOM || (this.dummyDOM = document.getElementById(l).parentNode), this.descriptions || (this.descriptions = {}), this.descriptions.fallback ? this.descriptions.fallback.innerHTML !== o && (this.descriptions.fallback.innerHTML = o) : this._describeHTML(\"fallback\", o), i === this.LABEL && (this.descriptions.label ? this.descriptions.label.innerHTML !== o && (this.descriptions.label.innerHTML = o) : this._describeHTML(\"label\", o)));\n      }, m.default.prototype.describeElement = function(o, i, l) {\n        var n, a;\n        m.default._validateParameters(\"describeElement\", arguments), typeof i == \"string\" && typeof o == \"string\" && (n = this.canvas.id, i = s(i), a = function(c) {\n          if (c === \"label\" || c === \"fallback\")\n            throw new Error(\"element name should not be LABEL or FALLBACK\");\n          return c.endsWith(\".\") || c.endsWith(\";\") || c.endsWith(\",\") ? c = c.replace(/.$/, \":\") : c.endsWith(\":\") || (c += \":\"), c;\n        }(o), o = o.replace(/[^a-zA-Z0-9]/g, \"\"), a = '<th scope=\"row\">'.concat(a, \"</th><td>\").concat(i, \"</td>\"), this.dummyDOM || (this.dummyDOM = document.getElementById(n).parentNode), this.descriptions ? this.descriptions.fallbackElements || (this.descriptions.fallbackElements = {}) : this.descriptions = { fallbackElements: {} }, this.descriptions.fallbackElements[o] ? this.descriptions.fallbackElements[o].innerHTML !== a && (this.descriptions.fallbackElements[o].innerHTML = a) : this._describeElementHTML(\"fallback\", o, a), l === this.LABEL && (this.descriptions.labelElements || (this.descriptions.labelElements = {}), this.descriptions.labelElements[o] ? this.descriptions.labelElements[o].innerHTML !== a && (this.descriptions.labelElements[o].innerHTML = a) : this._describeElementHTML(\"label\", o, a)));\n      }, m.default.prototype._describeHTML = function(o, i) {\n        var l, n = this.canvas.id;\n        o === \"fallback\" ? (this.dummyDOM.querySelector(\"#\".concat(n + y)) ? this.dummyDOM.querySelector(\"#\" + n + h).insertAdjacentHTML(\"beforebegin\", '<p id=\"'.concat(n + u, '\"></p>')) : (l = '<div id=\"'.concat(n).concat(y, '\" role=\"region\" aria-label=\"Canvas Description\"><p id=\"').concat(n).concat(u, '\"></p></div>'), this.dummyDOM.querySelector(\"#\".concat(n, \"accessibleOutput\")) ? this.dummyDOM.querySelector(\"#\".concat(n, \"accessibleOutput\")).insertAdjacentHTML(\"beforebegin\", l) : this.dummyDOM.querySelector(\"#\".concat(n)).innerHTML = l), this.descriptions.fallback = this.dummyDOM.querySelector(\"#\".concat(n).concat(u)), this.descriptions.fallback.innerHTML = i) : o === \"label\" && (this.dummyDOM.querySelector(\"#\".concat(n + g)) ? this.dummyDOM.querySelector(\"#\".concat(n + r)) && this.dummyDOM.querySelector(\"#\".concat(n + r)).insertAdjacentHTML(\"beforebegin\", '<p id=\"'.concat(n).concat(f, '\"></p>')) : (l = '<div id=\"'.concat(n).concat(g, '\" class=\"p5Label\"><p id=\"').concat(n).concat(f, '\"></p></div>'), this.dummyDOM.querySelector(\"#\".concat(n, \"accessibleOutputLabel\")) ? this.dummyDOM.querySelector(\"#\".concat(n, \"accessibleOutputLabel\")).insertAdjacentHTML(\"beforebegin\", l) : this.dummyDOM.querySelector(\"#\" + n).insertAdjacentHTML(\"afterend\", l)), this.descriptions.label = this.dummyDOM.querySelector(\"#\" + n + f), this.descriptions.label.innerHTML = i);\n      }, m.default.prototype._describeElementHTML = function(o, i, l) {\n        var n, a = this.canvas.id;\n        o === \"fallback\" ? (this.dummyDOM.querySelector(\"#\".concat(a + y)) ? this.dummyDOM.querySelector(\"#\" + a + h) || this.dummyDOM.querySelector(\"#\" + a + u).insertAdjacentHTML(\"afterend\", '<table id=\"'.concat(a).concat(h, '\"><caption>Canvas elements and their descriptions</caption></table>')) : (n = '<div id=\"'.concat(a).concat(y, '\" role=\"region\" aria-label=\"Canvas Description\"><table id=\"').concat(a).concat(h, '\"><caption>Canvas elements and their descriptions</caption></table></div>'), this.dummyDOM.querySelector(\"#\".concat(a, \"accessibleOutput\")) ? this.dummyDOM.querySelector(\"#\".concat(a, \"accessibleOutput\")).insertAdjacentHTML(\"beforebegin\", n) : this.dummyDOM.querySelector(\"#\" + a).innerHTML = n), (n = document.createElement(\"tr\")).id = a + \"_fte_\" + i, this.dummyDOM.querySelector(\"#\" + a + h).appendChild(n), this.descriptions.fallbackElements[i] = this.dummyDOM.querySelector(\"#\".concat(a).concat(\"_fte_\").concat(i)), this.descriptions.fallbackElements[i].innerHTML = l) : o === \"label\" && (this.dummyDOM.querySelector(\"#\".concat(a + g)) ? this.dummyDOM.querySelector(\"#\".concat(a + r)) || this.dummyDOM.querySelector(\"#\" + a + f).insertAdjacentHTML(\"afterend\", '<table id=\"'.concat(a + r, '\"></table>')) : (n = '<div id=\"'.concat(a).concat(g, '\" class=\"p5Label\"><table id=\"').concat(a).concat(r, '\"></table></div>'), this.dummyDOM.querySelector(\"#\".concat(a, \"accessibleOutputLabel\")) ? this.dummyDOM.querySelector(\"#\".concat(a, \"accessibleOutputLabel\")).insertAdjacentHTML(\"beforebegin\", n) : this.dummyDOM.querySelector(\"#\" + a).insertAdjacentHTML(\"afterend\", n)), (o = document.createElement(\"tr\")).id = a + \"_lte_\" + i, this.dummyDOM.querySelector(\"#\" + a + r).appendChild(o), this.descriptions.labelElements[i] = this.dummyDOM.querySelector(\"#\".concat(a).concat(\"_lte_\").concat(i)), this.descriptions.labelElements[i].innerHTML = l);\n      }, t = m.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.string.ends-with\": 195, \"core-js/modules/es.string.replace\": 201 }], 261: [function(t, H, C) {\n      t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.string.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t }, t.default.prototype._updateGridOutput = function(m) {\n        var y, u, h, g;\n        this.dummyDOM.querySelector(\"#\".concat(m, \"_summary\")) && (y = this._accessibleOutputs[m], h = function(f, r, s, o) {\n          return r = \"\".concat(r, \" canvas, \").concat(s, \" by \").concat(o, \" pixels, contains \").concat(f[0]), r = (f[0] === 1 ? \"\".concat(r, \" shape: \") : \"\".concat(r, \" shapes: \")).concat(f[1]), r;\n        }((u = function(f, r) {\n          var s, o = \"\", i = \"\", l = 0;\n          for (s in r) {\n            var n, a = 0;\n            for (n in r[s]) {\n              var c = '<li id=\"'.concat(f, \"shape\").concat(l, '\">').concat(r[s][n].color, \" \").concat(s, \",\");\n              s === \"line\" ? c += \" location = \".concat(r[s][n].pos, \", length = \").concat(r[s][n].length, \" pixels\") : (c += \" location = \".concat(r[s][n].pos), s !== \"point\" && (c += \", area = \".concat(r[s][n].area, \" %\")), c += \"</li>\"), o += c, a++, l++;\n            }\n            i = 1 < a ? \"\".concat(i, \" \").concat(a, \" \").concat(s, \"s\") : \"\".concat(i, \" \").concat(a, \" \").concat(s);\n          }\n          return { numShapes: [l, i], details: o };\n        }(m, this.ingredients.shapes)).numShapes, this.ingredients.colors.background, this.width, this.height), g = function(f, r) {\n          var s, o, i = 0, l = \"\", n = Array.from(Array(10), function() {\n            return Array(10);\n          });\n          for (s in r)\n            for (var a in r[s]) {\n              var c = void 0;\n              c = s !== \"line\" ? '<a href=\"#'.concat(f, \"shape\").concat(i, '\">').concat(r[s][a].color, \" \").concat(s, \"</a>\") : '<a href=\"#'.concat(f, \"shape\").concat(i, '\">').concat(r[s][a].color, \" \").concat(s, \" midpoint</a>\"), n[r[s][a].loc.locY][r[s][a].loc.locX] ? n[r[s][a].loc.locY][r[s][a].loc.locX] = n[r[s][a].loc.locY][r[s][a].loc.locX] + \"  \" + c : n[r[s][a].loc.locY][r[s][a].loc.locX] = c, i++;\n            }\n          for (o in n) {\n            var p, j = \"<tr>\";\n            for (p in n[o])\n              j += \"<td>\", n[o][p] !== void 0 && (j += n[o][p]), j += \"</td>\";\n            l = l + j + \"</tr>\";\n          }\n          return l;\n        }(m, this.ingredients.shapes), h !== y.summary.innerHTML && (y.summary.innerHTML = h), g !== y.map.innerHTML && (y.map.innerHTML = g), u.details !== y.shapeDetails.innerHTML && (y.shapeDetails.innerHTML = u.details), this._accessibleOutputs[m] = y);\n      }, t = t.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.string.iterator\": 197 }], 262: [function(t, H, C) {\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.fill\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.number.to-fixed\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.fill\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.number.to-fixed\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function y(h) {\n        return function(g) {\n          if (Array.isArray(g)) {\n            for (var f = 0, r = new Array(g.length); f < g.length; f++)\n              r[f] = g[f];\n            return r;\n          }\n        }(h) || function(g) {\n          if (Symbol.iterator in Object(g) || Object.prototype.toString.call(g) === \"[object Arguments]\")\n            return Array.from(g);\n        }(h) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      function u(h, g, f) {\n        return g = Math.floor(h[0] / g * 10), h = Math.floor(h[1] / f * 10), g === 10 && (g -= 1), h === 10 && (h -= 1), { locX: g, locY: h };\n      }\n      m.default.prototype.textOutput = function(h) {\n        m.default._validateParameters(\"textOutput\", arguments), this._accessibleOutputs.text || (this._accessibleOutputs.text = !0, this._createOutput(\"textOutput\", \"Fallback\"), h === this.LABEL && (this._accessibleOutputs.textLabel = !0, this._createOutput(\"textOutput\", \"Label\")));\n      }, m.default.prototype.gridOutput = function(h) {\n        m.default._validateParameters(\"gridOutput\", arguments), this._accessibleOutputs.grid || (this._accessibleOutputs.grid = !0, this._createOutput(\"gridOutput\", \"Fallback\"), h === this.LABEL && (this._accessibleOutputs.gridLabel = !0, this._createOutput(\"gridOutput\", \"Label\")));\n      }, m.default.prototype._addAccsOutput = function() {\n        return this._accessibleOutputs || (this._accessibleOutputs = { text: !1, grid: !1, textLabel: !1, gridLabel: !1 }), this._accessibleOutputs.grid || this._accessibleOutputs.text;\n      }, m.default.prototype._createOutput = function(h, g) {\n        var f, r, s, o = this.canvas.id, i = (this.ingredients || (this.ingredients = { shapes: {}, colors: { background: \"white\", fill: \"white\", stroke: \"black\" }, pShapes: \"\", pBackground: \"\" }), this.dummyDOM || (this.dummyDOM = document.getElementById(o).parentNode), \"\");\n        g === \"Fallback\" ? (f = o + h, this.dummyDOM.querySelector(\"#\".concat(r = o + \"accessibleOutput\")) || (this.dummyDOM.querySelector(\"#\".concat(o, \"_Description\")) ? this.dummyDOM.querySelector(\"#\".concat(o, \"_Description\")).insertAdjacentHTML(\"afterend\", '<div id=\"'.concat(r, '\" role=\"region\" aria-label=\"Canvas Outputs\"></div>')) : this.dummyDOM.querySelector(\"#\".concat(o)).innerHTML = '<div id=\"'.concat(r, '\" role=\"region\" aria-label=\"Canvas Outputs\"></div>'))) : g === \"Label\" && (f = o + h + (i = g), this.dummyDOM.querySelector(\"#\".concat(r = o + \"accessibleOutput\" + g)) || (this.dummyDOM.querySelector(\"#\".concat(o, \"_Label\")) ? this.dummyDOM.querySelector(\"#\".concat(o, \"_Label\")) : this.dummyDOM.querySelector(\"#\".concat(o))).insertAdjacentHTML(\"afterend\", '<div id=\"'.concat(r, '\"></div>'))), this._accessibleOutputs[f] = {}, h === \"textOutput\" ? (i = \"#\".concat(o, \"gridOutput\").concat(i), s = '<div id=\"'.concat(f, '\">Text Output<div id=\"').concat(f, 'Summary\" aria-label=\"text output summary\"><p id=\"').concat(f, '_summary\"></p><ul id=\"').concat(f, '_list\"></ul></div><table id=\"').concat(f, '_shapeDetails\" summary=\"text output shape details\"></table></div>'), this.dummyDOM.querySelector(i) ? this.dummyDOM.querySelector(i).insertAdjacentHTML(\"beforebegin\", s) : this.dummyDOM.querySelector(\"#\".concat(r)).innerHTML = s, this._accessibleOutputs[f].list = this.dummyDOM.querySelector(\"#\".concat(f, \"_list\"))) : h === \"gridOutput\" && (i = \"#\".concat(o, \"textOutput\").concat(i), s = '<div id=\"'.concat(f, '\">Grid Output<p id=\"').concat(f, '_summary\" aria-label=\"grid output summary\"><table id=\"').concat(f, '_map\" summary=\"grid output content\"></table><ul id=\"').concat(f, '_shapeDetails\" aria-label=\"grid output shape details\"></ul></div>'), this.dummyDOM.querySelector(i) ? this.dummyDOM.querySelector(i).insertAdjacentHTML(\"afterend\", s) : this.dummyDOM.querySelector(\"#\".concat(r)).innerHTML = s, this._accessibleOutputs[f].map = this.dummyDOM.querySelector(\"#\".concat(f, \"_map\"))), this._accessibleOutputs[f].shapeDetails = this.dummyDOM.querySelector(\"#\".concat(f, \"_shapeDetails\")), this._accessibleOutputs[f].summary = this.dummyDOM.querySelector(\"#\".concat(f, \"_summary\"));\n      }, m.default.prototype._updateAccsOutput = function() {\n        var h = this.canvas.id;\n        JSON.stringify(this.ingredients.shapes) === this.ingredients.pShapes && this.ingredients.colors.background === this.ingredients.pBackground || (this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes), this._accessibleOutputs.text && this._updateTextOutput(h + \"textOutput\"), this._accessibleOutputs.grid && this._updateGridOutput(h + \"gridOutput\"), this._accessibleOutputs.textLabel && this._updateTextOutput(h + \"textOutputLabel\"), this._accessibleOutputs.gridLabel && this._updateGridOutput(h + \"gridOutputLabel\"));\n      }, m.default.prototype._accsBackground = function(h) {\n        this.ingredients.pShapes = JSON.stringify(this.ingredients.shapes), this.ingredients.pBackground = this.ingredients.colors.background, this.ingredients.shapes = {}, this.ingredients.colors.backgroundRGBA !== h && (this.ingredients.colors.backgroundRGBA = h, this.ingredients.colors.background = this._rgbColorName(h));\n      }, m.default.prototype._accsCanvasColors = function(h, g) {\n        h === \"fill\" ? this.ingredients.colors.fillRGBA !== g && (this.ingredients.colors.fillRGBA = g, this.ingredients.colors.fill = this._rgbColorName(g)) : h === \"stroke\" && this.ingredients.colors.strokeRGBA !== g && (this.ingredients.colors.strokeRGBA = g, this.ingredients.colors.stroke = this._rgbColorName(g));\n      }, m.default.prototype._accsOutput = function(h, g) {\n        h === \"ellipse\" && g[2] === g[3] ? h = \"circle\" : h === \"rectangle\" && g[2] === g[3] && (h = \"square\");\n        var f, r, s = {}, o = !0, i = function(n, a) {\n          var c;\n          return n = n === \"rectangle\" || n === \"ellipse\" || n === \"arc\" || n === \"circle\" || n === \"square\" ? (c = Math.round(a[0] + a[2] / 2), Math.round(a[1] + a[3] / 2)) : n === \"triangle\" ? (c = (a[0] + a[2] + a[4]) / 3, (a[1] + a[3] + a[5]) / 3) : n === \"quadrilateral\" ? (c = (a[0] + a[2] + a[4] + a[6]) / 4, (a[1] + a[3] + a[5] + a[7]) / 4) : n === \"line\" ? (c = (a[0] + a[2]) / 2, (a[1] + a[3]) / 2) : (c = a[0], a[1]), [c, n];\n        }(h, g);\n        if (h === \"line\" ? (s.color = this.ingredients.colors.stroke, s.length = Math.round(this.dist(g[0], g[1], g[2], g[3])), f = this._getPos(g[0], [1]), r = this._getPos(g[2], [3]), s.loc = u(i, this.width, this.height), s.pos = f === r ? \"at \".concat(f) : \"from \".concat(f, \" to \").concat(r)) : (h === \"point\" ? s.color = this.ingredients.colors.stroke : (s.color = this.ingredients.colors.fill, s.area = this._getArea(h, g)), s.pos = this._getPos.apply(this, y(i)), s.loc = u(i, this.width, this.height)), this.ingredients.shapes[h]) {\n          if (this.ingredients.shapes[h] !== [s]) {\n            for (var l in this.ingredients.shapes[h])\n              JSON.stringify(this.ingredients.shapes[h][l]) === JSON.stringify(s) && (o = !1);\n            o === !0 && this.ingredients.shapes[h].push(s);\n          }\n        } else\n          this.ingredients.shapes[h] = [s];\n      }, m.default.prototype._getPos = function(r, f) {\n        var r = new DOMPointReadOnly(r, f), f = this._renderer.isP3D ? new DOMMatrix(this._renderer.uMVMatrix.mat4) : this.drawingContext.getTransform(), r = r.matrixTransform(f), f = r.x, r = r.y, s = this.width * this._pixelDensity, o = this.height * this._pixelDensity;\n        return f < 0.4 * s ? r < 0.4 * o ? \"top left\" : 0.6 * o < r ? \"bottom left\" : \"mid left\" : 0.6 * s < f ? r < 0.4 * o ? \"top right\" : 0.6 * o < r ? \"bottom right\" : \"mid right\" : r < 0.4 * o ? \"top middle\" : 0.6 * o < r ? \"bottom middle\" : \"middle\";\n      }, m.default.prototype._getArea = function(h, g) {\n        var f, r, s = 0, o = (h === \"arc\" ? (s = (f = ((g[5] - g[4]) % (2 * Math.PI) + 2 * Math.PI) % (2 * Math.PI)) * g[2] * g[3] / 8, g[6] !== \"open\" && g[6] !== \"chord\" || (r = g[0], a = g[1], o = g[0] + g[2] / 2 * Math.cos(g[4]).toFixed(2), c = g[1] + g[3] / 2 * Math.sin(g[4]).toFixed(2), l = g[0] + g[2] / 2 * Math.cos(g[5]).toFixed(2), i = g[1] + g[3] / 2 * Math.sin(g[5]).toFixed(2), r = Math.abs(r * (c - i) + o * (i - a) + l * (a - c)) / 2, f > Math.PI ? s += r : s -= r)) : h === \"ellipse\" || h === \"circle\" ? s = 3.14 * g[2] / 2 * g[3] / 2 : h === \"line\" || h === \"point\" ? s = 0 : h === \"quadrilateral\" ? s = Math.abs((g[6] + g[0]) * (g[7] - g[1]) + (g[0] + g[2]) * (g[1] - g[3]) + (g[2] + g[4]) * (g[3] - g[5]) + (g[4] + g[6]) * (g[5] - g[7])) / 2 : h === \"rectangle\" || h === \"square\" ? s = g[2] * g[3] : h === \"triangle\" && (s = Math.abs(g[0] * (g[3] - g[5]) + g[2] * (g[5] - g[1]) + g[4] * (g[1] - g[3])) / 2), this.width * this._pixelDensity), i = this.height * this._pixelDensity, l = [new DOMPoint(0, 0), new DOMPoint(o, 0), new DOMPoint(o, i), new DOMPoint(0, i)], n = (this._renderer.isP3D ? new DOMMatrix(this._renderer.uMVMatrix.mat4) : this.drawingContext.getTransform()).inverse(), a = l.map(function(p) {\n          return p.matrixTransform(n);\n        }), c = Math.abs((a[3].x + a[0].x) * (a[3].y - a[0].y) + (a[0].x + a[1].x) * (a[0].y - a[1].y) + (a[1].x + a[2].x) * (a[1].y - a[2].y) + (a[2].x + a[3].x) * (a[2].y - a[3].y)) / 2;\n        return Math.round(100 * s / c);\n      }, t = m.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.fill\": 155, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.number.to-fixed\": 180, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.iterator\": 243 }], 263: [function(t, H, C) {\n      t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.concat\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t }, t.default.prototype._updateTextOutput = function(m) {\n        var y, u, h, g;\n        this.dummyDOM.querySelector(\"#\".concat(m, \"_summary\")) && (y = this._accessibleOutputs[m], h = function(f, r, s, o) {\n          return s = \"Your output is a, \".concat(s, \" by \").concat(o, \" pixels, \").concat(r, \" canvas containing the following\"), s = f === 1 ? \"\".concat(s, \" shape:\") : \"\".concat(s, \" \").concat(f, \" shapes:\"), s;\n        }((u = function(f, r) {\n          var s, o = \"\", i = 0;\n          for (s in r)\n            for (var l in r[s]) {\n              var n = '<li><a href=\"#'.concat(f, \"shape\").concat(i, '\">').concat(r[s][l].color, \" \").concat(s, \"</a>\");\n              s === \"line\" ? n += \", \".concat(r[s][l].pos, \", \").concat(r[s][l].length, \" pixels long.</li>\") : (n += \", at \".concat(r[s][l].pos), s !== \"point\" && (n += \", covering \".concat(r[s][l].area, \"% of the canvas\")), n += \".</li>\"), o += n, i++;\n            }\n          return { numShapes: i, listShapes: o };\n        }(m, this.ingredients.shapes)).numShapes, this.ingredients.colors.background, this.width, this.height), g = function(f, r) {\n          var s, o = \"\", i = 0;\n          for (s in r)\n            for (var l in r[s]) {\n              var n = '<tr id=\"'.concat(f, \"shape\").concat(i, '\"><th>').concat(r[s][l].color, \" \").concat(s, \"</th>\");\n              s === \"line\" ? n += \"<td>location = \".concat(r[s][l].pos, \"</td><td>length = \").concat(r[s][l].length, \" pixels</td></tr>\") : (n += \"<td>location = \".concat(r[s][l].pos, \"</td>\"), s !== \"point\" && (n += \"<td> area = \".concat(r[s][l].area, \"%</td>\")), n += \"</tr>\"), o += n, i++;\n            }\n          return o;\n        }(m, this.ingredients.shapes), h !== y.summary.innerHTML && (y.summary.innerHTML = h), u.listShapes !== y.list.innerHTML && (y.list.innerHTML = u.listShapes), g !== y.shapeDetails.innerHTML && (y.shapeDetails.innerHTML = g), this._accessibleOutputs[m] = y);\n      }, t = t.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152 }], 264: [function(t, H, C) {\n      var m = (m = t(\"./core/main\")) && m.__esModule ? m : { default: m };\n      t(\"./core/constants\"), t(\"./core/environment\"), t(\"./core/friendly_errors/stacktrace\"), t(\"./core/friendly_errors/validate_params\"), t(\"./core/friendly_errors/file_errors\"), t(\"./core/friendly_errors/fes_core\"), t(\"./core/friendly_errors/sketch_reader\"), t(\"./core/helpers\"), t(\"./core/legacy\"), t(\"./core/preload\"), t(\"./core/p5.Element\"), t(\"./core/p5.Graphics\"), t(\"./core/p5.Renderer\"), t(\"./core/p5.Renderer2D\"), t(\"./core/rendering\"), t(\"./core/shim\"), t(\"./core/structure\"), t(\"./core/transform\"), t(\"./core/shape/2d_primitives\"), t(\"./core/shape/attributes\"), t(\"./core/shape/curves\"), t(\"./core/shape/vertex\"), t(\"./accessibility/outputs\"), t(\"./accessibility/textOutput\"), t(\"./accessibility/gridOutput\"), t(\"./accessibility/color_namer\"), t(\"./color/color_conversion\"), t(\"./color/creating_reading\"), t(\"./color/p5.Color\"), t(\"./color/setting\"), t(\"./data/p5.TypedDict\"), t(\"./data/local_storage.js\"), t(\"./dom/dom\"), t(\"./accessibility/describe\"), t(\"./events/acceleration\"), t(\"./events/keyboard\"), t(\"./events/mouse\"), t(\"./events/touch\"), t(\"./image/filters\"), t(\"./image/image\"), t(\"./image/loading_displaying\"), t(\"./image/p5.Image\"), t(\"./image/pixels\"), t(\"./io/files\"), t(\"./io/p5.Table\"), t(\"./io/p5.TableRow\"), t(\"./io/p5.XML\"), t(\"./math/calculation\"), t(\"./math/math\"), t(\"./math/noise\"), t(\"./math/p5.Vector\"), t(\"./math/random\"), t(\"./math/trigonometry\"), t(\"./typography/attributes\"), t(\"./typography/loading_displaying\"), t(\"./typography/p5.Font\"), t(\"./utilities/array_functions\"), t(\"./utilities/conversion\"), t(\"./utilities/string_functions\"), t(\"./utilities/time_date\"), t(\"./webgl/3d_primitives\"), t(\"./webgl/interaction\"), t(\"./webgl/light\"), t(\"./webgl/loading\"), t(\"./webgl/material\"), t(\"./webgl/p5.Camera\"), t(\"./webgl/p5.DataArray\"), t(\"./webgl/p5.Geometry\"), t(\"./webgl/p5.Matrix\"), t(\"./webgl/p5.RendererGL.Immediate\"), t(\"./webgl/p5.RendererGL\"), t(\"./webgl/p5.RendererGL.Retained\"), t(\"./webgl/p5.Framebuffer\"), t(\"./webgl/p5.Shader\"), t(\"./webgl/p5.RenderBuffer\"), t(\"./webgl/p5.Texture\"), t(\"./webgl/text\"), t(\"./core/init\"), H.exports = m.default;\n    }, { \"./accessibility/color_namer\": 259, \"./accessibility/describe\": 260, \"./accessibility/gridOutput\": 261, \"./accessibility/outputs\": 262, \"./accessibility/textOutput\": 263, \"./color/color_conversion\": 265, \"./color/creating_reading\": 266, \"./color/p5.Color\": 267, \"./color/setting\": 268, \"./core/constants\": 269, \"./core/environment\": 270, \"./core/friendly_errors/fes_core\": 271, \"./core/friendly_errors/file_errors\": 272, \"./core/friendly_errors/sketch_reader\": 273, \"./core/friendly_errors/stacktrace\": 274, \"./core/friendly_errors/validate_params\": 275, \"./core/helpers\": 276, \"./core/init\": 277, \"./core/legacy\": 279, \"./core/main\": 280, \"./core/p5.Element\": 281, \"./core/p5.Graphics\": 282, \"./core/p5.Renderer\": 283, \"./core/p5.Renderer2D\": 284, \"./core/preload\": 285, \"./core/rendering\": 286, \"./core/shape/2d_primitives\": 287, \"./core/shape/attributes\": 288, \"./core/shape/curves\": 289, \"./core/shape/vertex\": 290, \"./core/shim\": 291, \"./core/structure\": 292, \"./core/transform\": 293, \"./data/local_storage.js\": 294, \"./data/p5.TypedDict\": 295, \"./dom/dom\": 296, \"./events/acceleration\": 297, \"./events/keyboard\": 298, \"./events/mouse\": 299, \"./events/touch\": 300, \"./image/filters\": 301, \"./image/image\": 302, \"./image/loading_displaying\": 303, \"./image/p5.Image\": 304, \"./image/pixels\": 305, \"./io/files\": 306, \"./io/p5.Table\": 307, \"./io/p5.TableRow\": 308, \"./io/p5.XML\": 309, \"./math/calculation\": 310, \"./math/math\": 311, \"./math/noise\": 312, \"./math/p5.Vector\": 313, \"./math/random\": 314, \"./math/trigonometry\": 315, \"./typography/attributes\": 316, \"./typography/loading_displaying\": 317, \"./typography/p5.Font\": 318, \"./utilities/array_functions\": 319, \"./utilities/conversion\": 320, \"./utilities/string_functions\": 321, \"./utilities/time_date\": 322, \"./webgl/3d_primitives\": 323, \"./webgl/interaction\": 325, \"./webgl/light\": 326, \"./webgl/loading\": 327, \"./webgl/material\": 328, \"./webgl/p5.Camera\": 329, \"./webgl/p5.DataArray\": 330, \"./webgl/p5.Framebuffer\": 331, \"./webgl/p5.Geometry\": 332, \"./webgl/p5.Matrix\": 333, \"./webgl/p5.RenderBuffer\": 334, \"./webgl/p5.RendererGL\": 337, \"./webgl/p5.RendererGL.Immediate\": 335, \"./webgl/p5.RendererGL.Retained\": 336, \"./webgl/p5.Shader\": 338, \"./webgl/p5.Texture\": 339, \"./webgl/text\": 340 }], 265: [function(t, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t }, t.default.ColorConversion = { _hsbaToHSLA: function(m) {\n        var y = m[0], u = m[1], h = m[2], g = (2 - u) * h / 2;\n        return g != 0 && (g == 1 ? u = 0 : g < 0.5 ? u /= 2 - u : u = u * h / (2 - 2 * g)), [y, u, g, m[3]];\n      }, _hsbaToRGBA: function(m) {\n        var y, u, h, g, f, r = 6 * m[0], s = m[1], o = m[2];\n        return s === 0 ? [o, o, o, m[3]] : (u = o * (1 - s), h = o * (1 - s * (r - (y = Math.floor(r)))), s = o * (1 - s * (1 + y - r)), r = y === 1 ? (g = h, f = o, u) : y === 2 ? (g = u, f = o, s) : y === 3 ? (g = u, f = h, o) : y === 4 ? (g = s, f = u, o) : y === 5 ? (g = o, f = u, h) : (g = o, f = s, u), [g, f, r, m[3]]);\n      }, _hslaToHSBA: function(m) {\n        var y = m[0], u = m[1], h = m[2], g = h < 0.5 ? (1 + u) * h : h + u - h * u;\n        return [y, u = 2 * (g - h) / g, g, m[3]];\n      }, _hslaToRGBA: function(m) {\n        var y, u = 6 * m[0], h = m[1], g = m[2];\n        return h === 0 ? [g, g, g, m[3]] : [(y = function(f, r, s) {\n          return f < 0 ? f += 6 : 6 <= f && (f -= 6), f < 1 ? r + (s - r) * f : f < 3 ? s : f < 4 ? r + (s - r) * (4 - f) : r;\n        })(2 + u, h = 2 * g - (g = g < 0.5 ? (1 + h) * g : g + h - g * h), g), y(u, h, g), y(u - 2, h, g), m[3]];\n      }, _rgbaToHSBA: function(m) {\n        var y, u, h = m[0], g = m[1], f = m[2], r = Math.max(h, g, f), s = r - Math.min(h, g, f);\n        return s == 0 ? u = y = 0 : (u = s / r, h === r ? y = (g - f) / s : g === r ? y = 2 + (f - h) / s : f === r && (y = 4 + (h - g) / s), y < 0 ? y += 6 : 6 <= y && (y -= 6)), [y / 6, u, r, m[3]];\n      }, _rgbaToHSLA: function(m) {\n        var y, u, h = m[0], g = m[1], f = m[2], r = Math.max(h, g, f), o = Math.min(h, g, f), s = r + o, o = r - o;\n        return o == 0 ? u = y = 0 : (u = s < 1 ? o / s : o / (2 - s), h === r ? y = (g - f) / o : g === r ? y = 2 + (f - h) / o : f === r && (y = 4 + (h - g) / o), y < 0 ? y += 6 : 6 <= y && (y -= 6)), [y / 6, u, s / 2, m[3]];\n      } }, t = t.default.ColorConversion, C.default = t;\n    }, { \"../core/main\": 280 }], 266: [function(t, H, C) {\n      function m(r) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(s) {\n          return typeof s;\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : typeof s;\n        })(r);\n      }\n      function y(r) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(s) {\n          return m(s);\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : m(s);\n        })(r);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.map\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (f = t(\"../core/main\")) && f.__esModule ? f : { default: f }, h = function(r) {\n        if (r && r.__esModule)\n          return r;\n        if (r === null || y(r) !== \"object\" && typeof r != \"function\")\n          return { default: r };\n        var s = g();\n        if (s && s.has(r))\n          return s.get(r);\n        var o, i = {}, l = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (o in r) {\n          var n;\n          Object.prototype.hasOwnProperty.call(r, o) && ((n = l ? Object.getOwnPropertyDescriptor(r, o) : null) && (n.get || n.set) ? Object.defineProperty(i, o, n) : i[o] = r[o]);\n        }\n        return i.default = r, s && s.set(r, i), i;\n      }(t(\"../core/constants\"));\n      function g() {\n        var r;\n        return typeof WeakMap != \"function\" ? null : (r = /* @__PURE__ */ new WeakMap(), g = function() {\n          return r;\n        }, r);\n      }\n      t(\"./p5.Color\"), t(\"../core/friendly_errors/validate_params\"), t(\"../core/friendly_errors/file_errors\"), t(\"../core/friendly_errors/fes_core\"), u.default.prototype.alpha = function(r) {\n        return u.default._validateParameters(\"alpha\", arguments), this.color(r)._getAlpha();\n      }, u.default.prototype.blue = function(r) {\n        return u.default._validateParameters(\"blue\", arguments), this.color(r)._getBlue();\n      }, u.default.prototype.brightness = function(r) {\n        return u.default._validateParameters(\"brightness\", arguments), this.color(r)._getBrightness();\n      }, u.default.prototype.color = function() {\n        for (var r, s = arguments.length, o = new Array(s), i = 0; i < s; i++)\n          o[i] = arguments[i];\n        return u.default._validateParameters(\"color\", o), o[0] instanceof u.default.Color ? o[0] : (r = Array.isArray(o[0]) ? o[0] : o, new u.default.Color(this, r));\n      }, u.default.prototype.green = function(r) {\n        return u.default._validateParameters(\"green\", arguments), this.color(r)._getGreen();\n      }, u.default.prototype.hue = function(r) {\n        return u.default._validateParameters(\"hue\", arguments), this.color(r)._getHue();\n      }, u.default.prototype.lerpColor = function(r, s, o) {\n        u.default._validateParameters(\"lerpColor\", arguments);\n        var i, l, n, a = this._colorMode, c = this._colorMaxes;\n        if (a === h.RGB)\n          l = r.levels.map(function(p) {\n            return p / 255;\n          }), n = s.levels.map(function(p) {\n            return p / 255;\n          });\n        else if (a === h.HSB)\n          r._getBrightness(), s._getBrightness(), l = r.hsba, n = s.hsba;\n        else {\n          if (a !== h.HSL)\n            throw new Error(\"\".concat(a, \" cannot be used for interpolation.\"));\n          r._getLightness(), s._getLightness(), l = r.hsla, n = s.hsla;\n        }\n        return o = Math.max(Math.min(o, 1), 0), this.lerp === void 0 && (this.lerp = function(p, j, T) {\n          return T * (j - p) + p;\n        }), a === h.RGB ? i = this.lerp(l[0], n[0], o) : (0.5 < Math.abs(l[0] - n[0]) && (l[0] > n[0] ? n[0] += 1 : l[0] += 1), 1 <= (i = this.lerp(l[0], n[0], o)) && --i), r = this.lerp(l[1], n[1], o), s = this.lerp(l[2], n[2], o), l = this.lerp(l[3], n[3], o), i *= c[a][0], r *= c[a][1], s *= c[a][2], l *= c[a][3], this.color(i, r, s, l);\n      }, u.default.prototype.lightness = function(r) {\n        return u.default._validateParameters(\"lightness\", arguments), this.color(r)._getLightness();\n      }, u.default.prototype.red = function(r) {\n        return u.default._validateParameters(\"red\", arguments), this.color(r)._getRed();\n      }, u.default.prototype.saturation = function(r) {\n        return u.default._validateParameters(\"saturation\", arguments), this.color(r)._getSaturation();\n      };\n      var f = u.default;\n      C.default = f;\n    }, { \"../core/constants\": 269, \"../core/friendly_errors/fes_core\": 271, \"../core/friendly_errors/file_errors\": 272, \"../core/friendly_errors/validate_params\": 275, \"../core/main\": 280, \"./p5.Color\": 267, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 267: [function(i, H, C) {\n      function m(p) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(j) {\n          return typeof j;\n        } : function(j) {\n          return j && typeof Symbol == \"function\" && j.constructor === Symbol && j !== Symbol.prototype ? \"symbol\" : typeof j;\n        })(p);\n      }\n      function y(p) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(j) {\n          return m(j);\n        } : function(j) {\n          return j && typeof Symbol == \"function\" && j.constructor === Symbol && j !== Symbol.prototype ? \"symbol\" : m(j);\n        })(p);\n      }\n      i(\"core-js/modules/es.symbol\"), i(\"core-js/modules/es.symbol.description\"), i(\"core-js/modules/es.symbol.iterator\"), i(\"core-js/modules/es.array.includes\"), i(\"core-js/modules/es.array.iterator\"), i(\"core-js/modules/es.array.join\"), i(\"core-js/modules/es.array.map\"), i(\"core-js/modules/es.array.slice\"), i(\"core-js/modules/es.object.get-own-property-descriptor\"), i(\"core-js/modules/es.object.to-string\"), i(\"core-js/modules/es.regexp.constructor\"), i(\"core-js/modules/es.regexp.exec\"), i(\"core-js/modules/es.regexp.to-string\"), i(\"core-js/modules/es.string.includes\"), i(\"core-js/modules/es.string.iterator\"), i(\"core-js/modules/es.string.trim\"), i(\"core-js/modules/es.weak-map\"), i(\"core-js/modules/web.dom-collections.iterator\"), i(\"core-js/modules/es.array.includes\"), i(\"core-js/modules/es.array.join\"), i(\"core-js/modules/es.array.map\"), i(\"core-js/modules/es.array.slice\"), i(\"core-js/modules/es.object.to-string\"), i(\"core-js/modules/es.regexp.constructor\"), i(\"core-js/modules/es.regexp.exec\"), i(\"core-js/modules/es.regexp.to-string\"), i(\"core-js/modules/es.string.includes\"), i(\"core-js/modules/es.string.trim\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = r(i(\"../core/main\")), h = function(p) {\n        if (p && p.__esModule)\n          return p;\n        if (p === null || y(p) !== \"object\" && typeof p != \"function\")\n          return { default: p };\n        var j = f();\n        if (j && j.has(p))\n          return j.get(p);\n        var T, _ = {}, S = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (T in p) {\n          var E;\n          Object.prototype.hasOwnProperty.call(p, T) && ((E = S ? Object.getOwnPropertyDescriptor(p, T) : null) && (E.get || E.set) ? Object.defineProperty(_, T, E) : _[T] = p[T]);\n        }\n        return _.default = p, j && j.set(p, _), _;\n      }(i(\"../core/constants\")), g = r(i(\"./color_conversion\"));\n      function f() {\n        var p;\n        return typeof WeakMap != \"function\" ? null : (p = /* @__PURE__ */ new WeakMap(), f = function() {\n          return p;\n        }, p);\n      }\n      function r(p) {\n        return p && p.__esModule ? p : { default: p };\n      }\n      function s(p, j) {\n        for (var T = 0; T < j.length; T++) {\n          var _ = j[T];\n          _.enumerable = _.enumerable || !1, _.configurable = !0, \"value\" in _ && (_.writable = !0), Object.defineProperty(p, _.key, _);\n        }\n      }\n      var o = { aliceblue: \"#f0f8ff\", antiquewhite: \"#faebd7\", aqua: \"#00ffff\", aquamarine: \"#7fffd4\", azure: \"#f0ffff\", beige: \"#f5f5dc\", bisque: \"#ffe4c4\", black: \"#000000\", blanchedalmond: \"#ffebcd\", blue: \"#0000ff\", blueviolet: \"#8a2be2\", brown: \"#a52a2a\", burlywood: \"#deb887\", cadetblue: \"#5f9ea0\", chartreuse: \"#7fff00\", chocolate: \"#d2691e\", coral: \"#ff7f50\", cornflowerblue: \"#6495ed\", cornsilk: \"#fff8dc\", crimson: \"#dc143c\", cyan: \"#00ffff\", darkblue: \"#00008b\", darkcyan: \"#008b8b\", darkgoldenrod: \"#b8860b\", darkgray: \"#a9a9a9\", darkgreen: \"#006400\", darkgrey: \"#a9a9a9\", darkkhaki: \"#bdb76b\", darkmagenta: \"#8b008b\", darkolivegreen: \"#556b2f\", darkorange: \"#ff8c00\", darkorchid: \"#9932cc\", darkred: \"#8b0000\", darksalmon: \"#e9967a\", darkseagreen: \"#8fbc8f\", darkslateblue: \"#483d8b\", darkslategray: \"#2f4f4f\", darkslategrey: \"#2f4f4f\", darkturquoise: \"#00ced1\", darkviolet: \"#9400d3\", deeppink: \"#ff1493\", deepskyblue: \"#00bfff\", dimgray: \"#696969\", dimgrey: \"#696969\", dodgerblue: \"#1e90ff\", firebrick: \"#b22222\", floralwhite: \"#fffaf0\", forestgreen: \"#228b22\", fuchsia: \"#ff00ff\", gainsboro: \"#dcdcdc\", ghostwhite: \"#f8f8ff\", gold: \"#ffd700\", goldenrod: \"#daa520\", gray: \"#808080\", green: \"#008000\", greenyellow: \"#adff2f\", grey: \"#808080\", honeydew: \"#f0fff0\", hotpink: \"#ff69b4\", indianred: \"#cd5c5c\", indigo: \"#4b0082\", ivory: \"#fffff0\", khaki: \"#f0e68c\", lavender: \"#e6e6fa\", lavenderblush: \"#fff0f5\", lawngreen: \"#7cfc00\", lemonchiffon: \"#fffacd\", lightblue: \"#add8e6\", lightcoral: \"#f08080\", lightcyan: \"#e0ffff\", lightgoldenrodyellow: \"#fafad2\", lightgray: \"#d3d3d3\", lightgreen: \"#90ee90\", lightgrey: \"#d3d3d3\", lightpink: \"#ffb6c1\", lightsalmon: \"#ffa07a\", lightseagreen: \"#20b2aa\", lightskyblue: \"#87cefa\", lightslategray: \"#778899\", lightslategrey: \"#778899\", lightsteelblue: \"#b0c4de\", lightyellow: \"#ffffe0\", lime: \"#00ff00\", limegreen: \"#32cd32\", linen: \"#faf0e6\", magenta: \"#ff00ff\", maroon: \"#800000\", mediumaquamarine: \"#66cdaa\", mediumblue: \"#0000cd\", mediumorchid: \"#ba55d3\", mediumpurple: \"#9370db\", mediumseagreen: \"#3cb371\", mediumslateblue: \"#7b68ee\", mediumspringgreen: \"#00fa9a\", mediumturquoise: \"#48d1cc\", mediumvioletred: \"#c71585\", midnightblue: \"#191970\", mintcream: \"#f5fffa\", mistyrose: \"#ffe4e1\", moccasin: \"#ffe4b5\", navajowhite: \"#ffdead\", navy: \"#000080\", oldlace: \"#fdf5e6\", olive: \"#808000\", olivedrab: \"#6b8e23\", orange: \"#ffa500\", orangered: \"#ff4500\", orchid: \"#da70d6\", palegoldenrod: \"#eee8aa\", palegreen: \"#98fb98\", paleturquoise: \"#afeeee\", palevioletred: \"#db7093\", papayawhip: \"#ffefd5\", peachpuff: \"#ffdab9\", peru: \"#cd853f\", pink: \"#ffc0cb\", plum: \"#dda0dd\", powderblue: \"#b0e0e6\", purple: \"#800080\", rebeccapurple: \"#663399\", red: \"#ff0000\", rosybrown: \"#bc8f8f\", royalblue: \"#4169e1\", saddlebrown: \"#8b4513\", salmon: \"#fa8072\", sandybrown: \"#f4a460\", seagreen: \"#2e8b57\", seashell: \"#fff5ee\", sienna: \"#a0522d\", silver: \"#c0c0c0\", skyblue: \"#87ceeb\", slateblue: \"#6a5acd\", slategray: \"#708090\", slategrey: \"#708090\", snow: \"#fffafa\", springgreen: \"#00ff7f\", steelblue: \"#4682b4\", tan: \"#d2b48c\", teal: \"#008080\", thistle: \"#d8bfd8\", tomato: \"#ff6347\", turquoise: \"#40e0d0\", violet: \"#ee82ee\", wheat: \"#f5deb3\", white: \"#ffffff\", whitesmoke: \"#f5f5f5\", yellow: \"#ffff00\", yellowgreen: \"#9acd32\" }, i = /\\s*/, c = /(\\d{1,3})/, l = /((?:\\d+(?:\\.\\d+)?)|(?:\\.\\d+))/, n = new RegExp(\"\".concat(l.source, \"%\")), a = { HEX3: /^#([a-f0-9])([a-f0-9])([a-f0-9])$/i, HEX4: /^#([a-f0-9])([a-f0-9])([a-f0-9])([a-f0-9])$/i, HEX6: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i, HEX8: /^#([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})([a-f0-9]{2})$/i, RGB: new RegExp([\"^rgb\\\\(\", c.source, \",\", c.source, \",\", c.source, \"\\\\)$\"].join(i.source), \"i\"), RGB_PERCENT: new RegExp([\"^rgb\\\\(\", n.source, \",\", n.source, \",\", n.source, \"\\\\)$\"].join(i.source), \"i\"), RGBA: new RegExp([\"^rgba\\\\(\", c.source, \",\", c.source, \",\", c.source, \",\", l.source, \"\\\\)$\"].join(i.source), \"i\"), RGBA_PERCENT: new RegExp([\"^rgba\\\\(\", n.source, \",\", n.source, \",\", n.source, \",\", l.source, \"\\\\)$\"].join(i.source), \"i\"), HSL: new RegExp([\"^hsl\\\\(\", c.source, \",\", n.source, \",\", n.source, \"\\\\)$\"].join(i.source), \"i\"), HSLA: new RegExp([\"^hsla\\\\(\", c.source, \",\", n.source, \",\", n.source, \",\", l.source, \"\\\\)$\"].join(i.source), \"i\"), HSB: new RegExp([\"^hsb\\\\(\", c.source, \",\", n.source, \",\", n.source, \"\\\\)$\"].join(i.source), \"i\"), HSBA: new RegExp([\"^hsba\\\\(\", c.source, \",\", n.source, \",\", n.source, \",\", l.source, \"\\\\)$\"].join(i.source), \"i\") }, c = (u.default.Color = function() {\n        function p(S, E) {\n          if (!(this instanceof p))\n            throw new TypeError(\"Cannot call a class as a function\");\n          if (this._storeModeAndMaxes(S._colorMode, S._colorMaxes), ![h.RGB, h.HSL, h.HSB].includes(this.mode))\n            throw new Error(\"\".concat(this.mode, \" is an invalid colorMode.\"));\n          this._array = p._parseInputs.apply(this, E), this._calculateLevels();\n        }\n        var j, T, _;\n        return j = p, _ = [{ key: \"_parseInputs\", value: function(S, E, A, x) {\n          var P, M = arguments.length, R = this.mode, L = this.maxes[R], F = [];\n          if (3 <= M) {\n            for (F[0] = S / L[0], F[1] = E / L[1], F[2] = A / L[2], F[3] = typeof x == \"number\" ? x / L[3] : 1, P = F.length - 1; 0 <= P; --P) {\n              var V = F[P];\n              V < 0 ? F[P] = 0 : 1 < V && (F[P] = 1);\n            }\n            return R === h.HSL ? g.default._hslaToRGBA(F) : R === h.HSB ? g.default._hsbaToRGBA(F) : F;\n          }\n          if (M === 1 && typeof S == \"string\") {\n            if (A = S.trim().toLowerCase(), o[A])\n              return p._parseInputs.call(this, o[A]);\n            if (a.HEX3.test(A))\n              return (F = a.HEX3.exec(A).slice(1).map(function(G) {\n                return parseInt(G + G, 16) / 255;\n              }))[3] = 1, F;\n            if (a.HEX6.test(A))\n              return (F = a.HEX6.exec(A).slice(1).map(function(G) {\n                return parseInt(G, 16) / 255;\n              }))[3] = 1, F;\n            if (a.HEX4.test(A))\n              return F = a.HEX4.exec(A).slice(1).map(function(G) {\n                return parseInt(G + G, 16) / 255;\n              });\n            if (a.HEX8.test(A))\n              return F = a.HEX8.exec(A).slice(1).map(function(G) {\n                return parseInt(G, 16) / 255;\n              });\n            if (a.RGB.test(A))\n              return (F = a.RGB.exec(A).slice(1).map(function(G) {\n                return G / 255;\n              }))[3] = 1, F;\n            if (a.RGB_PERCENT.test(A))\n              return (F = a.RGB_PERCENT.exec(A).slice(1).map(function(G) {\n                return parseFloat(G) / 100;\n              }))[3] = 1, F;\n            if (a.RGBA.test(A))\n              return F = a.RGBA.exec(A).slice(1).map(function(G, U) {\n                return U === 3 ? parseFloat(G) : G / 255;\n              });\n            if (a.RGBA_PERCENT.test(A))\n              return F = a.RGBA_PERCENT.exec(A).slice(1).map(function(G, U) {\n                return U === 3 ? parseFloat(G) : parseFloat(G) / 100;\n              });\n            if (a.HSL.test(A) ? (F = a.HSL.exec(A).slice(1).map(function(G, U) {\n              return U === 0 ? parseInt(G, 10) / 360 : parseInt(G, 10) / 100;\n            }))[3] = 1 : a.HSLA.test(A) && (F = a.HSLA.exec(A).slice(1).map(function(G, U) {\n              return U === 0 ? parseInt(G, 10) / 360 : U === 3 ? parseFloat(G) : parseInt(G, 10) / 100;\n            })), (F = F.map(function(G) {\n              return Math.max(Math.min(G, 1), 0);\n            })).length)\n              return g.default._hslaToRGBA(F);\n            if (a.HSB.test(A) ? (F = a.HSB.exec(A).slice(1).map(function(G, U) {\n              return U === 0 ? parseInt(G, 10) / 360 : parseInt(G, 10) / 100;\n            }))[3] = 1 : a.HSBA.test(A) && (F = a.HSBA.exec(A).slice(1).map(function(G, U) {\n              return U === 0 ? parseInt(G, 10) / 360 : U === 3 ? parseFloat(G) : parseInt(G, 10) / 100;\n            })), F.length) {\n              for (P = F.length - 1; 0 <= P; --P)\n                F[P] = Math.max(Math.min(F[P], 1), 0);\n              return g.default._hsbaToRGBA(F);\n            }\n            F = [1, 1, 1, 1];\n          } else {\n            if (M !== 1 && M !== 2 || typeof S != \"number\")\n              throw new Error(\"\".concat(arguments, \"is not a valid color representation.\"));\n            F[0] = S / L[2], F[1] = S / L[2], F[2] = S / L[2], F[3] = typeof E == \"number\" ? E / L[3] : 1, F = F.map(function(G) {\n              return Math.max(Math.min(G, 1), 0);\n            });\n          }\n          return F;\n        } }], (T = [{ key: \"toString\", value: function(S) {\n          var E = this.levels, A = this._array, x = A[3];\n          switch (S) {\n            case \"#rrggbb\":\n              return \"#\".concat(E[0] < 16 ? \"0\".concat(E[0].toString(16)) : E[0].toString(16), E[1] < 16 ? \"0\".concat(E[1].toString(16)) : E[1].toString(16), E[2] < 16 ? \"0\".concat(E[2].toString(16)) : E[2].toString(16));\n            case \"#rrggbbaa\":\n              return \"#\".concat(E[0] < 16 ? \"0\".concat(E[0].toString(16)) : E[0].toString(16), E[1] < 16 ? \"0\".concat(E[1].toString(16)) : E[1].toString(16), E[2] < 16 ? \"0\".concat(E[2].toString(16)) : E[2].toString(16), E[3] < 16 ? \"0\".concat(E[3].toString(16)) : E[3].toString(16));\n            case \"#rgb\":\n              return \"#\".concat(Math.round(15 * A[0]).toString(16), Math.round(15 * A[1]).toString(16), Math.round(15 * A[2]).toString(16));\n            case \"#rgba\":\n              return \"#\".concat(Math.round(15 * A[0]).toString(16), Math.round(15 * A[1]).toString(16), Math.round(15 * A[2]).toString(16), Math.round(15 * A[3]).toString(16));\n            case \"rgb\":\n              return \"rgb(\".concat(E[0], \", \", E[1], \", \", E[2], \")\");\n            case \"rgb%\":\n              return \"rgb(\".concat((100 * A[0]).toPrecision(3), \"%, \", (100 * A[1]).toPrecision(3), \"%, \", (100 * A[2]).toPrecision(3), \"%)\");\n            case \"rgba%\":\n              return \"rgba(\".concat((100 * A[0]).toPrecision(3), \"%, \", (100 * A[1]).toPrecision(3), \"%, \", (100 * A[2]).toPrecision(3), \"%, \", (100 * A[3]).toPrecision(3), \"%)\");\n            case \"hsb\":\n            case \"hsv\":\n              return this.hsba || (this.hsba = g.default._rgbaToHSBA(this._array)), \"hsb(\".concat(this.hsba[0] * this.maxes[h.HSB][0], \", \", this.hsba[1] * this.maxes[h.HSB][1], \", \", this.hsba[2] * this.maxes[h.HSB][2], \")\");\n            case \"hsb%\":\n            case \"hsv%\":\n              return this.hsba || (this.hsba = g.default._rgbaToHSBA(this._array)), \"hsb(\".concat((100 * this.hsba[0]).toPrecision(3), \"%, \", (100 * this.hsba[1]).toPrecision(3), \"%, \", (100 * this.hsba[2]).toPrecision(3), \"%)\");\n            case \"hsba\":\n            case \"hsva\":\n              return this.hsba || (this.hsba = g.default._rgbaToHSBA(this._array)), \"hsba(\".concat(this.hsba[0] * this.maxes[h.HSB][0], \", \", this.hsba[1] * this.maxes[h.HSB][1], \", \", this.hsba[2] * this.maxes[h.HSB][2], \", \", x, \")\");\n            case \"hsba%\":\n            case \"hsva%\":\n              return this.hsba || (this.hsba = g.default._rgbaToHSBA(this._array)), \"hsba(\".concat((100 * this.hsba[0]).toPrecision(3), \"%, \", (100 * this.hsba[1]).toPrecision(3), \"%, \", (100 * this.hsba[2]).toPrecision(3), \"%, \", (100 * x).toPrecision(3), \"%)\");\n            case \"hsl\":\n              return this.hsla || (this.hsla = g.default._rgbaToHSLA(this._array)), \"hsl(\".concat(this.hsla[0] * this.maxes[h.HSL][0], \", \", this.hsla[1] * this.maxes[h.HSL][1], \", \", this.hsla[2] * this.maxes[h.HSL][2], \")\");\n            case \"hsl%\":\n              return this.hsla || (this.hsla = g.default._rgbaToHSLA(this._array)), \"hsl(\".concat((100 * this.hsla[0]).toPrecision(3), \"%, \", (100 * this.hsla[1]).toPrecision(3), \"%, \", (100 * this.hsla[2]).toPrecision(3), \"%)\");\n            case \"hsla\":\n              return this.hsla || (this.hsla = g.default._rgbaToHSLA(this._array)), \"hsla(\".concat(this.hsla[0] * this.maxes[h.HSL][0], \", \", this.hsla[1] * this.maxes[h.HSL][1], \", \", this.hsla[2] * this.maxes[h.HSL][2], \", \", x, \")\");\n            case \"hsla%\":\n              return this.hsla || (this.hsla = g.default._rgbaToHSLA(this._array)), \"hsl(\".concat((100 * this.hsla[0]).toPrecision(3), \"%, \", (100 * this.hsla[1]).toPrecision(3), \"%, \", (100 * this.hsla[2]).toPrecision(3), \"%, \", (100 * x).toPrecision(3), \"%)\");\n            default:\n              return \"rgba(\".concat(E[0], \",\", E[1], \",\", E[2], \",\", x, \")\");\n          }\n        } }, { key: \"setRed\", value: function(S) {\n          this._array[0] = S / this.maxes[h.RGB][0], this._calculateLevels();\n        } }, { key: \"setGreen\", value: function(S) {\n          this._array[1] = S / this.maxes[h.RGB][1], this._calculateLevels();\n        } }, { key: \"setBlue\", value: function(S) {\n          this._array[2] = S / this.maxes[h.RGB][2], this._calculateLevels();\n        } }, { key: \"setAlpha\", value: function(S) {\n          this._array[3] = S / this.maxes[this.mode][3], this._calculateLevels();\n        } }, { key: \"_calculateLevels\", value: function() {\n          for (var S = this._array, E = this.levels = new Array(S.length), A = S.length - 1; 0 <= A; --A)\n            E[A] = Math.round(255 * S[A]);\n          this.hsla = null, this.hsba = null;\n        } }, { key: \"_getAlpha\", value: function() {\n          return this._array[3] * this.maxes[this.mode][3];\n        } }, { key: \"_storeModeAndMaxes\", value: function(S, E) {\n          this.mode = S, this.maxes = E;\n        } }, { key: \"_getMode\", value: function() {\n          return this.mode;\n        } }, { key: \"_getMaxes\", value: function() {\n          return this.maxes;\n        } }, { key: \"_getBlue\", value: function() {\n          return this._array[2] * this.maxes[h.RGB][2];\n        } }, { key: \"_getBrightness\", value: function() {\n          return this.hsba || (this.hsba = g.default._rgbaToHSBA(this._array)), this.hsba[2] * this.maxes[h.HSB][2];\n        } }, { key: \"_getGreen\", value: function() {\n          return this._array[1] * this.maxes[h.RGB][1];\n        } }, { key: \"_getHue\", value: function() {\n          return this.mode === h.HSB ? (this.hsba || (this.hsba = g.default._rgbaToHSBA(this._array)), this.hsba[0] * this.maxes[h.HSB][0]) : (this.hsla || (this.hsla = g.default._rgbaToHSLA(this._array)), this.hsla[0] * this.maxes[h.HSL][0]);\n        } }, { key: \"_getLightness\", value: function() {\n          return this.hsla || (this.hsla = g.default._rgbaToHSLA(this._array)), this.hsla[2] * this.maxes[h.HSL][2];\n        } }, { key: \"_getRed\", value: function() {\n          return this._array[0] * this.maxes[h.RGB][0];\n        } }, { key: \"_getSaturation\", value: function() {\n          return this.mode === h.HSB ? (this.hsba || (this.hsba = g.default._rgbaToHSBA(this._array)), this.hsba[1] * this.maxes[h.HSB][1]) : (this.hsla || (this.hsla = g.default._rgbaToHSLA(this._array)), this.hsla[1] * this.maxes[h.HSL][1]);\n        } }]) && s(j.prototype, T), _ && s(j, _), p;\n      }(), u.default.Color);\n      C.default = c;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"./color_conversion\": 265, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.constructor\": 191, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.trim\": 206, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 268: [function(t, H, C) {\n      function m(r) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(s) {\n          return typeof s;\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : typeof s;\n        })(r);\n      }\n      function y(r) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(s) {\n          return m(s);\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : m(s);\n        })(r);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.fill\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.fill\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (f = t(\"../core/main\")) && f.__esModule ? f : { default: f }, h = function(r) {\n        if (r && r.__esModule)\n          return r;\n        if (r === null || y(r) !== \"object\" && typeof r != \"function\")\n          return { default: r };\n        var s = g();\n        if (s && s.has(r))\n          return s.get(r);\n        var o, i = {}, l = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (o in r) {\n          var n;\n          Object.prototype.hasOwnProperty.call(r, o) && ((n = l ? Object.getOwnPropertyDescriptor(r, o) : null) && (n.get || n.set) ? Object.defineProperty(i, o, n) : i[o] = r[o]);\n        }\n        return i.default = r, s && s.set(r, i), i;\n      }(t(\"../core/constants\"));\n      function g() {\n        var r;\n        return typeof WeakMap != \"function\" ? null : (r = /* @__PURE__ */ new WeakMap(), g = function() {\n          return r;\n        }, r);\n      }\n      t(\"./p5.Color\"), u.default.prototype.beginClip = function() {\n        this._renderer.beginClip(0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {});\n      }, u.default.prototype.endClip = function() {\n        this._renderer.endClip();\n      }, u.default.prototype.clip = function(r, s) {\n        this._renderer.beginClip(s), r(), this._renderer.endClip(s);\n      }, u.default.prototype.background = function() {\n        var r;\n        return (r = this._renderer).background.apply(r, arguments), this;\n      }, u.default.prototype.clear = function() {\n        return this._renderer.clear((arguments.length <= 0 ? void 0 : arguments[0]) || 0, (arguments.length <= 1 ? void 0 : arguments[1]) || 0, (arguments.length <= 2 ? void 0 : arguments[2]) || 0, (arguments.length <= 3 ? void 0 : arguments[3]) || 0), this;\n      }, u.default.prototype.colorMode = function(r, s, o, i, l) {\n        return u.default._validateParameters(\"colorMode\", arguments), r !== h.RGB && r !== h.HSB && r !== h.HSL || (this._colorMode = r, r = this._colorMaxes[r], arguments.length === 2 ? (r[0] = s, r[1] = s, r[2] = s, r[3] = s) : arguments.length === 4 ? (r[0] = s, r[1] = o, r[2] = i) : arguments.length === 5 && (r[0] = s, r[1] = o, r[2] = i, r[3] = l)), this;\n      }, u.default.prototype.fill = function() {\n        var r;\n        return this._renderer._setProperty(\"_fillSet\", !0), this._renderer._setProperty(\"_doFill\", !0), (r = this._renderer).fill.apply(r, arguments), this;\n      }, u.default.prototype.noFill = function() {\n        return this._renderer._setProperty(\"_doFill\", !1), this;\n      }, u.default.prototype.noStroke = function() {\n        return this._renderer._setProperty(\"_doStroke\", !1), this;\n      }, u.default.prototype.stroke = function() {\n        var r;\n        return this._renderer._setProperty(\"_strokeSet\", !0), this._renderer._setProperty(\"_doStroke\", !0), (r = this._renderer).stroke.apply(r, arguments), this;\n      }, u.default.prototype.erase = function() {\n        return this._renderer.erase(0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 255, 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 255), this;\n      }, u.default.prototype.noErase = function() {\n        return this._renderer.noErase(), this;\n      };\n      var f = u.default;\n      C.default = f;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"./p5.Color\": 267, \"core-js/modules/es.array.fill\": 155, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 269: [function(t, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.QUADRATIC = C.LINEAR = C._CTX_MIDDLE = C._DEFAULT_LEADMULT = C._DEFAULT_TEXT_FILL = C.WORD = C.CHAR = C.BOLDITALIC = C.BOLD = C.ITALIC = C.NORMAL = C.BLUR = C.ERODE = C.DILATE = C.POSTERIZE = C.INVERT = C.OPAQUE = C.GRAY = C.THRESHOLD = C.BURN = C.DODGE = C.SOFT_LIGHT = C.HARD_LIGHT = C.OVERLAY = C.REPLACE = C.SCREEN = C.MULTIPLY = C.EXCLUSION = C.SUBTRACT = C.DIFFERENCE = C.LIGHTEST = C.DARKEST = C.ADD = C.REMOVE = C.BLEND = C.UP_ARROW = C.TAB = C.SHIFT = C.RIGHT_ARROW = C.RETURN = C.OPTION = C.LEFT_ARROW = C.ESCAPE = C.ENTER = C.DOWN_ARROW = C.DELETE = C.CONTROL = C.BACKSPACE = C.ALT = C.AUTO = C.HSL = C.HSB = C.RGB = C.MITER = C.BEVEL = C.ROUND = C.SQUARE = C.PROJECT = C.PIE = C.CHORD = C.OPEN = C.CLOSE = C.TESS = C.QUAD_STRIP = C.QUADS = C.TRIANGLE_STRIP = C.TRIANGLE_FAN = C.TRIANGLES = C.LINE_LOOP = C.LINE_STRIP = C.LINES = C.POINTS = C.BASELINE = C.BOTTOM = C.TOP = C.CENTER = C.LEFT = C.RIGHT = C.RADIUS = C.CORNERS = C.CORNER = C.RAD_TO_DEG = C.DEG_TO_RAD = C.RADIANS = C.DEGREES = C.TWO_PI = C.TAU = C.QUARTER_PI = C.PI = C.HALF_PI = C.WAIT = C.TEXT = C.MOVE = C.HAND = C.CROSS = C.ARROW = C.WEBGL2 = C.WEBGL = C.P2D = C.VERSION = void 0, C.RGBA = C.HALF_FLOAT = C.FLOAT = C.UNSIGNED_INT = C.UNSIGNED_BYTE = C.COVER = C.CONTAIN = C.FALLBACK = C.LABEL = C.AXES = C.GRID = C._DEFAULT_FILL = C._DEFAULT_STROKE = C.PORTRAIT = C.LANDSCAPE = C.SMOOTH = C.FLAT = C.MIRROR = C.CLAMP = C.REPEAT = C.NEAREST = C.IMAGE = C.IMMEDIATE = C.TEXTURE = C.FILL = C.STROKE = C.CURVE = C.BEZIER = void 0;\n      var m = Math.PI, y = (C.VERSION = \"1.9.4\", C.P2D = \"p2d\", C.WEBGL = \"webgl\", C.WEBGL2 = \"webgl2\", C.ARROW = \"default\", C.CROSS = \"crosshair\", C.HAND = \"pointer\", C.MOVE = \"move\", C.TEXT = \"text\", C.WAIT = \"wait\", m / 2), y = (C.HALF_PI = y, m), y = (C.PI = y, m / 4), y = (C.QUARTER_PI = y, 2 * m), y = (C.TAU = y, 2 * m), y = (C.TWO_PI = y, C.DEGREES = \"degrees\", C.RADIANS = \"radians\", m / 180), y = (C.DEG_TO_RAD = y, 180 / m);\n      C.RAD_TO_DEG = y, C.CORNER = \"corner\", C.CORNERS = \"corners\", C.RADIUS = \"radius\", C.RIGHT = \"right\", C.LEFT = \"left\", C.CENTER = \"center\", C.TOP = \"top\", C.BOTTOM = \"bottom\", C.BASELINE = \"alphabetic\", C.POINTS = 0, C.LINES = 1, C.LINE_STRIP = 3, C.LINE_LOOP = 2, C.TRIANGLES = 4, C.TRIANGLE_FAN = 6, C.TRIANGLE_STRIP = 5, C.QUADS = \"quads\", C.QUAD_STRIP = \"quad_strip\", C.TESS = \"tess\", C.CLOSE = \"close\", C.OPEN = \"open\", C.CHORD = \"chord\", C.PIE = \"pie\", C.PROJECT = \"square\", C.SQUARE = \"butt\", C.ROUND = \"round\", C.BEVEL = \"bevel\", C.MITER = \"miter\", C.RGB = \"rgb\", C.HSB = \"hsb\", C.HSL = \"hsl\", C.AUTO = \"auto\", C.ALT = 18, C.BACKSPACE = 8, C.CONTROL = 17, C.DELETE = 46, C.DOWN_ARROW = 40, C.ENTER = 13, C.ESCAPE = 27, C.LEFT_ARROW = 37, C.OPTION = 18, C.RETURN = 13, C.RIGHT_ARROW = 39, C.SHIFT = 16, C.TAB = 9, C.UP_ARROW = 38, C.BLEND = \"source-over\", C.REMOVE = \"destination-out\", C.ADD = \"lighter\", C.DARKEST = \"darken\", C.LIGHTEST = \"lighten\", C.DIFFERENCE = \"difference\", C.SUBTRACT = \"subtract\", C.EXCLUSION = \"exclusion\", C.MULTIPLY = \"multiply\", C.SCREEN = \"screen\", C.REPLACE = \"copy\", C.OVERLAY = \"overlay\", C.HARD_LIGHT = \"hard-light\", C.SOFT_LIGHT = \"soft-light\", C.DODGE = \"color-dodge\", C.BURN = \"color-burn\", C.THRESHOLD = \"threshold\", C.GRAY = \"gray\", C.OPAQUE = \"opaque\", C.INVERT = \"invert\", C.POSTERIZE = \"posterize\", C.DILATE = \"dilate\", C.ERODE = \"erode\", C.BLUR = \"blur\", C.NORMAL = \"normal\", C.ITALIC = \"italic\", C.BOLD = \"bold\", C.BOLDITALIC = \"bold italic\", C.CHAR = \"CHAR\", C.WORD = \"WORD\", C._DEFAULT_TEXT_FILL = \"#000000\", C._DEFAULT_LEADMULT = 1.25, C._CTX_MIDDLE = \"middle\", C.LINEAR = \"linear\", C.QUADRATIC = \"quadratic\", C.BEZIER = \"bezier\", C.CURVE = \"curve\", C.STROKE = \"stroke\", C.FILL = \"fill\", C.TEXTURE = \"texture\", C.IMMEDIATE = \"immediate\", C.IMAGE = \"image\", C.NEAREST = \"nearest\", C.REPEAT = \"repeat\", C.CLAMP = \"clamp\", C.MIRROR = \"mirror\", C.FLAT = \"flat\", C.SMOOTH = \"smooth\", C.LANDSCAPE = \"landscape\", C.PORTRAIT = \"portrait\", C._DEFAULT_STROKE = \"#000000\", C._DEFAULT_FILL = \"#FFFFFF\", C.GRID = \"grid\", C.AXES = \"axes\", C.LABEL = \"label\", C.FALLBACK = \"fallback\", C.CONTAIN = \"contain\", C.COVER = \"cover\", C.UNSIGNED_BYTE = \"unsigned-byte\", C.UNSIGNED_INT = \"unsigned-int\", C.FLOAT = \"float\", C.HALF_FLOAT = \"half-float\", C.RGBA = \"rgba\";\n    }, {}], 270: [function(t, H, C) {\n      function m(l) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(n) {\n          return typeof n;\n        } : function(n) {\n          return n && typeof Symbol == \"function\" && n.constructor === Symbol && n !== Symbol.prototype ? \"symbol\" : typeof n;\n        })(l);\n      }\n      function y(l) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(n) {\n          return m(n);\n        } : function(n) {\n          return n && typeof Symbol == \"function\" && n.constructor === Symbol && n !== Symbol.prototype ? \"symbol\" : m(n);\n        })(l);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.search\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.search\"), t(\"core-js/modules/es.string.split\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (h = t(\"./main\")) && h.__esModule ? h : { default: h }, h = function(l) {\n        if (l && l.__esModule)\n          return l;\n        if (l === null || y(l) !== \"object\" && typeof l != \"function\")\n          return { default: l };\n        var n = g();\n        if (n && n.has(l))\n          return n.get(l);\n        var a, c = {}, p = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (a in l) {\n          var j;\n          Object.prototype.hasOwnProperty.call(l, a) && ((j = p ? Object.getOwnPropertyDescriptor(l, a) : null) && (j.get || j.set) ? Object.defineProperty(c, a, j) : c[a] = l[a]);\n        }\n        return c.default = l, n && n.set(l, c), c;\n      }(t(\"./constants\"));\n      function g() {\n        var l;\n        return typeof WeakMap != \"function\" ? null : (l = /* @__PURE__ */ new WeakMap(), g = function() {\n          return l;\n        }, l);\n      }\n      var f = [h.ARROW, h.CROSS, h.HAND, h.MOVE, h.TEXT, h.WAIT], r = (u.default.prototype._frameRate = 0, u.default.prototype._lastFrameTime = window.performance.now(), u.default.prototype._targetFrameRate = 60, window.print), s = !1;\n      function o() {\n        return window.innerWidth || document.documentElement && document.documentElement.clientWidth || document.body && document.body.clientWidth || 0;\n      }\n      function i() {\n        return window.innerHeight || document.documentElement && document.documentElement.clientHeight || document.body && document.body.clientHeight || 0;\n      }\n      u.default.prototype.print = function() {\n        var l;\n        arguments.length ? (l = console).log.apply(l, arguments) : s || (r(), window.confirm(\"You just tried to print the webpage. Do you want to prevent this from running again?\") && (s = !0));\n      }, u.default.prototype.frameCount = 0, u.default.prototype.deltaTime = 0, u.default.prototype.focused = document.hasFocus(), u.default.prototype.cursor = function(l, n, a) {\n        var c, p = \"auto\", j = this._curElement.elt;\n        f.includes(l) ? p = l : typeof l == \"string\" && (c = \"\", n && a && typeof n == \"number\" && typeof a == \"number\" && (c = \"\".concat(n, \" \").concat(a)), p = l.substring(0, 7) === \"http://\" || l.substring(0, 8) === \"https://\" || /\\.(cur|jpg|jpeg|gif|png|CUR|JPG|JPEG|GIF|PNG)$/.test(l) ? \"url(\".concat(l, \") \").concat(c, \", auto\") : l), j.style.cursor = p;\n      }, u.default.prototype.frameRate = function(l) {\n        return u.default._validateParameters(\"frameRate\", arguments), typeof l != \"number\" || l < 0 ? this._frameRate : (this._setProperty(\"_targetFrameRate\", l), l === 0 && this._setProperty(\"_frameRate\", l), this);\n      }, u.default.prototype.getFrameRate = function() {\n        return this.frameRate();\n      }, u.default.prototype.setFrameRate = function(l) {\n        return this.frameRate(l);\n      }, u.default.prototype.getTargetFrameRate = function() {\n        return this._targetFrameRate;\n      }, u.default.prototype.noCursor = function() {\n        this._curElement.elt.style.cursor = \"none\";\n      }, u.default.prototype.webglVersion = h.P2D, u.default.prototype.displayWidth = screen.width, u.default.prototype.displayHeight = screen.height, u.default.prototype.windowWidth = o(), u.default.prototype.windowHeight = i(), u.default.prototype._onresize = function(l) {\n        this._setProperty(\"windowWidth\", o()), this._setProperty(\"windowHeight\", i());\n        var n = this._isGlobal ? window : this;\n        typeof n.windowResized != \"function\" || (n = n.windowResized(l)) === void 0 || n || l.preventDefault();\n      }, u.default.prototype.width = 0, u.default.prototype.height = 0, u.default.prototype.fullscreen = function(l) {\n        if (u.default._validateParameters(\"fullscreen\", arguments), l === void 0)\n          return document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement;\n        if (l) {\n          if (l = document.documentElement, !(document.fullscreenEnabled || document.webkitFullscreenEnabled || document.mozFullScreenEnabled || document.msFullscreenEnabled))\n            throw new Error(\"Fullscreen not enabled in this browser.\");\n          l.requestFullscreen ? l.requestFullscreen() : l.mozRequestFullScreen ? l.mozRequestFullScreen() : l.webkitRequestFullscreen ? l.webkitRequestFullscreen() : l.msRequestFullscreen && l.msRequestFullscreen();\n        } else\n          document.exitFullscreen ? document.exitFullscreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen ? document.webkitExitFullscreen() : document.msExitFullscreen && document.msExitFullscreen();\n      }, u.default.prototype.pixelDensity = function(l) {\n        var n;\n        return u.default._validateParameters(\"pixelDensity\", arguments), typeof l == \"number\" ? (l !== this._pixelDensity && (this._pixelDensity = this._maxAllowedPixelDimensions = l), (n = this).resizeCanvas(this.width, this.height, !0)) : n = this._pixelDensity, n;\n      }, u.default.prototype.displayDensity = function() {\n        return window.devicePixelRatio;\n      }, u.default.prototype.getURL = function() {\n        return location.href;\n      }, u.default.prototype.getURLPath = function() {\n        return location.pathname.split(\"/\").filter(function(l) {\n          return l !== \"\";\n        });\n      }, u.default.prototype.getURLParams = function() {\n        for (var l, n = /[?&]([^&=]+)(?:[&=])([^&=]+)/gim, a = {}; (l = n.exec(location.search)) != null; )\n          l.index === n.lastIndex && n.lastIndex++, a[l[1]] = l[2];\n        return a;\n      }, t = u.default, C.default = t;\n    }, { \"./constants\": 269, \"./main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.filter\": 156, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.search\": 202, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 271: [function(t, H, C) {\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.some\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.get-own-property-names\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.constructor\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.starts-with\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.some\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.get-own-property-names\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.constructor\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.starts-with\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (f = t(\"../main\")) && f.__esModule ? f : { default: f };\n      t(\"../internationalization\");\n      function y(r, s) {\n        s = s || console.log.bind(console), u || g(), u.some(function(o) {\n          var i;\n          if (r.message && r.message.match(\"\\\\W?\".concat(o.name, \"\\\\W\")) !== null)\n            return i = o.type === \"function\" ? \"\".concat(o.name, \"()\") : o.name, s(\"Did you just try to use p5.js's \".concat(i, \" \").concat(o.type, `? If so, you may want to move it into your sketch's setup() function.\n\nFor more details, see: `).concat(h)), !0;\n        });\n      }\n      var u = null, g = null, h = (m.default._friendlyError = m.default._checkForUserDefinedFunctions = m.default._fesErrorMonitor = function() {\n      }, u = null, \"https://github.com/processing/p5.js/wiki/p5.js-overview#why-cant-i-assign-variables-using-p5-functions-and-variables-before-setup\"), g = function() {\n        function r(o) {\n          return Object.getOwnPropertyNames(o).filter(function(i) {\n            return i[0] !== \"_\" && !(i in s) && (s[i] = !0);\n          }).map(function(i) {\n            var l = typeof o[i] == \"function\" ? \"function\" : i === i.toUpperCase() ? \"constant\" : \"variable\";\n            return { name: i, type: l };\n          });\n        }\n        var s = {};\n        (u = [].concat(r(m.default.prototype), r(t(\"../constants\")))).sort(function(o, i) {\n          return i.name.length - o.name.length;\n        });\n      }, f = (m.default.prototype._helpForMisusedAtTopLevelCode = y, document.readyState !== \"complete\" && (window.addEventListener(\"error\", y, !1), window.addEventListener(\"load\", function() {\n        window.removeEventListener(\"error\", y, !1);\n      })), m.default);\n      C.default = f;\n    }, { \"../constants\": 269, \"../internationalization\": 278, \"../main\": 280, \"./browser_errors\": void 0, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.filter\": 156, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.array.some\": 169, \"core-js/modules/es.function.name\": 173, \"core-js/modules/es.object.assign\": 181, \"core-js/modules/es.object.get-own-property-names\": 184, \"core-js/modules/es.object.keys\": 186, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.constructor\": 191, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.match\": 198, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.string.starts-with\": 204, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.for-each\": 242, \"core-js/modules/web.dom-collections.iterator\": 243 }], 272: [function(t, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (m = t(\"../main\")) && m.__esModule ? m : { default: m };\n      t(\"../internationalization\"), m.default._friendlyFileLoadError = function() {\n      }, t = m.default, C.default = t;\n    }, { \"../internationalization\": 278, \"../main\": 280 }], 273: [function(t, H, C) {\n      function m(s) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(o) {\n          return typeof o;\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n        })(s);\n      }\n      function y(s) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(o) {\n          return m(o);\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : m(o);\n        })(s);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.constructor\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.trim\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.regexp.constructor\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.trim\"), t(\"core-js/modules/web.dom-collections.for-each\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = f(t(\"../main\"));\n      t(\"../internationalization\"), g(t(\"../constants\"));\n      function h() {\n        var s;\n        return typeof WeakMap != \"function\" ? null : (s = /* @__PURE__ */ new WeakMap(), h = function() {\n          return s;\n        }, s);\n      }\n      function g(s) {\n        if (s && s.__esModule)\n          return s;\n        if (s === null || y(s) !== \"object\" && typeof s != \"function\")\n          return { default: s };\n        var o = h();\n        if (o && o.has(s))\n          return o.get(s);\n        var i, l, n = {}, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (i in s)\n          Object.prototype.hasOwnProperty.call(s, i) && ((l = a ? Object.getOwnPropertyDescriptor(s, i) : null) && (l.get || l.set) ? Object.defineProperty(n, i, l) : n[i] = s[i]);\n        return n.default = s, o && o.set(s, n), n;\n      }\n      function f(s) {\n        return s && s.__esModule ? s : { default: s };\n      }\n      u.default._fesCodeReader = function() {\n      };\n      var r = u.default;\n      C.default = r;\n    }, { \"../constants\": 269, \"../internationalization\": 278, \"../main\": 280, \"core-js/modules/es.array.filter\": 156, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.keys\": 186, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.constructor\": 191, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.match\": 198, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.string.trim\": 206, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.for-each\": 242, \"core-js/modules/web.dom-collections.iterator\": 243 }], 274: [function(t, H, C) {\n      t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"../main\")) && t.__esModule ? t : { default: t };\n      function m() {\n        var y = /(^|@)\\S+:\\d+/, u = /^\\s*at .*(\\S+:\\d+|\\(native\\))/m, h = /^(eval@)?(\\[native code])?$/;\n        return { parse: function(g) {\n          return g.stacktrace !== void 0 || g[\"opera#sourceloc\"] !== void 0 ? this.parseOpera(g) : g.stack && g.stack.match(u) ? this.parseV8OrIE(g) : g.stack ? this.parseFFOrSafari(g) : void 0;\n        }, extractLocation: function(g) {\n          return g.indexOf(\":\") === -1 ? [g] : [(g = /(.+?)(?::(\\d+))?(?::(\\d+))?$/.exec(g.replace(/[()]/g, \"\")))[1], g[2] || void 0, g[3] || void 0];\n        }, parseV8OrIE: function(g) {\n          return g.stack.split(`\n`).filter(function(f) {\n            return !!f.match(u);\n          }, this).map(function(f) {\n            var r = (f = -1 < f.indexOf(\"(eval \") ? f.replace(/eval code/g, \"eval\").replace(/(\\(eval at [^()]*)|(\\),.*$)/g, \"\") : f).replace(/^\\s+/, \"\").replace(/\\(eval code/g, \"(\"), s = r.match(/ (\\((.+):(\\d+):(\\d+)\\)$)/), r = (r = s ? r.replace(s[0], \"\") : r).split(/\\s+/).slice(1), s = this.extractLocation(s ? s[1] : r.pop());\n            return { functionName: r.join(\" \") || void 0, fileName: -1 < [\"eval\", \"<anonymous>\"].indexOf(s[0]) ? void 0 : s[0], lineNumber: s[1], columnNumber: s[2], source: f };\n          }, this);\n        }, parseFFOrSafari: function(g) {\n          return g.stack.split(`\n`).filter(function(f) {\n            return !f.match(h);\n          }, this).map(function(f) {\n            var r, s;\n            return (f = -1 < f.indexOf(\" > eval\") ? f.replace(/ line (\\d+)(?: > eval line \\d+)* > eval:\\d+:\\d+/g, \":$1\") : f).indexOf(\"@\") === -1 && f.indexOf(\":\") === -1 ? { functionName: f } : { functionName: (s = f.match(r = /((.*\".+\"[^@]*)?[^@]*)(?:@)/)) && s[1] ? s[1] : void 0, fileName: (s = this.extractLocation(f.replace(r, \"\")))[0], lineNumber: s[1], columnNumber: s[2], source: f };\n          }, this);\n        }, parseOpera: function(g) {\n          return !g.stacktrace || -1 < g.message.indexOf(`\n`) && g.message.split(`\n`).length > g.stacktrace.split(`\n`).length ? this.parseOpera9(g) : g.stack ? this.parseOpera11(g) : this.parseOpera10(g);\n        }, parseOpera9: function(g) {\n          for (var f = /Line (\\d+).*script (?:in )?(\\S+)/i, r = g.message.split(`\n`), s = [], o = 2, i = r.length; o < i; o += 2) {\n            var l = f.exec(r[o]);\n            l && s.push({ fileName: l[2], lineNumber: l[1], source: r[o] });\n          }\n          return s;\n        }, parseOpera10: function(g) {\n          for (var f = /Line (\\d+).*script (?:in )?(\\S+)(?:: In function (\\S+))?$/i, r = g.stacktrace.split(`\n`), s = [], o = 0, i = r.length; o < i; o += 2) {\n            var l = f.exec(r[o]);\n            l && s.push({ functionName: l[3] || void 0, fileName: l[2], lineNumber: l[1], source: r[o] });\n          }\n          return s;\n        }, parseOpera11: function(g) {\n          return g.stack.split(`\n`).filter(function(f) {\n            return !!f.match(y) && !f.match(/^Error created at/);\n          }, this).map(function(f) {\n            var r, o = f.split(\"@\"), s = this.extractLocation(o.pop()), o = o.shift() || \"\";\n            return { functionName: o.replace(/<anonymous function(: (\\w+))?>/, \"$2\").replace(/\\([^)]*\\)/g, \"\") || void 0, args: (r = o.match(/\\(([^)]*)\\)/) ? o.replace(/^[^(]+\\(([^)]*)\\)$/, \"$1\") : r) === void 0 || r === \"[arguments not available]\" ? void 0 : r.split(\",\"), fileName: s[0], lineNumber: s[1], columnNumber: s[2], source: f };\n          }, this);\n        } };\n      }\n      t.default._getErrorStackParser = function() {\n        return new m();\n      }, t = t.default, C.default = t;\n    }, { \"../main\": 280, \"core-js/modules/es.array.filter\": 156, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.string.match\": 198, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.string.split\": 203 }], 275: [function(t, H, C) {\n      function m(g) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(f) {\n          return typeof f;\n        } : function(f) {\n          return f && typeof Symbol == \"function\" && f.constructor === Symbol && f !== Symbol.prototype ? \"symbol\" : typeof f;\n        })(g);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.last-index-of\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.map\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.get-prototype-of\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.reflect.construct\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.set\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.last-index-of\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.set\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var y = (y = t(\"../main\")) && y.__esModule ? y : { default: y };\n      (function(g) {\n        if (!(g && g.__esModule) && !(g === null || h(g) !== \"object\" && typeof g != \"function\")) {\n          var f = u();\n          if (f && f.has(g))\n            return f.get(g);\n          var r, s = {}, o = Object.defineProperty && Object.getOwnPropertyDescriptor;\n          for (r in g) {\n            var i;\n            Object.prototype.hasOwnProperty.call(g, r) && ((i = o ? Object.getOwnPropertyDescriptor(g, r) : null) && (i.get || i.set) ? Object.defineProperty(s, r, i) : s[r] = g[r]);\n          }\n          s.default = g, f && f.set(g, s);\n        }\n      })(t(\"../constants\")), t(\"../internationalization\");\n      function u() {\n        var g;\n        return typeof WeakMap != \"function\" ? null : (g = /* @__PURE__ */ new WeakMap(), u = function() {\n          return g;\n        }, g);\n      }\n      function h(g) {\n        return (h = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(f) {\n          return m(f);\n        } : function(f) {\n          return f && typeof Symbol == \"function\" && f.constructor === Symbol && f !== Symbol.prototype ? \"symbol\" : m(f);\n        })(g);\n      }\n      y.default._validateParameters = y.default._clearValidateParamsCache = function() {\n      }, t = y.default, C.default = t;\n    }, { \"../../../docs/parameterData.json\": void 0, \"../constants\": 269, \"../internationalization\": 278, \"../main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.last-index-of\": 166, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.function.name\": 173, \"core-js/modules/es.map\": 174, \"core-js/modules/es.number.constructor\": 178, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.get-prototype-of\": 185, \"core-js/modules/es.object.keys\": 186, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.reflect.construct\": 189, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.set\": 194, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.for-each\": 242, \"core-js/modules/web.dom-collections.iterator\": 243 }], 276: [function(t, H, C) {\n      function m(g) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(f) {\n          return typeof f;\n        } : function(f) {\n          return f && typeof Symbol == \"function\" && f.constructor === Symbol && f !== Symbol.prototype ? \"symbol\" : typeof f;\n        })(g);\n      }\n      function y(g) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(f) {\n          return m(f);\n        } : function(f) {\n          return f && typeof Symbol == \"function\" && f.constructor === Symbol && f !== Symbol.prototype ? \"symbol\" : m(f);\n        })(g);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = function(g) {\n        if (g && g.__esModule)\n          return g;\n        if (g === null || y(g) !== \"object\" && typeof g != \"function\")\n          return { default: g };\n        var f = h();\n        if (f && f.has(g))\n          return f.get(g);\n        var r, s = {}, o = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (r in g) {\n          var i;\n          Object.prototype.hasOwnProperty.call(g, r) && ((i = o ? Object.getOwnPropertyDescriptor(g, r) : null) && (i.get || i.set) ? Object.defineProperty(s, r, i) : s[r] = g[r]);\n        }\n        return s.default = g, f && f.set(g, s), s;\n      }(t(\"./constants\"));\n      function h() {\n        var g;\n        return typeof WeakMap != \"function\" ? null : (g = /* @__PURE__ */ new WeakMap(), h = function() {\n          return g;\n        }, g);\n      }\n      C.default = { modeAdjust: function(g, f, r, s, o) {\n        return o === u.CORNER ? { x: g, y: f, w: r, h: s } : o === u.CORNERS ? { x: g, y: f, w: r - g, h: s - f } : o === u.RADIUS ? { x: g - r, y: f - s, w: 2 * r, h: 2 * s } : o === u.CENTER ? { x: g - 0.5 * r, y: f - 0.5 * s, w: r, h: s } : void 0;\n      } };\n    }, { \"./constants\": 269, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 277: [function(t, H, C) {\n      t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\");\n      var m = (y = t(\"../core/main\")) && y.__esModule ? y : { default: y };\n      t(\"./internationalization\");\n      var y = Promise.resolve();\n      Promise.all([new Promise(function(u, h) {\n        document.readyState === \"complete\" ? u() : window.addEventListener(\"load\", u, !1);\n      }), y]).then(function() {\n        window._setupDone !== void 0 ? console.warn(\"p5.js seems to have been imported multiple times. Please remove the duplicate import\") : window.mocha || (window.setup && typeof window.setup == \"function\" || window.draw && typeof window.draw == \"function\") && !m.default.instance && new m.default();\n      });\n    }, { \"../core/main\": 280, \"./internationalization\": 278, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.promise\": 188, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/web.dom-collections.iterator\": 243 }], 278: [function(t, H, C) {\n      t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.setTranslatorLanguage = C.currentTranslatorLanguage = C.availableTranslatorLanguages = C.initialize = C.translator = void 0;\n      var m, y, u = g(t(\"i18next\")), h = g(t(\"i18next-browser-languagedetector\"));\n      function g(s) {\n        return s && s.__esModule ? s : { default: s };\n      }\n      function f(s, o) {\n        for (var i = 0; i < o.length; i++) {\n          var l = o[i];\n          l.enumerable = l.enumerable || !1, l.configurable = !0, \"value\" in l && (l.writable = !0), Object.defineProperty(s, l.key, l);\n        }\n      }\n      var r = function() {\n        function s(l, n) {\n          if (!(this instanceof s))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this.init(l, n);\n        }\n        var o, i;\n        return o = s, (i = [{ key: \"fetchWithTimeout\", value: function(l, n) {\n          var a = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 2e3;\n          return Promise.race([fetch(l, n), new Promise(function(c, p) {\n            return setTimeout(function() {\n              return p(new Error(\"timeout\"));\n            }, a);\n          })]);\n        } }, { key: \"init\", value: function(l) {\n          var n = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {};\n          this.services = l, this.options = n;\n        } }, { key: \"read\", value: function(l, n, a) {\n          var c = this.options.loadPath;\n          l === this.options.fallback ? a(null, m[l][n]) : y.includes(l) ? (c = this.services.interpolator.interpolate(c, { lng: l, ns: n }), this.loadUrl(c, a)) : a(\"Not found\", !1);\n        } }, { key: \"loadUrl\", value: function(l, n) {\n          this.fetchWithTimeout(l).then(function(a) {\n            if (a.ok)\n              return a.json();\n            throw new Error(\"failed loading \".concat(l));\n          }, function() {\n            throw new Error(\"failed loading \".concat(l));\n          }).then(function(a) {\n            return n(null, a);\n          }).catch(n);\n        } }]) && f(o.prototype, i), s;\n      }();\n      r.type = \"backend\", C.translator = function(s, o) {\n        console.debug(\"p5.js translator called before translations were loaded\"), u.default.t(s, o);\n      }, C.initialize = function() {\n        return u.default.use(h.default).use(r).init({ fallbackLng: \"en\", nestingPrefix: \"$tr(\", nestingSuffix: \")\", defaultNS: \"translation\", returnEmptyString: !1, interpolation: { escapeValue: !1 }, detection: { checkWhitelist: !1, order: [\"querystring\", \"navigator\", \"htmlTag\", \"path\", \"subdomain\"], caches: [] }, backend: { fallback: \"en\", loadPath: \"https://cdn.jsdelivr.net/npm/p5/translations/{{lng}}/{{ns}}.json\" }, partialBundledLanguages: !0, resources: m }).then(function(s) {\n          C.translator = s;\n        }, function(s) {\n          return console.debug(\"Translations failed to load (\".concat(s, \")\"));\n        });\n      }, C.availableTranslatorLanguages = function() {\n        return u.default.languages;\n      }, C.currentTranslatorLanguage = function(s) {\n        return u.default.language;\n      }, C.setTranslatorLanguage = function(s) {\n        return u.default.changeLanguage(s || void 0, function(o) {\n          return console.debug(\"Translations failed to load (\".concat(o, \")\"));\n        });\n      };\n    }, { \"../../translations\": void 0, \"../../translations/dev\": void 0, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.object.keys\": 186, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.promise\": 188, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.split\": 203, \"core-js/modules/web.dom-collections.iterator\": 243, i18next: 3, \"i18next-browser-languagedetector\": 3 }], 279: [function(t, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"./main\")) && t.__esModule ? t : { default: t }, t.default.prototype.pushStyle = function() {\n        throw new Error(\"pushStyle() not used, see push()\");\n      }, t.default.prototype.popStyle = function() {\n        throw new Error(\"popStyle() not used, see pop()\");\n      }, t.default.prototype.popMatrix = function() {\n        throw new Error(\"popMatrix() not used, see pop()\");\n      }, t.default.prototype.pushMatrix = function() {\n        throw new Error(\"pushMatrix() not used, see push()\");\n      }, t = t.default, C.default = t;\n    }, { \"./main\": 280 }], 280: [function(t, H, C) {\n      function m(s) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(o) {\n          return typeof o;\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n        })(s);\n      }\n      function y(s) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(o) {\n          return m(o);\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : m(o);\n        })(s);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.get-own-property-names\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.object.get-own-property-names\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t(\"./shim\");\n      var u = function(s) {\n        if (s && s.__esModule)\n          return s;\n        if (s === null || y(s) !== \"object\" && typeof s != \"function\")\n          return { default: s };\n        var o = h();\n        if (o && o.has(s))\n          return o.get(s);\n        var i, l = {}, n = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (i in s) {\n          var a;\n          Object.prototype.hasOwnProperty.call(s, i) && ((a = n ? Object.getOwnPropertyDescriptor(s, i) : null) && (a.get || a.set) ? Object.defineProperty(l, i, a) : l[i] = s[i]);\n        }\n        return l.default = s, o && o.set(s, l), l;\n      }(t(\"./constants\"));\n      function h() {\n        var s;\n        return typeof WeakMap != \"function\" ? null : (s = /* @__PURE__ */ new WeakMap(), h = function() {\n          return s;\n        }, s);\n      }\n      function g(s, o) {\n        for (var i = 0; i < o.length; i++) {\n          var l = o[i];\n          l.enumerable = l.enumerable || !1, l.configurable = !0, \"value\" in l && (l.writable = !0), Object.defineProperty(s, l.key, l);\n        }\n      }\n      var f, r = function() {\n        function s(l, c) {\n          var a = this;\n          if (!(this instanceof s))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this._setupDone = !1, this._preloadDone = !1, this._pixelDensity = Math.ceil(window.devicePixelRatio) || 1, this._maxAllowedPixelDimensions = 0, this._userNode = c, this._curElement = null, this._elements = [], this._glAttributes = null, this._requestAnimId = 0, this._preloadCount = 0, this._isGlobal = !1, this._loop = !0, this._startListener = null, this._initializeInstanceVariables(), this._defaultCanvasSize = { width: 100, height: 100 }, this._events = { mousemove: null, mousedown: null, mouseup: null, dragend: null, dragover: null, click: null, dblclick: null, mouseover: null, mouseout: null, keydown: null, keyup: null, keypress: null, touchstart: null, touchmove: null, touchend: null, resize: null, blur: null }, this._millisStart = -1, this._recording = !1, this.touchstart = !1, this.touchend = !1, this._lcg_random_state = null, this._gaussian_previous = !1, this._events.wheel = null, this._loadingScreenId = \"p5_loading\", this._registeredMethods = {};\n          var c = Object.getOwnPropertyNames(s.prototype._registeredMethods), p = !0, j = !1, T = void 0;\n          try {\n            for (var _, S = c[Symbol.iterator](); !(p = (_ = S.next()).done); p = !0) {\n              var E = _.value;\n              this._registeredMethods[E] = s.prototype._registeredMethods[E].slice();\n            }\n          } catch (G) {\n            j = !0, T = G;\n          } finally {\n            try {\n              p || S.return == null || S.return();\n            } finally {\n              if (j)\n                throw T;\n            }\n          }\n          window.DeviceOrientationEvent && (this._events.deviceorientation = null), window.DeviceMotionEvent && !window._isNodeWebkit && (this._events.devicemotion = null), s.prototype.callRegisteredHooksFor = function(G) {\n            var U = this || s.prototype, W = this._isGlobal ? window : this;\n            if (U._registeredMethods.hasOwnProperty(G)) {\n              var U = U._registeredMethods[G], X = !0, G = !1, ne = void 0;\n              try {\n                for (var b, O = U[Symbol.iterator](); !(X = (b = O.next()).done); X = !0) {\n                  var D = b.value;\n                  typeof D == \"function\" && D.call(W);\n                }\n              } catch (J) {\n                G = !0, ne = J;\n              } finally {\n                try {\n                  X || O.return == null || O.return();\n                } finally {\n                  if (G)\n                    throw ne;\n                }\n              }\n            }\n          }, this._start = function() {\n            a._userNode && typeof a._userNode == \"string\" && (a._userNode = document.getElementById(a._userNode));\n            var G = a._isGlobal ? window : a;\n            if (G.preload) {\n              a.callRegisteredHooksFor(\"beforePreload\");\n              var U, W = document.getElementById(a._loadingScreenId), X = (W || ((W = document.createElement(\"div\")).innerHTML = \"Loading...\", W.style.position = \"absolute\", W.id = a._loadingScreenId, (a._userNode || document.body).appendChild(W)), a._preloadMethods);\n              for (U in X) {\n                X[U] = X[U] || s;\n                var ne = X[U];\n                ne !== s.prototype && ne !== s || (a._isGlobal && (window[U] = a._wrapPreload(a, U)), ne = a), a._registeredPreloadMethods[U] = ne[U], ne[U] = a._wrapPreload(ne, U);\n              }\n              G.preload(), a._runIfPreloadsAreDone();\n            } else\n              a._setup(), a._recording || a._draw();\n          }, this._runIfPreloadsAreDone = function() {\n            var G, U = this._isGlobal ? window : this;\n            U._preloadCount === 0 && ((G = document.getElementById(U._loadingScreenId)) && G.parentNode.removeChild(G), this.callRegisteredHooksFor(\"afterPreload\"), this._setupDone || (this._lastTargetFrameTime = window.performance.now(), this._lastRealFrameTime = window.performance.now(), U._setup(), this._recording || U._draw()));\n          }, this._decrementPreload = function() {\n            var G = this._isGlobal ? window : this;\n            G._preloadDone || typeof G.preload != \"function\" || (G._setProperty(\"_preloadCount\", G._preloadCount - 1), G._runIfPreloadsAreDone());\n          }, this._wrapPreload = function(G, U) {\n            var W = this;\n            return function() {\n              W._incrementPreload();\n              for (var X = arguments.length, ne = new Array(X), b = 0; b < X; b++)\n                ne[b] = arguments[b];\n              return W._registeredPreloadMethods[U].apply(G, ne);\n            };\n          }, this._incrementPreload = function() {\n            var G = this._isGlobal ? window : this;\n            G._preloadDone || G._setProperty(\"_preloadCount\", G._preloadCount + 1);\n          }, this._setup = function() {\n            a.callRegisteredHooksFor(\"beforeSetup\"), a.createCanvas(a._defaultCanvasSize.width, a._defaultCanvasSize.height, \"p2d\");\n            var G = a._isGlobal ? window : a;\n            if (typeof G.preload == \"function\")\n              for (var U in a._preloadMethods)\n                G[U] = a._preloadMethods[U][U], G[U] && a && (G[U] = G[U].bind(a));\n            a._millisStart = window.performance.now(), G._preloadDone = !0, typeof G.setup == \"function\" && G.setup();\n            var W = document.getElementsByTagName(\"canvas\"), X = !0, ne = !1, b = void 0;\n            try {\n              for (var O, D = W[Symbol.iterator](); !(X = (O = D.next()).done); X = !0) {\n                var B = O.value;\n                B.dataset.hidden === \"true\" && (B.style.visibility = \"\", delete B.dataset.hidden);\n              }\n            } catch (Y) {\n              ne = !0, b = Y;\n            } finally {\n              try {\n                X || D.return == null || D.return();\n              } finally {\n                if (ne)\n                  throw b;\n              }\n            }\n            a._lastTargetFrameTime = window.performance.now(), a._lastRealFrameTime = window.performance.now(), a._setupDone = !0, (a._accessibleOutputs.grid || a._accessibleOutputs.text) && a._updateAccsOutput(), a.callRegisteredHooksFor(\"afterSetup\");\n          }, this._draw = function() {\n            var G = window.performance.now(), U = G - a._lastTargetFrameTime, W = 1e3 / a._targetFrameRate;\n            (!a._loop || W - 5 <= U) && (a.deltaTime = G - a._lastRealFrameTime, a._setProperty(\"deltaTime\", a.deltaTime), a._frameRate = 1e3 / a.deltaTime, a.redraw(), a._lastTargetFrameTime = Math.max(a._lastTargetFrameTime + W, G), a._lastRealFrameTime = G, a._updateMouseCoords !== void 0 && (a._updateMouseCoords(), a._setProperty(\"movedX\", 0), a._setProperty(\"movedY\", 0))), a._loop && (a._requestAnimId = window.requestAnimationFrame(a._draw));\n          }, this._setProperty = function(G, U) {\n            a[G] = U, a._isGlobal && (window[G] = U);\n          }, this.remove = function() {\n            a._startListener && window.removeEventListener(\"load\", a._startListener, !1);\n            var G = document.getElementById(a._loadingScreenId);\n            if (G && (G.parentNode.removeChild(G), a._incrementPreload()), a._curElement) {\n              for (var U in a._loop = !1, a._requestAnimId && window.cancelAnimationFrame(a._requestAnimId), a._events)\n                window.removeEventListener(U, a._events[U]);\n              var W = !0, G = !1, X = void 0;\n              try {\n                for (var ne, b = a._elements[Symbol.iterator](); !(W = (ne = b.next()).done); W = !0) {\n                  var O, D = ne.value;\n                  for (O in D.elt && D.elt.parentNode && D.elt.parentNode.removeChild(D.elt), D._events)\n                    D.elt.removeEventListener(O, D._events[O]);\n                }\n              } catch (ce) {\n                G = !0, X = ce;\n              } finally {\n                try {\n                  W || b.return == null || b.return();\n                } finally {\n                  if (G)\n                    throw X;\n                }\n              }\n              var B = a;\n              a._registeredMethods.remove.forEach(function(ce) {\n                ce !== void 0 && ce.call(B);\n              });\n            }\n            if (a._isGlobal) {\n              for (var Y in s.prototype)\n                try {\n                  delete window[Y];\n                } catch {\n                  window[Y] = void 0;\n                }\n              for (var J in a)\n                if (a.hasOwnProperty(J))\n                  try {\n                    delete window[J];\n                  } catch {\n                    window[J] = void 0;\n                  }\n              s.instance = null;\n            }\n          }, this._registeredMethods.init.forEach(function(G) {\n            G !== void 0 && G.call(this);\n          }, this), this._setupPromisePreloads();\n          var A, x, P = this._createFriendlyGlobalFunctionBinder();\n          if (l)\n            l(this), s._checkForUserDefinedFunctions(this);\n          else {\n            for (var M in this._isGlobal = !0, s.instance = this, s.prototype)\n              typeof s.prototype[M] == \"function\" ? (A = M.substring(2), this._events.hasOwnProperty(A) || (Math.hasOwnProperty(M) && Math[M] === s.prototype[M] ? P(M, s.prototype[M]) : P(M, s.prototype[M].bind(this)))) : P(M, s.prototype[M]);\n            for (var R in this)\n              this.hasOwnProperty(R) && P(R, this[R]);\n          }\n          for (x in this._events) {\n            var L = this[\"_on\".concat(x)];\n            L && (L = L.bind(this), window.addEventListener(x, L, { passive: !1 }), this._events[x] = L);\n          }\n          function F() {\n            a._setProperty(\"focused\", !0);\n          }\n          function V() {\n            a._setProperty(\"focused\", !1);\n          }\n          window.addEventListener(\"focus\", F), window.addEventListener(\"blur\", V), this.registerMethod(\"remove\", function() {\n            window.removeEventListener(\"focus\", F), window.removeEventListener(\"blur\", V);\n          }), document.readyState === \"complete\" ? this._start() : (this._startListener = this._start.bind(this), window.addEventListener(\"load\", this._startListener, !1));\n        }\n        var o, i;\n        return o = s, (i = [{ key: \"_initializeInstanceVariables\", value: function() {\n          this._accessibleOutputs = { text: !1, grid: !1, textLabel: !1, gridLabel: !1 }, this._styles = [], this._bezierDetail = 20, this._curveDetail = 20, this._colorMode = u.RGB, this._colorMaxes = { rgb: [255, 255, 255, 255], hsb: [360, 100, 100, 1], hsl: [360, 100, 100, 1] }, this._downKeys = {};\n        } }, { key: \"registerPreloadMethod\", value: function(l, n) {\n          s.prototype._preloadMethods.hasOwnProperty(l) || (s.prototype._preloadMethods[l] = n);\n        } }, { key: \"registerMethod\", value: function(l, n) {\n          var a = this || s.prototype;\n          a._registeredMethods.hasOwnProperty(l) || (a._registeredMethods[l] = []), a._registeredMethods[l].push(n);\n        } }, { key: \"unregisterMethod\", value: function(l, n) {\n          var a = this || s.prototype;\n          if (a._registeredMethods.hasOwnProperty(l)) {\n            for (var c = a._registeredMethods[l], p = [], j = 0; j < c.length; j++)\n              c[j] === n && p.push(j);\n            for (var T = p.length - 1; 0 <= T; T--)\n              c.splice(p[T], 1);\n          }\n        } }, { key: \"_createFriendlyGlobalFunctionBinder\", value: function() {\n          var l = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {}, n = l.globalObject || window;\n          return l.log || console.log.bind(console), function(a, c) {\n            s.disableFriendlyErrors, n[a] = c;\n          };\n        } }]) && g(o.prototype, i), s;\n      }();\n      for (f in r.instance = null, r.disableFriendlyErrors = !1, u)\n        r.prototype[f] = u[f];\n      r.VERSION = u.VERSION, r.prototype._preloadMethods = { loadJSON: r.prototype, loadImage: r.prototype, loadStrings: r.prototype, loadXML: r.prototype, loadBytes: r.prototype, loadTable: r.prototype, loadFont: r.prototype, loadModel: r.prototype, loadShader: r.prototype }, r.prototype._registeredMethods = { init: [], pre: [], post: [], remove: [] }, r.prototype._registeredPreloadMethods = {}, C.default = r;\n    }, { \"./constants\": 269, \"./shim\": 291, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.array.splice\": 170, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.get-own-property-names\": 184, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.for-each\": 242, \"core-js/modules/web.dom-collections.iterator\": 243 }], 281: [function(t, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"./main\")) && t.__esModule ? t : { default: t };\n      function y(u, h) {\n        for (var g = 0; g < h.length; g++) {\n          var f = h[g];\n          f.enumerable = f.enumerable || !1, f.configurable = !0, \"value\" in f && (f.writable = !0), Object.defineProperty(u, f.key, f);\n        }\n      }\n      m.default.Element = function() {\n        function u(r, s) {\n          if (!(this instanceof u))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this.elt = r, this._pInst = this._pixelsState = s, this._events = {}, this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight;\n        }\n        var h, g, f;\n        return h = u, f = [{ key: \"_adjustListener\", value: function(r, s, o) {\n          return s === !1 ? m.default.Element._detachListener(r, o) : m.default.Element._attachListener(r, s, o), this;\n        } }, { key: \"_attachListener\", value: function(r, s, o) {\n          o._events[r] && m.default.Element._detachListener(r, o), s = s.bind(o), o.elt.addEventListener(r, s, !1), o._events[r] = s;\n        } }, { key: \"_detachListener\", value: function(r, s) {\n          var o = s._events[r];\n          s.elt.removeEventListener(r, o, !1), s._events[r] = null;\n        } }], (g = [{ key: \"parent\", value: function(r) {\n          return r === void 0 ? this.elt.parentNode : (typeof r == \"string\" ? (r[0] === \"#\" && (r = r.substring(1)), r = document.getElementById(r)) : r instanceof m.default.Element && (r = r.elt), r.appendChild(this.elt), this);\n        } }, { key: \"id\", value: function(r) {\n          return r === void 0 ? this.elt.id : (this.elt.id = r, this.width = this.elt.offsetWidth, this.height = this.elt.offsetHeight, this);\n        } }, { key: \"class\", value: function(r) {\n          return r === void 0 ? this.elt.className : (this.elt.className = r, this);\n        } }, { key: \"mousePressed\", value: function(r) {\n          return m.default.Element._adjustListener(\"mousedown\", function(s) {\n            return this._pInst._setProperty(\"mouseIsPressed\", !0), this._pInst._setMouseButton(s), r.call(this, s);\n          }, this), this;\n        } }, { key: \"doubleClicked\", value: function(r) {\n          return m.default.Element._adjustListener(\"dblclick\", r, this), this;\n        } }, { key: \"mouseWheel\", value: function(r) {\n          return m.default.Element._adjustListener(\"wheel\", r, this), this;\n        } }, { key: \"mouseReleased\", value: function(r) {\n          return m.default.Element._adjustListener(\"mouseup\", r, this), this;\n        } }, { key: \"mouseClicked\", value: function(r) {\n          return m.default.Element._adjustListener(\"click\", r, this), this;\n        } }, { key: \"mouseMoved\", value: function(r) {\n          return m.default.Element._adjustListener(\"mousemove\", r, this), this;\n        } }, { key: \"mouseOver\", value: function(r) {\n          return m.default.Element._adjustListener(\"mouseover\", r, this), this;\n        } }, { key: \"mouseOut\", value: function(r) {\n          return m.default.Element._adjustListener(\"mouseout\", r, this), this;\n        } }, { key: \"touchStarted\", value: function(r) {\n          return m.default.Element._adjustListener(\"touchstart\", r, this), this;\n        } }, { key: \"touchMoved\", value: function(r) {\n          return m.default.Element._adjustListener(\"touchmove\", r, this), this;\n        } }, { key: \"touchEnded\", value: function(r) {\n          return m.default.Element._adjustListener(\"touchend\", r, this), this;\n        } }, { key: \"dragOver\", value: function(r) {\n          return m.default.Element._adjustListener(\"dragover\", r, this), this;\n        } }, { key: \"dragLeave\", value: function(r) {\n          return m.default.Element._adjustListener(\"dragleave\", r, this), this;\n        } }, { key: \"_setProperty\", value: function(r, s) {\n          this[r] = s;\n        } }]) && y(h.prototype, g), f && y(h, f), u;\n      }(), t = m.default.Element, C.default = t;\n    }, { \"./main\": 280 }], 282: [function(t, H, C) {\n      function m(a) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(c) {\n          return typeof c;\n        } : function(c) {\n          return c && typeof Symbol == \"function\" && c.constructor === Symbol && c !== Symbol.prototype ? \"symbol\" : typeof c;\n        })(a);\n      }\n      function y(a) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(c) {\n          return m(c);\n        } : function(c) {\n          return c && typeof Symbol == \"function\" && c.constructor === Symbol && c !== Symbol.prototype ? \"symbol\" : m(c);\n        })(a);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.get-prototype-of\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.reflect.construct\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.object.get-prototype-of\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (n = t(\"./main\")) && n.__esModule ? n : { default: n }, h = function(a) {\n        if (a && a.__esModule)\n          return a;\n        if (a === null || y(a) !== \"object\" && typeof a != \"function\")\n          return { default: a };\n        var c = g();\n        if (c && c.has(a))\n          return c.get(a);\n        var p, j = {}, T = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (p in a) {\n          var _;\n          Object.prototype.hasOwnProperty.call(a, p) && ((_ = T ? Object.getOwnPropertyDescriptor(a, p) : null) && (_.get || _.set) ? Object.defineProperty(j, p, _) : j[p] = a[p]);\n        }\n        return j.default = a, c && c.set(a, j), j;\n      }(t(\"./constants\"));\n      function g() {\n        var a;\n        return typeof WeakMap != \"function\" ? null : (a = /* @__PURE__ */ new WeakMap(), g = function() {\n          return a;\n        }, a);\n      }\n      function f(a, c) {\n        for (var p = 0; p < c.length; p++) {\n          var j = c[p];\n          j.enumerable = j.enumerable || !1, j.configurable = !0, \"value\" in j && (j.writable = !0), Object.defineProperty(a, j.key, j);\n        }\n      }\n      function r(a, c) {\n        return (r = Object.setPrototypeOf || function(p, j) {\n          return p.__proto__ = j, p;\n        })(a, c);\n      }\n      function s(a) {\n        return function() {\n          var c, p = l(a);\n          return o(this, function() {\n            if (typeof Reflect < \"u\" && Reflect.construct && !Reflect.construct.sham) {\n              if (typeof Proxy == \"function\")\n                return 1;\n              try {\n                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {\n                })), 1;\n              } catch {\n              }\n            }\n          }() ? (c = l(this).constructor, Reflect.construct(p, arguments, c)) : p.apply(this, arguments));\n        };\n      }\n      function o(a, c) {\n        return !c || y(c) !== \"object\" && typeof c != \"function\" ? i(a) : c;\n      }\n      function i(a) {\n        if (a === void 0)\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        return a;\n      }\n      function l(a) {\n        return (l = Object.setPrototypeOf ? Object.getPrototypeOf : function(c) {\n          return c.__proto__ || Object.getPrototypeOf(c);\n        })(a);\n      }\n      u.default.Graphics = function(a) {\n        var c = j;\n        if (typeof a != \"function\" && a !== null)\n          throw new TypeError(\"Super expression must either be null or a function\");\n        c.prototype = Object.create(a && a.prototype, { constructor: { value: c, writable: !0, configurable: !0 } }), a && r(c, a);\n        var p = s(j);\n        function j(T, _, R, E, A) {\n          var x;\n          if (!(this instanceof j))\n            throw new TypeError(\"Cannot call a class as a function\");\n          M = A || document.createElement(\"canvas\"), (x = p.call(this, M, E)).canvas = M;\n          var P, M = R || h.P2D, R = E._userNode || document.body;\n          for (P in A || R.appendChild(x.canvas), u.default.prototype)\n            x[P] || (typeof u.default.prototype[P] == \"function\" ? x[P] = u.default.prototype[P].bind(i(x)) : x[P] = u.default.prototype[P]);\n          return u.default.prototype._initializeInstanceVariables.apply(i(x)), x.width = T, x.height = _, x._pixelDensity = E._pixelDensity, M === h.WEBGL ? (x._renderer = new u.default.RendererGL(x.canvas, i(x), !1), T = (A = x._renderer._adjustDimensions(T, _)).adjustedWidth, _ = A.adjustedHeight) : x._renderer = new u.default.Renderer2D(x.canvas, i(x), !1), E._elements.push(i(x)), Object.defineProperty(i(x), \"deltaTime\", { get: function() {\n            return this._pInst.deltaTime;\n          } }), x._renderer.resize(T, _), x._renderer._applyDefaults(), o(x, i(x));\n        }\n        return c = j, (a = [{ key: \"reset\", value: function() {\n          this._renderer.resetMatrix(), this._renderer.isP3D && this._renderer._update();\n        } }, { key: \"remove\", value: function() {\n          this.elt.parentNode && this.elt.parentNode.removeChild(this.elt);\n          var T, _ = this._pInst._elements.indexOf(this);\n          for (T in _ !== -1 && this._pInst._elements.splice(_, 1), this._events)\n            this.elt.removeEventListener(T, this._events[T]);\n        } }, { key: \"createFramebuffer\", value: function(T) {\n          return new u.default.Framebuffer(this, T);\n        } }]) && f(c.prototype, a), j;\n      }(u.default.Element);\n      var n = u.default.Graphics;\n      C.default = n;\n    }, { \"./constants\": 269, \"./main\": 280, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.splice\": 170, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.get-prototype-of\": 185, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.reflect.construct\": 189, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 283: [function(t, H, C) {\n      function m(a) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(c) {\n          return typeof c;\n        } : function(c) {\n          return c && typeof Symbol == \"function\" && c.constructor === Symbol && c !== Symbol.prototype ? \"symbol\" : typeof c;\n        })(a);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.get-prototype-of\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.reflect.construct\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.trim\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.get-prototype-of\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.trim\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var y = (l = t(\"./main\")) && l.__esModule ? l : { default: l }, u = function(a) {\n        if (a && a.__esModule)\n          return a;\n        if (a === null || g(a) !== \"object\" && typeof a != \"function\")\n          return { default: a };\n        var c = h();\n        if (c && c.has(a))\n          return c.get(a);\n        var p, j = {}, T = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (p in a) {\n          var _;\n          Object.prototype.hasOwnProperty.call(a, p) && ((_ = T ? Object.getOwnPropertyDescriptor(a, p) : null) && (_.get || _.set) ? Object.defineProperty(j, p, _) : j[p] = a[p]);\n        }\n        return j.default = a, c && c.set(a, j), j;\n      }(t(\"../core/constants\"));\n      function h() {\n        var a;\n        return typeof WeakMap != \"function\" ? null : (a = /* @__PURE__ */ new WeakMap(), h = function() {\n          return a;\n        }, a);\n      }\n      function g(a) {\n        return (g = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(c) {\n          return m(c);\n        } : function(c) {\n          return c && typeof Symbol == \"function\" && c.constructor === Symbol && c !== Symbol.prototype ? \"symbol\" : m(c);\n        })(a);\n      }\n      function f(a, c) {\n        for (var p = 0; p < c.length; p++) {\n          var j = c[p];\n          j.enumerable = j.enumerable || !1, j.configurable = !0, \"value\" in j && (j.writable = !0), Object.defineProperty(a, j.key, j);\n        }\n      }\n      function r(a, c) {\n        return (r = Object.setPrototypeOf || function(p, j) {\n          return p.__proto__ = j, p;\n        })(a, c);\n      }\n      function s(a) {\n        return function() {\n          var c, p, j = i(a);\n          return c = function() {\n            if (typeof Reflect < \"u\" && Reflect.construct && !Reflect.construct.sham) {\n              if (typeof Proxy == \"function\")\n                return 1;\n              try {\n                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {\n                })), 1;\n              } catch {\n              }\n            }\n          }() ? (c = i(this).constructor, Reflect.construct(j, arguments, c)) : j.apply(this, arguments), j = this, !(p = c) || g(p) !== \"object\" && typeof p != \"function\" ? o(j) : p;\n        };\n      }\n      function o(a) {\n        if (a === void 0)\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        return a;\n      }\n      function i(a) {\n        return (i = Object.setPrototypeOf ? Object.getPrototypeOf : function(c) {\n          return c.__proto__ || Object.getPrototypeOf(c);\n        })(a);\n      }\n      var l = function(a) {\n        var c = j;\n        if (typeof a != \"function\" && a !== null)\n          throw new TypeError(\"Super expression must either be null or a function\");\n        c.prototype = Object.create(a && a.prototype, { constructor: { value: c, writable: !0, configurable: !0 } }), a && r(c, a);\n        var p = s(j);\n        function j(T, _, S) {\n          var E;\n          if (this instanceof j)\n            return (E = p.call(this, T, _)).canvas = T, E._pixelsState = _, S ? (E._isMainCanvas = !0, E._pInst._setProperty(\"_curElement\", o(E)), E._pInst._setProperty(\"canvas\", E.canvas), E._pInst._setProperty(\"width\", E.width), E._pInst._setProperty(\"height\", E.height)) : (E.canvas.style.display = \"none\", E._styles = []), E._clipping = !1, E._clipInvert = !1, E._textSize = 12, E._textLeading = 15, E._textFont = \"sans-serif\", E._textStyle = u.NORMAL, E._textAscent = null, E._textDescent = null, E._textAlign = u.LEFT, E._textBaseline = u.BASELINE, E._textWrap = u.WORD, E._rectMode = u.CORNER, E._ellipseMode = u.CENTER, E._curveTightness = 0, E._imageMode = u.CORNER, E._tint = null, E._doStroke = !0, E._doFill = !0, E._strokeSet = !1, E._fillSet = !1, E._leadingSet = !1, E._pushPopDepth = 0, E;\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n        return c = j, (a = [{ key: \"push\", value: function() {\n          return this._pushPopDepth++, { properties: { _doStroke: this._doStroke, _strokeSet: this._strokeSet, _doFill: this._doFill, _fillSet: this._fillSet, _tint: this._tint, _imageMode: this._imageMode, _rectMode: this._rectMode, _ellipseMode: this._ellipseMode, _textFont: this._textFont, _textLeading: this._textLeading, _leadingSet: this._leadingSet, _textSize: this._textSize, _textAlign: this._textAlign, _textBaseline: this._textBaseline, _textStyle: this._textStyle, _textWrap: this._textWrap } };\n        } }, { key: \"pop\", value: function(T) {\n          this._pushPopDepth--, T.properties && Object.assign(this, T.properties);\n        } }, { key: \"beginClip\", value: function() {\n          var T = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {};\n          if (this._clipping)\n            throw new Error(\"It looks like you're trying to clip while already in the middle of clipping. Did you forget to endClip()?\");\n          this._clipping = !0, this._clipInvert = T.invert;\n        } }, { key: \"endClip\", value: function() {\n          if (!this._clipping)\n            throw new Error(\"It looks like you've called endClip() without beginClip(). Did you forget to call beginClip() first?\");\n          this._clipping = !1;\n        } }, { key: \"resize\", value: function(T, _) {\n          this.width = T, this.height = _, this.elt.width = T * this._pInst._pixelDensity, this.elt.height = _ * this._pInst._pixelDensity, this.elt.style.width = \"\".concat(T, \"px\"), this.elt.style.height = \"\".concat(_, \"px\"), this._isMainCanvas && (this._pInst._setProperty(\"width\", this.width), this._pInst._setProperty(\"height\", this.height));\n        } }, { key: \"get\", value: function(T, _, S, E) {\n          var A = this._pixelsState, x = A._pixelDensity, P = this.canvas;\n          if (T === void 0 && _ === void 0)\n            T = _ = 0, S = A.width, E = A.height;\n          else if (T *= x, _ *= x, S === void 0 && E === void 0)\n            return T < 0 || _ < 0 || T >= P.width || _ >= P.height ? [0, 0, 0, 0] : this._getPixel(T, _);\n          return A = new y.default.Image(S * x, E * x), A.pixelDensity(x), A.canvas.getContext(\"2d\").drawImage(P, T, _, S * x, E * x, 0, 0, S * x, E * x), A;\n        } }, { key: \"textLeading\", value: function(T) {\n          return typeof T == \"number\" ? (this._setProperty(\"_leadingSet\", !0), this._setProperty(\"_textLeading\", T), this._pInst) : this._textLeading;\n        } }, { key: \"textStyle\", value: function(T) {\n          return T ? (T !== u.NORMAL && T !== u.ITALIC && T !== u.BOLD && T !== u.BOLDITALIC || this._setProperty(\"_textStyle\", T), this._applyTextProperties()) : this._textStyle;\n        } }, { key: \"textAscent\", value: function() {\n          return this._textAscent === null && this._updateTextMetrics(), this._textAscent;\n        } }, { key: \"textDescent\", value: function() {\n          return this._textDescent === null && this._updateTextMetrics(), this._textDescent;\n        } }, { key: \"textAlign\", value: function(T, _) {\n          return T !== void 0 ? (this._setProperty(\"_textAlign\", T), _ !== void 0 && this._setProperty(\"_textBaseline\", _), this._applyTextProperties()) : { horizontal: this._textAlign, vertical: this._textBaseline };\n        } }, { key: \"textWrap\", value: function(T) {\n          return this._setProperty(\"_textWrap\", T), this._textWrap;\n        } }, { key: \"text\", value: function(T, _, S, E, A) {\n          var x, P, M, R, L = this._pInst, F = this._textWrap, V = Number.MAX_VALUE, G = S;\n          if ((this._doFill || this._doStroke) && T !== void 0) {\n            if (x = (T = (T = typeof T != \"string\" ? T.toString() : T).replace(/(\\t)/g, \"  \")).split(`\n`), E !== void 0) {\n              switch (this._rectMode === u.CENTER && (_ -= E / 2), this._textAlign) {\n                case u.CENTER:\n                  _ += E / 2;\n                  break;\n                case u.RIGHT:\n                  _ += E;\n              }\n              if (A !== void 0) {\n                this._rectMode === u.CENTER && (S -= A / 2, G -= A / 2);\n                var T = S, U = L.textAscent();\n                switch (this._textBaseline) {\n                  case u.BOTTOM:\n                    R = S + A, S = Math.max(R, S), G += U;\n                    break;\n                  case u.CENTER:\n                    R = S + A / 2, S = Math.max(R, S), G += U / 2;\n                }\n                V = S + A - U, this._textBaseline === u.CENTER && (V = T + A - U / 2);\n              } else\n                this._textBaseline !== u.BOTTOM && this._textBaseline !== u.CENTER || (G = S - (T = L.textSize() * this._textLeading) / 2, V = S + T / 2);\n              if (F === u.WORD) {\n                for (var W = [], X = 0; X < x.length; X++) {\n                  for (var ne = \"\", b = x[X].split(\" \"), O = 0; O < b.length; O++)\n                    P = \"\".concat(ne + b[O]) + \" \", ne = E < (M = this.textWidth(P)) && 0 < ne.length ? (W.push(ne), \"\".concat(b[O]) + \" \") : P;\n                  W.push(ne);\n                }\n                var D = 0;\n                this._textBaseline === u.CENTER ? D = (W.length - 1) * L.textLeading() / 2 : this._textBaseline === u.BOTTOM && (D = (W.length - 1) * L.textLeading());\n                for (var B = 0; B < x.length; B++) {\n                  ne = \"\", b = x[B].split(\" \");\n                  for (var Y = 0; Y < b.length; Y++)\n                    P = \"\".concat(ne + b[Y]) + \" \", E < (M = this.textWidth(P)) && 0 < ne.length ? (this._renderText(L, ne.trim(), _, S - D, V, G), ne = \"\".concat(b[Y]) + \" \", S += L.textLeading()) : ne = P;\n                  this._renderText(L, ne.trim(), _, S - D, V, G), S += L.textLeading();\n                }\n              } else {\n                for (var J = [], te = 0; te < x.length; te++)\n                  for (var ce = x[te].split(ne = \"\"), re = 0; re < ce.length; re++)\n                    P = \"\".concat(ne + ce[re]), (M = this.textWidth(P)) <= E ? ne += ce[re] : E < M && 0 < ne.length && (J.push(ne), ne = \"\".concat(ce[re]));\n                J.push(ne);\n                var ue = 0;\n                this._textBaseline === u.CENTER ? ue = (J.length - 1) * L.textLeading() / 2 : this._textBaseline === u.BOTTOM && (ue = (J.length - 1) * L.textLeading());\n                for (var le = 0; le < x.length; le++) {\n                  ce = x[le].split(ne = \"\");\n                  for (var K = 0; K < ce.length; K++)\n                    P = \"\".concat(ne + ce[K]), (M = this.textWidth(P)) <= E ? ne += ce[K] : E < M && 0 < ne.length && (this._renderText(L, ne.trim(), _, S - ue, V, G), S += L.textLeading(), ne = \"\".concat(ce[K]));\n                }\n                this._renderText(L, ne.trim(), _, S - ue, V, G), S += L.textLeading();\n              }\n            } else {\n              var ae = 0;\n              this._textBaseline === u.CENTER ? ae = (x.length - 1) * L.textLeading() / 2 : this._textBaseline === u.BOTTOM && (ae = (x.length - 1) * L.textLeading());\n              for (var he = 0; he < x.length; he++)\n                this._renderText(L, x[he], _, S - ae, V, G - ae), S += L.textLeading();\n            }\n            return L;\n          }\n        } }, { key: \"_applyDefaults\", value: function() {\n          return this;\n        } }, { key: \"_isOpenType\", value: function() {\n          var T = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : this._textFont;\n          return g(T) === \"object\" && T.font && T.font.supported;\n        } }, { key: \"_updateTextMetrics\", value: function() {\n          var T, _, S, E, A, x;\n          return this._isOpenType() ? (this._setProperty(\"_textAscent\", this._textFont._textAscent()), this._setProperty(\"_textDescent\", this._textFont._textDescent())) : ((T = document.createElement(\"span\")).style.fontFamily = this._textFont, T.style.fontSize = \"\".concat(this._textSize, \"px\"), T.innerHTML = \"ABCjgq|\", (x = document.createElement(\"div\")).style.display = \"inline-block\", x.style.width = \"1px\", x.style.height = \"0px\", E = ((_ = document.createElement(\"div\")).appendChild(T), _.appendChild(x), _.style.height = \"0px\", _.style.overflow = \"hidden\", document.body.appendChild(_), x.style.verticalAlign = \"baseline\", n(x)), A = n(T), S = E[1] - A[1], E = (x.style.verticalAlign = \"bottom\", n(x)), A = n(T), x = E[1] - A[1] - S, document.body.removeChild(_), this._setProperty(\"_textAscent\", S), this._setProperty(\"_textDescent\", x)), this;\n        } }]) && f(c.prototype, a), j;\n      }(y.default.Element);\n      function n(a) {\n        var c = 0, p = 0;\n        if (a.offsetParent)\n          for (; c += a.offsetLeft, p += a.offsetTop, a = a.offsetParent; )\n            ;\n        else\n          c += a.offsetLeft, p += a.offsetTop;\n        return [c, p];\n      }\n      l.prototype.textSize = function(a) {\n        return typeof a == \"number\" ? (this._setProperty(\"_textSize\", a), this._leadingSet || this._setProperty(\"_textLeading\", a * u._DEFAULT_LEADMULT), this._applyTextProperties()) : this._textSize;\n      }, y.default.Renderer = l, t = y.default.Renderer, C.default = t;\n    }, { \"../core/constants\": 269, \"./main\": 280, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.number.constructor\": 178, \"core-js/modules/es.object.assign\": 181, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.get-prototype-of\": 185, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.reflect.construct\": 189, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.string.trim\": 206, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 284: [function(a, H, C) {\n      function m(c) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(p) {\n          return typeof p;\n        } : function(p) {\n          return p && typeof Symbol == \"function\" && p.constructor === Symbol && p !== Symbol.prototype ? \"symbol\" : typeof p;\n        })(c);\n      }\n      function y(c) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(p) {\n          return m(p);\n        } : function(p) {\n          return p && typeof Symbol == \"function\" && p.constructor === Symbol && p !== Symbol.prototype ? \"symbol\" : m(p);\n        })(c);\n      }\n      a(\"core-js/modules/es.symbol\"), a(\"core-js/modules/es.symbol.description\"), a(\"core-js/modules/es.symbol.iterator\"), a(\"core-js/modules/es.array.concat\"), a(\"core-js/modules/es.array.fill\"), a(\"core-js/modules/es.array.for-each\"), a(\"core-js/modules/es.array.iterator\"), a(\"core-js/modules/es.array.join\"), a(\"core-js/modules/es.array.slice\"), a(\"core-js/modules/es.function.name\"), a(\"core-js/modules/es.number.to-fixed\"), a(\"core-js/modules/es.object.get-own-property-descriptor\"), a(\"core-js/modules/es.object.get-prototype-of\"), a(\"core-js/modules/es.object.to-string\"), a(\"core-js/modules/es.reflect.construct\"), a(\"core-js/modules/es.reflect.get\"), a(\"core-js/modules/es.regexp.exec\"), a(\"core-js/modules/es.regexp.to-string\"), a(\"core-js/modules/es.string.iterator\"), a(\"core-js/modules/es.weak-map\"), a(\"core-js/modules/web.dom-collections.iterator\"), a(\"core-js/modules/es.array.concat\"), a(\"core-js/modules/es.array.fill\"), a(\"core-js/modules/es.array.for-each\"), a(\"core-js/modules/es.array.join\"), a(\"core-js/modules/es.array.slice\"), a(\"core-js/modules/es.function.name\"), a(\"core-js/modules/es.number.to-fixed\"), a(\"core-js/modules/es.object.get-prototype-of\"), a(\"core-js/modules/es.object.to-string\"), a(\"core-js/modules/es.regexp.exec\"), a(\"core-js/modules/es.regexp.to-string\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (n = a(\"./main\")) && n.__esModule ? n : { default: n }, h = function(c) {\n        if (c && c.__esModule)\n          return c;\n        if (c === null || y(c) !== \"object\" && typeof c != \"function\")\n          return { default: c };\n        var p = g();\n        if (p && p.has(c))\n          return p.get(c);\n        var j, T = {}, _ = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (j in c) {\n          var S;\n          Object.prototype.hasOwnProperty.call(c, j) && ((S = _ ? Object.getOwnPropertyDescriptor(c, j) : null) && (S.get || S.set) ? Object.defineProperty(T, j, S) : T[j] = c[j]);\n        }\n        return T.default = c, p && p.set(c, T), T;\n      }(a(\"./constants\"));\n      function g() {\n        var c;\n        return typeof WeakMap != \"function\" ? null : (c = /* @__PURE__ */ new WeakMap(), g = function() {\n          return c;\n        }, c);\n      }\n      function f(c, p) {\n        for (var j = 0; j < p.length; j++) {\n          var T = p[j];\n          T.enumerable = T.enumerable || !1, T.configurable = !0, \"value\" in T && (T.writable = !0), Object.defineProperty(c, T.key, T);\n        }\n      }\n      function r(c, p, j) {\n        return (r = typeof Reflect < \"u\" && Reflect.get ? Reflect.get : function(E, _, S) {\n          var E = function(A, x) {\n            for (; !Object.prototype.hasOwnProperty.call(A, x) && (A = i(A)) !== null; )\n              ;\n            return A;\n          }(E, _);\n          if (E)\n            return (E = Object.getOwnPropertyDescriptor(E, _)).get ? E.get.call(S) : E.value;\n        })(c, p, j || c);\n      }\n      function s(c, p) {\n        return (s = Object.setPrototypeOf || function(j, T) {\n          return j.__proto__ = T, j;\n        })(c, p);\n      }\n      function o(c) {\n        return function() {\n          var p, j = i(c), j = (p = function() {\n            if (typeof Reflect < \"u\" && Reflect.construct && !Reflect.construct.sham) {\n              if (typeof Proxy == \"function\")\n                return 1;\n              try {\n                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {\n                })), 1;\n              } catch {\n              }\n            }\n          }() ? (p = i(this).constructor, Reflect.construct(j, arguments, p)) : j.apply(this, arguments), this);\n          if (!p || y(p) !== \"object\" && typeof p != \"function\") {\n            if (j !== void 0)\n              return j;\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n          return p;\n        };\n      }\n      function i(c) {\n        return (i = Object.setPrototypeOf ? Object.getPrototypeOf : function(p) {\n          return p.__proto__ || Object.getPrototypeOf(p);\n        })(c);\n      }\n      a(\"./p5.Renderer\");\n      var l = \"rgba(0,0,0,0)\", n = function(c) {\n        var p = T;\n        if (typeof c != \"function\" && c !== null)\n          throw new TypeError(\"Super expression must either be null or a function\");\n        p.prototype = Object.create(c && c.prototype, { constructor: { value: p, writable: !0, configurable: !0 } }), c && s(p, c);\n        var j = o(T);\n        function T(_, S, E) {\n          if (this instanceof T)\n            return (_ = j.call(this, _, S, E)).drawingContext = _.canvas.getContext(\"2d\"), _._pInst._setProperty(\"drawingContext\", _.drawingContext), _;\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n        return p = T, (c = [{ key: \"getFilterGraphicsLayer\", value: function() {\n          var _;\n          return this.filterGraphicsLayer || (_ = (this._pInst instanceof u.default.Graphics ? this._pInst : this)._pInst, this.filterGraphicsLayer = new u.default.Graphics(this.width, this.height, h.WEBGL, _)), this.filterGraphicsLayer.width === this.width && this.filterGraphicsLayer.height === this.height || this.filterGraphicsLayer.resizeCanvas(this.width, this.height), this.filterGraphicsLayer.pixelDensity() !== this._pInst.pixelDensity() && this.filterGraphicsLayer.pixelDensity(this._pInst.pixelDensity()), this.filterGraphicsLayer;\n        } }, { key: \"_applyDefaults\", value: function() {\n          this._cachedFillStyle = this._cachedStrokeStyle = void 0, this._cachedBlendMode = h.BLEND, this._setFill(h._DEFAULT_FILL), this._setStroke(h._DEFAULT_STROKE), this.drawingContext.lineCap = h.ROUND, this.drawingContext.font = \"normal 12px sans-serif\";\n        } }, { key: \"resize\", value: function(_, S) {\n          r(i(T.prototype), \"resize\", this).call(this, _, S), this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity);\n        } }, { key: \"background\", value: function() {\n          var _, S;\n          this.drawingContext.save(), this.resetMatrix(), (arguments.length <= 0 ? void 0 : arguments[0]) instanceof u.default.Image ? 0 <= (arguments.length <= 1 ? void 0 : arguments[1]) ? (_ = arguments.length <= 0 ? void 0 : arguments[0], this.drawingContext.globalAlpha = (arguments.length <= 1 ? void 0 : arguments[1]) / 255, this._pInst.image(_, 0, 0, this.width, this.height)) : this._pInst.image(arguments.length <= 0 ? void 0 : arguments[0], 0, 0, this.width, this.height) : (_ = this._getFill(), S = (S = this._pInst).color.apply(S, arguments), this._pInst._addAccsOutput() && this._pInst._accsBackground(S.levels), S = S.toString(), this._setFill(S), this._isErasing && this.blendMode(this._cachedBlendMode), this.drawingContext.fillRect(0, 0, this.width, this.height), this._setFill(_), this._isErasing && this._pInst.erase()), this.drawingContext.restore();\n        } }, { key: \"clear\", value: function() {\n          this.drawingContext.save(), this.resetMatrix(), this.drawingContext.clearRect(0, 0, this.width, this.height), this.drawingContext.restore();\n        } }, { key: \"fill\", value: function() {\n          var _ = (_ = this._pInst).color.apply(_, arguments);\n          this._setFill(_.toString()), this._pInst._addAccsOutput() && this._pInst._accsCanvasColors(\"fill\", _.levels);\n        } }, { key: \"stroke\", value: function() {\n          var _ = (_ = this._pInst).color.apply(_, arguments);\n          this._setStroke(_.toString()), this._pInst._addAccsOutput() && this._pInst._accsCanvasColors(\"stroke\", _.levels);\n        } }, { key: \"erase\", value: function(_, S) {\n          this._isErasing || (this._cachedFillStyle = this.drawingContext.fillStyle, _ = this._pInst.color(255, _).toString(), this.drawingContext.fillStyle = _, this._cachedStrokeStyle = this.drawingContext.strokeStyle, _ = this._pInst.color(255, S).toString(), this.drawingContext.strokeStyle = _, S = this._cachedBlendMode, this.blendMode(h.REMOVE), this._cachedBlendMode = S, this._isErasing = !0);\n        } }, { key: \"noErase\", value: function() {\n          this._isErasing && (this.drawingContext.fillStyle = this._cachedFillStyle, this.drawingContext.strokeStyle = this._cachedStrokeStyle, this.blendMode(this._cachedBlendMode), this._isErasing = !1);\n        } }, { key: \"beginClip\", value: function() {\n          var _ = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {}, _ = (r(i(T.prototype), \"beginClip\", this).call(this, _), this._cachedFillStyle = this.drawingContext.fillStyle, this._pInst.color(255, 0).toString()), _ = (this.drawingContext.fillStyle = _, this._cachedStrokeStyle = this.drawingContext.strokeStyle, this._pInst.color(255, 0).toString()), _ = (this.drawingContext.strokeStyle = _, this._cachedBlendMode);\n          this.blendMode(h.BLEND), this._cachedBlendMode = _, this.drawingContext.beginPath(), this._clipInvert && (this.drawingContext.moveTo(-2 * this.width, -2 * this.height), this.drawingContext.lineTo(-2 * this.width, 2 * this.height), this.drawingContext.lineTo(2 * this.width, 2 * this.height), this.drawingContext.lineTo(2 * this.width, -2 * this.height), this.drawingContext.closePath());\n        } }, { key: \"endClip\", value: function() {\n          this._doFillStrokeClose(), this.drawingContext.clip(), r(i(T.prototype), \"endClip\", this).call(this), this.drawingContext.fillStyle = this._cachedFillStyle, this.drawingContext.strokeStyle = this._cachedStrokeStyle, this.blendMode(this._cachedBlendMode);\n        } }, { key: \"image\", value: function(_, S, E, A, x, P, M, R, L) {\n          _.gifProperties && _._animateGif(this._pInst);\n          try {\n            u.default.MediaElement && _ instanceof u.default.MediaElement && _._ensureCanvas();\n            var F = (F = this._tint && _.canvas ? this._getTintedImageCanvas(_) : F) || _.canvas || _.elt, V = 1;\n            _.width && 0 < _.width && (V = F.width / _.width), this._isErasing && this.blendMode(this._cachedBlendMode), this.drawingContext.drawImage(F, V * S, V * E, V * A, V * x, P, M, R, L), this._isErasing && this._pInst.erase();\n          } catch (G) {\n            if (G.name !== \"NS_ERROR_NOT_AVAILABLE\")\n              throw G;\n          }\n        } }, { key: \"_getTintedImageCanvas\", value: function(_) {\n          if (!_.canvas)\n            return _;\n          _.tintCanvas || (_.tintCanvas = document.createElement(\"canvas\")), _.tintCanvas.width !== _.canvas.width && (_.tintCanvas.width = _.canvas.width), _.tintCanvas.height !== _.canvas.height && (_.tintCanvas.height = _.canvas.height);\n          var S = _.tintCanvas.getContext(\"2d\");\n          return S.save(), S.clearRect(0, 0, _.canvas.width, _.canvas.height), (this._tint[0] < 255 || this._tint[1] < 255 || this._tint[2] < 255) && (S.drawImage(_.canvas, 0, 0), S.globalCompositeOperation = \"luminosity\", S.drawImage(_.canvas, 0, 0), S.globalCompositeOperation = \"color\", S.drawImage(_.canvas, 0, 0), S.globalCompositeOperation = \"multiply\", S.fillStyle = \"rgb(\".concat(this._tint.slice(0, 3).join(\", \"), \")\"), S.fillRect(0, 0, _.canvas.width, _.canvas.height), S.globalCompositeOperation = \"destination-in\"), S.globalAlpha = this._tint[3] / 255, S.drawImage(_.canvas, 0, 0), S.restore(), _.tintCanvas;\n        } }, { key: \"blendMode\", value: function(_) {\n          if (_ === h.SUBTRACT)\n            console.warn(\"blendMode(SUBTRACT) only works in WEBGL mode.\");\n          else {\n            if (_ !== h.BLEND && _ !== h.REMOVE && _ !== h.DARKEST && _ !== h.LIGHTEST && _ !== h.DIFFERENCE && _ !== h.MULTIPLY && _ !== h.EXCLUSION && _ !== h.SCREEN && _ !== h.REPLACE && _ !== h.OVERLAY && _ !== h.HARD_LIGHT && _ !== h.SOFT_LIGHT && _ !== h.DODGE && _ !== h.BURN && _ !== h.ADD)\n              throw new Error(\"Mode \".concat(_, \" not recognized.\"));\n            this._cachedBlendMode = _, this.drawingContext.globalCompositeOperation = _;\n          }\n        } }, { key: \"blend\", value: function() {\n          for (var _ = this.drawingContext.globalCompositeOperation, S = arguments.length, E = new Array(S), A = 0; A < S; A++)\n            E[A] = arguments[A];\n          var x = E[E.length - 1], P = Array.prototype.slice.call(E, 0, E.length - 1);\n          this.drawingContext.globalCompositeOperation = x, u.default.prototype.copy.apply(this, P), this.drawingContext.globalCompositeOperation = _;\n        } }, { key: \"_getPixel\", value: function(_, S) {\n          return _ = this.drawingContext.getImageData(_, S, 1, 1).data, [_[0], _[1], _[2], _[3]];\n        } }, { key: \"loadPixels\", value: function() {\n          var _ = this._pixelsState, S = _._pixelDensity, E = this.width * S, S = this.height * S, E = this.drawingContext.getImageData(0, 0, E, S);\n          _._setProperty(\"imageData\", E), _._setProperty(\"pixels\", E.data);\n        } }, { key: \"set\", value: function(_, S, E) {\n          _ = Math.floor(_), S = Math.floor(S);\n          var A = this._pixelsState;\n          if (E instanceof u.default.Image)\n            this.drawingContext.save(), this.drawingContext.setTransform(1, 0, 0, 1, 0, 0), this.drawingContext.scale(A._pixelDensity, A._pixelDensity), this.drawingContext.clearRect(_, S, E.width, E.height), this.drawingContext.drawImage(E.canvas, _, S), this.drawingContext.restore();\n          else {\n            var x = 0, P = 0, M = 0, R = 0, L = 4 * (S * A._pixelDensity * (this.width * A._pixelDensity) + _ * A._pixelDensity);\n            if (A.imageData || A.loadPixels(), typeof E == \"number\")\n              L < A.pixels.length && (M = P = x = E, R = 255);\n            else if (Array.isArray(E)) {\n              if (E.length < 4)\n                throw new Error(\"pixel array must be of the form [R, G, B, A]\");\n              L < A.pixels.length && (x = E[0], P = E[1], M = E[2], R = E[3]);\n            } else\n              E instanceof u.default.Color && L < A.pixels.length && (x = E.levels[0], P = E.levels[1], M = E.levels[2], R = E.levels[3]);\n            for (var F = 0; F < A._pixelDensity; F++)\n              for (var V = 0; V < A._pixelDensity; V++)\n                L = 4 * ((S * A._pixelDensity + V) * this.width * A._pixelDensity + (_ * A._pixelDensity + F)), A.pixels[L] = x, A.pixels[L + 1] = P, A.pixels[L + 2] = M, A.pixels[L + 3] = R;\n          }\n        } }, { key: \"updatePixels\", value: function(_, S, E, A) {\n          var x = this._pixelsState, P = x._pixelDensity;\n          _ === void 0 && S === void 0 && E === void 0 && A === void 0 && (S = _ = 0, E = this.width, A = this.height), _ *= P, S *= P, E *= P, A *= P, this.gifProperties && (this.gifProperties.frames[this.gifProperties.displayIndex].image = x.imageData), this.drawingContext.putImageData(x.imageData, _, S, 0, 0, E, A);\n        } }, { key: \"_acuteArcToBezier\", value: function(_, S) {\n          var P = S / 2, E = Math.cos(P), R = Math.sin(P), A = 1 / Math.tan(P), P = _ + P, x = Math.cos(P), P = Math.sin(P), M = (4 - E) / 3, R = R + (E - M) * A;\n          return { ax: Math.cos(_).toFixed(7), ay: Math.sin(_).toFixed(7), bx: (M * x + R * P).toFixed(7), by: (M * P - R * x).toFixed(7), cx: (M * x - R * P).toFixed(7), cy: (M * P + R * x).toFixed(7), dx: Math.cos(_ + S).toFixed(7), dy: Math.sin(_ + S).toFixed(7) };\n        } }, { key: \"arc\", value: function(_, S, E, A, x, P, M) {\n          var R, L = this.drawingContext, F = E / 2, V = A / 2, G = [];\n          for (_ += F, S += V; 1e-5 <= P - x; )\n            R = Math.min(P - x, h.HALF_PI), G.push(this._acuteArcToBezier(x, R)), x += R;\n          return this._doFill && (this._clipping || L.beginPath(), G.forEach(function(U, W) {\n            W === 0 && L.moveTo(_ + U.ax * F, S + U.ay * V), L.bezierCurveTo(_ + U.bx * F, S + U.by * V, _ + U.cx * F, S + U.cy * V, _ + U.dx * F, S + U.dy * V);\n          }), M !== h.PIE && M != null || L.lineTo(_, S), L.closePath(), this._clipping || L.fill()), this._doStroke && (this._clipping || L.beginPath(), G.forEach(function(U, W) {\n            W === 0 && L.moveTo(_ + U.ax * F, S + U.ay * V), L.bezierCurveTo(_ + U.bx * F, S + U.by * V, _ + U.cx * F, S + U.cy * V, _ + U.dx * F, S + U.dy * V);\n          }), M === h.PIE ? (L.lineTo(_, S), L.closePath()) : M === h.CHORD && L.closePath(), this._clipping || L.stroke()), this;\n        } }, { key: \"ellipse\", value: function(R) {\n          var S = this.drawingContext, E = this._doFill, A = this._doStroke, x = parseFloat(R[0]), P = parseFloat(R[1]), M = parseFloat(R[2]), R = parseFloat(R[3]);\n          if (E && !A) {\n            if (this._getFill() === l)\n              return this;\n          } else if (!E && A && this._getStroke() === l)\n            return this;\n          x += M / 2, P += R / 2, M /= 2, R /= 2, this._clipping || S.beginPath(), S.ellipse(x, P, M, R, 0, 0, 2 * Math.PI), !this._clipping && E && S.fill(), !this._clipping && A && S.stroke();\n        } }, { key: \"line\", value: function(_, S, E, A) {\n          var x = this.drawingContext;\n          return this._doStroke && this._getStroke() !== l && (this._clipping || x.beginPath(), x.moveTo(_, S), x.lineTo(E, A), x.stroke()), this;\n        } }, { key: \"point\", value: function(_, S) {\n          var E, A, x = this.drawingContext;\n          return !this._doStroke || this._getStroke() === l ? this : (E = this._getStroke(), A = this._getFill(), this._clipping || this._setFill(E), this._clipping || x.beginPath(), x.arc(_, S, x.lineWidth / 2, 0, h.TWO_PI, !1), void (this._clipping || (x.fill(), this._setFill(A))));\n        } }, { key: \"quad\", value: function(_, S, E, A, x, P, M, R) {\n          var L = this.drawingContext, F = this._doFill, V = this._doStroke;\n          if (F && !V) {\n            if (this._getFill() === l)\n              return this;\n          } else if (!F && V && this._getStroke() === l)\n            return this;\n          return this._clipping || L.beginPath(), L.moveTo(_, S), L.lineTo(E, A), L.lineTo(x, P), L.lineTo(M, R), L.closePath(), !this._clipping && F && L.fill(), !this._clipping && V && L.stroke(), this;\n        } }, { key: \"rect\", value: function(V) {\n          var S, E, A = V[0], x = V[1], P = V[2], M = V[3], R = V[4], L = V[5], F = V[6], V = V[7], G = this.drawingContext, U = this._doFill, W = this._doStroke;\n          if (U && !W) {\n            if (this._getFill() === l)\n              return this;\n          } else if (!U && W && this._getStroke() === l)\n            return this;\n          return this._clipping || G.beginPath(), R === void 0 ? G.rect(A, x, P, M) : (L === void 0 && (L = R), F === void 0 && (F = L), V === void 0 && (V = F), W = (U = Math.abs(P)) / 2, E = (S = Math.abs(M)) / 2, S < 2 * (R = U < 2 * R ? W : R) && (R = E), S < 2 * (L = U < 2 * L ? W : L) && (L = E), S < 2 * (F = U < 2 * F ? W : F) && (F = E), S < 2 * (V = U < 2 * V ? W : V) && (V = E), this._clipping || G.beginPath(), G.moveTo(A + R, x), G.arcTo(A + P, x, A + P, x + M, L), G.arcTo(A + P, x + M, A, x + M, F), G.arcTo(A, x + M, A, x, V), G.arcTo(A, x, A + P, x, R), G.closePath()), !this._clipping && this._doFill && G.fill(), !this._clipping && this._doStroke && G.stroke(), this;\n        } }, { key: \"triangle\", value: function(F) {\n          var S = this.drawingContext, E = this._doFill, A = this._doStroke, x = F[0], P = F[1], M = F[2], R = F[3], L = F[4], F = F[5];\n          if (E && !A) {\n            if (this._getFill() === l)\n              return this;\n          } else if (!E && A && this._getStroke() === l)\n            return this;\n          this._clipping || S.beginPath(), S.moveTo(x, P), S.lineTo(M, R), S.lineTo(L, F), S.closePath(), !this._clipping && E && S.fill(), !this._clipping && A && S.stroke();\n        } }, { key: \"endShape\", value: function(_, S, E, A, x, P, M) {\n          if (S.length !== 0 && (this._doStroke || this._doFill)) {\n            var R, L, F, V = _ === h.CLOSE, G = (V && !P && S.push(S[0]), S.length);\n            if (E && M === null) {\n              if (3 < G) {\n                var U = [], W = 1 - this._curveTightness;\n                for (this._clipping || this.drawingContext.beginPath(), this.drawingContext.moveTo(S[1][0], S[1][1]), L = 1; L + 2 < G; L++)\n                  R = S[L], U[0] = [R[0], R[1]], U[1] = [R[0] + (W * S[L + 1][0] - W * S[L - 1][0]) / 6, R[1] + (W * S[L + 1][1] - W * S[L - 1][1]) / 6], U[2] = [S[L + 1][0] + (W * S[L][0] - W * S[L + 2][0]) / 6, S[L + 1][1] + (W * S[L][1] - W * S[L + 2][1]) / 6], U[3] = [S[L + 1][0], S[L + 1][1]], this.drawingContext.bezierCurveTo(U[1][0], U[1][1], U[2][0], U[2][1], U[3][0], U[3][1]);\n                V && this.drawingContext.lineTo(S[L + 1][0], S[L + 1][1]), this._doFillStrokeClose(V);\n              }\n            } else if (A && M === null) {\n              for (this._clipping || this.drawingContext.beginPath(), L = 0; L < G; L++)\n                S[L].isVert ? S[L].moveTo ? this.drawingContext.moveTo(S[L][0], S[L][1]) : this.drawingContext.lineTo(S[L][0], S[L][1]) : this.drawingContext.bezierCurveTo(S[L][0], S[L][1], S[L][2], S[L][3], S[L][4], S[L][5]);\n              this._doFillStrokeClose(V);\n            } else if (x && M === null) {\n              for (this._clipping || this.drawingContext.beginPath(), L = 0; L < G; L++)\n                S[L].isVert ? S[L].moveTo ? this.drawingContext.moveTo(S[L][0], S[L][1]) : this.drawingContext.lineTo(S[L][0], S[L][1]) : this.drawingContext.quadraticCurveTo(S[L][0], S[L][1], S[L][2], S[L][3]);\n              this._doFillStrokeClose(V);\n            } else if (M === h.POINTS)\n              for (L = 0; L < G; L++)\n                R = S[L], this._doStroke && this._pInst.stroke(R[6]), this._pInst.point(R[0], R[1]);\n            else if (M === h.LINES)\n              for (L = 0; L + 1 < G; L += 2)\n                R = S[L], this._doStroke && this._pInst.stroke(S[L + 1][6]), this._pInst.line(R[0], R[1], S[L + 1][0], S[L + 1][1]);\n            else if (M === h.TRIANGLES)\n              for (L = 0; L + 2 < G; L += 3)\n                R = S[L], this._clipping || this.drawingContext.beginPath(), this.drawingContext.moveTo(R[0], R[1]), this.drawingContext.lineTo(S[L + 1][0], S[L + 1][1]), this.drawingContext.lineTo(S[L + 2][0], S[L + 2][1]), this.drawingContext.closePath(), !this._clipping && this._doFill && (this._pInst.fill(S[L + 2][5]), this.drawingContext.fill()), !this._clipping && this._doStroke && (this._pInst.stroke(S[L + 2][6]), this.drawingContext.stroke());\n            else if (M === h.TRIANGLE_STRIP)\n              for (L = 0; L + 1 < G; L++)\n                R = S[L], this._clipping || this.drawingContext.beginPath(), this.drawingContext.moveTo(S[L + 1][0], S[L + 1][1]), this.drawingContext.lineTo(R[0], R[1]), !this._clipping && this._doStroke && this._pInst.stroke(S[L + 1][6]), !this._clipping && this._doFill && this._pInst.fill(S[L + 1][5]), L + 2 < G && (this.drawingContext.lineTo(S[L + 2][0], S[L + 2][1]), !this._clipping && this._doStroke && this._pInst.stroke(S[L + 2][6]), !this._clipping && this._doFill && this._pInst.fill(S[L + 2][5])), this._doFillStrokeClose(V);\n            else if (M === h.TRIANGLE_FAN) {\n              if (2 < G) {\n                for (this._clipping || this.drawingContext.beginPath(), L = 2; L < G; L++)\n                  R = S[L], this.drawingContext.moveTo(S[0][0], S[0][1]), this.drawingContext.lineTo(S[L - 1][0], S[L - 1][1]), this.drawingContext.lineTo(R[0], R[1]), this.drawingContext.lineTo(S[0][0], S[0][1]), L < G - 1 && (this._doFill && R[5] !== S[L + 1][5] || this._doStroke && R[6] !== S[L + 1][6]) && (!this._clipping && this._doFill && (this._pInst.fill(R[5]), this.drawingContext.fill(), this._pInst.fill(S[L + 1][5])), !this._clipping && this._doStroke && (this._pInst.stroke(R[6]), this.drawingContext.stroke(), this._pInst.stroke(S[L + 1][6])), this.drawingContext.closePath(), this._clipping || this.drawingContext.beginPath());\n                this._doFillStrokeClose(V);\n              }\n            } else if (M === h.QUADS)\n              for (L = 0; L + 3 < G; L += 4) {\n                for (R = S[L], this._clipping || this.drawingContext.beginPath(), this.drawingContext.moveTo(R[0], R[1]), F = 1; F < 4; F++)\n                  this.drawingContext.lineTo(S[L + F][0], S[L + F][1]);\n                this.drawingContext.lineTo(R[0], R[1]), !this._clipping && this._doFill && this._pInst.fill(S[L + 3][5]), !this._clipping && this._doStroke && this._pInst.stroke(S[L + 3][6]), this._doFillStrokeClose(V);\n              }\n            else if (M === h.QUAD_STRIP) {\n              if (3 < G)\n                for (L = 0; L + 1 < G; L += 2)\n                  R = S[L], this._clipping || this.drawingContext.beginPath(), L + 3 < G ? (this.drawingContext.moveTo(S[L + 2][0], S[L + 2][1]), this.drawingContext.lineTo(R[0], R[1]), this.drawingContext.lineTo(S[L + 1][0], S[L + 1][1]), this.drawingContext.lineTo(S[L + 3][0], S[L + 3][1]), !this._clipping && this._doFill && this._pInst.fill(S[L + 3][5]), !this._clipping && this._doStroke && this._pInst.stroke(S[L + 3][6])) : (this.drawingContext.moveTo(R[0], R[1]), this.drawingContext.lineTo(S[L + 1][0], S[L + 1][1])), this._doFillStrokeClose(V);\n            } else {\n              for (this._clipping || this.drawingContext.beginPath(), this.drawingContext.moveTo(S[0][0], S[0][1]), L = 1; L < G; L++)\n                (R = S[L]).isVert && (R.moveTo ? (V && this.drawingContext.closePath(), this.drawingContext.moveTo(R[0], R[1])) : this.drawingContext.lineTo(R[0], R[1]));\n              this._doFillStrokeClose(V);\n            }\n            P = x = A = E = !1, V && S.pop();\n          }\n          return this;\n        } }, { key: \"strokeCap\", value: function(_) {\n          return _ !== h.ROUND && _ !== h.SQUARE && _ !== h.PROJECT || (this.drawingContext.lineCap = _), this;\n        } }, { key: \"strokeJoin\", value: function(_) {\n          return _ !== h.ROUND && _ !== h.BEVEL && _ !== h.MITER || (this.drawingContext.lineJoin = _), this;\n        } }, { key: \"strokeWeight\", value: function(_) {\n          return this.drawingContext.lineWidth = _ === void 0 || _ === 0 ? 1e-4 : _, this;\n        } }, { key: \"_getFill\", value: function() {\n          return this._cachedFillStyle || (this._cachedFillStyle = this.drawingContext.fillStyle), this._cachedFillStyle;\n        } }, { key: \"_setFill\", value: function(_) {\n          _ !== this._cachedFillStyle && (this.drawingContext.fillStyle = _, this._cachedFillStyle = _);\n        } }, { key: \"_getStroke\", value: function() {\n          return this._cachedStrokeStyle || (this._cachedStrokeStyle = this.drawingContext.strokeStyle), this._cachedStrokeStyle;\n        } }, { key: \"_setStroke\", value: function(_) {\n          _ !== this._cachedStrokeStyle && (this.drawingContext.strokeStyle = _, this._cachedStrokeStyle = _);\n        } }, { key: \"bezier\", value: function(_, S, E, A, x, P, M, R) {\n          return this._pInst.beginShape(), this._pInst.vertex(_, S), this._pInst.bezierVertex(E, A, x, P, M, R), this._pInst.endShape(), this;\n        } }, { key: \"curve\", value: function(_, S, E, A, x, P, M, R) {\n          return this._pInst.beginShape(), this._pInst.curveVertex(_, S), this._pInst.curveVertex(E, A), this._pInst.curveVertex(x, P), this._pInst.curveVertex(M, R), this._pInst.endShape(), this;\n        } }, { key: \"_doFillStrokeClose\", value: function(_) {\n          _ && this.drawingContext.closePath(), !this._clipping && this._doFill && this.drawingContext.fill(), !this._clipping && this._doStroke && this.drawingContext.stroke();\n        } }, { key: \"applyMatrix\", value: function(_, S, E, A, x, P) {\n          this.drawingContext.transform(_, S, E, A, x, P);\n        } }, { key: \"resetMatrix\", value: function() {\n          return this.drawingContext.setTransform(1, 0, 0, 1, 0, 0), this.drawingContext.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), this;\n        } }, { key: \"rotate\", value: function(_) {\n          this.drawingContext.rotate(_);\n        } }, { key: \"scale\", value: function(_, S) {\n          return this.drawingContext.scale(_, S), this;\n        } }, { key: \"translate\", value: function(_, S) {\n          return _ instanceof u.default.Vector && (S = _.y, _ = _.x), this.drawingContext.translate(_, S), this;\n        } }, { key: \"_renderText\", value: function(_, S, E, A, x, P) {\n          if (!(A < P || x <= A))\n            return _.push(), this._isOpenType() ? this._textFont._renderPath(S, E, A, { renderer: this }) : (this._doStroke && this._strokeSet && this.drawingContext.strokeText(S, E, A), !this._clipping && this._doFill && (this._fillSet || this._setFill(h._DEFAULT_TEXT_FILL), this.drawingContext.fillText(S, E, A))), _.pop(), _;\n        } }, { key: \"textWidth\", value: function(_) {\n          return this._isOpenType() ? this._textFont._textWidth(_, this._textSize) : this.drawingContext.measureText(_).width;\n        } }, { key: \"_applyTextProperties\", value: function() {\n          var _ = this._pInst, S = (this._setProperty(\"_textAscent\", null), this._setProperty(\"_textDescent\", null), S = this._textFont, this._isOpenType() && (S = this._textFont.font.familyName, this._setProperty(\"_textStyle\", this._textFont.font.styleName)), S || \"sans-serif\");\n          return /\\s/.exec(S) && (S = '\"'.concat(S, '\"')), this.drawingContext.font = \"\".concat(this._textStyle || \"normal\", \" \").concat(this._textSize || 12, \"px \").concat(S), this.drawingContext.textAlign = this._textAlign, this._textBaseline === h.CENTER ? this.drawingContext.textBaseline = h._CTX_MIDDLE : this.drawingContext.textBaseline = this._textBaseline, _;\n        } }, { key: \"push\", value: function() {\n          return this.drawingContext.save(), r(i(T.prototype), \"push\", this).call(this);\n        } }, { key: \"pop\", value: function(_) {\n          this.drawingContext.restore(), this._cachedFillStyle = this.drawingContext.fillStyle, this._cachedStrokeStyle = this.drawingContext.strokeStyle, r(i(T.prototype), \"pop\", this).call(this, _);\n        } }]) && f(p.prototype, c), T;\n      }(u.default.Renderer), a = (n.prototype.text = function(c, p, j, E, _) {\n        E !== void 0 && this.drawingContext.textBaseline === h.BASELINE && (S = !0, this.drawingContext.textBaseline = h.TOP);\n        var S, E = u.default.Renderer.prototype.text.apply(this, arguments);\n        return S && (this.drawingContext.textBaseline = h.BASELINE), E;\n      }, u.default.Renderer2D = n, u.default.Renderer2D);\n      C.default = a;\n    }, { \"./constants\": 269, \"./main\": 280, \"./p5.Renderer\": 283, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.fill\": 155, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.function.name\": 173, \"core-js/modules/es.number.to-fixed\": 180, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.get-prototype-of\": 185, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.reflect.construct\": 189, \"core-js/modules/es.reflect.get\": 190, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 285: [function(t, H, C) {\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\");\n      var m = (t = t(\"./main\")) && t.__esModule ? t : { default: t };\n      m.default.prototype._promisePreloads = [];\n      function y() {\n        return {};\n      }\n      var u = !(m.default.prototype.registerPromisePreload = function(h) {\n        m.default.prototype._promisePreloads.push(h);\n      });\n      m.default.prototype._setupPromisePreloads = function() {\n        var h = !0, g = !1, f = void 0;\n        try {\n          for (var r, s = this._promisePreloads[Symbol.iterator](); !(h = (r = s.next()).done); h = !0) {\n            var o = r.value, i = this, l = o.method, n = o.addCallbacks, a = o.legacyPreloadSetup, c = o.target || this, p = c[l].bind(c);\n            if (c === m.default.prototype) {\n              if (u)\n                continue;\n              i = null, p = c[l];\n            }\n            c[l] = this._wrapPromisePreload(i, p, n), a && (c[a.method] = this._legacyPreloadGenerator(i, a, c[l]));\n          }\n        } catch (j) {\n          g = !0, f = j;\n        } finally {\n          try {\n            h || s.return == null || s.return();\n          } finally {\n            if (g)\n              throw f;\n          }\n        }\n        u = !0;\n      }, m.default.prototype._wrapPromisePreload = function(h, g, f) {\n        var r = function() {\n          for (var s = this, o = (this._incrementPreload(), null), i = null, l = arguments.length, n = new Array(l), a = 0; a < l; a++)\n            n[a] = arguments[a];\n          if (f)\n            for (var c = n.length - 1; 0 <= c && !i && typeof n[c] == \"function\"; c--)\n              i = o, o = n.pop();\n          var p = Promise.resolve(g.apply(this, n));\n          return o && p.then(o), i && p.catch(i), p.then(function() {\n            return s._decrementPreload();\n          }), p;\n        };\n        return r = h ? r.bind(h) : r;\n      }, m.default.prototype._legacyPreloadGenerator = function(h, s, f) {\n        var r = s.createBaseObject || y, s = function() {\n          var o = this;\n          this._incrementPreload();\n          for (var i = arguments.length, l = new Array(i), n = 0; n < i; n++)\n            l[n] = arguments[n];\n          var a = r.apply(this, l);\n          return f.apply(this, l).then(function(c) {\n            Object.assign(a, c), o._decrementPreload();\n          }), a;\n        };\n        return s = h ? s.bind(h) : s;\n      };\n    }, { \"./main\": 280, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.assign\": 181, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.promise\": 188, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.iterator\": 243 }], 286: [function(t, H, C) {\n      function m(s) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(o) {\n          return typeof o;\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n        })(s);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var y = (r = t(\"./main\")) && r.__esModule ? r : { default: r }, u = function(s) {\n        if (s && s.__esModule)\n          return s;\n        if (s === null || g(s) !== \"object\" && typeof s != \"function\")\n          return { default: s };\n        var o = h();\n        if (o && o.has(s))\n          return o.get(s);\n        var i, l = {}, n = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (i in s) {\n          var a;\n          Object.prototype.hasOwnProperty.call(s, i) && ((a = n ? Object.getOwnPropertyDescriptor(s, i) : null) && (a.get || a.set) ? Object.defineProperty(l, i, a) : l[i] = s[i]);\n        }\n        return l.default = s, o && o.set(s, l), l;\n      }(t(\"./constants\"));\n      function h() {\n        var s;\n        return typeof WeakMap != \"function\" ? null : (s = /* @__PURE__ */ new WeakMap(), h = function() {\n          return s;\n        }, s);\n      }\n      function g(s) {\n        return (g = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(o) {\n          return m(o);\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : m(o);\n        })(s);\n      }\n      t(\"./p5.Graphics\"), t(\"./p5.Renderer2D\"), t(\"../webgl/p5.RendererGL\");\n      var f = \"defaultCanvas0\", r = (y.default.prototype.createCanvas = function(s, o, i, l) {\n        var n, a, c;\n        if (y.default._validateParameters(\"createCanvas\", arguments), arguments[2] instanceof HTMLCanvasElement ? (i = u.P2D, l = arguments[2]) : n = i || u.P2D, l)\n          (c = document.getElementById(f)) && c.parentNode.removeChild(c), c = l, this._defaultGraphicsCreated = !1;\n        else {\n          if (n === u.WEBGL)\n            (c = document.getElementById(f)) && (c.parentNode.removeChild(c), a = this._renderer, this._elements = this._elements.filter(function(j) {\n              return j !== a;\n            })), (c = document.createElement(\"canvas\")).id = f, c.classList.add(\"p5Canvas\");\n          else if (this._defaultGraphicsCreated)\n            c = this.canvas;\n          else {\n            c = l || document.createElement(\"canvas\");\n            for (var p = 0; document.getElementById(\"defaultCanvas\".concat(p)); )\n              p++;\n            f = \"defaultCanvas\".concat(p), c.id = f, c.classList.add(\"p5Canvas\");\n          }\n          this._setupDone || (c.dataset.hidden = !0, c.style.visibility = \"hidden\"), (this._userNode || (document.getElementsByTagName(\"main\").length === 0 && (i = document.createElement(\"main\"), document.body.appendChild(i)), document.getElementsByTagName(\"main\")[0])).appendChild(c);\n        }\n        return n === u.WEBGL ? (this._setProperty(\"_renderer\", new y.default.RendererGL(c, this, !0)), this._elements.push(this._renderer), s = (l = this._renderer._adjustDimensions(s, o)).adjustedWidth, o = l.adjustedHeight) : this._defaultGraphicsCreated || (this._setProperty(\"_renderer\", new y.default.Renderer2D(c, this, !0)), this._defaultGraphicsCreated = !0, this._elements.push(this._renderer)), this._renderer.resize(s, o), this._renderer._applyDefaults(), this._renderer;\n      }, y.default.prototype.resizeCanvas = function(s, o, i) {\n        if (y.default._validateParameters(\"resizeCanvas\", arguments), this._renderer) {\n          var l, n, a, c = {};\n          for (l in this.drawingContext) {\n            var p = this.drawingContext[l];\n            g(p) !== \"object\" && typeof p != \"function\" && (c[l] = p);\n          }\n          for (a in this._renderer instanceof y.default.RendererGL && (s = (n = this._renderer._adjustDimensions(s, o)).adjustedWidth, o = n.adjustedHeight), this.width = s, this.height = o, this._renderer.resize(s, o), c)\n            try {\n              this.drawingContext[a] = c[a];\n            } catch {\n            }\n          i || this.redraw();\n        }\n        this._addAccsOutput() && this._updateAccsOutput();\n      }, y.default.prototype.noCanvas = function() {\n        this.canvas && this.canvas.parentNode.removeChild(this.canvas);\n      }, y.default.prototype.createGraphics = function(s, o) {\n        for (var i = arguments.length, l = new Array(2 < i ? i - 2 : 0), n = 2; n < i; n++)\n          l[n - 2] = arguments[n];\n        return l[0] instanceof HTMLCanvasElement && (l[1] = l[0], l[0] = u.P2D), y.default._validateParameters(\"createGraphics\", arguments), new y.default.Graphics(s, o, l[0], this, l[1]);\n      }, y.default.prototype.createFramebuffer = function(s) {\n        return new y.default.Framebuffer(this, s);\n      }, y.default.prototype.clearDepth = function(s) {\n        this._assert3d(\"clearDepth\"), this._renderer.clearDepth(s);\n      }, y.default.prototype.blendMode = function(s) {\n        y.default._validateParameters(\"blendMode\", arguments), s === u.NORMAL && (console.warn(\"NORMAL has been deprecated for use in blendMode. defaulting to BLEND instead.\"), s = u.BLEND), this._renderer.blendMode(s);\n      }, y.default);\n      C.default = r;\n    }, { \"../webgl/p5.RendererGL\": 337, \"./constants\": 269, \"./main\": 280, \"./p5.Graphics\": 282, \"./p5.Renderer2D\": 284, \"core-js/modules/es.array.filter\": 156, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 287: [function(t, H, C) {\n      function m(o) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(i) {\n          return typeof i;\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : typeof i;\n        })(o);\n      }\n      function y(o) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(i) {\n          return m(i);\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : m(i);\n        })(o);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.slice\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = r(t(\"../main\")), h = function(o) {\n        if (o && o.__esModule)\n          return o;\n        if (o === null || y(o) !== \"object\" && typeof o != \"function\")\n          return { default: o };\n        var i = f();\n        if (i && i.has(o))\n          return i.get(o);\n        var l, n = {}, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (l in o) {\n          var c;\n          Object.prototype.hasOwnProperty.call(o, l) && ((c = a ? Object.getOwnPropertyDescriptor(o, l) : null) && (c.get || c.set) ? Object.defineProperty(n, l, c) : n[l] = o[l]);\n        }\n        return n.default = o, i && i.set(o, n), n;\n      }(t(\"../constants\")), g = r(t(\"../helpers\"));\n      function f() {\n        var o;\n        return typeof WeakMap != \"function\" ? null : (o = /* @__PURE__ */ new WeakMap(), f = function() {\n          return o;\n        }, o);\n      }\n      function r(o) {\n        return o && o.__esModule ? o : { default: o };\n      }\n      function s(o) {\n        return function(i) {\n          if (Array.isArray(i)) {\n            for (var l = 0, n = new Array(i.length); l < i.length; l++)\n              n[l] = i[l];\n            return n;\n          }\n        }(o) || function(i) {\n          if (Symbol.iterator in Object(i) || Object.prototype.toString.call(i) === \"[object Arguments]\")\n            return Array.from(i);\n        }(o) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      t(\"../friendly_errors/fes_core\"), t(\"../friendly_errors/file_errors\"), t(\"../friendly_errors/validate_params\"), u.default.prototype._normalizeArcAngles = function(o, i, l, n, a) {\n        var c;\n        return o -= h.TWO_PI * Math.floor(o / h.TWO_PI), i -= h.TWO_PI * Math.floor(i / h.TWO_PI), c = Math.min(Math.abs(o - i), h.TWO_PI - Math.abs(o - i)), a && (o = o <= h.HALF_PI ? Math.atan(l / n * Math.tan(o)) : o > h.HALF_PI && o <= 3 * h.HALF_PI ? Math.atan(l / n * Math.tan(o)) + h.PI : Math.atan(l / n * Math.tan(o)) + h.TWO_PI, i = i <= h.HALF_PI ? Math.atan(l / n * Math.tan(i)) : i > h.HALF_PI && i <= 3 * h.HALF_PI ? Math.atan(l / n * Math.tan(i)) + h.PI : Math.atan(l / n * Math.tan(i)) + h.TWO_PI), i < o && (i += h.TWO_PI), { start: o, stop: i, correspondToSamePoint: c < 1e-5 };\n      }, u.default.prototype.arc = function(o, i, l, n, a, c, p, j) {\n        return u.default._validateParameters(\"arc\", arguments), (this._renderer._doStroke || this._renderer._doFill) && a !== c && (a = this._toRadians(a), c = this._toRadians(c), l = Math.abs(l), n = Math.abs(n), o = g.default.modeAdjust(o, i, l, n, this._renderer._ellipseMode), (i = this._normalizeArcAngles(a, c, o.w, o.h, !0)).correspondToSamePoint ? this._renderer.ellipse([o.x, o.y, o.w, o.h, j]) : (this._renderer.arc(o.x, o.y, o.w, o.h, i.start, i.stop, p, j), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput(\"arc\", [o.x, o.y, o.w, o.h, i.start, i.stop, p]))), this;\n      }, u.default.prototype.ellipse = function(o, i, l, n, a) {\n        return u.default._validateParameters(\"ellipse\", arguments), this._renderEllipse.apply(this, arguments);\n      }, u.default.prototype.circle = function() {\n        for (var o = arguments.length, i = new Array(o), l = 0; l < o; l++)\n          i[l] = arguments[l];\n        u.default._validateParameters(\"circle\", i);\n        var n = i.slice(0, 2);\n        return n.push(i[2], i[2]), this._renderEllipse.apply(this, s(n));\n      }, u.default.prototype._renderEllipse = function(o, i, l, n, a) {\n        return (this._renderer._doStroke || this._renderer._doFill) && (l < 0 && (l = Math.abs(l)), n === void 0 ? n = l : n < 0 && (n = Math.abs(n)), o = g.default.modeAdjust(o, i, l, n, this._renderer._ellipseMode), this._renderer.ellipse([o.x, o.y, o.w, o.h, a]), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput(\"ellipse\", [o.x, o.y, o.w, o.h])), this;\n      }, u.default.prototype.line = function() {\n        for (var o, i = arguments.length, l = new Array(i), n = 0; n < i; n++)\n          l[n] = arguments[n];\n        return u.default._validateParameters(\"line\", l), this._renderer._doStroke && (o = this._renderer).line.apply(o, l), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput(\"line\", l), this;\n      }, u.default.prototype.point = function() {\n        for (var o, i = arguments.length, l = new Array(i), n = 0; n < i; n++)\n          l[n] = arguments[n];\n        return u.default._validateParameters(\"point\", l), this._renderer._doStroke && (l.length === 1 && l[0] instanceof u.default.Vector ? this._renderer.point.call(this._renderer, l[0].x, l[0].y, l[0].z) : ((o = this._renderer).point.apply(o, l), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput(\"point\", l))), this;\n      }, u.default.prototype.quad = function() {\n        for (var o, i = arguments.length, l = new Array(i), n = 0; n < i; n++)\n          l[n] = arguments[n];\n        return u.default._validateParameters(\"quad\", l), (this._renderer._doStroke || this._renderer._doFill) && (this._renderer.isP3D && l.length < 12 ? this._renderer.quad.call(this._renderer, l[0], l[1], 0, l[2], l[3], 0, l[4], l[5], 0, l[6], l[7], 0, l[8], l[9]) : ((o = this._renderer).quad.apply(o, l), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput(\"quadrilateral\", l))), this;\n      }, u.default.prototype.rect = function() {\n        for (var o = arguments.length, i = new Array(o), l = 0; l < o; l++)\n          i[l] = arguments[l];\n        return u.default._validateParameters(\"rect\", i), this._renderRect.apply(this, i);\n      }, u.default.prototype.square = function(o, i, l, n, a, c, p) {\n        return u.default._validateParameters(\"square\", arguments), this._renderRect.call(this, o, i, l, l, n, a, c, p);\n      }, u.default.prototype._renderRect = function() {\n        if (this._renderer._doStroke || this._renderer._doFill) {\n          arguments.length === 3 && (arguments[3] = arguments[2]);\n          for (var o = g.default.modeAdjust(arguments[0], arguments[1], arguments[2], arguments[3], this._renderer._rectMode), i = [o.x, o.y, o.w, o.h], l = 4; l < arguments.length; l++)\n            i[l] = arguments[l];\n          this._renderer.rect(i), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput(\"rectangle\", [o.x, o.y, o.w, o.h]);\n        }\n        return this;\n      }, u.default.prototype.triangle = function() {\n        for (var o = arguments.length, i = new Array(o), l = 0; l < o; l++)\n          i[l] = arguments[l];\n        return u.default._validateParameters(\"triangle\", i), (this._renderer._doStroke || this._renderer._doFill) && this._renderer.triangle(i), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._accsOutput(\"triangle\", i), this;\n      }, t = u.default, C.default = t;\n    }, { \"../constants\": 269, \"../friendly_errors/fes_core\": 271, \"../friendly_errors/file_errors\": 272, \"../friendly_errors/validate_params\": 275, \"../helpers\": 276, \"../main\": 280, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 288: [function(t, H, C) {\n      function m(r) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(s) {\n          return typeof s;\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : typeof s;\n        })(r);\n      }\n      function y(r) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(s) {\n          return m(s);\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : m(s);\n        })(r);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (f = t(\"../main\")) && f.__esModule ? f : { default: f }, h = function(r) {\n        if (r && r.__esModule)\n          return r;\n        if (r === null || y(r) !== \"object\" && typeof r != \"function\")\n          return { default: r };\n        var s = g();\n        if (s && s.has(r))\n          return s.get(r);\n        var o, i = {}, l = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (o in r) {\n          var n;\n          Object.prototype.hasOwnProperty.call(r, o) && ((n = l ? Object.getOwnPropertyDescriptor(r, o) : null) && (n.get || n.set) ? Object.defineProperty(i, o, n) : i[o] = r[o]);\n        }\n        return i.default = r, s && s.set(r, i), i;\n      }(t(\"../constants\"));\n      function g() {\n        var r;\n        return typeof WeakMap != \"function\" ? null : (r = /* @__PURE__ */ new WeakMap(), g = function() {\n          return r;\n        }, r);\n      }\n      u.default.prototype.ellipseMode = function(r) {\n        return u.default._validateParameters(\"ellipseMode\", arguments), r !== h.CORNER && r !== h.CORNERS && r !== h.RADIUS && r !== h.CENTER || (this._renderer._ellipseMode = r), this;\n      }, u.default.prototype.noSmooth = function() {\n        return this._renderer.isP3D ? this.setAttributes(\"antialias\", !1) : \"imageSmoothingEnabled\" in this.drawingContext && (this.drawingContext.imageSmoothingEnabled = !1), this;\n      }, u.default.prototype.rectMode = function(r) {\n        return u.default._validateParameters(\"rectMode\", arguments), r !== h.CORNER && r !== h.CORNERS && r !== h.RADIUS && r !== h.CENTER || (this._renderer._rectMode = r), this;\n      }, u.default.prototype.smooth = function() {\n        return this.setAttributes(\"antialias\", !0), this._renderer.isP3D || \"imageSmoothingEnabled\" in this.drawingContext && (this.drawingContext.imageSmoothingEnabled = !0), this;\n      }, u.default.prototype.strokeCap = function(r) {\n        return u.default._validateParameters(\"strokeCap\", arguments), r !== h.ROUND && r !== h.SQUARE && r !== h.PROJECT || this._renderer.strokeCap(r), this;\n      }, u.default.prototype.strokeJoin = function(r) {\n        return u.default._validateParameters(\"strokeJoin\", arguments), r !== h.ROUND && r !== h.BEVEL && r !== h.MITER || this._renderer.strokeJoin(r), this;\n      }, u.default.prototype.strokeWeight = function(r) {\n        return u.default._validateParameters(\"strokeWeight\", arguments), this._renderer.strokeWeight(r), this;\n      };\n      var f = u.default;\n      C.default = f;\n    }, { \"../constants\": 269, \"../main\": 280, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 289: [function(t, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (y = t(\"../main\")) && y.__esModule ? y : { default: y };\n      t(\"../friendly_errors/fes_core\"), t(\"../friendly_errors/file_errors\"), t(\"../friendly_errors/validate_params\"), m.default.prototype.bezier = function() {\n        for (var u, h = arguments.length, g = new Array(h), f = 0; f < h; f++)\n          g[f] = arguments[f];\n        return m.default._validateParameters(\"bezier\", g), (this._renderer._doStroke || this._renderer._doFill) && (u = this._renderer).bezier.apply(u, g), this;\n      }, m.default.prototype.bezierDetail = function(u) {\n        return m.default._validateParameters(\"bezierDetail\", arguments), this._bezierDetail = u, this;\n      }, m.default.prototype.bezierPoint = function(u, h, g, f, r) {\n        m.default._validateParameters(\"bezierPoint\", arguments);\n        var s = 1 - r;\n        return Math.pow(s, 3) * u + 3 * Math.pow(s, 2) * r * h + 3 * s * Math.pow(r, 2) * g + Math.pow(r, 3) * f;\n      }, m.default.prototype.bezierTangent = function(u, h, g, f, r) {\n        m.default._validateParameters(\"bezierTangent\", arguments);\n        var s = 1 - r;\n        return 3 * f * Math.pow(r, 2) - 3 * g * Math.pow(r, 2) + 6 * g * s * r - 6 * h * s * r + 3 * h * Math.pow(s, 2) - 3 * u * Math.pow(s, 2);\n      }, m.default.prototype.curve = function() {\n        for (var u, h = arguments.length, g = new Array(h), f = 0; f < h; f++)\n          g[f] = arguments[f];\n        return m.default._validateParameters(\"curve\", g), this._renderer._doStroke && (u = this._renderer).curve.apply(u, g), this;\n      }, m.default.prototype.curveDetail = function(u) {\n        return m.default._validateParameters(\"curveDetail\", arguments), this._curveDetail = u < 3 ? 3 : u, this;\n      }, m.default.prototype.curveTightness = function(u) {\n        return m.default._validateParameters(\"curveTightness\", arguments), this._renderer._curveTightness = u, this;\n      }, m.default.prototype.curvePoint = function(u, h, g, f, r) {\n        m.default._validateParameters(\"curvePoint\", arguments);\n        var s = this._renderer._curveTightness, o = r * r * r, i = r * r;\n        return u * ((s - 1) / 2 * o + (1 - s) * i + (s - 1) / 2 * r) + h * ((s + 3) / 2 * o + (-5 - s) / 2 * i + 1) + g * ((-3 - s) / 2 * o + (s + 2) * i + (1 - s) / 2 * r) + f * ((1 - s) / 2 * o + (s - 1) / 2 * i);\n      }, m.default.prototype.curveTangent = function(u, h, g, f, i) {\n        m.default._validateParameters(\"curveTangent\", arguments);\n        var s = this._renderer._curveTightness, o = i * i * 3, i = 2 * i;\n        return u * ((s - 1) / 2 * o + (1 - s) * i + (s - 1) / 2) + h * ((s + 3) / 2 * o + (-5 - s) / 2 * i) + g * ((-3 - s) / 2 * o + (s + 2) * i + (1 - s) / 2) + f * ((1 - s) / 2 * o + (s - 1) / 2 * i);\n      };\n      var y = m.default;\n      C.default = y;\n    }, { \"../friendly_errors/fes_core\": 271, \"../friendly_errors/file_errors\": 272, \"../friendly_errors/validate_params\": 275, \"../main\": 280 }], 290: [function(t, H, C) {\n      function m(p) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(j) {\n          return typeof j;\n        } : function(j) {\n          return j && typeof Symbol == \"function\" && j.constructor === Symbol && j !== Symbol.prototype ? \"symbol\" : typeof j;\n        })(p);\n      }\n      function y(p) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(j) {\n          return m(j);\n        } : function(j) {\n          return j && typeof Symbol == \"function\" && j.constructor === Symbol && j !== Symbol.prototype ? \"symbol\" : m(j);\n        })(p);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.slice\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (c = t(\"../main\")) && c.__esModule ? c : { default: c }, h = function(p) {\n        if (p && p.__esModule)\n          return p;\n        if (p === null || y(p) !== \"object\" && typeof p != \"function\")\n          return { default: p };\n        var j = g();\n        if (j && j.has(p))\n          return j.get(p);\n        var T, _ = {}, S = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (T in p) {\n          var E;\n          Object.prototype.hasOwnProperty.call(p, T) && ((E = S ? Object.getOwnPropertyDescriptor(p, T) : null) && (E.get || E.set) ? Object.defineProperty(_, T, E) : _[T] = p[T]);\n        }\n        return _.default = p, j && j.set(p, _), _;\n      }(t(\"../constants\"));\n      function g() {\n        var p;\n        return typeof WeakMap != \"function\" ? null : (p = /* @__PURE__ */ new WeakMap(), g = function() {\n          return p;\n        }, p);\n      }\n      var f = null, r = [], s = [], o = !1, i = !1, l = !1, n = !1, a = !0, c = (u.default.prototype.beginContour = function() {\n        return this._renderer.isP3D ? this._renderer.beginContour() : (s = [], n = !0), this;\n      }, u.default.prototype.beginShape = function(p) {\n        var j;\n        return u.default._validateParameters(\"beginShape\", arguments), this._renderer.isP3D ? (j = this._renderer).beginShape.apply(j, arguments) : (f = p === h.POINTS || p === h.LINES || p === h.TRIANGLES || p === h.TRIANGLE_FAN || p === h.TRIANGLE_STRIP || p === h.QUADS || p === h.QUAD_STRIP ? p : null, r = [], s = []), this;\n      }, u.default.prototype.bezierVertex = function() {\n        for (var p, j = arguments.length, T = new Array(j), _ = 0; _ < j; _++)\n          T[_] = arguments[_];\n        if (u.default._validateParameters(\"bezierVertex\", T), this._renderer.isP3D)\n          (p = this._renderer).bezierVertex.apply(p, T);\n        else if (r.length === 0)\n          u.default._friendlyError(\"vertex() must be used once before calling bezierVertex()\", \"bezierVertex\");\n        else {\n          o = !0;\n          for (var S = [], E = 0; E < T.length; E++)\n            S[E] = T[E];\n          S.isVert = !1, (n ? s : r).push(S);\n        }\n        return this;\n      }, u.default.prototype.curveVertex = function() {\n        for (var p, j = arguments.length, T = new Array(j), _ = 0; _ < j; _++)\n          T[_] = arguments[_];\n        return u.default._validateParameters(\"curveVertex\", T), this._renderer.isP3D ? (p = this._renderer).curveVertex.apply(p, T) : (i = !0, this.vertex(T[0], T[1])), this;\n      }, u.default.prototype.endContour = function() {\n        if (!this._renderer.isP3D) {\n          var p = s[0].slice();\n          p.isVert = s[0].isVert, p.moveTo = !1, s.push(p), a && (r.push(r[0]), a = !1);\n          for (var j = 0; j < s.length; j++)\n            r.push(s[j]);\n        }\n        return this;\n      }, u.default.prototype.endShape = function(p) {\n        var j = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 1;\n        if (u.default._validateParameters(\"endShape\", arguments), j < 1 && (console.log(\"🌸 p5.js says: You can not have less than one instance\"), j = 1), this._renderer.isP3D)\n          this._renderer.endShape(p, i, o, l, n, f, j);\n        else {\n          if (j !== 1 && console.log(\"🌸 p5.js says: Instancing is only supported in WebGL2 mode\"), r.length === 0)\n            return this;\n          if (!this._renderer._doStroke && !this._renderer._doFill)\n            return this;\n          j = p === h.CLOSE, j && !n && r.push(r[0]), this._renderer.endShape(p, r, i, o, l, n, f), a = !(n = l = o = i = !1), j && r.pop();\n        }\n        return this;\n      }, u.default.prototype.quadraticVertex = function() {\n        for (var p, j = arguments.length, T = new Array(j), _ = 0; _ < j; _++)\n          T[_] = arguments[_];\n        if (u.default._validateParameters(\"quadraticVertex\", T), this._renderer.isP3D)\n          (p = this._renderer).quadraticVertex.apply(p, T);\n        else {\n          if (this._contourInited)\n            return (p = {}).x = T[0], p.y = T[1], p.x3 = T[2], p.y3 = T[3], p.type = h.QUADRATIC, this._contourVertices.push(p), this;\n          if (0 < r.length) {\n            l = !0;\n            for (var S = [], E = 0; E < T.length; E++)\n              S[E] = T[E];\n            S.isVert = !1, (n ? s : r).push(S);\n          } else\n            u.default._friendlyError(\"vertex() must be used once before calling quadraticVertex()\", \"quadraticVertex\");\n        }\n        return this;\n      }, u.default.prototype.vertex = function(p, j, T, _, S) {\n        var E;\n        return this._renderer.isP3D ? (E = this._renderer).vertex.apply(E, arguments) : ((E = []).isVert = !0, E[0] = p, E[1] = j, E[2] = 0, E[3] = 0, E[4] = 0, E[5] = this._renderer._getFill(), E[6] = this._renderer._getStroke(), T && (E.moveTo = T), (n ? (s.length === 0 && (E.moveTo = !0), s) : r).push(E)), this;\n      }, u.default.prototype.normal = function(p, j, T) {\n        var _;\n        return this._assert3d(\"normal\"), u.default._validateParameters(\"normal\", arguments), (_ = this._renderer).normal.apply(_, arguments), this;\n      }, u.default);\n      C.default = c;\n    }, { \"../constants\": 269, \"../main\": 280, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 291: [function(t, H, C) {\n    }, {}], 292: [function(t, H, C) {\n      t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.assign\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"./main\")) && t.__esModule ? t : { default: t }, t.default.prototype.noLoop = function() {\n        this._loop = !1;\n      }, t.default.prototype.loop = function() {\n        this._loop || (this._loop = !0, this._setupDone && this._draw());\n      }, t.default.prototype.isLooping = function() {\n        return this._loop;\n      }, t.default.prototype.push = function() {\n        this._styles.push({ props: { _colorMode: this._colorMode }, renderer: this._renderer.push() });\n      }, t.default.prototype.pop = function() {\n        var m = this._styles.pop();\n        m ? (this._renderer.pop(m.renderer), Object.assign(this, m.props)) : console.warn(\"pop() was called without matching push()\");\n      }, t.default.prototype.redraw = function(m) {\n        if (!this._inUserDraw && this._setupDone) {\n          var y = parseInt(m), u = ((isNaN(y) || y < 1) && (y = 1), this._isGlobal ? window : this);\n          if (typeof u.draw == \"function\") {\n            u.setup === void 0 && u.scale(u._pixelDensity, u._pixelDensity);\n            for (var h = 0; h < y; h++) {\n              u.resetMatrix(), (this._accessibleOutputs.grid || this._accessibleOutputs.text) && this._updateAccsOutput(), u._renderer.isP3D && u._renderer._update(), u._setProperty(\"frameCount\", u.frameCount + 1), this.callRegisteredHooksFor(\"pre\"), this._inUserDraw = !0;\n              try {\n                u.draw();\n              } finally {\n                this._inUserDraw = !1;\n              }\n              this.callRegisteredHooksFor(\"post\");\n            }\n          }\n        }\n      }, t = t.default, C.default = t;\n    }, { \"./main\": 280, \"core-js/modules/es.object.assign\": 181 }], 293: [function(t, H, C) {\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-prototype-of\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-prototype-of\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"./main\")) && t.__esModule ? t : { default: t };\n      function y(u) {\n        return function(h) {\n          if (Array.isArray(h)) {\n            for (var g = 0, f = new Array(h.length); g < h.length; g++)\n              f[g] = h[g];\n            return f;\n          }\n        }(u) || function(h) {\n          if (Symbol.iterator in Object(h) || Object.prototype.toString.call(h) === \"[object Arguments]\")\n            return Array.from(h);\n        }(u) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      m.default.prototype.applyMatrix = function() {\n        var u = (arguments.length <= 0 ? void 0 : arguments[0]) instanceof Object.getPrototypeOf(Uint8Array);\n        return Array.isArray(arguments.length <= 0 ? void 0 : arguments[0]) || u ? (u = this._renderer).applyMatrix.apply(u, y(arguments.length <= 0 ? void 0 : arguments[0])) : (u = this._renderer).applyMatrix.apply(u, arguments), this;\n      }, m.default.prototype.resetMatrix = function() {\n        return this._renderer.resetMatrix(), this;\n      }, m.default.prototype.rotate = function(u, h) {\n        return m.default._validateParameters(\"rotate\", arguments), this._renderer.rotate(this._toRadians(u), h), this;\n      }, m.default.prototype.rotateX = function(u) {\n        return this._assert3d(\"rotateX\"), m.default._validateParameters(\"rotateX\", arguments), this._renderer.rotateX(this._toRadians(u)), this;\n      }, m.default.prototype.rotateY = function(u) {\n        return this._assert3d(\"rotateY\"), m.default._validateParameters(\"rotateY\", arguments), this._renderer.rotateY(this._toRadians(u)), this;\n      }, m.default.prototype.rotateZ = function(u) {\n        return this._assert3d(\"rotateZ\"), m.default._validateParameters(\"rotateZ\", arguments), this._renderer.rotateZ(this._toRadians(u)), this;\n      }, m.default.prototype.scale = function(u, h, g) {\n        var f;\n        return m.default._validateParameters(\"scale\", arguments), u instanceof m.default.Vector ? (u = (f = u).x, h = f.y, g = f.z) : Array.isArray(u) && (u = (f = u)[0], h = f[1], g = f[2] || 1), isNaN(h) ? h = g = u : isNaN(g) && (g = 1), this._renderer.scale(u, h, g), this;\n      }, m.default.prototype.shearX = function(u) {\n        return m.default._validateParameters(\"shearX\", arguments), u = this._toRadians(u), this._renderer.applyMatrix(1, 0, Math.tan(u), 1, 0, 0), this;\n      }, m.default.prototype.shearY = function(u) {\n        return m.default._validateParameters(\"shearY\", arguments), u = this._toRadians(u), this._renderer.applyMatrix(1, Math.tan(u), 0, 1, 0, 0), this;\n      }, m.default.prototype.translate = function(u, h, g) {\n        return m.default._validateParameters(\"translate\", arguments), this._renderer.isP3D ? this._renderer.translate(u, h, g) : this._renderer.translate(u, h), this;\n      }, t = m.default, C.default = t;\n    }, { \"./main\": 280, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-prototype-of\": 185, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236, \"core-js/modules/es.typed-array.uint8-array\": 239, \"core-js/modules/web.dom-collections.iterator\": 243 }], 294: [function(t, H, C) {\n      function m(g) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(f) {\n          return typeof f;\n        } : function(f) {\n          return f && typeof Symbol == \"function\" && f.constructor === Symbol && f !== Symbol.prototype ? \"symbol\" : typeof f;\n        })(g);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.ends-with\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.ends-with\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\");\n      var y = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function u(g) {\n        return function(f) {\n          if (Array.isArray(f)) {\n            for (var r = 0, s = new Array(f.length); r < f.length; r++)\n              s[r] = f[r];\n            return s;\n          }\n        }(g) || function(f) {\n          if (Symbol.iterator in Object(f) || Object.prototype.toString.call(f) === \"[object Arguments]\")\n            return Array.from(f);\n        }(g) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      function h(g) {\n        return (h = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(f) {\n          return m(f);\n        } : function(f) {\n          return f && typeof Symbol == \"function\" && f.constructor === Symbol && f !== Symbol.prototype ? \"symbol\" : m(f);\n        })(g);\n      }\n      y.default.prototype.storeItem = function(g, f) {\n        typeof g != \"string\" && console.log(\"The argument that you passed to storeItem() - \".concat(g, \" is not a string.\")), g.endsWith(\"p5TypeID\") && console.log(\"The argument that you passed to storeItem() - \".concat(g, \" must not end with 'p5TypeID'.\")), f === void 0 && console.log(\"You cannot store undefined variables using storeItem().\");\n        var r = h(f);\n        switch (r) {\n          case \"number\":\n          case \"boolean\":\n            f = f.toString();\n            break;\n          case \"object\":\n            f instanceof y.default.Color ? r = \"p5.Color\" : f instanceof y.default.Vector && (r = \"p5.Vector\", f = [f.x, f.y, f.z]), f = JSON.stringify(f);\n        }\n        localStorage.setItem(g, f), g = \"\".concat(g, \"p5TypeID\"), localStorage.setItem(g, r);\n      }, y.default.prototype.getItem = function(g) {\n        var f = localStorage.getItem(g), r = localStorage.getItem(\"\".concat(g, \"p5TypeID\"));\n        if (r === void 0)\n          console.log(\"Unable to determine type of item stored under \".concat(g, \"in local storage. Did you save the item with something other than setItem()?\"));\n        else if (f !== null)\n          switch (r) {\n            case \"number\":\n              f = parseFloat(f);\n              break;\n            case \"boolean\":\n              f = f === \"true\";\n              break;\n            case \"object\":\n              f = JSON.parse(f);\n              break;\n            case \"p5.Color\":\n              f = JSON.parse(f), f = this.color.apply(this, u(f.levels));\n              break;\n            case \"p5.Vector\":\n              f = JSON.parse(f), f = this.createVector.apply(this, u(f));\n          }\n        return f;\n      }, y.default.prototype.clearStorage = function() {\n        var g = this;\n        Object.keys(localStorage).forEach(function(f) {\n          f.endsWith(\"p5TypeID\") && g.removeItem(f.replace(\"p5TypeID\", \"\"));\n        });\n      }, y.default.prototype.removeItem = function(g) {\n        typeof g != \"string\" && console.log(\"The argument that you passed to removeItem() - \".concat(g, \" is not a string.\")), localStorage.removeItem(g), localStorage.removeItem(\"\".concat(g, \"p5TypeID\"));\n      };\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.keys\": 186, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.ends-with\": 195, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.for-each\": 242, \"core-js/modules/web.dom-collections.iterator\": 243 }], 295: [function(t, H, C) {\n      function m(l) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(n) {\n          return typeof n;\n        } : function(n) {\n          return n && typeof Symbol == \"function\" && n.constructor === Symbol && n !== Symbol.prototype ? \"symbol\" : typeof n;\n        })(l);\n      }\n      function y(l) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(n) {\n          return m(n);\n        } : function(n) {\n          return n && typeof Symbol == \"function\" && n.constructor === Symbol && n !== Symbol.prototype ? \"symbol\" : m(n);\n        })(l);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-prototype-of\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.reflect.construct\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.object.keys\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function h(l, n) {\n        if (typeof n != \"function\" && n !== null)\n          throw new TypeError(\"Super expression must either be null or a function\");\n        l.prototype = Object.create(n && n.prototype, { constructor: { value: l, writable: !0, configurable: !0 } }), n && g(l, n);\n      }\n      function g(l, n) {\n        return (g = Object.setPrototypeOf || function(a, c) {\n          return a.__proto__ = c, a;\n        })(l, n);\n      }\n      function f(l) {\n        return function() {\n          var n, a = r(l), a = (n = function() {\n            if (typeof Reflect < \"u\" && Reflect.construct && !Reflect.construct.sham) {\n              if (typeof Proxy == \"function\")\n                return 1;\n              try {\n                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {\n                })), 1;\n              } catch {\n              }\n            }\n          }() ? (n = r(this).constructor, Reflect.construct(a, arguments, n)) : a.apply(this, arguments), this);\n          if (!n || y(n) !== \"object\" && typeof n != \"function\") {\n            if (a !== void 0)\n              return a;\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n          return n;\n        };\n      }\n      function r(l) {\n        return (r = Object.setPrototypeOf ? Object.getPrototypeOf : function(n) {\n          return n.__proto__ || Object.getPrototypeOf(n);\n        })(l);\n      }\n      function s(l, n) {\n        if (!(l instanceof n))\n          throw new TypeError(\"Cannot call a class as a function\");\n      }\n      function o(l, n) {\n        for (var a = 0; a < n.length; a++) {\n          var c = n[a];\n          c.enumerable = c.enumerable || !1, c.configurable = !0, \"value\" in c && (c.writable = !0), Object.defineProperty(l, c.key, c);\n        }\n      }\n      function i(l, n, a) {\n        n && o(l.prototype, n);\n      }\n      u.default.prototype.createStringDict = function(l, n) {\n        return u.default._validateParameters(\"createStringDict\", arguments), new u.default.StringDict(l, n);\n      }, u.default.prototype.createNumberDict = function(l, n) {\n        return u.default._validateParameters(\"createNumberDict\", arguments), new u.default.NumberDict(l, n);\n      }, u.default.TypedDict = function() {\n        function l(n, a) {\n          return s(this, l), n instanceof Object ? this.data = n : (this.data = {}, this.data[n] = a), this;\n        }\n        return i(l, [{ key: \"size\", value: function() {\n          return Object.keys(this.data).length;\n        } }, { key: \"hasKey\", value: function(n) {\n          return this.data.hasOwnProperty(n);\n        } }, { key: \"get\", value: function(n) {\n          if (this.data.hasOwnProperty(n))\n            return this.data[n];\n          console.log(\"\".concat(n, \" does not exist in this Dictionary\"));\n        } }, { key: \"set\", value: function(n, a) {\n          this._validate(a) ? this.data[n] = a : console.log(\"Those values dont work for this dictionary type.\");\n        } }, { key: \"_addObj\", value: function(n) {\n          for (var a in n)\n            this.set(a, n[a]);\n        } }, { key: \"create\", value: function(n, a) {\n          n instanceof Object && a === void 0 ? this._addObj(n) : n !== void 0 ? this.set(n, a) : console.log(\"In order to create a new Dictionary entry you must pass an object or a key, value pair\");\n        } }, { key: \"clear\", value: function() {\n          this.data = {};\n        } }, { key: \"remove\", value: function(n) {\n          if (!this.data.hasOwnProperty(n))\n            throw new Error(\"\".concat(n, \" does not exist in this Dictionary\"));\n          delete this.data[n];\n        } }, { key: \"print\", value: function() {\n          for (var n in this.data)\n            console.log(\"key:\".concat(n, \" value:\").concat(this.data[n]));\n        } }, { key: \"saveTable\", value: function(n) {\n          var a, c = \"\";\n          for (a in this.data)\n            c += \"\".concat(a, \",\").concat(this.data[a], `\n`);\n          var p = new Blob([c], { type: \"text/csv\" });\n          u.default.prototype.downloadFile(p, n || \"mycsv\", \"csv\");\n        } }, { key: \"saveJSON\", value: function(n, a) {\n          u.default.prototype.saveJSON(this.data, n, a);\n        } }, { key: \"_validate\", value: function(n) {\n          return !0;\n        } }]), l;\n      }(), u.default.StringDict = function() {\n        h(n, u.default.TypedDict);\n        var l = f(n);\n        function n() {\n          s(this, n);\n          for (var a = arguments.length, c = new Array(a), p = 0; p < a; p++)\n            c[p] = arguments[p];\n          return l.call.apply(l, [this].concat(c));\n        }\n        return i(n, [{ key: \"_validate\", value: function(a) {\n          return typeof a == \"string\";\n        } }]), n;\n      }(), u.default.NumberDict = function() {\n        h(n, u.default.TypedDict);\n        var l = f(n);\n        function n() {\n          s(this, n);\n          for (var a = arguments.length, c = new Array(a), p = 0; p < a; p++)\n            c[p] = arguments[p];\n          return l.call.apply(l, [this].concat(c));\n        }\n        return i(n, [{ key: \"_validate\", value: function(a) {\n          return typeof a == \"number\";\n        } }, { key: \"add\", value: function(a, c) {\n          this.data.hasOwnProperty(a) ? this.data[a] += c : console.log(\"The key - \".concat(a, \" does not exist in this dictionary.\"));\n        } }, { key: \"sub\", value: function(a, c) {\n          this.add(a, -c);\n        } }, { key: \"mult\", value: function(a, c) {\n          this.data.hasOwnProperty(a) ? this.data[a] *= c : console.log(\"The key - \".concat(a, \" does not exist in this dictionary.\"));\n        } }, { key: \"div\", value: function(a, c) {\n          this.data.hasOwnProperty(a) ? this.data[a] /= c : console.log(\"The key - \".concat(a, \" does not exist in this dictionary.\"));\n        } }, { key: \"_valueTest\", value: function(a) {\n          if (Object.keys(this.data).length === 0)\n            throw new Error(\"Unable to search for a minimum or maximum value on an empty NumberDict\");\n          if (Object.keys(this.data).length === 1)\n            return this.data[Object.keys(this.data)[0]];\n          var c, p = this.data[Object.keys(this.data)[0]];\n          for (c in this.data)\n            this.data[c] * a < p * a && (p = this.data[c]);\n          return p;\n        } }, { key: \"minValue\", value: function() {\n          return this._valueTest(1);\n        } }, { key: \"maxValue\", value: function() {\n          return this._valueTest(-1);\n        } }, { key: \"_keyTest\", value: function(a) {\n          if (Object.keys(this.data).length === 0)\n            throw new Error(\"Unable to use minValue on an empty NumberDict\");\n          if (Object.keys(this.data).length === 1)\n            return Object.keys(this.data)[0];\n          for (var c = Object.keys(this.data)[0], p = 1; p < Object.keys(this.data).length; p++)\n            Object.keys(this.data)[p] * a < c * a && (c = Object.keys(this.data)[p]);\n          return c;\n        } }, { key: \"minKey\", value: function() {\n          return this._keyTest(1);\n        } }, { key: \"maxKey\", value: function() {\n          return this._keyTest(-1);\n        } }]), n;\n      }(), t = u.default.TypedDict, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-prototype-of\": 185, \"core-js/modules/es.object.keys\": 186, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.reflect.construct\": 189, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.iterator\": 243 }], 296: [function(t, H, C) {\n      function m(c) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(p) {\n          return typeof p;\n        } : function(p) {\n          return p && typeof Symbol == \"function\" && p.constructor === Symbol && p !== Symbol.prototype ? \"symbol\" : typeof p;\n        })(c);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.every\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.get-prototype-of\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.reflect.construct\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.trim\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/web.url\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.every\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.trim\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/web.url\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var y = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function u(c, p) {\n        for (var j = 0; j < p.length; j++) {\n          var T = p[j];\n          T.enumerable = T.enumerable || !1, T.configurable = !0, \"value\" in T && (T.writable = !0), Object.defineProperty(c, T.key, T);\n        }\n      }\n      function h(c, p, j) {\n        p && u(c.prototype, p), j && u(c, j);\n      }\n      function g(c, p) {\n        return (g = Object.setPrototypeOf || function(j, T) {\n          return j.__proto__ = T, j;\n        })(c, p);\n      }\n      function f(c) {\n        return function() {\n          var p, j, T = s(c);\n          return p = function() {\n            if (typeof Reflect < \"u\" && Reflect.construct && !Reflect.construct.sham) {\n              if (typeof Proxy == \"function\")\n                return 1;\n              try {\n                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {\n                })), 1;\n              } catch {\n              }\n            }\n          }() ? (p = s(this).constructor, Reflect.construct(T, arguments, p)) : T.apply(this, arguments), T = this, !(j = p) || i(j) !== \"object\" && typeof j != \"function\" ? r(T) : j;\n        };\n      }\n      function r(c) {\n        if (c === void 0)\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        return c;\n      }\n      function s(c) {\n        return (s = Object.setPrototypeOf ? Object.getPrototypeOf : function(p) {\n          return p.__proto__ || Object.getPrototypeOf(p);\n        })(c);\n      }\n      function o(c, p) {\n        if (!(c instanceof p))\n          throw new TypeError(\"Cannot call a class as a function\");\n      }\n      function i(c) {\n        return (i = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(p) {\n          return m(p);\n        } : function(p) {\n          return p && typeof Symbol == \"function\" && p.constructor === Symbol && p !== Symbol.prototype ? \"symbol\" : m(p);\n        })(c);\n      }\n      function l(c, p, j) {\n        return (p._userNode || document.body).appendChild(c), j = new (j ? y.default.MediaElement : y.default.Element)(c, p), p._elements.push(j), j;\n      }\n      function n(c, E, j, T) {\n        var _ = document.createElement(E), S = (typeof (j = j || \"\") == \"string\" && (j = [j]), !0), E = !1, A = void 0;\n        try {\n          for (var x, P = j[Symbol.iterator](); !(S = (x = P.next()).done); S = !0) {\n            var M = x.value, R = document.createElement(\"source\");\n            R.setAttribute(\"src\", M), _.appendChild(R);\n          }\n        } catch (F) {\n          E = !0, A = F;\n        } finally {\n          try {\n            S || P.return == null || P.return();\n          } finally {\n            if (E)\n              throw A;\n          }\n        }\n        typeof T == \"function\" && _.addEventListener(\"canplaythrough\", function F() {\n          T(), _.removeEventListener(\"canplaythrough\", F);\n        });\n        var L = l(_, c, !0);\n        return L.loadedmetadata = !1, _.addEventListener(\"loadedmetadata\", function() {\n          L.width = _.videoWidth, L.height = _.videoHeight, L.elt.width === 0 && (L.elt.width = _.videoWidth), L.elt.height === 0 && (L.elt.height = _.videoHeight), L.presetPlaybackRate && (L.elt.playbackRate = L.presetPlaybackRate, delete L.presetPlaybackRate), L.loadedmetadata = !0;\n        }), L;\n      }\n      y.default.prototype.select = function(c, p) {\n        return y.default._validateParameters(\"select\", arguments), p = this._getContainer(p).querySelector(c), p ? this._wrapElement(p) : null;\n      }, y.default.prototype.selectAll = function(c, p) {\n        y.default._validateParameters(\"selectAll\", arguments);\n        var j = [], T = this._getContainer(p).querySelectorAll(c);\n        if (T)\n          for (var _ = 0; _ < T.length; _++) {\n            var S = this._wrapElement(T[_]);\n            j.push(S);\n          }\n        return j;\n      }, y.default.prototype._getContainer = function(c) {\n        var p = document;\n        return typeof c == \"string\" ? p = document.querySelector(c) || document : c instanceof y.default.Element ? p = c.elt : c instanceof HTMLElement && (p = c), p;\n      }, y.default.prototype._wrapElement = function(c) {\n        var p, j = Array.prototype.slice.call(c.children);\n        return c.tagName === \"INPUT\" && c.type === \"checkbox\" ? ((p = new y.default.Element(c, this)).checked = function() {\n          return arguments.length === 0 ? this.elt.checked : (this.elt.checked = !(arguments.length <= 0 || !arguments[0]), this);\n        }, p) : c.tagName === \"VIDEO\" || c.tagName === \"AUDIO\" ? new y.default.MediaElement(c, this) : c.tagName === \"SELECT\" ? this.createSelect(new y.default.Element(c, this)) : 0 < j.length && j.every(function(T) {\n          return T.tagName === \"INPUT\" || T.tagName === \"LABEL\";\n        }) ? this.createRadio(new y.default.Element(c, this)) : new y.default.Element(c, this);\n      }, y.default.prototype.removeElements = function(c) {\n        y.default._validateParameters(\"removeElements\", arguments), this._elements.filter(function(p) {\n          return !(p.elt instanceof HTMLCanvasElement);\n        }).map(function(p) {\n          return p.remove();\n        });\n      }, y.default.Element.prototype.changed = function(c) {\n        return y.default.Element._adjustListener(\"change\", c, this), this;\n      }, y.default.Element.prototype.input = function(c) {\n        return y.default.Element._adjustListener(\"input\", c, this), this;\n      }, y.default.prototype.createDiv = function() {\n        var c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : \"\", p = document.createElement(\"div\");\n        return p.innerHTML = c, l(p, this);\n      }, y.default.prototype.createP = function() {\n        var c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : \"\", p = document.createElement(\"p\");\n        return p.innerHTML = c, l(p, this);\n      }, y.default.prototype.createSpan = function() {\n        var c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : \"\", p = document.createElement(\"span\");\n        return p.innerHTML = c, l(p, this);\n      }, y.default.prototype.createImg = function() {\n        y.default._validateParameters(\"createImg\", arguments);\n        var c, p = document.createElement(\"img\"), j = arguments;\n        return 1 < j.length && typeof j[1] == \"string\" && (p.alt = j[1]), 2 < j.length && typeof j[2] == \"string\" && (p.crossOrigin = j[2]), p.src = j[0], c = l(p, this), p.addEventListener(\"load\", function() {\n          c.width = p.offsetWidth || p.width, c.height = p.offsetHeight || p.height;\n          var T = j[j.length - 1];\n          typeof T == \"function\" && T(c);\n        }), c;\n      }, y.default.prototype.createA = function(c, p, j) {\n        y.default._validateParameters(\"createA\", arguments);\n        var T = document.createElement(\"a\");\n        return T.href = c, T.innerHTML = p, j && (T.target = j), l(T, this);\n      }, y.default.prototype.createSlider = function(c, p, j, T) {\n        y.default._validateParameters(\"createSlider\", arguments);\n        var _ = document.createElement(\"input\");\n        return _.type = \"range\", _.min = c, _.max = p, T === 0 ? _.step = 1e-18 : T && (_.step = T), typeof j == \"number\" && (_.value = j), l(_, this);\n      }, y.default.prototype.createButton = function(c, p) {\n        y.default._validateParameters(\"createButton\", arguments);\n        var j = document.createElement(\"button\");\n        return j.innerHTML = c, p && (j.value = p), l(j, this);\n      }, y.default.prototype.createCheckbox = function() {\n        for (var c = arguments.length, p = new Array(c), j = 0; j < c; j++)\n          p[j] = arguments[j];\n        y.default._validateParameters(\"createCheckbox\", p);\n        var T = document.createElement(\"div\"), _ = document.createElement(\"input\"), S = (_.type = \"checkbox\", document.createElement(\"label\")), E = (S.appendChild(_), T.appendChild(S), l(T, this));\n        return E.checked = function() {\n          var A = E.elt.firstElementChild.getElementsByTagName(\"input\")[0];\n          if (A) {\n            if (arguments.length === 0)\n              return A.checked;\n            A.checked = !(arguments.length <= 0 || !arguments[0]);\n          }\n          return E;\n        }, this.value = function(A) {\n          return E.value = A, this;\n        }, p[0] && (E.value(p[0]), (T = document.createElement(\"span\")).innerHTML = p[0], S.appendChild(T)), p[1] && (_.checked = !0), E;\n      }, y.default.prototype.createSelect = function() {\n        for (var c, p = arguments.length, j = new Array(p), T = 0; T < p; T++)\n          j[T] = arguments[T];\n        y.default._validateParameters(\"createSelect\", j);\n        var _, S = j[0];\n        return S instanceof y.default.Element && S.elt instanceof HTMLSelectElement ? this.elt = (c = S).elt : S instanceof HTMLSelectElement ? (c = l(S, this), this.elt = S) : (_ = document.createElement(\"select\"), S && typeof S == \"boolean\" && _.setAttribute(\"multiple\", \"true\"), c = l(_, this), this.elt = _), c.option = function(E, A) {\n          var x;\n          if (E !== void 0) {\n            for (var P, M = 0; M < this.elt.length; M += 1)\n              if (this.elt[M].textContent === E) {\n                x = M;\n                break;\n              }\n            x !== void 0 ? A === !1 ? this.elt.remove(x) : this.elt[x].value = A : ((P = document.createElement(\"option\")).textContent = E, P.value = A === void 0 ? E : A, this.elt.appendChild(P), this._pInst._elements.push(P));\n          }\n        }, c.selected = function(E) {\n          if (E !== void 0) {\n            for (var A = 0; A < this.elt.length; A += 1)\n              this.elt[A].value.toString() === E.toString() && (this.elt.selectedIndex = A);\n            return this;\n          }\n          if (this.elt.getAttribute(\"multiple\")) {\n            var x = [], P = !0, M = !1, R = void 0;\n            try {\n              for (var L, F = this.elt.selectedOptions[Symbol.iterator](); !(P = (L = F.next()).done); P = !0) {\n                var V = L.value;\n                x.push(V.value);\n              }\n            } catch (G) {\n              M = !0, R = G;\n            } finally {\n              try {\n                P || F.return == null || F.return();\n              } finally {\n                if (M)\n                  throw R;\n              }\n            }\n            return x;\n          }\n          return this.elt.value;\n        }, c.disable = function(E) {\n          if (typeof E == \"string\")\n            for (var A = 0; A < this.elt.length; A++)\n              this.elt[A].value.toString() === E && (this.elt[A].disabled = !0, this.elt[A].selected = !1);\n          else\n            this.elt.disabled = !0;\n          return this;\n        }, c.enable = function(E) {\n          if (typeof E == \"string\")\n            for (var A = 0; A < this.elt.length; A++)\n              this.elt[A].value.toString() === E && (this.elt[A].disabled = !1, this.elt[A].selected = !1);\n          else {\n            this.elt.disabled = !1;\n            for (var x = 0; x < this.elt.length; x++)\n              this.elt[x].disabled = !1, this.elt[x].selected = !1;\n          }\n          return this;\n        }, c;\n      }, y.default.prototype.createRadio = function() {\n        function c(E) {\n          return E instanceof HTMLInputElement && E.type === \"radio\";\n        }\n        function p(E) {\n          return E instanceof HTMLLabelElement;\n        }\n        var j, T, _, S = arguments.length <= 0 ? void 0 : arguments[0];\n        return S instanceof y.default.Element && (S.elt instanceof HTMLDivElement || S.elt instanceof HTMLSpanElement) ? (j = S, this.elt = S.elt) : S instanceof HTMLDivElement || S instanceof HTMLSpanElement ? (j = l(S, this), T = this.elt = S, typeof (arguments.length <= 1 ? void 0 : arguments[1]) == \"string\" && (_ = arguments.length <= 1 ? void 0 : arguments[1])) : (typeof S == \"string\" && (_ = S), T = document.createElement(\"div\"), j = l(T, this), this.elt = T), j._name = _ || \"radioOption\", j._getOptionsArray = function() {\n          return Array.from(this.elt.children).filter(function(E) {\n            return c(E) || p(E) && c(E.firstElementChild);\n          }).map(function(E) {\n            return c(E) ? E : E.firstElementChild;\n          });\n        }, j.option = function(E, A) {\n          var x, P, M, R = !0, L = !1, F = void 0;\n          try {\n            for (var V, G = j._getOptionsArray()[Symbol.iterator](); !(R = (V = G.next()).done); R = !0) {\n              var U = V.value;\n              if (U.value === E) {\n                x = U;\n                break;\n              }\n            }\n          } catch (W) {\n            L = !0, F = W;\n          } finally {\n            try {\n              R || G.return == null || G.return();\n            } finally {\n              if (L)\n                throw F;\n            }\n          }\n          return x === void 0 && ((x = document.createElement(\"input\")).setAttribute(\"type\", \"radio\"), x.setAttribute(\"value\", E)), x.setAttribute(\"name\", j._name), p(x.parentElement) ? P = x.parentElement : (P = document.createElement(\"label\")).insertAdjacentElement(\"afterbegin\", x), P.lastElementChild instanceof HTMLSpanElement ? M = P.lastElementChild : (M = document.createElement(\"span\"), x.insertAdjacentElement(\"afterend\", M)), M.innerHTML = A === void 0 ? E : A, this.elt.appendChild(P), x;\n        }, j.remove = function(E) {\n          var A = !0, x = !1, P = void 0;\n          try {\n            for (var M, R = j._getOptionsArray()[Symbol.iterator](); !(A = (M = R.next()).done); A = !0) {\n              var L = M.value;\n              if (L.value === E)\n                return void (p(L.parentElement) ? L.parentElement : L).remove();\n            }\n          } catch (F) {\n            x = !0, P = F;\n          } finally {\n            try {\n              A || R.return == null || R.return();\n            } finally {\n              if (x)\n                throw P;\n            }\n          }\n        }, j.value = function() {\n          var E = \"\", A = !0, x = !1, P = void 0;\n          try {\n            for (var M, R = j._getOptionsArray()[Symbol.iterator](); !(A = (M = R.next()).done); A = !0) {\n              var L = M.value;\n              if (L.checked) {\n                E = L.value;\n                break;\n              }\n            }\n          } catch (F) {\n            x = !0, P = F;\n          } finally {\n            try {\n              A || R.return == null || R.return();\n            } finally {\n              if (x)\n                throw P;\n            }\n          }\n          return E;\n        }, j.selected = function(E) {\n          var A = null;\n          if (E === void 0) {\n            var x = !0, P = !1, M = void 0;\n            try {\n              for (var R, L = j._getOptionsArray()[Symbol.iterator](); !(x = (R = L.next()).done); x = !0) {\n                var F = R.value;\n                if (F.checked) {\n                  A = F;\n                  break;\n                }\n              }\n            } catch (X) {\n              P = !0, M = X;\n            } finally {\n              try {\n                x || L.return == null || L.return();\n              } finally {\n                if (P)\n                  throw M;\n              }\n            }\n          } else {\n            j._getOptionsArray().forEach(function(b) {\n              b.checked = !1, b.removeAttribute(\"checked\");\n            });\n            var V = !0, P = !1, M = void 0;\n            try {\n              for (var G, U = j._getOptionsArray()[Symbol.iterator](); !(V = (G = U.next()).done); V = !0) {\n                var W = G.value;\n                W.value === E && (W.setAttribute(\"checked\", !0), W.checked = !0, A = W);\n              }\n            } catch (b) {\n              P = !0, M = b;\n            } finally {\n              try {\n                V || U.return == null || U.return();\n              } finally {\n                if (P)\n                  throw M;\n              }\n            }\n          }\n          return A;\n        }, j.disable = function() {\n          var E = !(0 < arguments.length && arguments[0] !== void 0) || arguments[0], A = !0, x = !1, P = void 0;\n          try {\n            for (var M, R = j._getOptionsArray()[Symbol.iterator](); !(A = (M = R.next()).done); A = !0)\n              M.value.setAttribute(\"disabled\", E);\n          } catch (L) {\n            x = !0, P = L;\n          } finally {\n            try {\n              A || R.return == null || R.return();\n            } finally {\n              if (x)\n                throw P;\n            }\n          }\n        }, j;\n      }, y.default.prototype.createColorPicker = function(c) {\n        y.default._validateParameters(\"createColorPicker\", arguments);\n        var p = document.createElement(\"input\");\n        return p.type = \"color\", c ? c instanceof y.default.Color ? p.value = c.toString(\"#rrggbb\") : (y.default.prototype._colorMode = \"rgb\", y.default.prototype._colorMaxes = { rgb: [255, 255, 255, 255], hsb: [360, 100, 100, 1], hsl: [360, 100, 100, 1] }, p.value = y.default.prototype.color(c).toString(\"#rrggbb\")) : p.value = \"#000000\", (p = l(p, this)).color = function() {\n          return c && (c.mode && (y.default.prototype._colorMode = c.mode), c.maxes && (y.default.prototype._colorMaxes = c.maxes)), y.default.prototype.color(this.elt.value);\n        }, p;\n      }, y.default.prototype.createInput = function() {\n        var c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : \"\", p = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : \"text\", j = (y.default._validateParameters(\"createInput\", arguments), document.createElement(\"input\"));\n        return j.setAttribute(\"value\", c), j.setAttribute(\"type\", p), l(j, this);\n      }, y.default.prototype.createFileInput = function(c) {\n        var p, j = 1 < arguments.length && arguments[1] !== void 0 && arguments[1];\n        if (y.default._validateParameters(\"createFileInput\", arguments), window.File && window.FileReader && window.FileList && window.Blob)\n          return (p = document.createElement(\"input\")).setAttribute(\"type\", \"file\"), j && p.setAttribute(\"multiple\", !0), p.addEventListener(\"change\", function(T) {\n            var _ = !0, S = !1, E = void 0;\n            try {\n              for (var A, x = T.target.files[Symbol.iterator](); !(_ = (A = x.next()).done); _ = !0) {\n                var P = A.value;\n                y.default.File._load(P, c);\n              }\n            } catch (M) {\n              S = !0, E = M;\n            } finally {\n              try {\n                _ || x.return == null || x.return();\n              } finally {\n                if (S)\n                  throw E;\n              }\n            }\n          }, !1), l(p, this);\n        console.log(\"The File APIs are not fully supported in this browser. Cannot create element.\");\n      }, y.default.prototype.createVideo = function(c, p) {\n        return y.default._validateParameters(\"createVideo\", arguments), n(this, \"video\", c, p);\n      }, y.default.prototype.createAudio = function(c, p) {\n        return y.default._validateParameters(\"createAudio\", arguments), n(this, \"audio\", c, p);\n      }, y.default.prototype.VIDEO = \"video\", y.default.prototype.AUDIO = \"audio\", navigator.mediaDevices === void 0 && (navigator.mediaDevices = {}), navigator.mediaDevices.getUserMedia === void 0 && (navigator.mediaDevices.getUserMedia = function(c) {\n        var p = navigator.webkitGetUserMedia || navigator.mozGetUserMedia;\n        return p ? new Promise(function(j, T) {\n          p.call(navigator, c, j, T);\n        }) : Promise.reject(new Error(\"getUserMedia is not implemented in this browser\"));\n      }), y.default.prototype.createCapture = function() {\n        for (var c = arguments.length, p = new Array(c), j = 0; j < c; j++)\n          p[j] = arguments[j];\n        if (y.default._validateParameters(\"createCapture\", p), !navigator.mediaDevices || !navigator.mediaDevices.getUserMedia)\n          throw new DOMException(\"getUserMedia not supported in this browser\");\n        for (var T, _ = !0, S = !0, E = !1, A = 0, x = p; A < x.length; A++) {\n          var P = x[A];\n          P === y.default.prototype.VIDEO ? S = !1 : P === y.default.prototype.AUDIO ? _ = !1 : i(P) === \"object\" ? (P.flipped !== void 0 && (E = P.flipped, delete P.flipped), M = Object.assign({}, M, P)) : typeof P == \"function\" && (T = P);\n        }\n        var M = Object.assign({}, { video: _, audio: S }, M), R = document.createElement(\"video\"), L = (R.setAttribute(\"playsinline\", \"\"), navigator.mediaDevices.getUserMedia(M).then(function(F) {\n          try {\n            \"srcObject\" in R ? R.srcObject = F : R.src = window.URL.createObjectURL(F);\n          } catch {\n            R.src = F;\n          }\n        }).catch(function(F) {\n          F.name === \"NotFoundError\" && y.default._friendlyError(\"No webcam found on this device\", \"createCapture\"), F.name === \"NotAllowedError\" && y.default._friendlyError(\"Access to the camera was denied\", \"createCapture\"), console.error(F);\n        }), l(R, this, !0));\n        return L.loadedmetadata = !1, R.addEventListener(\"loadedmetadata\", function() {\n          R.play(), R.width ? (L.width = R.width, L.height = R.height, E && (L.elt.style.transform = \"scaleX(-1)\")) : (L.width = L.elt.width = R.videoWidth, L.height = L.elt.height = R.videoHeight), L.loadedmetadata = !0, T && T(R.srcObject);\n        }), L.flipped = E, L;\n      }, y.default.prototype.createElement = function(c, p) {\n        return y.default._validateParameters(\"createElement\", arguments), c = document.createElement(c), p !== void 0 && (c.innerHTML = p), l(c, this);\n      }, y.default.Element.prototype.addClass = function(c) {\n        return this.elt.className ? this.hasClass(c) || (this.elt.className = this.elt.className + \" \" + c) : this.elt.className = c, this;\n      }, y.default.Element.prototype.removeClass = function(c) {\n        return this.elt.classList.remove(c), this;\n      }, y.default.Element.prototype.hasClass = function(c) {\n        return this.elt.classList.contains(c);\n      }, y.default.Element.prototype.toggleClass = function(c) {\n        return this.elt.classList.contains(c) ? this.elt.classList.remove(c) : this.elt.classList.add(c), this;\n      }, y.default.Element.prototype.child = function(c) {\n        return c === void 0 ? this.elt.childNodes : (typeof c == \"string\" ? (c[0] === \"#\" && (c = c.substring(1)), c = document.getElementById(c)) : c instanceof y.default.Element && (c = c.elt), c instanceof HTMLElement && this.elt.appendChild(c), this);\n      }, y.default.Element.prototype.center = function(c) {\n        var p = this.elt.style.display, j = this.elt.style.display === \"none\", T = this.parent().style.display === \"none\", _ = { x: this.elt.offsetLeft, y: this.elt.offsetTop }, S = (j && this.show(), T && this.parent().show(), this.elt.style.display = \"block\", this.position(0, 0), Math.abs(this.parent().offsetWidth - this.elt.offsetWidth)), E = Math.abs(this.parent().offsetHeight - this.elt.offsetHeight);\n        return c === \"both\" || c === void 0 ? this.position(S / 2 + this.parent().offsetLeft, E / 2 + this.parent().offsetTop) : c === \"horizontal\" ? this.position(S / 2 + this.parent().offsetLeft, _.y) : c === \"vertical\" && this.position(_.x, E / 2 + this.parent().offsetTop), this.style(\"display\", p), j && this.hide(), T && this.parent().hide(), this;\n      }, y.default.Element.prototype.html = function() {\n        return arguments.length === 0 ? this.elt.innerHTML : (arguments.length <= 1 || !arguments[1] ? this.elt.innerHTML = arguments.length <= 0 ? void 0 : arguments[0] : this.elt.insertAdjacentHTML(\"beforeend\", arguments.length <= 0 ? void 0 : arguments[0]), this);\n      }, y.default.Element.prototype.position = function() {\n        return arguments.length === 0 ? { x: this.elt.offsetLeft, y: this.elt.offsetTop } : (this.elt.style.position = (arguments.length <= 2 ? void 0 : arguments[2]) !== \"static\" && (arguments.length <= 2 ? void 0 : arguments[2]) !== \"fixed\" && (arguments.length <= 2 ? void 0 : arguments[2]) !== \"relative\" && (arguments.length <= 2 ? void 0 : arguments[2]) !== \"sticky\" && (arguments.length <= 2 ? void 0 : arguments[2]) !== \"initial\" && (arguments.length <= 2 ? void 0 : arguments[2]) !== \"inherit\" ? \"absolute\" : arguments.length <= 2 ? void 0 : arguments[2], this.elt.style.left = (arguments.length <= 0 ? void 0 : arguments[0]) + \"px\", this.elt.style.top = (arguments.length <= 1 ? void 0 : arguments[1]) + \"px\", this.x = arguments.length <= 0 ? void 0 : arguments[0], this.y = arguments.length <= 1 ? void 0 : arguments[1], this);\n      }, y.default.Element.prototype._translate = function() {\n        this.elt.style.position = \"absolute\";\n        var c = \"\";\n        return this.elt.style.transform && (c = (c = this.elt.style.transform.replace(/translate3d\\(.*\\)/g, \"\")).replace(/translate[X-Z]?\\(.*\\)/g, \"\")), arguments.length === 2 ? this.elt.style.transform = \"translate(\" + (arguments.length <= 0 ? void 0 : arguments[0]) + \"px, \" + (arguments.length <= 1 ? void 0 : arguments[1]) + \"px)\" : 2 < arguments.length && (this.elt.style.transform = \"translate3d(\" + (arguments.length <= 0 ? void 0 : arguments[0]) + \"px,\" + (arguments.length <= 1 ? void 0 : arguments[1]) + \"px,\" + (arguments.length <= 2 ? void 0 : arguments[2]) + \"px)\", this.elt.parentElement.style.perspective = arguments.length === 3 ? \"1000px\" : (arguments.length <= 3 ? void 0 : arguments[3]) + \"px\"), this.elt.style.transform += c, this;\n      }, y.default.Element.prototype._rotate = function() {\n        var c = \"\";\n        return this.elt.style.transform && (c = (c = this.elt.style.transform.replace(/rotate3d\\(.*\\)/g, \"\")).replace(/rotate[X-Z]?\\(.*\\)/g, \"\")), arguments.length === 1 ? this.elt.style.transform = \"rotate(\" + (arguments.length <= 0 ? void 0 : arguments[0]) + \"deg)\" : arguments.length === 2 ? this.elt.style.transform = \"rotate(\" + (arguments.length <= 0 ? void 0 : arguments[0]) + \"deg, \" + (arguments.length <= 1 ? void 0 : arguments[1]) + \"deg)\" : arguments.length === 3 && (this.elt.style.transform = \"rotateX(\" + (arguments.length <= 0 ? void 0 : arguments[0]) + \"deg)\", this.elt.style.transform += \"rotateY(\" + (arguments.length <= 1 ? void 0 : arguments[1]) + \"deg)\", this.elt.style.transform += \"rotateZ(\" + (arguments.length <= 2 ? void 0 : arguments[2]) + \"deg)\"), this.elt.style.transform += c, this;\n      }, y.default.Element.prototype.style = function(c, p) {\n        if ((p = p instanceof y.default.Color ? \"rgba(\" + p.levels[0] + \",\" + p.levels[1] + \",\" + p.levels[2] + \",\" + p.levels[3] / 255 + \")\" : p) === void 0) {\n          if (c.indexOf(\":\") === -1)\n            return window.getComputedStyle(this.elt).getPropertyValue(c);\n          for (var j = c.split(\";\"), T = 0; T < j.length; T++) {\n            var _ = j[T].split(\":\");\n            _[0] && _[1] && (this.elt.style[_[0].trim()] = _[1].trim());\n          }\n        } else\n          this.elt.style[c] = p, c !== \"width\" && c !== \"height\" && c !== \"left\" && c !== \"top\" || (p = window.getComputedStyle(this.elt).getPropertyValue(c).replace(/[^\\d.]/g, \"\"), this[c] = Math.round(parseFloat(p, 10)));\n        return this;\n      }, y.default.Element.prototype.attribute = function(c, p) {\n        if (this.elt.firstChild == null || this.elt.firstChild.type !== \"checkbox\" && this.elt.firstChild.type !== \"radio\")\n          return p === void 0 ? this.elt.getAttribute(c) : (this.elt.setAttribute(c, p), this);\n        if (p === void 0)\n          return this.elt.firstChild.getAttribute(c);\n        for (var j = 0; j < this.elt.childNodes.length; j++)\n          this.elt.childNodes[j].setAttribute(c, p);\n      }, y.default.Element.prototype.removeAttribute = function(c) {\n        if (this.elt.firstChild != null && (this.elt.firstChild.type === \"checkbox\" || this.elt.firstChild.type === \"radio\"))\n          for (var p = 0; p < this.elt.childNodes.length; p++)\n            this.elt.childNodes[p].removeAttribute(c);\n        return this.elt.removeAttribute(c), this;\n      }, y.default.Element.prototype.value = function() {\n        return 0 < arguments.length ? (this.elt.value = arguments.length <= 0 ? void 0 : arguments[0], this) : this.elt.type === \"range\" ? parseFloat(this.elt.value) : this.elt.value;\n      }, y.default.Element.prototype.show = function() {\n        return this.elt.style.display = \"block\", this;\n      }, y.default.Element.prototype.hide = function() {\n        return this.elt.style.display = \"none\", this;\n      }, y.default.Element.prototype.size = function(c, p) {\n        if (arguments.length === 0)\n          return { width: this.elt.offsetWidth, height: this.elt.offsetHeight };\n        var j = c, T = p, _ = y.default.prototype.AUTO;\n        if (j !== _ || T !== _) {\n          if (j === _ ? j = p * this.width / this.height : T === _ && (T = c * this.height / this.width), this.elt instanceof HTMLCanvasElement) {\n            var S, E = {}, A = this.elt.getContext(\"2d\");\n            for (S in A)\n              E[S] = A[S];\n            for (S in this.elt.setAttribute(\"width\", j * this._pInst._pixelDensity), this.elt.setAttribute(\"height\", T * this._pInst._pixelDensity), this.elt.style.width = j + \"px\", this.elt.style.height = T + \"px\", this._pInst.scale(this._pInst._pixelDensity, this._pInst._pixelDensity), E)\n              this.elt.getContext(\"2d\")[S] = E[S];\n          } else\n            this.elt.style.width = j + \"px\", this.elt.style.height = T + \"px\", this.elt.width = j, this.elt.height = T;\n          this.width = j, this.height = T, this._pInst && this._pInst._curElement && this._pInst._curElement.elt === this.elt && (this._pInst._setProperty(\"width\", j), this._pInst._setProperty(\"height\", T));\n        }\n        return this;\n      }, y.default.Element.prototype.remove = function() {\n        this instanceof y.default.MediaElement && (this.stop(), (p = this.elt.srcObject) !== null && p.getTracks().forEach(function(j) {\n          j.stop();\n        }));\n        var c, p = this._pInst._elements.indexOf(this);\n        for (c in p !== -1 && this._pInst._elements.splice(p, 1), this._events)\n          this.elt.removeEventListener(c, this._events[c]);\n        this.elt && this.elt.parentNode && this.elt.parentNode.removeChild(this.elt);\n      }, y.default.Element.prototype.drop = function(c, p) {\n        var j;\n        return window.File && window.FileReader && window.FileList && window.Blob ? (this._dragDisabled || (this._dragDisabled = !0, this.elt.addEventListener(\"dragover\", j = function(T) {\n          T.preventDefault();\n        }), this.elt.addEventListener(\"dragleave\", j)), y.default.Element._attachListener(\"drop\", function(_) {\n          _.preventDefault(), typeof p == \"function\" && p.call(this, _);\n          var _ = _.dataTransfer.files, S = !0, E = !1, A = void 0;\n          try {\n            for (var x, P = _[Symbol.iterator](); !(S = (x = P.next()).done); S = !0) {\n              var M = x.value;\n              y.default.File._load(M, c);\n            }\n          } catch (R) {\n            E = !0, A = R;\n          } finally {\n            try {\n              S || P.return == null || P.return();\n            } finally {\n              if (E)\n                throw A;\n            }\n          }\n        }, this)) : console.log(\"The File APIs are not fully supported in this browser.\"), this;\n      }, y.default.Element.prototype.draggable = function(c) {\n        var p, j = \"ontouchstart\" in window, T = 0, _ = 0, S = 0, E = 0, A = j ? \"touchend\" : \"mouseup\", x = j ? \"touchmove\" : \"mousemove\";\n        function P(R) {\n          var L;\n          R = R || window.event, E = j ? (L = R.changedTouches, T = S - parseInt(L[0].clientX), _ = E - parseInt(L[0].clientY), S = parseInt(L[0].clientX), parseInt(L[0].clientY)) : (T = S - parseInt(R.clientX), _ = E - parseInt(R.clientY), S = parseInt(R.clientX), parseInt(R.clientY)), c.style.left = c.offsetLeft - T + \"px\", c.style.top = c.offsetTop - _ + \"px\";\n        }\n        function M() {\n          document.removeEventListener(A, M, !1), document.removeEventListener(x, P, !1);\n        }\n        return c === void 0 ? p = c = this.elt : c !== this.elt && c.elt !== this.elt && (c = c.elt, p = this.elt), p.addEventListener(j ? \"touchstart\" : \"mousedown\", function(R) {\n          {\n            var L;\n            R = R || window.event, E = j ? (L = R.changedTouches, S = parseInt(L[0].clientX), parseInt(L[0].clientY)) : (S = parseInt(R.clientX), parseInt(R.clientY));\n          }\n          return document.addEventListener(A, M, !1), document.addEventListener(x, P, !1), !1;\n        }, !1), p.style.cursor = \"move\", this;\n      };\n      function a(c, p, j, T) {\n        o(this, a), this.callback = c, this.time = p, this.id = j, this.val = T;\n      }\n      t = function(c) {\n        var p = T;\n        if (typeof c != \"function\" && c !== null)\n          throw new TypeError(\"Super expression must either be null or a function\");\n        p.prototype = Object.create(c && c.prototype, { constructor: { value: p, writable: !0, configurable: !0 } }), c && g(p, c);\n        var j = f(T);\n        function T(_, S) {\n          o(this, T);\n          var E = r(S = j.call(this, _, S));\n          return S.elt.crossOrigin = \"anonymous\", S._prevTime = 0, S._cueIDCounter = 0, S._cues = [], S.pixels = [], S._pixelsState = r(S), S._pixelDensity = 1, S._modified = !1, S._frameOnCanvas = -1, Object.defineProperty(E, \"src\", { get: function() {\n            var A = E.elt.children[0].src, x = E.elt.src === window.location.href ? \"\" : E.elt.src;\n            return A === window.location.href ? x : A;\n          }, set: function(A) {\n            for (var x = 0; x < E.elt.children.length; x++)\n              E.elt.removeChild(E.elt.children[x]);\n            var P = document.createElement(\"source\");\n            P.src = A, _.appendChild(P), E.elt.src = A, E.modified = !0;\n          } }), E._onended = function() {\n          }, E.elt.onended = function() {\n            E._onended(E);\n          }, S;\n        }\n        return h(T, [{ key: \"play\", value: function() {\n          var _;\n          return this.elt.currentTime === this.elt.duration && (this.elt.currentTime = 0), 1 < this.elt.readyState || this.elt.load(), (_ = this.elt.play()) && _.catch && _.catch(function(S) {\n            S.name === \"NotAllowedError\" ? console.error(S) : console.error(\"Media play method encountered an unexpected error\", S);\n          }), this;\n        } }, { key: \"stop\", value: function() {\n          return this.elt.pause(), this.elt.currentTime = 0, this;\n        } }, { key: \"pause\", value: function() {\n          return this.elt.pause(), this;\n        } }, { key: \"loop\", value: function() {\n          return this.elt.setAttribute(\"loop\", !0), this.play(), this;\n        } }, { key: \"noLoop\", value: function() {\n          return this.elt.removeAttribute(\"loop\"), this;\n        } }, { key: \"_setupAutoplayFailDetection\", value: function() {\n          var _ = setTimeout(function() {\n            console.error(e);\n          }, 500);\n          this.elt.addEventListener(\"play\", function() {\n            return clearTimeout(_);\n          }, { passive: !0, once: !0 });\n        } }, { key: \"autoplay\", value: function(_) {\n          var S = this, E = this.elt.getAttribute(\"autoplay\");\n          return this.elt.setAttribute(\"autoplay\", _), _ && !E && (_ = function() {\n            return S._setupAutoplayFailDetection();\n          }, this.elt.readyState === 4 ? _() : this.elt.addEventListener(\"canplay\", _, { passive: !0, once: !0 })), this;\n        } }, { key: \"volume\", value: function(_) {\n          if (_ === void 0)\n            return this.elt.volume;\n          this.elt.volume = _;\n        } }, { key: \"speed\", value: function(_) {\n          if (_ === void 0)\n            return this.presetPlaybackRate || this.elt.playbackRate;\n          this.loadedmetadata ? this.elt.playbackRate = _ : this.presetPlaybackRate = _;\n        } }, { key: \"time\", value: function(_) {\n          return _ === void 0 ? this.elt.currentTime : (this.elt.currentTime = _, this);\n        } }, { key: \"duration\", value: function() {\n          return this.elt.duration;\n        } }, { key: \"_ensureCanvas\", value: function() {\n          this.canvas || (this.canvas = document.createElement(\"canvas\"), this.drawingContext = this.canvas.getContext(\"2d\"), this.setModified(!0));\n          var _ = this._frameOnCanvas !== this._pInst.frameCount;\n          this.loadedmetadata && _ && (this.canvas.width !== this.elt.width && (this.canvas.width = this.elt.width, this.canvas.height = this.elt.height, this.width = this.canvas.width, this.height = this.canvas.height), this.drawingContext.clearRect(0, 0, this.canvas.width, this.canvas.height), this.flipped === !0 && (this.drawingContext.save(), this.drawingContext.scale(-1, 1), this.drawingContext.translate(-this.canvas.width, 0)), this.drawingContext.drawImage(this.elt, 0, 0, this.canvas.width, this.canvas.height), this.flipped === !0 && this.drawingContext.restore(), this.setModified(!0), this._frameOnCanvas = this._pInst.frameCount);\n        } }, { key: \"loadPixels\", value: function() {\n          this._ensureCanvas();\n          for (var _ = arguments.length, S = new Array(_), E = 0; E < _; E++)\n            S[E] = arguments[E];\n          return y.default.Renderer2D.prototype.loadPixels.apply(this, S);\n        } }, { key: \"updatePixels\", value: function(_, S, E, A) {\n          return this.loadedmetadata && (this._ensureCanvas(), y.default.Renderer2D.prototype.updatePixels.call(this, _, S, E, A)), this.setModified(!0), this;\n        } }, { key: \"get\", value: function() {\n          this._ensureCanvas();\n          for (var _ = arguments.length, S = new Array(_), E = 0; E < _; E++)\n            S[E] = arguments[E];\n          return y.default.Renderer2D.prototype.get.apply(this, S);\n        } }, { key: \"_getPixel\", value: function() {\n          this.loadPixels();\n          for (var _ = arguments.length, S = new Array(_), E = 0; E < _; E++)\n            S[E] = arguments[E];\n          return y.default.Renderer2D.prototype._getPixel.apply(this, S);\n        } }, { key: \"set\", value: function(_, S, E) {\n          this.loadedmetadata && (this._ensureCanvas(), y.default.Renderer2D.prototype.set.call(this, _, S, E), this.setModified(!0));\n        } }, { key: \"copy\", value: function() {\n          this._ensureCanvas();\n          for (var _ = arguments.length, S = new Array(_), E = 0; E < _; E++)\n            S[E] = arguments[E];\n          y.default.prototype.copy.apply(this, S);\n        } }, { key: \"mask\", value: function() {\n          this.loadPixels(), this.setModified(!0);\n          for (var _ = arguments.length, S = new Array(_), E = 0; E < _; E++)\n            S[E] = arguments[E];\n          y.default.Image.prototype.mask.apply(this, S);\n        } }, { key: \"isModified\", value: function() {\n          return this._modified;\n        } }, { key: \"setModified\", value: function(_) {\n          this._modified = _;\n        } }, { key: \"onended\", value: function(_) {\n          return this._onended = _, this;\n        } }, { key: \"connect\", value: function(_) {\n          var S, E;\n          if (typeof y.default.prototype.getAudioContext == \"function\")\n            S = y.default.prototype.getAudioContext(), E = y.default.soundOut.input;\n          else\n            try {\n              E = (S = _.context).destination;\n            } catch {\n              throw \"connect() is meant to be used with Web Audio API or p5.sound.js\";\n            }\n          this.audioSourceNode || (this.audioSourceNode = S.createMediaElementSource(this.elt), this.audioSourceNode.connect(E)), _ ? _.input ? this.audioSourceNode.connect(_.input) : this.audioSourceNode.connect(_) : this.audioSourceNode.connect(E);\n        } }, { key: \"disconnect\", value: function() {\n          if (!this.audioSourceNode)\n            throw \"nothing to disconnect\";\n          this.audioSourceNode.disconnect();\n        } }, { key: \"showControls\", value: function() {\n          this.elt.style[\"text-align\"] = \"inherit\", this.elt.controls = !0;\n        } }, { key: \"hideControls\", value: function() {\n          this.elt.controls = !1;\n        } }, { key: \"addCue\", value: function(_, x, E) {\n          var A = this._cueIDCounter++, x = new a(x, _, A, E);\n          return this._cues.push(x), this.elt.ontimeupdate || (this.elt.ontimeupdate = this._onTimeUpdate.bind(this)), A;\n        } }, { key: \"removeCue\", value: function(_) {\n          for (var S = 0; S < this._cues.length; S++)\n            this._cues[S].id === _ && (console.log(_), this._cues.splice(S, 1));\n          this._cues.length === 0 && (this.elt.ontimeupdate = null);\n        } }, { key: \"clearCues\", value: function() {\n          this._cues = [], this.elt.ontimeupdate = null;\n        } }, { key: \"_onTimeUpdate\", value: function() {\n          for (var _ = this.time(), S = 0; S < this._cues.length; S++) {\n            var E = this._cues[S].time, A = this._cues[S].val;\n            this._prevTime < E && E <= _ && this._cues[S].callback(A);\n          }\n          this._prevTime = _;\n        } }]), T;\n      }(y.default.Element), y.default.MediaElement = t, t = function() {\n        function c(p, j) {\n          o(this, c), this.file = p, this._pInst = j, j = p.type.split(\"/\"), this.type = j[0], this.subtype = j[1], this.name = p.name, this.size = p.size, this.data = void 0;\n        }\n        return h(c, null, [{ key: \"_createLoader\", value: function(p, j) {\n          var T = new FileReader();\n          return T.onload = function(_) {\n            var S, E = new y.default.File(p);\n            E.file.type === \"application/json\" ? E.data = JSON.parse(_.target.result) : E.file.type === \"text/xml\" ? (S = new DOMParser().parseFromString(_.target.result, \"text/xml\"), E.data = new y.default.XML(S.documentElement)) : E.data = _.target.result, j(E);\n          }, T;\n        } }, { key: \"_load\", value: function(p, j) {\n          var T;\n          /^text\\//.test(p.type) || p.type === \"application/json\" ? y.default.File._createLoader(p, j).readAsText(p) : /^(video|audio)\\//.test(p.type) ? ((T = new y.default.File(p)).data = URL.createObjectURL(p), j(T)) : y.default.File._createLoader(p, j).readAsDataURL(p);\n        } }]), c;\n      }(), y.default.File = t, t = y.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.every\": 154, \"core-js/modules/es.array.filter\": 156, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.array.splice\": 170, \"core-js/modules/es.function.name\": 173, \"core-js/modules/es.object.assign\": 181, \"core-js/modules/es.object.get-prototype-of\": 185, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.promise\": 188, \"core-js/modules/es.reflect.construct\": 189, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.string.trim\": 206, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.for-each\": 242, \"core-js/modules/web.dom-collections.iterator\": 243, \"core-js/modules/web.url\": 245 }], 297: [function(i, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (i = i(\"../core/main\")) && i.__esModule ? i : { default: i };\n      m.default.prototype.deviceOrientation = 1 < window.innerWidth / window.innerHeight ? \"landscape\" : \"portrait\", m.default.prototype.accelerationX = 0, m.default.prototype.accelerationY = 0, m.default.prototype.accelerationZ = 0, m.default.prototype.pAccelerationX = 0, m.default.prototype.pAccelerationY = 0, m.default.prototype.pAccelerationZ = 0, m.default.prototype._updatePAccelerations = function() {\n        this._setProperty(\"pAccelerationX\", this.accelerationX), this._setProperty(\"pAccelerationY\", this.accelerationY), this._setProperty(\"pAccelerationZ\", this.accelerationZ);\n      }, m.default.prototype.rotationX = 0, m.default.prototype.rotationY = 0, m.default.prototype.rotationZ = 0, m.default.prototype.pRotationX = 0, m.default.prototype.pRotationY = 0;\n      var y = m.default.prototype.pRotationZ = 0, u = 0, h = 0, g = \"clockwise\", f = \"clockwise\", r = \"clockwise\", s = (m.default.prototype.pRotateDirectionX = void 0, m.default.prototype.pRotateDirectionY = void 0, m.default.prototype.pRotateDirectionZ = void 0, m.default.prototype._updatePRotations = function() {\n        this._setProperty(\"pRotationX\", this.rotationX), this._setProperty(\"pRotationY\", this.rotationY), this._setProperty(\"pRotationZ\", this.rotationZ);\n      }, m.default.prototype.turnAxis = void 0, 0.5), o = 30, i = (m.default.prototype.setMoveThreshold = function(l) {\n        m.default._validateParameters(\"setMoveThreshold\", arguments), s = l;\n      }, m.default.prototype.setShakeThreshold = function(l) {\n        m.default._validateParameters(\"setShakeThreshold\", arguments), o = l;\n      }, m.default.prototype._ondeviceorientation = function(l) {\n        this._updatePRotations(), this._setProperty(\"rotationX\", this._fromDegrees(l.beta)), this._setProperty(\"rotationY\", this._fromDegrees(l.gamma)), this._setProperty(\"rotationZ\", this._fromDegrees(l.alpha)), this._handleMotion();\n      }, m.default.prototype._ondevicemotion = function(l) {\n        this._updatePAccelerations(), this._setProperty(\"accelerationX\", 2 * l.acceleration.x), this._setProperty(\"accelerationY\", 2 * l.acceleration.y), this._setProperty(\"accelerationZ\", 2 * l.acceleration.z), this._handleMotion();\n      }, m.default.prototype._handleMotion = function() {\n        window.orientation === 90 || window.orientation === -90 ? this._setProperty(\"deviceOrientation\", \"landscape\") : window.orientation === 0 ? this._setProperty(\"deviceOrientation\", \"portrait\") : window.orientation === void 0 && this._setProperty(\"deviceOrientation\", \"undefined\");\n        var l, n, a, c, p, j = this._isGlobal ? window : this;\n        typeof j.deviceMoved == \"function\" && (Math.abs(this.accelerationX - this.pAccelerationX) > s || Math.abs(this.accelerationY - this.pAccelerationY) > s || Math.abs(this.accelerationZ - this.pAccelerationZ) > s) && j.deviceMoved(), typeof j.deviceTurned == \"function\" && (n = this._toDegrees(this.rotationX) + 180, a = this._toDegrees(this.pRotationX) + 180, l = y + 180, 0 < n - a && n - a < 270 || n - a < -270 ? g = \"clockwise\" : (n - a < 0 || 270 < n - a) && (g = \"counter-clockwise\"), g !== this.pRotateDirectionX && (l = n), 90 < Math.abs(n - l) && Math.abs(n - l) < 270 && (l = n, this._setProperty(\"turnAxis\", \"X\"), j.deviceTurned()), this.pRotateDirectionX = g, y = l - 180, a = this._toDegrees(this.rotationY) + 180, n = this._toDegrees(this.pRotationY) + 180, l = u + 180, 0 < a - n && a - n < 270 || a - n < -270 ? f = \"clockwise\" : (a - n < 0 || 270 < a - this.pRotationY) && (f = \"counter-clockwise\"), f !== this.pRotateDirectionY && (l = a), 90 < Math.abs(a - l) && Math.abs(a - l) < 270 && (l = a, this._setProperty(\"turnAxis\", \"Y\"), j.deviceTurned()), this.pRotateDirectionY = f, u = l - 180, 0 < (n = this._toDegrees(this.rotationZ)) - (a = this._toDegrees(this.pRotationZ)) && n - a < 270 || n - a < -270 ? r = \"clockwise\" : (n - a < 0 || 270 < n - a) && (r = \"counter-clockwise\"), r !== this.pRotateDirectionZ && (h = n), 90 < Math.abs(n - h) && Math.abs(n - h) < 270 && (h = n, this._setProperty(\"turnAxis\", \"Z\"), j.deviceTurned()), this.pRotateDirectionZ = r, this._setProperty(\"turnAxis\", void 0)), typeof j.deviceShaken == \"function\" && (this.pAccelerationX !== null && (c = Math.abs(this.accelerationX - this.pAccelerationX), p = Math.abs(this.accelerationY - this.pAccelerationY)), o < c + p && j.deviceShaken());\n      }, m.default);\n      C.default = i;\n    }, { \"../core/main\": 280 }], 298: [function(t, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      m.default.prototype.isKeyPressed = !1, m.default.prototype.keyIsPressed = !1, m.default.prototype.key = \"\", m.default.prototype.keyCode = 0, m.default.prototype._onkeydown = function(y) {\n        var u;\n        this._downKeys[y.which] || (this._setProperty(\"isKeyPressed\", !0), this._setProperty(\"keyIsPressed\", !0), this._setProperty(\"keyCode\", y.which), this._downKeys[y.which] = !0, this._setProperty(\"key\", y.key || String.fromCharCode(y.which) || y.which), typeof (u = this._isGlobal ? window : this).keyPressed != \"function\" || y.charCode || u.keyPressed(y) === !1 && y.preventDefault());\n      }, m.default.prototype._onkeyup = function(y) {\n        this._downKeys[y.which] = !1, this._areDownKeys() || (this._setProperty(\"isKeyPressed\", !1), this._setProperty(\"keyIsPressed\", !1)), this._setProperty(\"_lastKeyCodeTyped\", null), this._setProperty(\"key\", y.key || String.fromCharCode(y.which) || y.which), this._setProperty(\"keyCode\", y.which);\n        var u = this._isGlobal ? window : this;\n        typeof u.keyReleased == \"function\" && u.keyReleased(y) === !1 && y.preventDefault();\n      }, m.default.prototype._onkeypress = function(y) {\n        var u;\n        y.which !== this._lastKeyCodeTyped && (this._setProperty(\"_lastKeyCodeTyped\", y.which), this._setProperty(\"key\", y.key || String.fromCharCode(y.which) || y.which), typeof (u = this._isGlobal ? window : this).keyTyped == \"function\" && u.keyTyped(y) === !1 && y.preventDefault());\n      }, m.default.prototype._onblur = function(y) {\n        this._downKeys = {};\n      }, m.default.prototype.keyIsDown = function(y) {\n        return m.default._validateParameters(\"keyIsDown\", arguments), this._downKeys[y] || !1;\n      }, m.default.prototype._areDownKeys = function() {\n        for (var y in this._downKeys)\n          if (this._downKeys.hasOwnProperty(y) && this._downKeys[y] === !0)\n            return !0;\n        return !1;\n      }, t = m.default, C.default = t;\n    }, { \"../core/main\": 280 }], 299: [function(t, H, C) {\n      function m(f) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(r) {\n          return typeof r;\n        } : function(r) {\n          return r && typeof Symbol == \"function\" && r.constructor === Symbol && r !== Symbol.prototype ? \"symbol\" : typeof r;\n        })(f);\n      }\n      function y(f) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(r) {\n          return m(r);\n        } : function(r) {\n          return r && typeof Symbol == \"function\" && r.constructor === Symbol && r !== Symbol.prototype ? \"symbol\" : m(r);\n        })(f);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (u = t(\"../core/main\")) && u.__esModule ? u : { default: u }, h = function(f) {\n        if (f && f.__esModule)\n          return f;\n        if (f === null || y(f) !== \"object\" && typeof f != \"function\")\n          return { default: f };\n        var r = g();\n        if (r && r.has(f))\n          return r.get(f);\n        var s, o = {}, i = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (s in f) {\n          var l;\n          Object.prototype.hasOwnProperty.call(f, s) && ((l = i ? Object.getOwnPropertyDescriptor(f, s) : null) && (l.get || l.set) ? Object.defineProperty(o, s, l) : o[s] = f[s]);\n        }\n        return o.default = f, r && r.set(f, o), o;\n      }(t(\"../core/constants\"));\n      function g() {\n        var f;\n        return typeof WeakMap != \"function\" ? null : (f = /* @__PURE__ */ new WeakMap(), g = function() {\n          return f;\n        }, f);\n      }\n      u.default.prototype.movedX = 0, u.default.prototype.movedY = 0, u.default.prototype._hasMouseInteracted = !1, u.default.prototype.mouseX = 0, u.default.prototype.mouseY = 0, u.default.prototype.pmouseX = 0, u.default.prototype.pmouseY = 0, u.default.prototype.winMouseX = 0, u.default.prototype.winMouseY = 0, u.default.prototype.pwinMouseX = 0, u.default.prototype.pwinMouseY = 0, u.default.prototype.mouseButton = 0, u.default.prototype.mouseIsPressed = !1, u.default.prototype._updateNextMouseCoords = function(f) {\n        var r, s, o, i, l;\n        this._curElement !== null && (!f.touches || 0 < f.touches.length) && (r = this._curElement.elt, s = this.width, o = this.height, (i = f) && !i.clientX && (i.touches ? i = i.touches[0] : i.changedTouches && (i = i.changedTouches[0])), l = r.getBoundingClientRect(), s = r.scrollWidth / s || 1, r = r.scrollHeight / o || 1, o = { x: (i.clientX - l.left) / s, y: (i.clientY - l.top) / r, winX: i.clientX, winY: i.clientY, id: i.identifier }, this._setProperty(\"movedX\", f.movementX), this._setProperty(\"movedY\", f.movementY), this._setProperty(\"mouseX\", o.x), this._setProperty(\"mouseY\", o.y), this._setProperty(\"winMouseX\", o.winX), this._setProperty(\"winMouseY\", o.winY)), this._hasMouseInteracted || (this._updateMouseCoords(), this._setProperty(\"_hasMouseInteracted\", !0));\n      }, u.default.prototype._updateMouseCoords = function() {\n        this._setProperty(\"pmouseX\", this.mouseX), this._setProperty(\"pmouseY\", this.mouseY), this._setProperty(\"pwinMouseX\", this.winMouseX), this._setProperty(\"pwinMouseY\", this.winMouseY), this._setProperty(\"_pmouseWheelDeltaY\", this._mouseWheelDeltaY);\n      }, u.default.prototype._setMouseButton = function(f) {\n        f.button === 1 ? this._setProperty(\"mouseButton\", h.CENTER) : f.button === 2 ? this._setProperty(\"mouseButton\", h.RIGHT) : this._setProperty(\"mouseButton\", h.LEFT);\n      }, u.default.prototype._onmousemove = function(f) {\n        var r = this._isGlobal ? window : this;\n        this._updateNextMouseCoords(f), this.mouseIsPressed ? typeof r.mouseDragged == \"function\" ? r.mouseDragged(f) === !1 && f.preventDefault() : typeof r.touchMoved == \"function\" && r.touchMoved(f) === !1 && f.preventDefault() : typeof r.mouseMoved == \"function\" && r.mouseMoved(f) === !1 && f.preventDefault();\n      }, u.default.prototype._onmousedown = function(f) {\n        var r = this._isGlobal ? window : this;\n        this._setProperty(\"mouseIsPressed\", !0), this._setMouseButton(f), this._updateNextMouseCoords(f), this.touchstart || (typeof r.mousePressed == \"function\" ? r.mousePressed(f) === !1 && f.preventDefault() : typeof r.touchStarted == \"function\" && r.touchStarted(f) === !1 && f.preventDefault(), this.touchstart = !1);\n      }, u.default.prototype._onmouseup = function(f) {\n        var r = this._isGlobal ? window : this;\n        this._setProperty(\"mouseIsPressed\", !1), this.touchend || (typeof r.mouseReleased == \"function\" ? r.mouseReleased(f) === !1 && f.preventDefault() : typeof r.touchEnded == \"function\" && r.touchEnded(f) === !1 && f.preventDefault(), this.touchend = !1);\n      }, u.default.prototype._ondragend = u.default.prototype._onmouseup, u.default.prototype._ondragover = u.default.prototype._onmousemove, u.default.prototype._onclick = function(f) {\n        var r = this._isGlobal ? window : this;\n        typeof r.mouseClicked == \"function\" && r.mouseClicked(f) === !1 && f.preventDefault();\n      }, u.default.prototype._ondblclick = function(f) {\n        var r = this._isGlobal ? window : this;\n        typeof r.doubleClicked == \"function\" && r.doubleClicked(f) === !1 && f.preventDefault();\n      }, u.default.prototype._mouseWheelDeltaY = 0, u.default.prototype._pmouseWheelDeltaY = 0, u.default.prototype._onwheel = function(f) {\n        var r = this._isGlobal ? window : this;\n        this._setProperty(\"_mouseWheelDeltaY\", f.deltaY), typeof r.mouseWheel == \"function\" && (f.delta = f.deltaY, r.mouseWheel(f) === !1 && f.preventDefault());\n      }, u.default.prototype.requestPointerLock = function() {\n        var f = this._curElement.elt;\n        return f.requestPointerLock = f.requestPointerLock || f.mozRequestPointerLock, f.requestPointerLock ? (f.requestPointerLock(), !0) : (console.log(\"requestPointerLock is not implemented in this browser\"), !1);\n      }, u.default.prototype.exitPointerLock = function() {\n        document.exitPointerLock();\n      }, t = u.default, C.default = t;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 300: [function(t, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t }, t.default.prototype.touches = [], t.default.prototype._updateTouchCoords = function(m) {\n        if (this._curElement !== null) {\n          for (var y = [], u = 0; u < m.touches.length; u++)\n            y[u] = function(l, i, n, r) {\n              var s = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : 0, o = l.getBoundingClientRect(), i = l.scrollWidth / i || 1, l = l.scrollHeight / n || 1, n = r.touches[s] || r.changedTouches[s];\n              return { x: (n.clientX - o.left) / i, y: (n.clientY - o.top) / l, winX: n.clientX, winY: n.clientY, id: n.identifier };\n            }(this._curElement.elt, this.width, this.height, m, u);\n          this._setProperty(\"touches\", y);\n        }\n      }, t.default.prototype._ontouchstart = function(m) {\n        var y = this._isGlobal ? window : this;\n        this._setProperty(\"mouseIsPressed\", !0), this._updateTouchCoords(m), this._updateNextMouseCoords(m), this._updateMouseCoords(), typeof y.touchStarted == \"function\" && (y.touchStarted(m) === !1 && m.preventDefault(), this.touchstart = !0);\n      }, t.default.prototype._ontouchmove = function(m) {\n        var y = this._isGlobal ? window : this;\n        this._updateTouchCoords(m), this._updateNextMouseCoords(m), typeof y.touchMoved == \"function\" ? y.touchMoved(m) === !1 && m.preventDefault() : typeof y.mouseDragged == \"function\" && y.mouseDragged(m) === !1 && m.preventDefault();\n      }, t.default.prototype._ontouchend = function(m) {\n        this._setProperty(\"mouseIsPressed\", !1), this._updateTouchCoords(m), this._updateNextMouseCoords(m);\n        var y = this._isGlobal ? window : this;\n        typeof y.touchEnded == \"function\" && (y.touchEnded(m) === !1 && m.preventDefault(), this.touchend = !0);\n      }, t = t.default, C.default = t;\n    }, { \"../core/main\": 280 }], 301: [function(t, H, C) {\n      t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.typed-array.int32-array\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.typed-array.int32-array\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m, y, u, h, g = { _toPixels: function(f) {\n        var r, s;\n        return f instanceof ImageData ? f.data : f.getContext(\"2d\") ? f.getContext(\"2d\").getImageData(0, 0, f.width, f.height).data : f.getContext(\"webgl\") ? (s = (r = f.getContext(\"webgl\")).drawingBufferWidth * r.drawingBufferHeight * 4, s = new Uint8Array(s), r.readPixels(0, 0, f.width, f.height, r.RGBA, r.UNSIGNED_BYTE, s), s) : void 0;\n      }, _getARGB: function(f, r) {\n        return r *= 4, f[3 + r] << 24 & 4278190080 | f[r] << 16 & 16711680 | f[1 + r] << 8 & 65280 | 255 & f[2 + r];\n      }, _setPixels: function(f, r) {\n        for (var s, o = 0, i = f.length; o < i; o++)\n          f[0 + (s = 4 * o)] = (16711680 & r[o]) >>> 16, f[1 + s] = (65280 & r[o]) >>> 8, f[2 + s] = 255 & r[o], f[3 + s] = (4278190080 & r[o]) >>> 24;\n      }, _toImageData: function(f) {\n        return f instanceof ImageData ? f : f.getContext(\"2d\").getImageData(0, 0, f.width, f.height);\n      }, _createImageData: function(f, r) {\n        return g._tmpCanvas = document.createElement(\"canvas\"), g._tmpCtx = g._tmpCanvas.getContext(\"2d\"), this._tmpCtx.createImageData(f, r);\n      }, apply: function(f, l, s) {\n        var o = f.getContext(\"2d\"), i = o.getImageData(0, 0, f.width, f.height), l = l(i, s);\n        l instanceof ImageData ? o.putImageData(l, 0, 0, 0, 0, f.width, f.height) : o.putImageData(i, 0, 0, 0, 0, f.width, f.height);\n      }, threshold: function(f) {\n        for (var r = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 0.5, s = g._toPixels(f), o = Math.floor(255 * r), i = 0; i < s.length; i += 4) {\n          var l = void 0, l = o <= 0.2126 * s[i] + 0.7152 * s[i + 1] + 0.0722 * s[i + 2] ? 255 : 0;\n          s[i] = s[i + 1] = s[i + 2] = l;\n        }\n      }, gray: function(f) {\n        for (var r = g._toPixels(f), s = 0; s < r.length; s += 4) {\n          var o = r[s], i = r[s + 1], l = r[s + 2];\n          r[s] = r[s + 1] = r[s + 2] = 0.2126 * o + 0.7152 * i + 0.0722 * l;\n        }\n      }, opaque: function(f) {\n        for (var r = g._toPixels(f), s = 0; s < r.length; s += 4)\n          r[s + 3] = 255;\n        return r;\n      }, invert: function(f) {\n        for (var r = g._toPixels(f), s = 0; s < r.length; s += 4)\n          r[s] = 255 - r[s], r[s + 1] = 255 - r[s + 1], r[s + 2] = 255 - r[s + 2];\n      }, posterize: function(f) {\n        var r = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 4, s = g._toPixels(f);\n        if (r < 2 || 255 < r)\n          throw new Error(\"Level must be greater than 2 and less than 255 for posterize\");\n        for (var o = r - 1, i = 0; i < s.length; i += 4) {\n          var l = s[i], n = s[i + 1], a = s[i + 2];\n          s[i] = 255 * (l * r >> 8) / o, s[i + 1] = 255 * (n * r >> 8) / o, s[i + 2] = 255 * (a * r >> 8) / o;\n        }\n      }, dilate: function(f) {\n        for (var r, s, o, i, l, n, a, c, p, j = g._toPixels(f), T = 0, _ = j.length ? j.length / 4 : 0, S = new Int32Array(_); T < _; )\n          for (s = (r = T) + f.width; T < s; )\n            i = o = g._getARGB(j, T), (p = T - 1) < r && (p = T), s <= (c = T + 1) && (c = T), (l = T - f.width) < 0 && (l = 0), _ <= (n = T + f.width) && (n = T), l = g._getARGB(j, l), p = g._getARGB(j, p), n = g._getARGB(j, n), (i = 77 * (i >> 16 & 255) + 151 * (i >> 8 & 255) + 28 * (255 & i)) < (a = 77 * (p >> 16 & 255) + 151 * (p >> 8 & 255) + 28 * (255 & p)) && (o = p, i = a), i < (a = 77 * ((p = g._getARGB(j, c)) >> 16 & 255) + 151 * (p >> 8 & 255) + 28 * (255 & p)) && (o = p, i = a), i < (c = 77 * (l >> 16 & 255) + 151 * (l >> 8 & 255) + 28 * (255 & l)) && (o = l, i = c), i < (p = 77 * (n >> 16 & 255) + 151 * (n >> 8 & 255) + 28 * (255 & n)) && (o = n, i = p), S[T++] = o;\n        g._setPixels(j, S);\n      }, erode: function(f) {\n        for (var r, s, o, i, l, n, a, c, p, j = g._toPixels(f), T = 0, _ = j.length ? j.length / 4 : 0, S = new Int32Array(_); T < _; )\n          for (s = (r = T) + f.width; T < s; )\n            i = o = g._getARGB(j, T), (p = T - 1) < r && (p = T), s <= (c = T + 1) && (c = T), (l = T - f.width) < 0 && (l = 0), _ <= (n = T + f.width) && (n = T), l = g._getARGB(j, l), p = g._getARGB(j, p), n = g._getARGB(j, n), (a = 77 * (p >> 16 & 255) + 151 * (p >> 8 & 255) + 28 * (255 & p)) < (i = 77 * (i >> 16 & 255) + 151 * (i >> 8 & 255) + 28 * (255 & i)) && (o = p, i = a), (a = 77 * ((p = g._getARGB(j, c)) >> 16 & 255) + 151 * (p >> 8 & 255) + 28 * (255 & p)) < i && (o = p, i = a), (c = 77 * (l >> 16 & 255) + 151 * (l >> 8 & 255) + 28 * (255 & l)) < i && (o = l, i = c), (p = 77 * (n >> 16 & 255) + 151 * (n >> 8 & 255) + 28 * (255 & n)) < i && (o = n, i = p), S[T++] = o;\n        g._setPixels(j, S);\n      }, blur: function(f, r) {\n        for (var s, o, i, l, n, a, c, p, j, T, _ = g._toPixels(f), S = f.width, E = f.height, A = S * E, x = new Int32Array(A), P = 0; P < A; P++)\n          x[P] = g._getARGB(_, P);\n        var M, R, L, F, V, G, U, W, X = new Int32Array(A), ne = new Int32Array(A), b = new Int32Array(A), O = new Int32Array(A), D = 0, B = 3.5 * r | 0;\n        if (m !== (B = B < 1 ? 1 : B < 248 ? B : 248)) {\n          y = 1 + (m = B) << 1, u = new Int32Array(y), h = new Array(y);\n          for (var Y = 0; Y < y; Y++)\n            h[Y] = new Int32Array(256);\n          for (var J = 1, te = B - 1; J < B; J++) {\n            u[B + J] = u[te] = G = te * te, U = h[B + J], W = h[te--];\n            for (var ce = 0; ce < 256; ce++)\n              U[ce] = W[ce] = G * ce;\n          }\n          V = u[B] = B * B, U = h[B];\n          for (var re = 0; re < 256; re++)\n            U[re] = V * re;\n        }\n        for (R = 0; R < E; R++) {\n          for (M = 0; M < S; M++) {\n            if (l = i = o = n = s = 0, (a = M - m) < 0)\n              T = -a, a = 0;\n            else {\n              if (S <= a)\n                break;\n              T = 0;\n            }\n            for (L = T; L < y && !(S <= a); L++) {\n              var ue = x[a + D];\n              F = h[L], n += F[(-16777216 & ue) >>> 24], o += F[(16711680 & ue) >> 16], i += F[(65280 & ue) >> 8], l += F[255 & ue], s += u[L], a++;\n            }\n            X[c = D + M] = n / s, ne[c] = o / s, b[c] = i / s, O[c] = l / s;\n          }\n          D += S;\n        }\n        for (j = (p = -m) * S, R = D = 0; R < E; R++) {\n          for (M = 0; M < S; M++) {\n            if (l = i = o = n = s = 0, p < 0)\n              T = c = -p, a = M;\n            else {\n              if (E <= p)\n                break;\n              T = 0, c = p, a = M + j;\n            }\n            for (L = T; L < y && !(E <= c); L++)\n              F = h[L], n += F[X[a]], o += F[ne[a]], i += F[b[a]], l += F[O[a]], s += u[L], c++, a += S;\n            x[M + D] = n / s << 24 | o / s << 16 | i / s << 8 | l / s;\n          }\n          D += S, j += S, p++;\n        }\n        g._setPixels(_, x);\n      } };\n      C.default = g;\n    }, { \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.int32-array\": 222, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236, \"core-js/modules/es.typed-array.uint8-array\": 239 }], 302: [function(t, H, C) {\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.set\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.uint32-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.set\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.uint32-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = u(t(\"../core/main\")), y = u(t(\"omggif\"));\n      function u(g) {\n        return g && g.__esModule ? g : { default: g };\n      }\n      function h(g) {\n        return function(f) {\n          if (Array.isArray(f)) {\n            for (var r = 0, s = new Array(f.length); r < f.length; r++)\n              s[r] = f[r];\n            return s;\n          }\n        }(g) || function(f) {\n          if (Symbol.iterator in Object(f) || Object.prototype.toString.call(f) === \"[object Arguments]\")\n            return Array.from(f);\n        }(g) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      m.default.prototype.createImage = function(g, f) {\n        return m.default._validateParameters(\"createImage\", arguments), new m.default.Image(g, f);\n      }, m.default.prototype.saveCanvas = function() {\n        for (var g, f, r, s, o, i, l = arguments.length, n = new Array(l), a = 0; a < l; a++)\n          n[a] = arguments[a];\n        switch (m.default._validateParameters(\"saveCanvas\", n), n[0] instanceof HTMLCanvasElement ? (g = n[0], n.shift()) : n[0] instanceof m.default.Element ? (g = n[0].elt, n.shift()) : n[0] instanceof m.default.Framebuffer ? (s = n[0], (o = this.createGraphics(s.width, s.height)).pixelDensity(pixelDensity()), s.loadPixels(), o.loadPixels(), o.pixels.set(s.pixels), o.updatePixels(), g = o.elt, n.shift()) : g = this._curElement && this._curElement.elt, 1 <= n.length && (f = n[0]), r = (r = 2 <= n.length ? n[1] : r) || m.default.prototype._checkFileExtension(f, r)[1] || \"png\") {\n          default:\n            i = \"image/png\";\n            break;\n          case \"jpeg\":\n          case \"jpg\":\n            i = \"image/jpeg\";\n        }\n        g.toBlob(function(c) {\n          m.default.prototype.downloadFile(c, f, r), o && o.remove();\n        }, i);\n      }, m.default.prototype.encodeAndDownloadGif = function(g, f) {\n        for (var r = g.gifProperties, s = r.loopLimit, o = (s === 1 ? s = null : s === null && (s = 0), new Uint8Array(g.width * g.height * r.numFrames)), i = [], l = {}, n = 0; n < r.numFrames; n++) {\n          for (var a = /* @__PURE__ */ new Set(), c = r.frames[n].image.data, p = c.length, j = new Uint32Array(g.width * g.height), T = 0, _ = 0; T < p; T += 4, _++) {\n            var S = c[T + 0] << 16 | c[T + 1] << 8 | c[T + 2] << 0;\n            a.add(S), j[_] = S;\n          }\n          var E = h(a).sort().toString();\n          l[E] === void 0 ? l[E] = { freq: 1, frames: [n] } : (l[E].freq += 1, l[E].frames.push(n)), i.push(j);\n        }\n        for (var P = [], A = Object.keys(l).sort(function(b, O) {\n          return l[O].freq - l[b].freq;\n        }), x = A[0].split(\",\").map(function(b) {\n          return parseInt(b);\n        }), P = P.concat(l[x].frames), M = new Set(x), R = 1; R < A.length; R++) {\n          var L = A[R].split(\",\").map(function(b) {\n            return parseInt(b);\n          }).filter(function(b) {\n            return !M.has(b);\n          });\n          if (x.length + L.length <= 256) {\n            for (var F = 0; F < L.length; F++)\n              x.push(L[F]), M.add(L[F]);\n            P = P.concat(l[A[R]].frames);\n          }\n        }\n        P = new Set(P);\n        for (var V = {}, G = 0; G < x.length; G++)\n          V[x[G]] || (V[x[G]] = G);\n        for (var U = 1; U < x.length; )\n          U <<= 1;\n        x.length = U;\n        for (var s = { loop: s, palette: new Uint32Array(x) }, W = new y.default.GifWriter(o, g.width, g.height, s), X = {}, ne = 0; ne < r.numFrames; ne++)\n          (function(O) {\n            var D = !P.has(O), B = D ? [] : x, Y = new Uint8Array(g.width * g.height), J = {}, te = /* @__PURE__ */ new Set(), ce = (i[O].forEach(function(ae, he) {\n              D ? (J[ae] === void 0 && (J[ae] = B.length, B.push(ae)), Y[he] = J[ae]) : Y[he] = V[ae], 0 < O && i[O - 1][he] !== ae && te.add(ae);\n            }), {}), re = B.filter(function(ae) {\n              return !te.has(ae);\n            });\n            if (0 < re.length) {\n              var re = re[0], ue = (D ? J : V)[re];\n              if (0 < O) {\n                for (var le = 0; le < i[O].length; le++)\n                  i[O - 1][le] === i[O][le] && (Y[le] = ue);\n                ce.transparent = ue, X.frameOpts.disposal = 1;\n              }\n            }\n            if (ce.delay = r.frames[O].delay / 10, D) {\n              for (var K = 1; K < B.length; )\n                K <<= 1;\n              B.length = K, ce.palette = new Uint32Array(B);\n            }\n            0 < O && W.addFrame(0, 0, g.width, g.height, X.pixelPaletteIndex, X.frameOpts), X = { pixelPaletteIndex: Y, frameOpts: ce };\n          })(ne);\n        X.frameOpts.disposal = 1, W.addFrame(0, 0, g.width, g.height, X.pixelPaletteIndex, X.frameOpts), s = new Blob([o.slice(0, W.end())], { type: \"image/gif\" }), m.default.prototype.downloadFile(s, f, \"gif\");\n      }, m.default.prototype.saveFrames = function(g, f, r, i, o) {\n        m.default._validateParameters(\"saveFrames\", arguments), r = m.default.prototype.constrain(r = r || 3, 0, 15), r *= 1e3;\n        var i = m.default.prototype.constrain(i || 15, 0, 22), l = 0, n = m.default.prototype._makeFrame, a = this._curElement.elt, c = [], p = setInterval(function() {\n          c.push(n(g + l, f, a)), l++;\n        }, 1e3 / i);\n        setTimeout(function() {\n          if (clearInterval(p), o)\n            o(c);\n          else\n            for (var j = 0, T = c; j < T.length; j++) {\n              var _ = T[j];\n              m.default.prototype.downloadFile(_.imageData, _.filename, _.ext);\n            }\n          c = [];\n        }, 0.01 + r);\n      }, m.default.prototype._makeFrame = function(g, f, o) {\n        var s, o = this ? this._curElement.elt : o;\n        if (f)\n          switch (f.toLowerCase()) {\n            case \"png\":\n              s = \"image/png\";\n              break;\n            case \"jpeg\":\n            case \"jpg\":\n              s = \"image/jpeg\";\n              break;\n            default:\n              s = \"image/png\";\n          }\n        else\n          f = \"png\", s = \"image/png\";\n        var o = (o = o.toDataURL(s)).replace(s, \"image/octet-stream\"), i = {};\n        return i.imageData = o, i.filename = g, i.ext = f, i;\n      }, t = m.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.filter\": 156, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.object.keys\": 186, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.set\": 194, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236, \"core-js/modules/es.typed-array.uint32-array\": 238, \"core-js/modules/es.typed-array.uint8-array\": 239, \"core-js/modules/web.dom-collections.for-each\": 242, \"core-js/modules/web.dom-collections.iterator\": 243, omggif: 253 }], 303: [function(t, H, C) {\n      function m(a) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(c) {\n          return typeof c;\n        } : function(c) {\n          return c && typeof Symbol == \"function\" && c.constructor === Symbol && c !== Symbol.prototype ? \"symbol\" : typeof c;\n        })(a);\n      }\n      function y(a) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(c) {\n          return m(c);\n        } : function(c) {\n          return c && typeof Symbol == \"function\" && c.constructor === Symbol && c !== Symbol.prototype ? \"symbol\" : m(c);\n        })(a);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.copy-within\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.uint8-clamped-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.copy-within\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.uint8-clamped-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t(\"regenerator-runtime/runtime\");\n      var u = o(t(\"../core/main\")), h = o(t(\"../core/helpers\")), g = function(a) {\n        if (a && a.__esModule)\n          return a;\n        if (a === null || y(a) !== \"object\" && typeof a != \"function\")\n          return { default: a };\n        var c = s();\n        if (c && c.has(a))\n          return c.get(a);\n        var p, j = {}, T = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (p in a) {\n          var _;\n          Object.prototype.hasOwnProperty.call(a, p) && ((_ = T ? Object.getOwnPropertyDescriptor(a, p) : null) && (_.get || _.set) ? Object.defineProperty(j, p, _) : j[p] = a[p]);\n        }\n        return j.default = a, c && c.set(a, j), j;\n      }(t(\"../core/constants\")), f = o(t(\"omggif\")), r = t(\"gifenc\");\n      function s() {\n        var a;\n        return typeof WeakMap != \"function\" ? null : (a = /* @__PURE__ */ new WeakMap(), s = function() {\n          return a;\n        }, a);\n      }\n      function o(a) {\n        return a && a.__esModule ? a : { default: a };\n      }\n      function i(a, c, p, j, T, _, S) {\n        try {\n          var E = a[_](S), A = E.value;\n        } catch (x) {\n          return void p(x);\n        }\n        E.done ? c(A) : Promise.resolve(A).then(j, T);\n      }\n      function l(a, c, p, j, T, _, S, E, A, x, P) {\n        var M, R, L, F, V, G, U, W, X;\n        return a === g.COVER && (M = c, L = p, U = _, W = S, G = E, X = A, R = x, F = P, V = Math.max(U / R, W / F), U /= V, W /= V, V = G, G = X, M === g.CENTER ? V += (R - U) / 2 : M === g.RIGHT && (V += R - U), L === g.CENTER ? G += (F - W) / 2 : L === g.BOTTOM && (G += F - W), E = (X = { x: V, y: G, w: U, h: W }).x, A = X.y, x = X.w, P = X.h), a === g.CONTAIN && (M = c, R = p, L = j, F = T, V = _, G = S, U = x, W = P, X = Math.max(U / V, W / G), U /= X, W /= X, X = L, L = F, M === g.CENTER ? X += (V - U) / 2 : M === g.RIGHT && (X += V - U), R === g.CENTER ? L += (G - W) / 2 : R === g.BOTTOM && (L += G - W), j = (a = { x: X, y: L, w: U, h: W }).x, T = a.y, _ = a.w, S = a.h), { sx: E, sy: A, sw: x, sh: P, dx: j, dy: T, dw: _, dh: S };\n      }\n      function n(a, c) {\n        return 0 < a && a < c ? a : c;\n      }\n      t(\"../core/friendly_errors/validate_params\"), t(\"../core/friendly_errors/file_errors\"), t(\"../core/friendly_errors/fes_core\"), u.default.prototype.loadImage = function(a, c, p) {\n        u.default._validateParameters(\"loadImage\", arguments);\n        var j = new u.default.Image(1, 1, this), T = this, _ = new Request(a, { method: \"GET\", mode: \"cors\" });\n        return fetch(a, _).then(function(S) {\n          var E, A = S.headers.get(\"content-type\");\n          A === null && console.warn(\"The image you loaded does not have a Content-Type header. If you are using the online editor consider reuploading the asset.\"), A && A.includes(\"image/gif\") ? S.arrayBuffer().then(function(x) {\n            if (x) {\n              for (var x = new Uint8Array(x), P = j, M = c, R = p, L = (function(D) {\n                T._decrementPreload();\n              }).bind(T), F = new f.default.GifReader(x), V = (P.width = P.canvas.width = F.width, P.height = P.canvas.height = F.height, []), G = F.numFrames(), U = new Uint8ClampedArray(P.width * P.height * 4), W = 0; W < G; W++) {\n                var X = F.frameInfo(W), ne = P.drawingContext.getImageData(0, 0, P.width, P.height), b = (U = ne.data.slice(), function(D, B) {\n                  try {\n                    B.decodeAndBlitFrameRGBA(D, U);\n                  } catch (Y) {\n                    u.default._friendlyFileLoadError(8, P.src), typeof R == \"function\" ? R(Y) : console.error(Y);\n                  }\n                }(W, F), new ImageData(U, P.width, P.height)), b = (P.drawingContext.putImageData(b, 0, 0), X.delay);\n                b === 0 && (b = 10), V.push({ image: P.drawingContext.getImageData(0, 0, P.width, P.height), delay: 10 * b }), X.disposal === 2 ? P.drawingContext.clearRect(X.x, X.y, X.width, X.height) : X.disposal === 3 && P.drawingContext.putImageData(ne, 0, 0, X.x, X.y, X.width, X.height);\n              }\n              (x = F.loopCount()) === null ? x = 1 : x === 0 && (x = null), P.drawingContext.putImageData(V[0].image, 0, 0), 1 < V.length && (P.gifProperties = { displayIndex: 0, loopLimit: x, loopCount: 0, frames: V, numFrames: G, playing: !0, timeDisplayed: 0, lastChangeTime: 0 }), typeof M == \"function\" && M(P), L();\n            }\n          }, function(x) {\n            typeof p == \"function\" ? (p(x), T._decrementPreload()) : console.error(x);\n          }) : ((E = new Image()).onload = function() {\n            j.width = j.canvas.width = E.width, j.height = j.canvas.height = E.height, j.drawingContext.drawImage(E, 0, 0), j.modified = !0, typeof c == \"function\" && c(j), T._decrementPreload();\n          }, E.onerror = function(x) {\n            u.default._friendlyFileLoadError(0, E.src), typeof p == \"function\" ? (p(x), T._decrementPreload()) : console.error(x);\n          }, a.indexOf(\"data:image/\") !== 0 && (E.crossOrigin = \"Anonymous\"), E.src = a), j.modified = !0;\n        }).catch(function(S) {\n          u.default._friendlyFileLoadError(0, a), typeof p == \"function\" ? (p(S), T._decrementPreload()) : console.error(S);\n        }), j;\n      }, u.default.prototype.saveGif = function() {\n        a = regeneratorRuntime.mark(function p(j, T) {\n          var _, S, E, A, x, P, M, R, L, F, V, G, U, W, X, ne, b, O, D, B, Y, J, te, ce, re, ue, le = arguments;\n          return regeneratorRuntime.wrap(function(K) {\n            for (; ; )\n              switch (K.prev = K.next) {\n                case 0:\n                  if (_ = 2 < le.length && le[2] !== void 0 ? le[2] : { delay: 0, units: \"seconds\", silent: !1, notificationDuration: 0, notificationID: \"progressBar\" }, typeof j != \"string\")\n                    throw TypeError(\"fileName parameter must be a string\");\n                  K.next = 3;\n                  break;\n                case 3:\n                  if (typeof T != \"number\")\n                    throw TypeError(\"Duration parameter must be a number\");\n                  K.next = 5;\n                  break;\n                case 5:\n                  if (S = _ && _.delay || 0, E = _ && _.units || \"seconds\", A = _ && _.silent || !1, x = _ && _.notificationDuration || 0, P = _ && _.notificationID || \"progressBar\", typeof S != \"number\")\n                    throw TypeError(\"Delay parameter must be a number\");\n                  K.next = 12;\n                  break;\n                case 12:\n                  if (E !== \"seconds\" && E !== \"frames\")\n                    throw TypeError('Units parameter must be either \"frames\" or \"seconds\"');\n                  K.next = 14;\n                  break;\n                case 14:\n                  if (typeof A != \"boolean\")\n                    throw TypeError(\"Silent parameter must be a boolean\");\n                  K.next = 16;\n                  break;\n                case 16:\n                  if (typeof x != \"number\")\n                    throw TypeError(\"Notification duration parameter must be a number\");\n                  K.next = 18;\n                  break;\n                case 18:\n                  if (typeof P != \"string\")\n                    throw TypeError(\"Notification ID parameter must be a string\");\n                  K.next = 20;\n                  break;\n                case 20:\n                  return this._recording = !0, F = this._targetFrameRate, M = (M = 1 / (F = F !== 1 / 0 && F !== void 0 && F !== 0 ? F : 60) * 1e3) < 20 ? 20 : M, L = (R = E === \"seconds\" ? T * F : T) + (F = E === \"seconds\" ? S * F : S), F = F, this.frameCount = F, V = this._pixelDensity, this.pixelDensity(1), G = [], document.getElementById(P) !== null && document.getElementById(P).remove(), A || ((U = this.createP(\"\")).id(P), U.style(\"font-size\", \"16px\"), U.style(\"font-family\", \"Montserrat\"), U.style(\"background-color\", \"#ffffffa0\"), U.style(\"padding\", \"8px\"), U.style(\"border-radius\", \"10px\"), U.position(0, 0)), this._renderer instanceof u.default.RendererGL && (X = this.drawingContext, W = new Uint8Array(X.drawingBufferWidth * X.drawingBufferHeight * 4)), this.noLoop(), K.next = 39, Promise.resolve();\n                case 39:\n                  if (F < L)\n                    return this.redraw(), ce = void 0, ce = this._renderer instanceof u.default.RendererGL ? (W = new Uint8Array(X.drawingBufferWidth * X.drawingBufferHeight * 4), X.readPixels(0, 0, X.drawingBufferWidth, X.drawingBufferHeight, X.RGBA, X.UNSIGNED_BYTE, W), function(ae, he, _e) {\n                      for (var fe = parseInt(_e / 2), ge = 4 * he, xe = new Uint8Array(4 * he), De = 0; De < fe; ++De) {\n                        var Me = De * ge, Qe = (_e - De - 1) * ge;\n                        xe.set(ae.subarray(Me, Me + ge)), ae.copyWithin(Me, Qe, Qe + ge), ae.set(xe, Qe);\n                      }\n                      return ae;\n                    }(W, this.width, this.height)) : this.drawingContext.getImageData(0, 0, this.width, this.height).data, G.push(ce), F++, A || U.html(\"Saved frame <b>\" + G.length.toString() + \"</b> out of \" + R.toString()), K.next = 48, new Promise(function(ae) {\n                      return setTimeout(ae, 0);\n                    });\n                  K.next = 50;\n                  break;\n                case 48:\n                  K.next = 39;\n                  break;\n                case 50:\n                  A || U.html(\"Frames processed, generating color palette...\"), this.loop(), this.pixelDensity(V), ne = (0, r.GIFEncoder)(), b = function(ae) {\n                    for (var he = new Uint8Array(ae.length * ae[0].length), _e = 0; _e < ae.length; _e++)\n                      he.set(ae[_e], _e * ae[0].length);\n                    var fe = (0, r.quantize)(he, 256, { format: \"rgba4444\", oneBitAlpha: !0 });\n                    return fe.length === 256 ? fe[fe.length - 1] = [255 * Math.random(), 255 * Math.random(), 255 * Math.random(), 0] : fe.push([255 * Math.random(), 255 * Math.random(), 255 * Math.random(), 0]), fe;\n                  }(G), O = {}, D = function(ae) {\n                    for (var he = ae.length / 4, _e = new Uint8Array(he), fe = 0; fe < he; fe++) {\n                      var ge = ae[4 * fe] << 24 | ae[4 * fe + 1] << 16 | ae[4 * fe + 2] << 8 | ae[4 * fe + 3];\n                      O[ge] === void 0 && (O[ge] = (0, r.nearestColorIndex)(b, ae.slice(4 * fe, 4 * (fe + 1)))), _e[fe] = O[ge];\n                    }\n                    return _e;\n                  }, B = b.length - 1, Y = [], J = 0;\n                case 60:\n                  if (!(J < G.length)) {\n                    K.next = 71;\n                    break;\n                  }\n                  if (te = D(G[J]), ce = te.slice(), J === 0)\n                    ne.writeFrame(te, this.width, this.height, { palette: b, delay: M, dispose: 1 });\n                  else {\n                    for (re = 0; re < te.length; re++)\n                      te[re] === Y[re] && (te[re] = B);\n                    ne.writeFrame(te, this.width, this.height, { delay: M, transparent: !0, transparentIndex: B, dispose: 1 });\n                  }\n                  return Y = ce, A || U.html(\"Rendered frame <b>\" + J.toString() + \"</b> out of \" + R.toString()), K.next = 68, new Promise(function(ae) {\n                    return setTimeout(ae, 0);\n                  });\n                case 68:\n                  J++, K.next = 60;\n                  break;\n                case 71:\n                  ne.finish(), ue = ne.bytesView(), ue = new Blob([ue], { type: \"image/gif\" }), G = [], this._recording = !1, this.loop(), A || (U.html(\"Done. Downloading your gif!🌸\"), 0 < x && setTimeout(function() {\n                    return U.remove();\n                  }, 1e3 * x)), u.default.prototype.downloadFile(ue, j, \"gif\");\n                case 80:\n                case \"end\":\n                  return K.stop();\n              }\n          }, p, this);\n        });\n        var a, c = function() {\n          var p = this, j = arguments;\n          return new Promise(function(T, _) {\n            var S = a.apply(p, j);\n            function E(x) {\n              i(S, T, _, E, A, \"next\", x);\n            }\n            function A(x) {\n              i(S, T, _, E, A, \"throw\", x);\n            }\n            E(void 0);\n          });\n        };\n        return function(p, j) {\n          return c.apply(this, arguments);\n        };\n      }(), u.default.prototype.image = function(a, c, p, j, F, V, G, U, X, x, P, M) {\n        u.default._validateParameters(\"image\", arguments);\n        var W = a.width, R = a.height, L = (M = M || g.CENTER, P = P || g.CENTER, a.elt && (W = W !== void 0 ? W : a.elt.width, R = R !== void 0 ? R : a.elt.height), a.elt && a.elt.videoWidth && !a.canvas && (W = W !== void 0 ? W : a.elt.videoWidth, R = R !== void 0 ? R : a.elt.videoHeight), j || W), F = F || R, V = V || 0, G = G || 0, U = n(U !== void 0 ? U : W, W), W = n(X !== void 0 ? X : R, R), X = 1;\n        a.elt && !a.canvas && a.elt.style.width && (X = a.elt.videoWidth && !j ? a.elt.videoWidth : a.elt.width, X /= parseInt(a.elt.style.width, 10)), V *= X, G *= X, W *= X, U *= X, R = l(x, P, M, (R = h.default.modeAdjust(c, p, L, F, this._renderer._imageMode)).x, R.y, R.w, R.h, V, G, U, W), this._renderer.image(a, R.sx, R.sy, R.sw, R.sh, R.dx, R.dy, R.dw, R.dh);\n      }, u.default.prototype.tint = function() {\n        for (var a = arguments.length, c = new Array(a), p = 0; p < a; p++)\n          c[p] = arguments[p];\n        u.default._validateParameters(\"tint\", c);\n        var j = this.color.apply(this, c);\n        this._renderer._tint = j.levels;\n      }, u.default.prototype.noTint = function() {\n        this._renderer._tint = null;\n      }, u.default.prototype._getTintedImageCanvas = u.default.Renderer2D.prototype._getTintedImageCanvas, u.default.prototype.imageMode = function(a) {\n        u.default._validateParameters(\"imageMode\", arguments), a !== g.CORNER && a !== g.CORNERS && a !== g.CENTER || (this._renderer._imageMode = a);\n      }, t = u.default, C.default = t;\n    }, { \"../core/constants\": 269, \"../core/friendly_errors/fes_core\": 271, \"../core/friendly_errors/file_errors\": 272, \"../core/friendly_errors/validate_params\": 275, \"../core/helpers\": 276, \"../core/main\": 280, \"core-js/modules/es.array.copy-within\": 153, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.promise\": 188, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236, \"core-js/modules/es.typed-array.uint8-array\": 239, \"core-js/modules/es.typed-array.uint8-clamped-array\": 240, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243, gifenc: 250, omggif: 253, \"regenerator-runtime/runtime\": 257 }], 304: [function(t, H, C) {\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = u(t(\"../core/main\")), y = u(t(\"./filters\"));\n      function u(g) {\n        return g && g.__esModule ? g : { default: g };\n      }\n      function h(g, f) {\n        for (var r = 0; r < f.length; r++) {\n          var s = f[r];\n          s.enumerable = s.enumerable || !1, s.configurable = !0, \"value\" in s && (s.writable = !0), Object.defineProperty(g, s.key, s);\n        }\n      }\n      m.default.Image = function() {\n        function g(s, o) {\n          if (!(this instanceof g))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this.width = s, this.height = o, this.canvas = document.createElement(\"canvas\"), this.canvas.width = this.width, this.canvas.height = this.height, this.drawingContext = this.canvas.getContext(\"2d\"), (this._pixelsState = this)._pixelDensity = 1, this.gifProperties = null, this._modified = !1, this.pixels = [];\n        }\n        var f, r;\n        return f = g, (r = [{ key: \"pixelDensity\", value: function(s) {\n          return s !== void 0 ? (s <= 0 && (m.default._friendlyParamError({ type: \"INVALID_VALUE\", format: { types: [\"Number\"] }, position: 1 }, \"pixelDensity\"), s = 1), this._pixelDensity = s, this.width /= s, this.height /= s, this) : this._pixelDensity;\n        } }, { key: \"_animateGif\", value: function(l) {\n          var o, i = this.gifProperties, l = l._lastRealFrameTime || window.performance.now();\n          i.lastChangeTime === 0 && (i.lastChangeTime = l), i.playing && (i.timeDisplayed = l - i.lastChangeTime, o = i.frames[i.displayIndex].delay, i.timeDisplayed >= o && (o = Math.floor(i.timeDisplayed / o), i.timeDisplayed = 0, i.lastChangeTime = l, i.displayIndex += o, i.loopCount = Math.floor(i.displayIndex / i.numFrames), i.loopLimit !== null && i.loopCount >= i.loopLimit ? i.playing = !1 : (l = i.displayIndex % i.numFrames, this.drawingContext.putImageData(i.frames[l].image, 0, 0), i.displayIndex = l, this.setModified(!0))));\n        } }, { key: \"_setProperty\", value: function(s, o) {\n          this[s] = o, this.setModified(!0);\n        } }, { key: \"loadPixels\", value: function() {\n          m.default.Renderer2D.prototype.loadPixels.call(this), this.setModified(!0);\n        } }, { key: \"updatePixels\", value: function(s, o, i, l) {\n          m.default.Renderer2D.prototype.updatePixels.call(this, s, o, i, l), this.setModified(!0);\n        } }, { key: \"get\", value: function(s, o, i, l) {\n          return m.default._validateParameters(\"p5.Image.get\", arguments), m.default.Renderer2D.prototype.get.apply(this, arguments);\n        } }, { key: \"_getPixel\", value: function() {\n          for (var s = arguments.length, o = new Array(s), i = 0; i < s; i++)\n            o[i] = arguments[i];\n          return m.default.Renderer2D.prototype._getPixel.apply(this, o);\n        } }, { key: \"set\", value: function(s, o, i) {\n          m.default.Renderer2D.prototype.set.call(this, s, o, i), this.setModified(!0);\n        } }, { key: \"resize\", value: function(s, o) {\n          s === 0 && o === 0 ? (s = this.canvas.width, o = this.canvas.height) : s === 0 ? s = this.canvas.width * o / this.canvas.height : o === 0 && (o = this.canvas.height * s / this.canvas.width), s = Math.floor(s), o = Math.floor(o);\n          var i = document.createElement(\"canvas\");\n          if (i.width = s, i.height = o, this.gifProperties)\n            for (var l = this.gifProperties, n = 0; n < l.numFrames; n++) {\n              for (var a = this.drawingContext.createImageData(s, o), c = (S = S = _ = T = j = void 0, l.frames[n].image), p = a, j = 0, T = 0; T < p.height; T++)\n                for (var _ = 0; _ < p.width; _++) {\n                  var S = Math.floor(_ * c.width / p.width), S = 4 * (Math.floor(T * c.height / p.height) * c.width + S);\n                  p.data[j++] = c.data[S++], p.data[j++] = c.data[S++], p.data[j++] = c.data[S++], p.data[j++] = c.data[+S];\n                }\n              l.frames[n].image = a;\n            }\n          i.getContext(\"2d\").drawImage(this.canvas, 0, 0, this.canvas.width, this.canvas.height, 0, 0, i.width, i.height), this.canvas.width = this.width = s, this.canvas.height = this.height = o, this.drawingContext.drawImage(i, 0, 0, s, o, 0, 0, s, o), 0 < this.pixels.length && this.loadPixels(), this.setModified(!0);\n        } }, { key: \"copy\", value: function() {\n          for (var s = arguments.length, o = new Array(s), i = 0; i < s; i++)\n            o[i] = arguments[i];\n          m.default.prototype.copy.apply(this, o);\n        } }, { key: \"mask\", value: function(s) {\n          var o = this.drawingContext.globalCompositeOperation, i = this._pixelDensity, l = 1, n = [s = s === void 0 ? this : s, 0, 0, (l = s instanceof m.default.Renderer ? s._pInst._pixelDensity : l) * s.width, l * s.height, 0, 0, i * this.width, i * this.height];\n          if (this.drawingContext.globalCompositeOperation = \"destination-in\", this.gifProperties) {\n            for (var a = 0; a < this.gifProperties.frames.length; a++)\n              this.drawingContext.putImageData(this.gifProperties.frames[a].image, 0, 0), this.copy.apply(this, n), this.gifProperties.frames[a].image = this.drawingContext.getImageData(0, 0, i * this.width, i * this.height);\n            this.drawingContext.putImageData(this.gifProperties.frames[this.gifProperties.displayIndex].image, 0, 0);\n          } else\n            this.copy.apply(this, n);\n          this.drawingContext.globalCompositeOperation = o, this.setModified(!0);\n        } }, { key: \"filter\", value: function(s, o) {\n          y.default.apply(this.canvas, y.default[s], o), this.setModified(!0);\n        } }, { key: \"blend\", value: function() {\n          for (var s = arguments.length, o = new Array(s), i = 0; i < s; i++)\n            o[i] = arguments[i];\n          m.default._validateParameters(\"p5.Image.blend\", arguments), m.default.prototype.blend.apply(this, o), this.setModified(!0);\n        } }, { key: \"setModified\", value: function(s) {\n          this._modified = s;\n        } }, { key: \"isModified\", value: function() {\n          return this._modified;\n        } }, { key: \"save\", value: function(s, o) {\n          this.gifProperties ? m.default.prototype.encodeAndDownloadGif(this, s) : m.default.prototype.saveCanvas(this.canvas, s, o);\n        } }, { key: \"reset\", value: function() {\n          var s;\n          this.gifProperties && ((s = this.gifProperties).playing = !0, s.timeSinceStart = 0, s.timeDisplayed = 0, s.lastChangeTime = 0, s.loopCount = 0, s.displayIndex = 0, this.drawingContext.putImageData(s.frames[0].image, 0, 0));\n        } }, { key: \"getCurrentFrame\", value: function() {\n          var s;\n          if (this.gifProperties)\n            return (s = this.gifProperties).displayIndex % s.numFrames;\n        } }, { key: \"setFrame\", value: function(s) {\n          var o;\n          this.gifProperties && (s < (o = this.gifProperties).numFrames && 0 <= s ? (o.timeDisplayed = 0, o.lastChangeTime = 0, o.displayIndex = s, this.drawingContext.putImageData(o.frames[s].image, 0, 0)) : console.log(\"Cannot set GIF to a frame number that is higher than total number of frames or below zero.\"));\n        } }, { key: \"numFrames\", value: function() {\n          if (this.gifProperties)\n            return this.gifProperties.numFrames;\n        } }, { key: \"play\", value: function() {\n          this.gifProperties && (this.gifProperties.playing = !0);\n        } }, { key: \"pause\", value: function() {\n          this.gifProperties && (this.gifProperties.playing = !1);\n        } }, { key: \"delay\", value: function(s, o) {\n          if (this.gifProperties) {\n            var i = this.gifProperties;\n            if (o < i.numFrames && 0 <= o)\n              i.frames[o].delay = s;\n            else {\n              var l = !0, o = !1, n = void 0;\n              try {\n                for (var a, c = i.frames[Symbol.iterator](); !(l = (a = c.next()).done); l = !0)\n                  a.value.delay = s;\n              } catch (j) {\n                o = !0, n = j;\n              } finally {\n                try {\n                  l || c.return == null || c.return();\n                } finally {\n                  if (o)\n                    throw n;\n                }\n              }\n            }\n          }\n        } }]) && h(f.prototype, r), g;\n      }(), t = m.default.Image, C.default = t;\n    }, { \"../core/main\": 280, \"./filters\": 301, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.iterator\": 243 }], 305: [function(t, H, C) {\n      t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.filter\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = u(t(\"../core/main\")), y = u(t(\"./filters\"));\n      function u(h) {\n        return h && h.__esModule ? h : { default: h };\n      }\n      t(\"../color/p5.Color\"), m.default.prototype.pixels = [], m.default.prototype.blend = function() {\n        for (var h, g = arguments.length, f = new Array(g), r = 0; r < g; r++)\n          f[r] = arguments[r];\n        m.default._validateParameters(\"blend\", f), this._renderer ? (h = this._renderer).blend.apply(h, f) : m.default.Renderer2D.prototype.blend.apply(this, f);\n      }, m.default.prototype.copy = function() {\n        for (var h, g, f, r, s, o, i, l, n, a = arguments.length, c = new Array(a), p = 0; p < a; p++)\n          c[p] = arguments[p];\n        if (m.default._validateParameters(\"copy\", c), c.length === 9)\n          h = c[0], g = c[1], f = c[2], r = c[3], s = c[4], o = c[5], i = c[6], l = c[7], n = c[8];\n        else {\n          if (c.length !== 8)\n            throw new Error(\"Signature not supported\");\n          h = this, g = c[0], f = c[1], r = c[2], s = c[3], o = c[4], i = c[5], l = c[6], n = c[7];\n        }\n        m.default.prototype._copyHelper(this, h, g, f, r, s, o, i, l, n);\n      }, m.default.prototype._copyHelper = function(h, g, f, r, s, o, i, l, n, a) {\n        var c = g.canvas.width / g.width, p = 0, j = 0;\n        g._renderer && g._renderer.isP3D && (p = g.width / 2, j = g.height / 2), h._renderer && h._renderer.isP3D ? (h.push(), h.resetMatrix(), h.noLights(), h.blendMode(h.BLEND), h.imageMode(h.CORNER), m.default.RendererGL.prototype.image.call(h._renderer, g, f + p, r + j, s, o, i, l, n, a), h.pop()) : h.drawingContext.drawImage(g.canvas, c * (f + p), c * (r + j), c * s, c * o, i, l, n, a);\n      }, m.default.prototype.getFilterGraphicsLayer = function() {\n        return this._renderer.getFilterGraphicsLayer();\n      }, m.default.prototype.filter = function() {\n        for (var h = arguments.length, g = new Array(h), f = 0; f < h; f++)\n          g[f] = arguments[f];\n        m.default._validateParameters(\"filter\", g);\n        var i = (function() {\n          var l, n = { shader: void 0, operation: void 0, value: void 0, useWebGL: !0 };\n          return (arguments.length <= 0 ? void 0 : arguments[0]) instanceof m.default.Shader ? n.shader = arguments.length <= 0 ? void 0 : arguments[0] : (n.operation = arguments.length <= 0 ? void 0 : arguments[0], 1 < arguments.length && typeof (arguments.length <= 1 ? void 0 : arguments[1]) == \"number\" && (n.value = arguments.length <= 1 ? void 0 : arguments[1]), ((l = arguments.length - 1) < 0 || arguments.length <= l ? void 0 : arguments[l]) === !1 && (n.useWebGL = !1)), n;\n        }).apply(void 0, g), r = i.shader, s = i.operation, o = i.value, i = i.useWebGL;\n        this._renderer.isP3D && r ? m.default.RendererGL.prototype.filter.call(this._renderer, r) : i || this._renderer.isP3D ? (!i && this._renderer.isP3D && console.warn(\"filter() with useWebGL=false is not supported in WEBGL\"), this._renderer.isP3D ? m.default.RendererGL.prototype.filter.call(this._renderer, s, o) : ((r = this.getFilterGraphicsLayer()).copy(this._renderer, 0, 0, this.width, this.height, -this.width / 2, -this.height / 2, this.width, this.height), this._renderer.clear(), this._renderer.resetMatrix(), r.filter.apply(r, g), this.copy(r._renderer, 0, 0, this.width, this.height, 0, 0, this.width, this.height), r.clear())) : this.canvas !== void 0 ? y.default.apply(this.canvas, y.default[s], o) : y.default.apply(this.elt, y.default[s], o);\n      }, m.default.prototype.get = function(h, g, f, r) {\n        var s;\n        return m.default._validateParameters(\"get\", arguments), (s = this._renderer).get.apply(s, arguments);\n      }, m.default.prototype.loadPixels = function() {\n        for (var h = arguments.length, g = new Array(h), f = 0; f < h; f++)\n          g[f] = arguments[f];\n        m.default._validateParameters(\"loadPixels\", g), this._renderer.loadPixels();\n      }, m.default.prototype.set = function(h, g, f) {\n        this._renderer.set(h, g, f);\n      }, m.default.prototype.updatePixels = function(h, g, f, r) {\n        m.default._validateParameters(\"updatePixels\", arguments), this.pixels.length !== 0 && this._renderer.updatePixels(h, g, f, r);\n      }, t = m.default, C.default = t;\n    }, { \"../color/p5.Color\": 267, \"../core/main\": 280, \"./filters\": 301, \"core-js/modules/es.array.filter\": 156 }], 306: [function(t, H, C) {\n      function m(o) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(i) {\n          return typeof i;\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : typeof i;\n        })(o);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.last-index-of\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.object.from-entries\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/web.url\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.last-index-of\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.object.from-entries\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/web.url\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var y = g(t(\"../core/main\")), u = (t(\"whatwg-fetch\"), t(\"es6-promise/auto\"), g(t(\"fetch-jsonp\"))), h = g(t(\"file-saver\"));\n      function g(o) {\n        return o && o.__esModule ? o : { default: o };\n      }\n      function f(o) {\n        return (f = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(i) {\n          return m(i);\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : m(i);\n        })(o);\n      }\n      function r(o) {\n        return o.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&#039;\");\n      }\n      function s(o, i) {\n        i && i !== !0 && i !== \"true\" || (i = \"\");\n        var l = \"\";\n        return (o = o || \"untitled\") && o.includes(\".\") && (l = o.split(\".\").pop()), i && l !== i && (l = i, o = \"\".concat(o, \".\").concat(l)), [o, l];\n      }\n      t(\"../core/friendly_errors/validate_params\"), t(\"../core/friendly_errors/file_errors\"), t(\"../core/friendly_errors/fes_core\"), y.default.prototype.loadJSON = function() {\n        for (var o = arguments.length, i = new Array(o), l = 0; l < o; l++)\n          i[l] = arguments[l];\n        y.default._validateParameters(\"loadJSON\", i);\n        for (var n, a, c, p = i[0], j = {}, T = \"json\", _ = 1; _ < i.length; _++) {\n          var S = i[_];\n          typeof S == \"string\" ? S !== \"jsonp\" && S !== \"json\" || (T = S) : typeof S == \"function\" ? n ? a = S : n = S : f(S) === \"object\" && (S.hasOwnProperty(\"jsonpCallback\") || S.hasOwnProperty(\"jsonpCallbackFunction\")) && (T = \"jsonp\", c = S);\n        }\n        var E = this;\n        return this.httpDo(p, \"GET\", c, T, function(A) {\n          for (var x in A)\n            j[x] = A[x];\n          n !== void 0 && n(A), E._decrementPreload();\n        }, function(A) {\n          if (y.default._friendlyFileLoadError(5, p), !a)\n            throw A;\n          a(A);\n        }), j;\n      }, y.default.prototype.loadStrings = function() {\n        for (var o = arguments.length, i = new Array(o), l = 0; l < o; l++)\n          i[l] = arguments[l];\n        y.default._validateParameters(\"loadStrings\", i);\n        for (var n, a, c = [], p = 1; p < i.length; p++) {\n          var j = i[p];\n          typeof j == \"function\" && (n === void 0 ? n = j : a === void 0 && (a = j));\n        }\n        var T = this;\n        return y.default.prototype.httpDo.call(this, i[0], \"GET\", \"text\", function(_) {\n          for (var S = _.replace(/\\r\\n/g, \"\\r\").replace(/\\n/g, \"\\r\").split(/\\r/), E = 0, A = S.length; E < A; E += 32768)\n            Array.prototype.push.apply(c, S.slice(E, Math.min(E + 32768, A)));\n          n !== void 0 && n(c), T._decrementPreload();\n        }, function(_) {\n          if (y.default._friendlyFileLoadError(3, _), !a)\n            throw _;\n          a(_);\n        }), c;\n      }, y.default.prototype.loadTable = function(o) {\n        var i, l, n, a = !1, c = o.substring(o.lastIndexOf(\".\") + 1, o.length);\n        c === \"csv\" ? n = \",\" : c === \"ssv\" ? n = \";\" : c === \"tsv\" && (n = \"\t\");\n        for (var p = 1; p < arguments.length; p++)\n          typeof arguments[p] == \"function\" ? i === void 0 ? i = arguments[p] : l === void 0 && (l = arguments[p]) : typeof arguments[p] == \"string\" && (arguments[p] === \"header\" && (a = !0), arguments[p] === \"csv\" ? n = \",\" : arguments[p] === \"ssv\" ? n = \";\" : arguments[p] === \"tsv\" && (n = \"\t\"));\n        var j = new y.default.Table(), T = this;\n        return this.httpDo(o, \"GET\", \"table\", function(_) {\n          for (var S, E, A = {}, x = 0, P = [], M = 0, R = null, L = function() {\n            A.currentState = x, A.token = \"\";\n          }, F = function() {\n            R.push(A.token), L();\n          }, V = function() {\n            A.currentState = 4, P.push(R), R = null;\n          }; ; ) {\n            if ((S = _[M++]) == null) {\n              if (A.escaped)\n                throw new Error(\"Unclosed quote in file.\");\n              if (R) {\n                F(), V();\n                break;\n              }\n            }\n            if (R === null && (A.escaped = !1, R = [], L()), A.currentState === x) {\n              if (S === '\"') {\n                A.escaped = !0, A.currentState = 1;\n                continue;\n              }\n              A.currentState = 1;\n            }\n            if (A.currentState === 1 && A.escaped)\n              if (S === '\"')\n                _[M] === '\"' ? (A.token += '\"', M++) : (A.escaped = !1, A.currentState = 2);\n              else {\n                if (S === \"\\r\")\n                  continue;\n                A.token += S;\n              }\n            else\n              S === \"\\r\" ? (_[M] === `\n` && M++, F(), V()) : S === `\n` ? (F(), V()) : S === n ? F() : A.currentState === 1 && (A.token += S);\n          }\n          if (a)\n            j.columns = P.shift();\n          else\n            for (var G = 0; G < P[0].length; G++)\n              j.columns[G] = \"null\";\n          for (var U = 0; U < P.length; U++)\n            (P[U].length !== 1 || P[U][0] !== \"undefined\" && P[U][0] !== \"\") && ((E = new y.default.TableRow()).arr = P[U], E.obj = function(W, X) {\n              if ((X = X || []) === void 0)\n                for (var ne = 0; ne < W.length; ne++)\n                  X[ne.toString()] = ne;\n              return Object.fromEntries(X.map(function(b, O) {\n                return [b, W[O]];\n              }));\n            }(P[U], j.columns), j.addRow(E));\n          typeof i == \"function\" && i(j), T._decrementPreload();\n        }, function(_) {\n          y.default._friendlyFileLoadError(2, o), l ? l(_) : console.error(_);\n        }), j;\n      }, y.default.prototype.loadXML = function() {\n        for (var o = arguments.length, i = new Array(o), l = 0; l < o; l++)\n          i[l] = arguments[l];\n        for (var n, a, c = new y.default.XML(), p = 1; p < i.length; p++) {\n          var j = i[p];\n          typeof j == \"function\" && (n === void 0 ? n = j : a === void 0 && (a = j));\n        }\n        var T = this;\n        return this.httpDo(i[0], \"GET\", \"xml\", function(_) {\n          for (var S in _)\n            c[S] = _[S];\n          n !== void 0 && n(c), T._decrementPreload();\n        }, function(_) {\n          if (y.default._friendlyFileLoadError(1, _), !a)\n            throw _;\n          a(_);\n        }), c;\n      }, y.default.prototype.loadBytes = function(o, i, l) {\n        var n = {}, a = this;\n        return this.httpDo(o, \"GET\", \"arrayBuffer\", function(c) {\n          n.bytes = new Uint8Array(c), typeof i == \"function\" && i(n), a._decrementPreload();\n        }, function(c) {\n          if (y.default._friendlyFileLoadError(6, o), !l)\n            throw c;\n          l(c);\n        }), n;\n      }, y.default.prototype.httpGet = function() {\n        for (var o = arguments.length, i = new Array(o), l = 0; l < o; l++)\n          i[l] = arguments[l];\n        return y.default._validateParameters(\"httpGet\", i), i.splice(1, 0, \"GET\"), y.default.prototype.httpDo.apply(this, i);\n      }, y.default.prototype.httpPost = function() {\n        for (var o = arguments.length, i = new Array(o), l = 0; l < o; l++)\n          i[l] = arguments[l];\n        return y.default._validateParameters(\"httpPost\", i), i.splice(1, 0, \"POST\"), y.default.prototype.httpDo.apply(this, i);\n      }, y.default.prototype.httpDo = function() {\n        for (var o, i, l, n = {}, a = 0, c = \"text/plain\", p = arguments.length - 1; 0 < p && typeof (p < 0 || arguments.length <= p ? void 0 : arguments[p]) == \"function\"; p--)\n          a++;\n        var j = arguments.length - a, T = arguments.length <= 0 ? void 0 : arguments[0];\n        if (j == 2 && typeof T == \"string\" && f(arguments.length <= 1 ? void 0 : arguments[1]) === \"object\")\n          P = new Request(T, arguments.length <= 1 ? void 0 : arguments[1]), i = arguments.length <= 2 ? void 0 : arguments[2], l = arguments.length <= 3 ? void 0 : arguments[3];\n        else {\n          for (var _, S = \"GET\", E = 1; E < arguments.length; E++) {\n            var A = E < 0 || arguments.length <= E ? void 0 : arguments[E];\n            if (typeof A == \"string\")\n              A === \"GET\" || A === \"POST\" || A === \"PUT\" || A === \"DELETE\" ? S = A : A === \"json\" || A === \"jsonp\" || A === \"binary\" || A === \"arrayBuffer\" || A === \"xml\" || A === \"text\" || A === \"table\" ? o = A : _ = A;\n            else if (typeof A == \"number\")\n              _ = A.toString();\n            else if (f(A) === \"object\")\n              if (A.hasOwnProperty(\"jsonpCallback\") || A.hasOwnProperty(\"jsonpCallbackFunction\"))\n                for (var x in A)\n                  n[x] = A[x];\n              else\n                c = A instanceof y.default.XML ? (_ = A.serialize(), \"application/xml\") : (_ = JSON.stringify(A), \"application/json\");\n            else\n              typeof A == \"function\" && (i ? l = A : i = A);\n          }\n          var j = S === \"GET\" ? new Headers() : new Headers({ \"Content-Type\": c }), P = new Request(T, { method: S, mode: \"cors\", body: _, headers: j });\n        }\n        return (j = (j = (o = o || (T.includes(\"json\") ? \"json\" : T.includes(\"xml\") ? \"xml\" : \"text\")) === \"jsonp\" ? (0, u.default)(T, n) : fetch(P)).then(function(M) {\n          if (!M.ok)\n            throw (R = new Error(M.body)).status = M.status, R.ok = !1, R;\n          var R = 0;\n          switch ((R = o !== \"jsonp\" ? M.headers.get(\"content-length\") : R) && 64e6 < R && y.default._friendlyFileLoadError(7, T), o) {\n            case \"json\":\n            case \"jsonp\":\n              return M.json();\n            case \"binary\":\n              return M.blob();\n            case \"arrayBuffer\":\n              return M.arrayBuffer();\n            case \"xml\":\n              return M.text().then(function(L) {\n                return L = new DOMParser().parseFromString(L, \"text/xml\"), new y.default.XML(L.documentElement);\n              });\n            default:\n              return M.text();\n          }\n        })).then(i || function() {\n        }), j.catch(l || console.error), j;\n      }, window.URL = window.URL || window.webkitURL, y.default.prototype._pWriters = [], y.default.prototype.createWriter = function(o, i) {\n        var l, n;\n        for (n in y.default.prototype._pWriters)\n          if (y.default.prototype._pWriters[n].name === o)\n            return l = new y.default.PrintWriter(o + this.millis(), i), y.default.prototype._pWriters.push(l), l;\n        return l = new y.default.PrintWriter(o, i), y.default.prototype._pWriters.push(l), l;\n      }, y.default.PrintWriter = function(o, i) {\n        var l = this;\n        this.name = o, this.content = \"\", this.write = function(n) {\n          this.content += n;\n        }, this.print = function(n) {\n          this.content += \"\".concat(n, `\n`);\n        }, this.clear = function() {\n          this.content = \"\";\n        }, this.close = function() {\n          var n, a = [];\n          for (n in a.push(this.content), y.default.prototype.writeFile(a, o, i), y.default.prototype._pWriters)\n            y.default.prototype._pWriters[n].name === this.name && y.default.prototype._pWriters.splice(n, 1);\n          l.clear(), l = {};\n        };\n      }, y.default.prototype.save = function(o, i, l) {\n        var n = arguments, a = (this._curElement || this).elt;\n        if (n.length === 0)\n          y.default.prototype.saveCanvas(a);\n        else if (n[0] instanceof y.default.Renderer || n[0] instanceof y.default.Graphics)\n          y.default.prototype.saveCanvas(n[0].elt, n[1], n[2]);\n        else if (n.length === 1 && typeof n[0] == \"string\")\n          y.default.prototype.saveCanvas(a, n[0]);\n        else\n          switch (s(n[1], n[2])[1]) {\n            case \"json\":\n              return void y.default.prototype.saveJSON(n[0], n[1], n[2]);\n            case \"txt\":\n              return void y.default.prototype.saveStrings(n[0], n[1], n[2]);\n            default:\n              n[0] instanceof Array ? y.default.prototype.saveStrings(n[0], n[1], n[2]) : n[0] instanceof y.default.Table ? y.default.prototype.saveTable(n[0], n[1], n[2]) : n[0] instanceof y.default.Image ? y.default.prototype.saveCanvas(n[0].canvas, n[1]) : n[0] instanceof y.default.SoundFile && y.default.prototype.saveSound(n[0], n[1], n[2], n[3]);\n          }\n      }, y.default.prototype.saveJSON = function(o, i, l) {\n        y.default._validateParameters(\"saveJSON\", arguments), l = l ? JSON.stringify(o) : JSON.stringify(o, void 0, 2), this.saveStrings(l.split(`\n`), i, \"json\");\n      }, y.default.prototype.saveJSONObject = y.default.prototype.saveJSON, y.default.prototype.saveJSONArray = y.default.prototype.saveJSON, y.default.prototype.saveStrings = function(o, i, l, n) {\n        y.default._validateParameters(\"saveStrings\", arguments);\n        for (var a = this.createWriter(i, l || \"txt\"), c = 0; c < o.length; c++)\n          n ? a.write(o[c] + `\\r\n`) : a.write(o[c] + `\n`);\n        a.close(), a.clear();\n      }, y.default.prototype.saveTable = function(o, i, l) {\n        y.default._validateParameters(\"saveTable\", arguments), n = l === void 0 ? i.substring(i.lastIndexOf(\".\") + 1, i.length) : l;\n        var n, a = this.createWriter(i, n), c = o.columns, p = n === \"tsv\" ? \"\t\" : \",\";\n        if (n !== \"html\") {\n          if (c[0] !== \"0\") {\n            for (var j = 0; j < c.length; j++)\n              j < c.length - 1 ? a.write(c[j] + p) : a.write(c[j]);\n            a.write(`\n`);\n          }\n          for (var T = 0; T < o.rows.length; T++) {\n            for (var _ = void 0, _ = 0; _ < o.rows[T].arr.length; _++)\n              _ < o.rows[T].arr.length - 1 ? n === \"csv\" && String(o.rows[T].arr[_]).includes(\",\") ? a.write('\"' + o.rows[T].arr[_] + '\"' + p) : a.write(o.rows[T].arr[_] + p) : n === \"csv\" && String(o.rows[T].arr[_]).includes(\",\") ? a.write('\"' + o.rows[T].arr[_] + '\"') : a.write(o.rows[T].arr[_]);\n            a.write(`\n`);\n          }\n        } else {\n          if (a.print(\"<html>\"), a.print(\"<head>\"), a.print('  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\" />'), a.print(\"</head>\"), a.print(\"<body>\"), a.print(\"  <table>\"), c[0] !== \"0\") {\n            a.print(\"    <tr>\");\n            for (var S = 0; S < c.length; S++) {\n              var E = r(c[S]);\n              a.print(\"      <td>\".concat(E)), a.print(\"      </td>\");\n            }\n            a.print(\"    </tr>\");\n          }\n          for (var A = 0; A < o.rows.length; A++) {\n            a.print(\"    <tr>\");\n            for (var x = 0; x < o.columns.length; x++) {\n              var P = r(o.rows[A].getString(x));\n              a.print(\"      <td>\".concat(P)), a.print(\"      </td>\");\n            }\n            a.print(\"    </tr>\");\n          }\n          a.print(\"  </table>\"), a.print(\"</body>\"), a.print(\"</html>\");\n        }\n        a.close(), a.clear();\n      }, y.default.prototype.writeFile = function(a, i, l) {\n        var n = \"application/octet-stream\", a = (y.default.prototype._isSafari() && (n = \"text/plain\"), new Blob(a, { type: n }));\n        y.default.prototype.downloadFile(a, i, l);\n      }, y.default.prototype.downloadFile = function(o, a, c) {\n        var n, a = s(a, c), c = a[0];\n        o instanceof Blob ? h.default.saveAs(o, c) : ((n = document.createElement(\"a\")).href = o, n.download = c, n.onclick = function(p) {\n          document.body.removeChild(p.target), p.stopPropagation();\n        }, n.style.display = \"none\", document.body.appendChild(n), y.default.prototype._isSafari() && (o = (o = `Hello, Safari user! To download this file...\n1. Go to File --> Save As.\n2. Choose \"Page Source\" as the Format.\n`) + '3. Name it with this extension: .\"'.concat(a[1], '\"'), alert(o)), n.click());\n      }, y.default.prototype._checkFileExtension = s, y.default.prototype._isSafari = function() {\n        return window.HTMLElement.toString().includes(\"Constructor\");\n      }, t = y.default, C.default = t;\n    }, { \"../core/friendly_errors/fes_core\": 271, \"../core/friendly_errors/file_errors\": 272, \"../core/friendly_errors/validate_params\": 275, \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.last-index-of\": 166, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.array.splice\": 170, \"core-js/modules/es.function.name\": 173, \"core-js/modules/es.object.from-entries\": 182, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.promise\": 188, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236, \"core-js/modules/es.typed-array.uint8-array\": 239, \"core-js/modules/web.dom-collections.iterator\": 243, \"core-js/modules/web.url\": 245, \"es6-promise/auto\": 246, \"fetch-jsonp\": 248, \"file-saver\": 249, \"whatwg-fetch\": 258 }], 307: [function(t, H, C) {\n      t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.regexp.constructor\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.regexp.constructor\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.replace\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function y(u, h) {\n        for (var g = 0; g < h.length; g++) {\n          var f = h[g];\n          f.enumerable = f.enumerable || !1, f.configurable = !0, \"value\" in f && (f.writable = !0), Object.defineProperty(u, f.key, f);\n        }\n      }\n      m.default.Table = function() {\n        function u() {\n          var f = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : [], r = this, s = u;\n          if (!(r instanceof s))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this.columns = [], this.rows = f;\n        }\n        var h, g;\n        return h = u, (g = [{ key: \"addRow\", value: function(f) {\n          if (f = f || new m.default.TableRow(), f.arr === void 0 || f.obj === void 0)\n            throw new Error(\"invalid TableRow: \".concat(f));\n          return (f.table = this).rows.push(f), f;\n        } }, { key: \"removeRow\", value: function(f) {\n          this.rows[f].table = null, f = this.rows.splice(f + 1, this.rows.length), this.rows.pop(), this.rows = this.rows.concat(f);\n        } }, { key: \"getRow\", value: function(f) {\n          return this.rows[f];\n        } }, { key: \"getRows\", value: function() {\n          return this.rows;\n        } }, { key: \"findRow\", value: function(f, r) {\n          if (typeof r == \"string\") {\n            for (var s = 0; s < this.rows.length; s++)\n              if (this.rows[s].obj[r] === f)\n                return this.rows[s];\n          } else\n            for (var o = 0; o < this.rows.length; o++)\n              if (this.rows[o].arr[r] === f)\n                return this.rows[o];\n          return null;\n        } }, { key: \"findRows\", value: function(f, r) {\n          var s = [];\n          if (typeof r == \"string\")\n            for (var o = 0; o < this.rows.length; o++)\n              this.rows[o].obj[r] === f && s.push(this.rows[o]);\n          else\n            for (var i = 0; i < this.rows.length; i++)\n              this.rows[i].arr[r] === f && s.push(this.rows[i]);\n          return s;\n        } }, { key: \"matchRow\", value: function(f, r) {\n          if (typeof r == \"number\") {\n            for (var s = 0; s < this.rows.length; s++)\n              if (this.rows[s].arr[r].match(f))\n                return this.rows[s];\n          } else\n            for (var o = 0; o < this.rows.length; o++)\n              if (this.rows[o].obj[r].match(f))\n                return this.rows[o];\n          return null;\n        } }, { key: \"matchRows\", value: function(f, r) {\n          var s = [];\n          if (typeof r == \"number\")\n            for (var o = 0; o < this.rows.length; o++)\n              this.rows[o].arr[r].match(f) && s.push(this.rows[o]);\n          else\n            for (var i = 0; i < this.rows.length; i++)\n              this.rows[i].obj[r].match(f) && s.push(this.rows[i]);\n          return s;\n        } }, { key: \"getColumn\", value: function(f) {\n          var r = [];\n          if (typeof f == \"string\")\n            for (var s = 0; s < this.rows.length; s++)\n              r.push(this.rows[s].obj[f]);\n          else\n            for (var o = 0; o < this.rows.length; o++)\n              r.push(this.rows[o].arr[f]);\n          return r;\n        } }, { key: \"clearRows\", value: function() {\n          delete this.rows, this.rows = [];\n        } }, { key: \"addColumn\", value: function(f) {\n          this.columns.push(f || null);\n        } }, { key: \"getColumnCount\", value: function() {\n          return this.columns.length;\n        } }, { key: \"getRowCount\", value: function() {\n          return this.rows.length;\n        } }, { key: \"removeTokens\", value: function(f, r) {\n          for (var s = [], o = 0; o < f.length; o++)\n            s.push(f.charAt(o).replace(/[-/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\"));\n          var i = new RegExp(s.join(\"|\"), \"g\");\n          if (r === void 0)\n            for (var l = 0; l < this.columns.length; l++)\n              for (var n = 0; n < this.rows.length; n++) {\n                var a = (a = this.rows[n].arr[l]).replace(i, \"\");\n                this.rows[n].arr[l] = a, this.rows[n].obj[this.columns[l]] = a;\n              }\n          else if (typeof r == \"string\")\n            for (var c = 0; c < this.rows.length; c++) {\n              var p = (p = this.rows[c].obj[r]).replace(i, \"\"), j = (this.rows[c].obj[r] = p, this.columns.indexOf(r));\n              this.rows[c].arr[j] = p;\n            }\n          else\n            for (var T = 0; T < this.rows.length; T++) {\n              var _ = (_ = this.rows[T].arr[r]).replace(i, \"\");\n              this.rows[T].arr[r] = _, this.rows[T].obj[this.columns[r]] = _;\n            }\n        } }, { key: \"trim\", value: function(f) {\n          var r = new RegExp(\" \", \"g\");\n          if (f === void 0)\n            for (var s = 0; s < this.columns.length; s++)\n              for (var o = 0; o < this.rows.length; o++) {\n                var i = (i = this.rows[o].arr[s]).replace(r, \"\");\n                this.rows[o].arr[s] = i, this.rows[o].obj[this.columns[s]] = i;\n              }\n          else if (typeof f == \"string\")\n            for (var l = 0; l < this.rows.length; l++) {\n              var n = (n = this.rows[l].obj[f]).replace(r, \"\"), a = (this.rows[l].obj[f] = n, this.columns.indexOf(f));\n              this.rows[l].arr[a] = n;\n            }\n          else\n            for (var c = 0; c < this.rows.length; c++) {\n              var p = (p = this.rows[c].arr[f]).replace(r, \"\");\n              this.rows[c].arr[f] = p, this.rows[c].obj[this.columns[f]] = p;\n            }\n        } }, { key: \"removeColumn\", value: function(o) {\n          typeof o == \"string\" ? s = this.columns.indexOf(r = o) : r = this.columns[s = o];\n          var r, s, o = this.columns.splice(s + 1, this.columns.length);\n          this.columns.pop(), this.columns = this.columns.concat(o);\n          for (var i = 0; i < this.rows.length; i++) {\n            var l = this.rows[i].arr, n = l.splice(s + 1, l.length);\n            l.pop(), this.rows[i].arr = l.concat(n), delete this.rows[i].obj[r];\n          }\n        } }, { key: \"set\", value: function(f, r, s) {\n          this.rows[f].set(r, s);\n        } }, { key: \"setNum\", value: function(f, r, s) {\n          this.rows[f].setNum(r, s);\n        } }, { key: \"setString\", value: function(f, r, s) {\n          this.rows[f].setString(r, s);\n        } }, { key: \"get\", value: function(f, r) {\n          return this.rows[f].get(r);\n        } }, { key: \"getNum\", value: function(f, r) {\n          return this.rows[f].getNum(r);\n        } }, { key: \"getString\", value: function(f, r) {\n          return this.rows[f].getString(r);\n        } }, { key: \"getObject\", value: function(f) {\n          for (var r, s = {}, o = 0; o < this.rows.length; o++)\n            if (r = this.rows[o].obj, typeof f == \"string\") {\n              if (!(0 <= this.columns.indexOf(f)))\n                throw new Error('This table has no column named \"'.concat(f, '\"'));\n              s[r[f]] = r;\n            } else\n              s[o] = this.rows[o].obj;\n          return s;\n        } }, { key: \"getArray\", value: function() {\n          for (var f = [], r = 0; r < this.rows.length; r++)\n            f.push(this.rows[r].arr);\n          return f;\n        } }]) && y(h.prototype, g), u;\n      }(), t = m.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.splice\": 170, \"core-js/modules/es.regexp.constructor\": 191, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.match\": 198, \"core-js/modules/es.string.replace\": 201 }], 308: [function(t, H, C) {\n      t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.from-entries\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.from-entries\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function m(y, u) {\n        for (var h = 0; h < u.length; h++) {\n          var g = u[h];\n          g.enumerable = g.enumerable || !1, g.configurable = !0, \"value\" in g && (g.writable = !0), Object.defineProperty(y, g.key, g);\n        }\n      }\n      t.default.TableRow = function() {\n        function y(g, f) {\n          if (!(this instanceof y))\n            throw new TypeError(\"Cannot call a class as a function\");\n          var r = [];\n          g && (r = g.split(f = f || \",\")), this.arr = r, this.obj = Object.fromEntries(r.entries()), this.table = null;\n        }\n        var u, h;\n        return u = y, (h = [{ key: \"set\", value: function(g, f) {\n          if (typeof g == \"string\") {\n            var r = this.table.columns.indexOf(g);\n            if (!(0 <= r))\n              throw new Error('This table has no column named \"'.concat(g, '\"'));\n            this.obj[g] = f, this.arr[r] = f;\n          } else {\n            if (!(g < this.table.columns.length))\n              throw new Error(\"Column #\".concat(g, \" is out of the range of this table\"));\n            this.arr[g] = f, r = this.table.columns[g], this.obj[r] = f;\n          }\n        } }, { key: \"setNum\", value: function(g, f) {\n          f = parseFloat(f), this.set(g, f);\n        } }, { key: \"setString\", value: function(g, f) {\n          f = f.toString(), this.set(g, f);\n        } }, { key: \"get\", value: function(g) {\n          return (typeof g == \"string\" ? this.obj : this.arr)[g];\n        } }, { key: \"getNum\", value: function(g) {\n          var f = parseFloat(typeof g == \"string\" ? this.obj[g] : this.arr[g]);\n          if (f.toString() === \"NaN\")\n            throw \"Error: \".concat(this.obj[g], \" is NaN (Not a Number)\");\n          return f;\n        } }, { key: \"getString\", value: function(g) {\n          return (typeof g == \"string\" ? this.obj : this.arr)[g].toString();\n        } }]) && m(u.prototype, h), y;\n      }(), t = t.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.from-entries\": 182, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.split\": 203, \"core-js/modules/web.dom-collections.iterator\": 243 }], 309: [function(t, H, C) {\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function y(h, g) {\n        for (var f = 0; f < g.length; f++) {\n          var r = g[f];\n          r.enumerable = r.enumerable || !1, r.configurable = !0, \"value\" in r && (r.writable = !0), Object.defineProperty(h, r.key, r);\n        }\n      }\n      function u(h) {\n        for (var g = [], f = 0; f < h.length; f++)\n          g.push(new m.default.XML(h[f]));\n        return g;\n      }\n      m.default.XML = function() {\n        function h(r) {\n          if (!(this instanceof h))\n            throw new TypeError(\"Cannot call a class as a function\");\n          r ? this.DOM = r : (r = document.implementation.createDocument(null, \"doc\"), this.DOM = r.createElement(\"root\"));\n        }\n        var g, f;\n        return g = h, (f = [{ key: \"getParent\", value: function() {\n          return new m.default.XML(this.DOM.parentElement);\n        } }, { key: \"getName\", value: function() {\n          return this.DOM.tagName;\n        } }, { key: \"setName\", value: function(r) {\n          var s = this.DOM.innerHTML, o = this.DOM.attributes, i = document.implementation.createDocument(null, \"default\").createElement(r);\n          i.innerHTML = s;\n          for (var l = 0; l < o.length; l++)\n            i.setAttribute(o[l].nodeName, o[l].nodeValue);\n          this.DOM = i;\n        } }, { key: \"hasChildren\", value: function() {\n          return 0 < this.DOM.children.length;\n        } }, { key: \"listChildren\", value: function() {\n          for (var r = [], s = 0; s < this.DOM.childNodes.length; s++)\n            r.push(this.DOM.childNodes[s].nodeName);\n          return r;\n        } }, { key: \"getChildren\", value: function(r) {\n          return u(r ? this.DOM.getElementsByTagName(r) : this.DOM.children);\n        } }, { key: \"getChild\", value: function(r) {\n          if (typeof r != \"string\")\n            return new m.default.XML(this.DOM.children[r]);\n          var s = !0, o = !1, i = void 0;\n          try {\n            for (var l, n = this.DOM.children[Symbol.iterator](); !(s = (l = n.next()).done); s = !0) {\n              var a = l.value;\n              if (a.tagName === r)\n                return new m.default.XML(a);\n            }\n          } catch (c) {\n            o = !0, i = c;\n          } finally {\n            try {\n              s || n.return == null || n.return();\n            } finally {\n              if (o)\n                throw i;\n            }\n          }\n        } }, { key: \"addChild\", value: function(r) {\n          r instanceof m.default.XML && this.DOM.appendChild(r.DOM);\n        } }, { key: \"removeChild\", value: function(r) {\n          var s = -1;\n          if (typeof r == \"string\") {\n            for (var o = 0; o < this.DOM.children.length; o++)\n              if (this.DOM.children[o].tagName === r) {\n                s = o;\n                break;\n              }\n          } else\n            s = r;\n          s !== -1 && this.DOM.removeChild(this.DOM.children[s]);\n        } }, { key: \"getAttributeCount\", value: function() {\n          return this.DOM.attributes.length;\n        } }, { key: \"listAttributes\", value: function() {\n          var r = [], s = !0, o = !1, i = void 0;\n          try {\n            for (var l, n = this.DOM.attributes[Symbol.iterator](); !(s = (l = n.next()).done); s = !0) {\n              var a = l.value;\n              r.push(a.nodeName);\n            }\n          } catch (c) {\n            o = !0, i = c;\n          } finally {\n            try {\n              s || n.return == null || n.return();\n            } finally {\n              if (o)\n                throw i;\n            }\n          }\n          return r;\n        } }, { key: \"hasAttribute\", value: function(r) {\n          var s = {}, o = !0, i = !1, l = void 0;\n          try {\n            for (var n, a = this.DOM.attributes[Symbol.iterator](); !(o = (n = a.next()).done); o = !0) {\n              var c = n.value;\n              s[c.nodeName] = c.nodeValue;\n            }\n          } catch (p) {\n            i = !0, l = p;\n          } finally {\n            try {\n              o || a.return == null || a.return();\n            } finally {\n              if (i)\n                throw l;\n            }\n          }\n          return !!s[r];\n        } }, { key: \"getNum\", value: function(r, s) {\n          var o = {}, i = !0, l = !1, n = void 0;\n          try {\n            for (var a, c = this.DOM.attributes[Symbol.iterator](); !(i = (a = c.next()).done); i = !0) {\n              var p = a.value;\n              o[p.nodeName] = p.nodeValue;\n            }\n          } catch (j) {\n            l = !0, n = j;\n          } finally {\n            try {\n              i || c.return == null || c.return();\n            } finally {\n              if (l)\n                throw n;\n            }\n          }\n          return Number(o[r]) || s || 0;\n        } }, { key: \"getString\", value: function(r, s) {\n          var o = {}, i = !0, l = !1, n = void 0;\n          try {\n            for (var a, c = this.DOM.attributes[Symbol.iterator](); !(i = (a = c.next()).done); i = !0) {\n              var p = a.value;\n              o[p.nodeName] = p.nodeValue;\n            }\n          } catch (j) {\n            l = !0, n = j;\n          } finally {\n            try {\n              i || c.return == null || c.return();\n            } finally {\n              if (l)\n                throw n;\n            }\n          }\n          return o[r] ? String(o[r]) : s || null;\n        } }, { key: \"setAttribute\", value: function(r, s) {\n          this.DOM.setAttribute(r, s);\n        } }, { key: \"getContent\", value: function(r) {\n          var s = this.DOM.textContent;\n          return (s = s.replace(/\\s\\s+/g, \",\")) || r || null;\n        } }, { key: \"setContent\", value: function(r) {\n          this.DOM.children.length || (this.DOM.textContent = r);\n        } }, { key: \"serialize\", value: function() {\n          return new XMLSerializer().serializeToString(this.DOM);\n        } }]) && y(g.prototype, f), h;\n      }(), t = m.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.number.constructor\": 178, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.iterator\": 243 }], 310: [function(t, H, C) {\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.math.hypot\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.math.hypot\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.string.includes\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function y(u) {\n        return function(h) {\n          if (Array.isArray(h)) {\n            for (var g = 0, f = new Array(h.length); g < h.length; g++)\n              f[g] = h[g];\n            return f;\n          }\n        }(u) || function(h) {\n          if (Symbol.iterator in Object(h) || Object.prototype.toString.call(h) === \"[object Arguments]\")\n            return Array.from(h);\n        }(u) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      m.default.prototype.abs = Math.abs, m.default.prototype.ceil = Math.ceil, m.default.prototype.constrain = function(u, h, g) {\n        return m.default._validateParameters(\"constrain\", arguments), Math.max(Math.min(u, g), h);\n      }, m.default.prototype.dist = function() {\n        for (var u = arguments.length, h = new Array(u), g = 0; g < u; g++)\n          h[g] = arguments[g];\n        return m.default._validateParameters(\"dist\", h), h.length === 4 ? Math.hypot(h[2] - h[0], h[3] - h[1]) : h.length === 6 ? Math.hypot(h[3] - h[0], h[4] - h[1], h[5] - h[2]) : void 0;\n      }, m.default.prototype.exp = Math.exp, m.default.prototype.floor = Math.floor, m.default.prototype.lerp = function(u, h, g) {\n        return m.default._validateParameters(\"lerp\", arguments), g * (h - u) + u;\n      }, m.default.prototype.log = Math.log, m.default.prototype.mag = function(u, h) {\n        return m.default._validateParameters(\"mag\", arguments), Math.hypot(u, h);\n      }, m.default.prototype.map = function(u, h, g, f, r, s) {\n        return m.default._validateParameters(\"map\", arguments), u = (u - h) / (g - h) * (r - f) + f, s ? f < r ? this.constrain(u, f, r) : this.constrain(u, r, f) : u;\n      }, m.default.prototype.max = function() {\n        for (var u = function(r) {\n          return Math.max.apply(Math, y(r));\n        }, h = arguments.length, g = new Array(h), f = 0; f < h; f++)\n          g[f] = arguments[f];\n        return Array.isArray(g[0]) ? u(g[0]) : u(g);\n      }, m.default.prototype.min = function() {\n        for (var u = function(r) {\n          return Math.min.apply(Math, y(r));\n        }, h = arguments.length, g = new Array(h), f = 0; f < h; f++)\n          g[f] = arguments[f];\n        return Array.isArray(g[0]) ? u(g[0]) : u(g);\n      }, m.default.prototype.norm = function(u, h, g) {\n        return m.default._validateParameters(\"norm\", arguments), this.map(u, h, g, 0, 1);\n      }, m.default.prototype.pow = Math.pow, m.default.prototype.round = function(u, h) {\n        return h ? (h = Math.pow(10, h), Math.round(u * h) / h) : Math.round(u);\n      }, m.default.prototype.sq = function(u) {\n        return u * u;\n      }, m.default.prototype.sqrt = Math.sqrt, m.default.prototype.fract = function(f) {\n        m.default._validateParameters(\"fract\", arguments);\n        var h, g = 0, f = Number(f);\n        return isNaN(f) || Math.abs(f) === 1 / 0 ? f : (f < 0 && (f = -f, g = 1), String(f).includes(\".\") && !String(f).includes(\"e\") ? (h = String(f), h = +(\"0\" + h.slice(h.indexOf(\".\"))), Math.abs(g - h)) : f < 1 ? Math.abs(g - f) : 0);\n      }, t = m.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.math.hypot\": 175, \"core-js/modules/es.number.constructor\": 178, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.iterator\": 243 }], 311: [function(t, H, C) {\n      t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.reflect.construct\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.slice\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function y(h, g, f) {\n        return (y = function() {\n          if (typeof Reflect < \"u\" && Reflect.construct && !Reflect.construct.sham) {\n            if (typeof Proxy == \"function\")\n              return 1;\n            try {\n              return Date.prototype.toString.call(Reflect.construct(Date, [], function() {\n              })), 1;\n            } catch {\n            }\n          }\n        }() ? Reflect.construct : function(r, s, o) {\n          var i = [null];\n          return i.push.apply(i, s), s = new (Function.bind.apply(r, i))(), o && u(s, o.prototype), s;\n        }).apply(null, arguments);\n      }\n      function u(h, g) {\n        return (u = Object.setPrototypeOf || function(f, r) {\n          return f.__proto__ = r, f;\n        })(h, g);\n      }\n      m.default.prototype.createVector = function(h, g, f) {\n        return this instanceof m.default ? y(m.default.Vector, [this._fromRadians.bind(this), this._toRadians.bind(this)].concat(Array.prototype.slice.call(arguments))) : new m.default.Vector(h, g, f);\n      }, t = m.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.reflect.construct\": 189, \"core-js/modules/es.regexp.to-string\": 193 }], 312: [function(f, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, f = (f = f(\"../core/main\")) && f.__esModule ? f : { default: f };\n      function m(r) {\n        return 0.5 * (1 - Math.cos(r * Math.PI));\n      }\n      var y, u = 4095, h = 4, g = 0.5, f = (f.default.prototype.noise = function(r) {\n        var s = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 0, o = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 0;\n        if (y == null) {\n          y = new Array(4096);\n          for (var i = 0; i < 4096; i++)\n            y[i] = Math.random();\n        }\n        r < 0 && (r = -r), s < 0 && (s = -s), o < 0 && (o = -o);\n        for (var l, n, a = Math.floor(r), c = Math.floor(s), p = Math.floor(o), j = r - a, T = s - c, _ = o - p, S = 0, E = 0.5, A = 0; A < h; A++) {\n          var x = a + (c << 4) + (p << 8), P = m(j), M = m(T), R = y[x & u];\n          R += P * (y[x + 1 & u] - R), l = y[x + 16 & u], R += M * ((l += P * (y[x + 16 + 1 & u] - l)) - R), l = y[(x += 256) & u], l += P * (y[x + 1 & u] - l), n = y[x + 16 & u], l += M * ((n += P * (y[x + 16 + 1 & u] - n)) - l), S += (R += m(_) * (l - R)) * E, E *= g, a <<= 1, c <<= 1, p <<= 1, 1 <= (j *= 2) && (a++, j--), 1 <= (T *= 2) && (c++, T--), 1 <= (_ *= 2) && (p++, _--);\n        }\n        return S;\n      }, f.default.prototype.noiseDetail = function(r, s) {\n        0 < r && (h = r), 0 < s && (g = s);\n      }, f.default.prototype.noiseSeed = function(r) {\n        i = 4294967296;\n        var s, o, i, l = { setSeed: function(a) {\n          o = s = (a ?? Math.random() * i) >>> 0;\n        }, getSeed: function() {\n          return s;\n        }, rand: function() {\n          return (o = (1664525 * o + 1013904223) % i) / i;\n        } };\n        l.setSeed(r), y = new Array(4096);\n        for (var n = 0; n < 4096; n++)\n          y[n] = l.rand();\n      }, f.default);\n      C.default = f;\n    }, { \"../core/main\": 280 }], 313: [function(t, H, C) {\n      function m(s) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(o) {\n          return typeof o;\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n        })(s);\n      }\n      function y(s) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(o) {\n          return m(o);\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : m(o);\n        })(s);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.every\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.some\"), t(\"core-js/modules/es.math.sign\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.number.is-finite\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.sub\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.every\"), t(\"core-js/modules/es.array.some\"), t(\"core-js/modules/es.math.sign\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.number.is-finite\"), t(\"core-js/modules/es.string.sub\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (r = t(\"../core/main\")) && r.__esModule ? r : { default: r }, h = function(s) {\n        if (s && s.__esModule)\n          return s;\n        if (s === null || y(s) !== \"object\" && typeof s != \"function\")\n          return { default: s };\n        var o = g();\n        if (o && o.has(s))\n          return o.get(s);\n        var i, l = {}, n = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (i in s) {\n          var a;\n          Object.prototype.hasOwnProperty.call(s, i) && ((a = n ? Object.getOwnPropertyDescriptor(s, i) : null) && (a.get || a.set) ? Object.defineProperty(l, i, a) : l[i] = s[i]);\n        }\n        return l.default = s, o && o.set(s, l), l;\n      }(t(\"../core/constants\"));\n      function g() {\n        var s;\n        return typeof WeakMap != \"function\" ? null : (s = /* @__PURE__ */ new WeakMap(), g = function() {\n          return s;\n        }, s);\n      }\n      function f(s, o) {\n        for (var i = 0; i < o.length; i++) {\n          var l = o[i];\n          l.enumerable = l.enumerable || !1, l.configurable = !0, \"value\" in l && (l.writable = !0), Object.defineProperty(s, l.key, l);\n        }\n      }\n      u.default.Vector = function() {\n        function s() {\n          var p = this, n = s;\n          if (!(p instanceof n))\n            throw new TypeError(\"Cannot call a class as a function\");\n          var a, c, p = typeof (arguments.length <= 0 ? void 0 : arguments[0]) == \"function\" ? (this.isPInst = !0, this._fromRadians = arguments.length <= 0 ? void 0 : arguments[0], this._toRadians = arguments.length <= 1 ? void 0 : arguments[1], a = (arguments.length <= 2 ? void 0 : arguments[2]) || 0, c = (arguments.length <= 3 ? void 0 : arguments[3]) || 0, (arguments.length <= 4 ? void 0 : arguments[4]) || 0) : (a = (arguments.length <= 0 ? void 0 : arguments[0]) || 0, c = (arguments.length <= 1 ? void 0 : arguments[1]) || 0, (arguments.length <= 2 ? void 0 : arguments[2]) || 0);\n          this.x = a, this.y = c, this.z = p;\n        }\n        var o, i, l;\n        return o = s, l = [{ key: \"fromAngle\", value: function(n) {\n          var a = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 1;\n          return new u.default.Vector(a * Math.cos(n), a * Math.sin(n), 0);\n        } }, { key: \"fromAngles\", value: function(_, j) {\n          var c = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 1, p = Math.cos(j), j = Math.sin(j), T = Math.cos(_), _ = Math.sin(_);\n          return new u.default.Vector(c * _ * j, -c * T, c * _ * p);\n        } }, { key: \"random2D\", value: function() {\n          return this.fromAngle(Math.random() * h.TWO_PI);\n        } }, { key: \"random3D\", value: function() {\n          var n = Math.random() * h.TWO_PI, a = 2 * Math.random() - 1, p = Math.sqrt(1 - a * a), c = p * Math.cos(n), p = p * Math.sin(n);\n          return new u.default.Vector(c, p, a);\n        } }, { key: \"copy\", value: function(n) {\n          return n.copy(n);\n        } }, { key: \"add\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2];\n          return T ? T.set(p) : (T = p.copy(), a.length === 3 && u.default._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.add\")), T.add(j), T;\n        } }, { key: \"rem\", value: function(n, a) {\n          if (n instanceof u.default.Vector && a instanceof u.default.Vector)\n            return (n = n.copy()).rem(a), n;\n        } }, { key: \"sub\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2];\n          return T ? T.set(p) : (T = p.copy(), a.length === 3 && u.default._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.sub\")), T.sub(j), T;\n        } }, { key: \"mult\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2];\n          return T ? T.set(p) : (T = p.copy(), a.length === 3 && u.default._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.mult\")), T.mult(j), T;\n        } }, { key: \"rotate\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2];\n          return a.length === 2 ? T = p.copy() : (T instanceof u.default.Vector || u.default._friendlyError(\"The target parameter should be of type p5.Vector\", \"p5.Vector.rotate\"), T.set(p)), T.rotate(j), T;\n        } }, { key: \"div\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2];\n          return T ? T.set(p) : (T = p.copy(), a.length === 3 && u.default._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.div\")), T.div(j), T;\n        } }, { key: \"dot\", value: function(n, a) {\n          return n.dot(a);\n        } }, { key: \"cross\", value: function(n, a) {\n          return n.cross(a);\n        } }, { key: \"dist\", value: function(n, a) {\n          return n.dist(a);\n        } }, { key: \"lerp\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2], _ = a[3];\n          return _ ? _.set(p) : (_ = p.copy(), a.length === 4 && u.default._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.lerp\")), _.lerp(j, T), _;\n        } }, { key: \"slerp\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2], _ = a[3];\n          return _ ? _.set(p) : (_ = p.copy(), a.length === 4 && u.default._friendlyError(\"The target parameter is undefined, it should be of type p5.Vector\", \"p5.Vector.slerp\")), _.slerp(j, T), _;\n        } }, { key: \"mag\", value: function(n) {\n          return n.mag();\n        } }, { key: \"magSq\", value: function(n) {\n          return n.magSq();\n        } }, { key: \"normalize\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1];\n          return a.length < 2 ? j = p.copy() : (j instanceof u.default.Vector || u.default._friendlyError(\"The target parameter should be of type p5.Vector\", \"p5.Vector.normalize\"), j.set(p)), j.normalize();\n        } }, { key: \"limit\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2];\n          return a.length < 3 ? T = p.copy() : (T instanceof u.default.Vector || u.default._friendlyError(\"The target parameter should be of type p5.Vector\", \"p5.Vector.limit\"), T.set(p)), T.limit(j);\n        } }, { key: \"setMag\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2];\n          return a.length < 3 ? T = p.copy() : (T instanceof u.default.Vector || u.default._friendlyError(\"The target parameter should be of type p5.Vector\", \"p5.Vector.setMag\"), T.set(p)), T.setMag(j);\n        } }, { key: \"heading\", value: function(n) {\n          return n.heading();\n        } }, { key: \"angleBetween\", value: function(n, a) {\n          return n.angleBetween(a);\n        } }, { key: \"reflect\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2];\n          return a.length < 3 ? T = p.copy() : (T instanceof u.default.Vector || u.default._friendlyError(\"The target parameter should be of type p5.Vector\", \"p5.Vector.reflect\"), T.set(p)), T.reflect(j);\n        } }, { key: \"array\", value: function(n) {\n          return n.array();\n        } }, { key: \"equals\", value: function(n, a) {\n          var c;\n          return n instanceof u.default.Vector ? c = n : Array.isArray(n) ? c = new u.default.Vector().set(n) : u.default._friendlyError(\"The v1 parameter should be of type Array or p5.Vector\", \"p5.Vector.equals\"), c.equals(a);\n        } }], (i = [{ key: \"toString\", value: function() {\n          return \"p5.Vector Object : [\".concat(this.x, \", \").concat(this.y, \", \").concat(this.z, \"]\");\n        } }, { key: \"set\", value: function(n, a, c) {\n          return n instanceof u.default.Vector ? (this.x = n.x || 0, this.y = n.y || 0, this.z = n.z || 0) : Array.isArray(n) ? (this.x = n[0] || 0, this.y = n[1] || 0, this.z = n[2] || 0) : (this.x = n || 0, this.y = a || 0, this.z = c || 0), this;\n        } }, { key: \"copy\", value: function() {\n          return this.isPInst ? new u.default.Vector(this._fromRadians, this._toRadians, this.x, this.y, this.z) : new u.default.Vector(this.x, this.y, this.z);\n        } }, { key: \"add\", value: function(n, a, c) {\n          return n instanceof u.default.Vector ? (this.x += n.x || 0, this.y += n.y || 0, this.z += n.z || 0) : Array.isArray(n) ? (this.x += n[0] || 0, this.y += n[1] || 0, this.z += n[2] || 0) : (this.x += n || 0, this.y += a || 0, this.z += c || 0), this;\n        } }, { key: \"calculateRemainder2D\", value: function(n, a) {\n          return n !== 0 && (this.x = this.x % n), a !== 0 && (this.y = this.y % a), this;\n        } }, { key: \"calculateRemainder3D\", value: function(n, a, c) {\n          return n !== 0 && (this.x = this.x % n), a !== 0 && (this.y = this.y % a), c !== 0 && (this.z = this.z % c), this;\n        } }, { key: \"rem\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p, j, T, _ = a[0], S = a[1], E = a[2];\n          if (_ instanceof u.default.Vector) {\n            if ([_.x, _.y, _.z].every(Number.isFinite))\n              return p = parseFloat(_.x), j = parseFloat(_.y), T = parseFloat(_.z), this.calculateRemainder3D(p, j, T);\n          } else if (Array.isArray(_)) {\n            if (_.every(Number.isFinite))\n              return _.length === 2 ? this.calculateRemainder2D(_[0], _[1]) : _.length === 3 ? this.calculateRemainder3D(_[0], _[1], _[2]) : void 0;\n          } else if (a.length === 1) {\n            if (Number.isFinite(_) && _ !== 0)\n              return this.x = this.x % _, this.y = this.y % _, this.z = this.z % _, this;\n          } else if (a.length === 2) {\n            if (a.every(Number.isFinite))\n              return this.calculateRemainder2D(_, S);\n          } else if (a.length === 3 && a.every(Number.isFinite))\n            return this.calculateRemainder3D(_, S, E);\n        } }, { key: \"sub\", value: function(n, a, c) {\n          return n instanceof u.default.Vector ? (this.x -= n.x || 0, this.y -= n.y || 0, this.z -= n.z || 0) : Array.isArray(n) ? (this.x -= n[0] || 0, this.y -= n[1] || 0, this.z -= n[2] || 0) : (this.x -= n || 0, this.y -= a || 0, this.z -= c || 0), this;\n        } }, { key: \"mult\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p, j = a[0], T = a[1], _ = a[2];\n          return j instanceof u.default.Vector ? Number.isFinite(j.x) && Number.isFinite(j.y) && Number.isFinite(j.z) && typeof j.x == \"number\" && typeof j.y == \"number\" && typeof j.z == \"number\" ? (this.x *= j.x, this.y *= j.y, this.z *= j.z) : console.warn(\"p5.Vector.prototype.mult:\", \"x contains components that are either undefined or not finite numbers\") : Array.isArray(j) ? j.every(function(S) {\n            return Number.isFinite(S);\n          }) && j.every(function(S) {\n            return typeof S == \"number\";\n          }) ? j.length === 1 ? (this.x *= j[0], this.y *= j[0], this.z *= j[0]) : j.length === 2 ? (this.x *= j[0], this.y *= j[1]) : j.length === 3 && (this.x *= j[0], this.y *= j[1], this.z *= j[2]) : console.warn(\"p5.Vector.prototype.mult:\", \"x contains elements that are either undefined or not finite numbers\") : (p = a).every(function(S) {\n            return Number.isFinite(S);\n          }) && p.every(function(S) {\n            return typeof S == \"number\";\n          }) ? (a.length === 1 && (this.x *= j, this.y *= j, this.z *= j), a.length === 2 && (this.x *= j, this.y *= T), a.length === 3 && (this.x *= j, this.y *= T, this.z *= _)) : console.warn(\"p5.Vector.prototype.mult:\", \"x, y, or z arguments are either undefined or not a finite number\"), this;\n        } }, { key: \"div\", value: function() {\n          for (var n = arguments.length, a = new Array(n), c = 0; c < n; c++)\n            a[c] = arguments[c];\n          var p = a[0], j = a[1], T = a[2];\n          if (p instanceof u.default.Vector)\n            if (Number.isFinite(p.x) && Number.isFinite(p.y) && Number.isFinite(p.z) && typeof p.x == \"number\" && typeof p.y == \"number\" && typeof p.z == \"number\") {\n              var _ = p.z === 0 && this.z === 0;\n              if (p.x === 0 || p.y === 0 || !_ && p.z === 0)\n                return console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\"), this;\n              this.x /= p.x, this.y /= p.y, _ || (this.z /= p.z);\n            } else\n              console.warn(\"p5.Vector.prototype.div:\", \"x contains components that are either undefined or not finite numbers\");\n          else if (Array.isArray(p))\n            if (p.every(Number.isFinite) && p.every(function(S) {\n              return typeof S == \"number\";\n            })) {\n              if (p.some(function(S) {\n                return S === 0;\n              }))\n                return console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\"), this;\n              p.length === 1 ? (this.x /= p[0], this.y /= p[0], this.z /= p[0]) : p.length === 2 ? (this.x /= p[0], this.y /= p[1]) : p.length === 3 && (this.x /= p[0], this.y /= p[1], this.z /= p[2]);\n            } else\n              console.warn(\"p5.Vector.prototype.div:\", \"x contains components that are either undefined or not finite numbers\");\n          else if (a.every(Number.isFinite) && a.every(function(S) {\n            return typeof S == \"number\";\n          })) {\n            if (a.some(function(S) {\n              return S === 0;\n            }))\n              return console.warn(\"p5.Vector.prototype.div:\", \"divide by 0\"), this;\n            a.length === 1 && (this.x /= p, this.y /= p, this.z /= p), a.length === 2 && (this.x /= p, this.y /= j), a.length === 3 && (this.x /= p, this.y /= j, this.z /= T);\n          } else\n            console.warn(\"p5.Vector.prototype.div:\", \"x, y, or z arguments are either undefined or not a finite number\");\n          return this;\n        } }, { key: \"mag\", value: function() {\n          return Math.sqrt(this.magSq());\n        } }, { key: \"magSq\", value: function() {\n          var n = this.x, a = this.y, c = this.z;\n          return n * n + a * a + c * c;\n        } }, { key: \"dot\", value: function(n, a, c) {\n          return n instanceof u.default.Vector ? this.dot(n.x, n.y, n.z) : this.x * (n || 0) + this.y * (a || 0) + this.z * (c || 0);\n        } }, { key: \"cross\", value: function(p) {\n          var a = this.y * p.z - this.z * p.y, c = this.z * p.x - this.x * p.z, p = this.x * p.y - this.y * p.x;\n          return this.isPInst ? new u.default.Vector(this._fromRadians, this._toRadians, a, c, p) : new u.default.Vector(a, c, p);\n        } }, { key: \"dist\", value: function(n) {\n          return n.copy().sub(this).mag();\n        } }, { key: \"normalize\", value: function() {\n          var n = this.mag();\n          return n !== 0 && this.mult(1 / n), this;\n        } }, { key: \"limit\", value: function(n) {\n          var a = this.magSq();\n          return n * n < a && this.div(Math.sqrt(a)).mult(n), this;\n        } }, { key: \"setMag\", value: function(n) {\n          return this.normalize().mult(n);\n        } }, { key: \"heading\", value: function() {\n          var n = Math.atan2(this.y, this.x);\n          return this.isPInst ? this._fromRadians(n) : n;\n        } }, { key: \"setHeading\", value: function(n) {\n          this.isPInst && (n = this._toRadians(n));\n          var a = this.mag();\n          return this.x = a * Math.cos(n), this.y = a * Math.sin(n), this;\n        } }, { key: \"rotate\", value: function(a) {\n          var a = this.heading() + a, c = (this.isPInst && (a = this._toRadians(a)), this.mag());\n          return this.x = Math.cos(a) * c, this.y = Math.sin(a) * c, this;\n        } }, { key: \"angleBetween\", value: function(n) {\n          var a;\n          return this.magSq() * n.magSq() == 0 ? NaN : (a = this.cross(n), n = Math.atan2(a.mag(), this.dot(n)) * Math.sign(a.z || 1), this.isPInst ? this._fromRadians(n) : n);\n        } }, { key: \"lerp\", value: function(n, a, c, p) {\n          return n instanceof u.default.Vector ? this.lerp(n.x, n.y, n.z, a) : (this.x += (n - this.x) * p || 0, this.y += (a - this.y) * p || 0, this.z += (c - this.z) * p || 0, this);\n        } }, { key: \"slerp\", value: function(n, a) {\n          if (a !== 0) {\n            if (a === 1)\n              return this.set(n);\n            var c = this.mag(), p = n.mag();\n            if (c * p == 0)\n              this.mult(1 - a).add(n.x * a, n.y * a, n.z * a);\n            else {\n              var j = this.cross(n), T = j.mag(), _ = Math.atan2(T, this.dot(n));\n              if (0 < T)\n                j.x /= T, j.y /= T, j.z /= T;\n              else {\n                if (_ < 0.5 * Math.PI)\n                  return this.mult(1 - a).add(n.x * a, n.y * a, n.z * a), this;\n                this.z === 0 && n.z === 0 ? j.set(0, 0, 1) : this.x !== 0 ? j.set(this.y, -this.x, 0).normalize() : j.set(1, 0, 0);\n              }\n              T = j.cross(this), n = 1 - a + a * p / c, j = n * Math.cos(a * _), p = n * Math.sin(a * _), this.x = this.x * j + T.x * p, this.y = this.y * j + T.y * p, this.z = this.z * j + T.z * p;\n            }\n          }\n          return this;\n        } }, { key: \"reflect\", value: function(n) {\n          return n.normalize(), this.sub(n.mult(2 * this.dot(n)));\n        } }, { key: \"array\", value: function() {\n          return [this.x || 0, this.y || 0, this.z || 0];\n        } }, { key: \"equals\", value: function(T, a, c) {\n          var p, j, T = T instanceof u.default.Vector ? (p = T.x || 0, j = T.y || 0, T.z || 0) : Array.isArray(T) ? (p = T[0] || 0, j = T[1] || 0, T[2] || 0) : (p = T || 0, j = a || 0, c || 0);\n          return this.x === p && this.y === j && this.z === T;\n        } }]) && f(o.prototype, i), l && f(o, l), s;\n      }();\n      var r = u.default.Vector;\n      C.default = r;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.every\": 154, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.some\": 169, \"core-js/modules/es.math.sign\": 177, \"core-js/modules/es.number.constructor\": 178, \"core-js/modules/es.number.is-finite\": 179, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.sub\": 205, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 314: [function(g, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (g = g(\"../core/main\")) && g.__esModule ? g : { default: g }, y = \"_lcg_random_state\", u = 4294967296, h = 0, g = (m.default.prototype._lcg = function(f) {\n        return this[f] = (1664525 * this[f] + 1013904223) % u, this[f] / u;\n      }, m.default.prototype._lcgSetSeed = function(f, r) {\n        this[f] = (r ?? Math.random() * u) >>> 0;\n      }, m.default.prototype.randomSeed = function(f) {\n        this._lcgSetSeed(y, f), this._gaussian_previous = !1;\n      }, m.default.prototype.random = function(f, r) {\n        var s, o;\n        return m.default._validateParameters(\"random\", arguments), s = this[y] != null ? this._lcg(y) : Math.random(), f === void 0 ? s : r === void 0 ? Array.isArray(f) ? f[Math.floor(s * f.length)] : s * f : (r < f && (o = f, f = r, r = o), s * (r - f) + f);\n      }, m.default.prototype.randomGaussian = function(f) {\n        var r, s, o, i, l = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 1;\n        if (this._gaussian_previous)\n          r = h, this._gaussian_previous = !1;\n        else {\n          for (; 1 <= (i = (s = this.random(2) - 1) * s + (o = this.random(2) - 1) * o); )\n            ;\n          r = s * (i = Math.sqrt(-2 * Math.log(i) / i)), h = o * i, this._gaussian_previous = !0;\n        }\n        return r * l + (f || 0);\n      }, m.default);\n      C.default = g;\n    }, { \"../core/main\": 280 }], 315: [function(t, H, C) {\n      function m(r) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(s) {\n          return typeof s;\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : typeof s;\n        })(r);\n      }\n      function y(r) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(s) {\n          return m(s);\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : m(s);\n        })(r);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (f = t(\"../core/main\")) && f.__esModule ? f : { default: f }, h = function(r) {\n        if (r && r.__esModule)\n          return r;\n        if (r === null || y(r) !== \"object\" && typeof r != \"function\")\n          return { default: r };\n        var s = g();\n        if (s && s.has(r))\n          return s.get(r);\n        var o, i = {}, l = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (o in r) {\n          var n;\n          Object.prototype.hasOwnProperty.call(r, o) && ((n = l ? Object.getOwnPropertyDescriptor(r, o) : null) && (n.get || n.set) ? Object.defineProperty(i, o, n) : i[o] = r[o]);\n        }\n        return i.default = r, s && s.set(r, i), i;\n      }(t(\"../core/constants\"));\n      function g() {\n        var r;\n        return typeof WeakMap != \"function\" ? null : (r = /* @__PURE__ */ new WeakMap(), g = function() {\n          return r;\n        }, r);\n      }\n      u.default.prototype._angleMode = h.RADIANS, u.default.prototype.acos = function(r) {\n        return this._fromRadians(Math.acos(r));\n      }, u.default.prototype.asin = function(r) {\n        return this._fromRadians(Math.asin(r));\n      }, u.default.prototype.atan = function(r) {\n        return this._fromRadians(Math.atan(r));\n      }, u.default.prototype.atan2 = function(r, s) {\n        return this._fromRadians(Math.atan2(r, s));\n      }, u.default.prototype.cos = function(r) {\n        return Math.cos(this._toRadians(r));\n      }, u.default.prototype.sin = function(r) {\n        return Math.sin(this._toRadians(r));\n      }, u.default.prototype.tan = function(r) {\n        return Math.tan(this._toRadians(r));\n      }, u.default.prototype.degrees = function(r) {\n        return r * h.RAD_TO_DEG;\n      }, u.default.prototype.radians = function(r) {\n        return r * h.DEG_TO_RAD;\n      }, u.default.prototype.angleMode = function(r) {\n        if (u.default._validateParameters(\"angleMode\", arguments), r === void 0)\n          return this._angleMode;\n        r !== h.DEGREES && r !== h.RADIANS || r !== this._angleMode && (r === h.RADIANS ? (this._setProperty(\"pRotationX\", this.pRotationX * h.DEG_TO_RAD), this._setProperty(\"pRotationY\", this.pRotationY * h.DEG_TO_RAD), this._setProperty(\"pRotationZ\", this.pRotationZ * h.DEG_TO_RAD)) : (this._setProperty(\"pRotationX\", this.pRotationX * h.RAD_TO_DEG), this._setProperty(\"pRotationY\", this.pRotationY * h.RAD_TO_DEG), this._setProperty(\"pRotationZ\", this.pRotationZ * h.RAD_TO_DEG)), this._angleMode = r);\n      }, u.default.prototype._toRadians = function(r) {\n        return this._angleMode === h.DEGREES ? r * h.DEG_TO_RAD : r;\n      }, u.default.prototype._toDegrees = function(r) {\n        return this._angleMode === h.RADIANS ? r * h.RAD_TO_DEG : r;\n      }, u.default.prototype._fromRadians = function(r) {\n        return this._angleMode === h.DEGREES ? r * h.RAD_TO_DEG : r;\n      }, u.default.prototype._fromDegrees = function(r) {\n        return this._angleMode === h.RADIANS ? r * h.DEG_TO_RAD : r;\n      };\n      var f = u.default;\n      C.default = f;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 316: [function(t, H, C) {\n      t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      m.default.prototype.textAlign = function(y, u) {\n        var h;\n        return m.default._validateParameters(\"textAlign\", arguments), (h = this._renderer).textAlign.apply(h, arguments);\n      }, m.default.prototype.textLeading = function(y) {\n        var u;\n        return m.default._validateParameters(\"textLeading\", arguments), (u = this._renderer).textLeading.apply(u, arguments);\n      }, m.default.prototype.textSize = function(y) {\n        var u;\n        return m.default._validateParameters(\"textSize\", arguments), (u = this._renderer).textSize.apply(u, arguments);\n      }, m.default.prototype.textStyle = function(y) {\n        var u;\n        return m.default._validateParameters(\"textStyle\", arguments), (u = this._renderer).textStyle.apply(u, arguments);\n      }, m.default.prototype.textWidth = function() {\n        for (var y = arguments.length, u = new Array(y), h = 0; h < y; h++)\n          u[h] = arguments[h];\n        if (u[0] += \"\", m.default._validateParameters(\"textWidth\", u), u[0].length === 0)\n          return 0;\n        for (var g = u[0].replace(/\\t/g, \"  \").split(/\\r?\\n|\\r|\\n/g), f = [], r = 0; r < g.length; r++)\n          f.push(this._renderer.textWidth(g[r]));\n        return Math.max.apply(Math, f);\n      }, m.default.prototype.textAscent = function() {\n        for (var y = arguments.length, u = new Array(y), h = 0; h < y; h++)\n          u[h] = arguments[h];\n        return m.default._validateParameters(\"textAscent\", u), this._renderer.textAscent();\n      }, m.default.prototype.textDescent = function() {\n        for (var y = arguments.length, u = new Array(y), h = 0; h < y; h++)\n          u[h] = arguments[h];\n        return m.default._validateParameters(\"textDescent\", u), this._renderer.textDescent();\n      }, m.default.prototype._updateTextMetrics = function() {\n        return this._renderer._updateTextMetrics();\n      }, m.default.prototype.textWrap = function(y) {\n        return m.default._validateParameters(\"textWrap\", [y]), this._renderer.textWrap(y);\n      }, t = m.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.string.split\": 203 }], 317: [function(t, H, C) {\n      function m(o) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(i) {\n          return typeof i;\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : typeof i;\n        })(o);\n      }\n      function y(o) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(i) {\n          return m(i);\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : m(i);\n        })(o);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.last-index-of\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.last-index-of\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.split\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (s = t(\"../core/main\")) && s.__esModule ? s : { default: s }, h = r(t(\"../core/constants\")), g = r(t(\"opentype.js\"));\n      function f() {\n        var o;\n        return typeof WeakMap != \"function\" ? null : (o = /* @__PURE__ */ new WeakMap(), f = function() {\n          return o;\n        }, o);\n      }\n      function r(o) {\n        if (o && o.__esModule)\n          return o;\n        if (o === null || y(o) !== \"object\" && typeof o != \"function\")\n          return { default: o };\n        var i = f();\n        if (i && i.has(o))\n          return i.get(o);\n        var l, n, a = {}, c = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (l in o)\n          Object.prototype.hasOwnProperty.call(o, l) && ((n = c ? Object.getOwnPropertyDescriptor(o, l) : null) && (n.get || n.set) ? Object.defineProperty(a, l, n) : a[l] = o[l]);\n        return a.default = o, i && i.set(o, a), a;\n      }\n      t(\"../core/friendly_errors/validate_params\"), t(\"../core/friendly_errors/file_errors\"), t(\"../core/friendly_errors/fes_core\"), u.default.prototype.loadFont = function(o, i, l) {\n        u.default._validateParameters(\"loadFont\", arguments);\n        var n = new u.default.Font(this), a = this;\n        return g.load(o, function(j, T) {\n          if (j)\n            return u.default._friendlyFileLoadError(4, o), l !== void 0 ? l(j) : void console.error(j, o);\n          n.font = T, i !== void 0 && i(n), a._decrementPreload();\n          var j = o.split(\"\\\\\").pop().split(\"/\").pop(), T = j.lastIndexOf(\".\"), _ = T < 1 ? null : j.slice(T + 1);\n          [\"ttf\", \"otf\", \"woff\", \"woff2\"].includes(_) && (_ = j.slice(0, T !== -1 ? T : 0), (j = document.createElement(\"style\")).appendChild(document.createTextNode(`\n@font-face {\nfont-family: `.concat(_, `;\nsrc: url(`).concat(o, `);\n}\n`))), document.head.appendChild(j));\n        }), n;\n      }, u.default.prototype.text = function(o, i, l, n, a) {\n        var c;\n        return u.default._validateParameters(\"text\", arguments), this._renderer._doFill || this._renderer._doStroke ? (c = this._renderer).text.apply(c, arguments) : this;\n      }, u.default.prototype.textFont = function(o, i) {\n        if (u.default._validateParameters(\"textFont\", arguments), arguments.length) {\n          if (o)\n            return this._renderer._setProperty(\"_textFont\", o), i && (this._renderer._setProperty(\"_textSize\", i), this._renderer._leadingSet || this._renderer._setProperty(\"_textLeading\", i * h._DEFAULT_LEADMULT)), this._renderer._applyTextProperties();\n          throw new Error(\"null font passed to textFont\");\n        }\n        return this._renderer._textFont;\n      };\n      var s = u.default;\n      C.default = s;\n    }, { \"../core/constants\": 269, \"../core/friendly_errors/fes_core\": 271, \"../core/friendly_errors/file_errors\": 272, \"../core/friendly_errors/validate_params\": 275, \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.last-index-of\": 166, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243, \"opentype.js\": 254 }], 318: [function(t, H, C) {\n      function m(S) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(E) {\n          return typeof E;\n        } : function(E) {\n          return E && typeof Symbol == \"function\" && E.constructor === Symbol && E !== Symbol.prototype ? \"symbol\" : typeof E;\n        })(S);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.fill\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.number.to-fixed\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.fill\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.number.to-fixed\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var y = (y = t(\"../core/main\")) && y.__esModule ? y : { default: y }, u = function(S) {\n        if (S && S.__esModule)\n          return S;\n        if (S === null || g(S) !== \"object\" && typeof S != \"function\")\n          return { default: S };\n        var E = h();\n        if (E && E.has(S))\n          return E.get(S);\n        var A, x = {}, P = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (A in S) {\n          var M;\n          Object.prototype.hasOwnProperty.call(S, A) && ((M = P ? Object.getOwnPropertyDescriptor(S, A) : null) && (M.get || M.set) ? Object.defineProperty(x, A, M) : x[A] = S[A]);\n        }\n        return x.default = S, E && E.set(S, x), x;\n      }(t(\"../core/constants\"));\n      function h() {\n        var S;\n        return typeof WeakMap != \"function\" ? null : (S = /* @__PURE__ */ new WeakMap(), h = function() {\n          return S;\n        }, S);\n      }\n      function g(S) {\n        return (g = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(E) {\n          return m(E);\n        } : function(E) {\n          return E && typeof Symbol == \"function\" && E.constructor === Symbol && E !== Symbol.prototype ? \"symbol\" : m(E);\n        })(S);\n      }\n      function f(S, E) {\n        for (var A = 0; A < E.length; A++) {\n          var x = E[A];\n          x.enumerable = x.enumerable || !1, x.configurable = !0, \"value\" in x && (x.writable = !0), Object.defineProperty(S, x.key, x);\n        }\n      }\n      function r(S, E) {\n        var A = S.length;\n        return S[E < 0 ? E % A + A : E % A];\n      }\n      function s(S, E, A, x) {\n        var P, M, R;\n        return x ? (s.tmpPoint1 === void 0 && (s.tmpPoint1 = [], s.tmpPoint2 = []), M = s.tmpPoint1, R = s.tmpPoint2, M.x = E.x - S.x, M.y = E.y - S.y, R.x = A.x - E.x, R.y = A.y - E.y, P = M.x * R.x + M.y * R.y, M = Math.sqrt(M.x * M.x + M.y * M.y), R = Math.sqrt(R.x * R.x + R.y * R.y), Math.acos(P / (M * R)) < x) : (E[0] - S[0]) * (A[1] - S[1]) - (A[0] - S[0]) * (E[1] - S[1]) == 0;\n      }\n      function o(O, B, D, Y, J, M, R, L, F) {\n        var V = 1 - F, U = Math.pow(V, 3), W = Math.pow(V, 2), b = F * F, X = b * F, G = U * O + 3 * W * F * D + 3 * V * F * F * J + X * R, U = U * B + 3 * W * F * Y + 3 * V * F * F * M + X * L, W = O + 2 * F * (D - O) + b * (J - 2 * D + O), X = B + 2 * F * (Y - B) + b * (M - 2 * Y + B), ne = D + 2 * F * (J - D) + b * (R - 2 * J + D), b = Y + 2 * F * (M - Y) + b * (L - 2 * M + Y), O = V * O + F * D, D = V * B + F * Y, B = V * J + F * R, Y = V * M + F * L, J = 90 - 180 * Math.atan2(W - ne, X - b) / Math.PI;\n        return (ne < W || X < b) && (J += 180), { x: G, y: U, m: { x: W, y: X }, n: { x: ne, y: b }, start: { x: O, y: D }, end: { x: B, y: Y }, alpha: J };\n      }\n      function i(S, E, A, x, P, M, R, L, F) {\n        return F == null ? T(S, E, A, x, P, M, R, L) : o(S, E, A, x, P, M, R, L, function(V, G, U, W, X, ne, b, O, D) {\n          if (!(D < 0 || T(V, G, U, W, X, ne, b, O) < D)) {\n            var B, Y = 0.5, J = 1 - Y;\n            for (B = T(V, G, U, W, X, ne, b, O, J); 0.01 < Math.abs(B - D); )\n              B = T(V, G, U, W, X, ne, b, O, J += (B < D ? 1 : -1) * (Y /= 2));\n            return J;\n          }\n        }(S, E, A, x, P, M, R, L, F));\n      }\n      function l(S, E, A) {\n        for (var x, P, M, R, L, F = 0, V = 0, G = (S = function(U, W) {\n          function X(fe, ge, xe) {\n            var De, Me;\n            if (!fe)\n              return [\"C\", ge.x, ge.y, ge.x, ge.y, ge.x, ge.y];\n            switch (fe[0] in { T: 1, Q: 1 } || (ge.qx = ge.qy = null), fe[0]) {\n              case \"M\":\n                ge.X = fe[1], ge.Y = fe[2];\n                break;\n              case \"A\":\n                fe = [\"C\"].concat(a.apply(0, [ge.x, ge.y].concat(fe.slice(1))));\n                break;\n              case \"S\":\n                Me = xe === \"C\" || xe === \"S\" ? (De = 2 * ge.x - ge.bx, 2 * ge.y - ge.by) : (De = ge.x, ge.y), fe = [\"C\", De, Me].concat(fe.slice(1));\n                break;\n              case \"T\":\n                xe === \"Q\" || xe === \"T\" ? (ge.qx = 2 * ge.x - ge.qx, ge.qy = 2 * ge.y - ge.qy) : (ge.qx = ge.x, ge.qy = ge.y), fe = [\"C\"].concat(j(ge.x, ge.y, ge.qx, ge.qy, fe[1], fe[2]));\n                break;\n              case \"Q\":\n                ge.qx = fe[1], ge.qy = fe[2], fe = [\"C\"].concat(j(ge.x, ge.y, fe[1], fe[2], fe[3], fe[4]));\n                break;\n              case \"L\":\n                fe = [\"C\"].concat(p(ge.x, ge.y, fe[1], fe[2]));\n                break;\n              case \"H\":\n                fe = [\"C\"].concat(p(ge.x, ge.y, fe[1], ge.y));\n                break;\n              case \"V\":\n                fe = [\"C\"].concat(p(ge.x, ge.y, ge.x, fe[1]));\n                break;\n              case \"Z\":\n                fe = [\"C\"].concat(p(ge.x, ge.y, ge.X, ge.Y));\n            }\n            return fe;\n          }\n          function ne(fe, ge) {\n            if (7 < fe[ge].length) {\n              fe[ge].shift();\n              for (var xe = fe[ge]; xe.length; )\n                te[ge] = \"A\", B && (ce[ge] = \"A\"), fe.splice(ge++, 0, [\"C\"].concat(xe.splice(0, 6)));\n              fe.splice(ge, 1), O = Math.max(D.length, B && B.length || 0);\n            }\n          }\n          function b(fe, ge, xe, De, Me) {\n            fe && ge && fe[Me][0] === \"M\" && ge[Me][0] !== \"M\" && (ge.splice(Me, 0, [\"M\", De.x, De.y]), xe.bx = 0, xe.by = 0, xe.x = fe[Me][1], xe.y = fe[Me][2], O = Math.max(D.length, B && B.length || 0));\n          }\n          var O, D = n(U), B = W && n(W), Y = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null }, J = { x: 0, y: 0, bx: 0, by: 0, X: 0, Y: 0, qx: null, qy: null }, te = [], ce = [], re = \"\", ue = \"\";\n          O = Math.max(D.length, B && B.length || 0);\n          for (var le = 0; le < O; le++) {\n            (re = D[le] ? D[le][0] : re) !== \"C\" && (te[le] = re, le && (ue = te[le - 1])), D[le] = X(D[le], Y, ue), te[le] !== \"A\" && re === \"C\" && (te[le] = \"C\"), ne(D, le), B && ((re = B[le] ? B[le][0] : re) !== \"C\" && (ce[le] = re, le && (ue = ce[le - 1])), B[le] = X(B[le], J, ue), ce[le] !== \"A\" && re === \"C\" && (ce[le] = \"C\"), ne(B, le)), b(D, B, Y, J, le), b(B, D, J, Y, le);\n            var K = D[le], ae = B && B[le], he = K.length, _e = B && ae.length;\n            Y.x = K[he - 2], Y.y = K[he - 1], Y.bx = parseFloat(K[he - 4]) || Y.x, Y.by = parseFloat(K[he - 3]) || Y.y, J.bx = B && (parseFloat(ae[_e - 4]) || J.x), J.by = B && (parseFloat(ae[_e - 3]) || J.y), J.x = B && ae[_e - 2], J.y = B && ae[_e - 1];\n          }\n          return B ? [D, B] : D;\n        }(S)).length; V < G; V++) {\n          if ((M = S[V])[0] === \"M\")\n            x = +M[1], P = +M[2];\n          else {\n            if (E < F + (R = i(x, P, M[1], M[2], M[3], M[4], M[5], M[6])) && !A)\n              return { x: (L = i(x, P, M[1], M[2], M[3], M[4], M[5], M[6], E - F)).x, y: L.y, alpha: L.alpha };\n            F += R, x = +M[5], P = +M[6];\n          }\n          M.shift();\n        }\n        return L = (L = A ? F : o(x, P, M[0], M[1], M[2], M[3], M[4], M[5], 1)).alpha ? { x: L.x, y: L.y, alpha: L.alpha } : L;\n      }\n      function n(S) {\n        var E = [], A = 0, x = 0, P = 0, M = 0, R = 0;\n        if (S) {\n          S[0][0] === \"M\" && (P = A = +S[0][1], M = x = +S[0][2], R++, E[0] = [\"M\", A, x]);\n          for (var L, F, V = S.length === 3 && S[0][0] === \"M\" && S[1][0].toUpperCase() === \"R\" && S[2][0].toUpperCase() === \"Z\", G = R, U = S.length; G < U; G++) {\n            if (E.push(L = []), (F = S[G])[0] !== F[0].toUpperCase())\n              switch (L[0] = F[0].toUpperCase(), L[0]) {\n                case \"A\":\n                  L[1] = F[1], L[2] = F[2], L[3] = F[3], L[4] = F[4], L[5] = F[5], L[6] = +(F[6] + A), L[7] = +(F[7] + x);\n                  break;\n                case \"V\":\n                  L[1] = +F[1] + x;\n                  break;\n                case \"H\":\n                  L[1] = +F[1] + A;\n                  break;\n                case \"R\":\n                  for (var W, X = 2, ne = (W = [A, x].concat(F.slice(1))).length; X < ne; X++)\n                    W[X] = +W[X] + A, W[++X] = +W[X] + x;\n                  E.pop(), E = E.concat(c(W, V));\n                  break;\n                case \"M\":\n                  P = +F[1] + A, M = +F[2] + x;\n                  break;\n                default:\n                  for (var b = 1, O = F.length; b < O; b++)\n                    L[b] = +F[b] + (b % 2 ? A : x);\n              }\n            else if (F[0] === \"R\")\n              W = [A, x].concat(F.slice(1)), E.pop(), E = E.concat(c(W, V)), L = [\"R\"].concat(F.slice(-2));\n            else\n              for (var D = 0, B = F.length; D < B; D++)\n                L[D] = F[D];\n            switch (L[0]) {\n              case \"Z\":\n                A = P, x = M;\n                break;\n              case \"H\":\n                A = L[1];\n                break;\n              case \"V\":\n                x = L[1];\n                break;\n              case \"M\":\n                P = L[L.length - 2], M = L[L.length - 1];\n                break;\n              default:\n                A = L[L.length - 2], x = L[L.length - 1];\n            }\n          }\n        }\n        return E;\n      }\n      function a(S, E, A, x, B, te, Y, L, F, V) {\n        function G(_e, fe, ge) {\n          return { x: _e * Math.cos(ge) - fe * Math.sin(ge), y: _e * Math.sin(ge) + fe * Math.cos(ge) };\n        }\n        var U, O = Math.PI, D = 120 * O / 180, W = O / 180 * (+B || 0), X = [], ne = (V ? (le = V[0], U = V[1], re = V[2], ue = V[3]) : (S = (J = G(S, E, -W)).x, E = J.y, 1 < (ne = (b = (S - (L = (J = G(L, F, -W)).x)) / 2) * b / (A * A) + (J = (E - (F = J.y)) / 2) * J / (x * x)) && (A *= ne = Math.sqrt(ne), x *= ne), ne = A * A, ce = x * x, re = (te = (te === Y ? -1 : 1) * Math.sqrt(Math.abs((ne * ce - ne * J * J - ce * b * b) / (ne * J * J + ce * b * b)))) * A * J / x + (S + L) / 2, ue = te * -x * b / A + (E + F) / 2, le = Math.asin(((E - ue) / x).toFixed(9)), U = Math.asin(((F - ue) / x).toFixed(9)), (le = S < re ? O - le : le) < 0 && (le = 2 * O + le), (U = L < re ? O - U : U) < 0 && (U = 2 * O + U), Y && U < le && (le -= 2 * O), !Y && le < U && (U -= 2 * O)), U - le), b = (Math.abs(ne) > D && (ce = U, J = L, te = F, U = le + D * (Y && le < U ? 1 : -1), X = a(L = re + A * Math.cos(U), F = ue + x * Math.sin(U), A, x, B, 0, Y, J, te, [U, ce, re, ue])), ne = U - le, Math.cos(le)), O = Math.sin(le), D = Math.cos(U), B = Math.sin(U), Y = Math.tan(ne / 4), J = 4 / 3 * A * Y, te = 4 / 3 * x * Y, ce = [S, E], re = [S + J * O, E - te * b], ue = [L + J * B, F - te * D], le = [L, F];\n        if (re[0] = 2 * ce[0] - re[0], re[1] = 2 * ce[1] - re[1], V)\n          return [re, ue, le].concat(X);\n        for (var K = [], ae = 0, he = (X = [re, ue, le].concat(X).join().split(\",\")).length; ae < he; ae++)\n          K[ae] = ae % 2 ? G(X[ae - 1], X[ae], W).y : G(X[ae], X[ae + 1], W).x;\n        return K;\n      }\n      function c(S, E) {\n        for (var A = [], x = 0, P = S.length; x < P - 2 * !E; x += 2) {\n          var M = [{ x: +S[x - 2], y: +S[x - 1] }, { x: +S[x], y: +S[x + 1] }, { x: +S[x + 2], y: +S[x + 3] }, { x: +S[x + 4], y: +S[x + 5] }];\n          E ? x ? P - 4 === x ? M[3] = { x: +S[0], y: +S[1] } : P - 2 === x && (M[2] = { x: +S[0], y: +S[1] }, M[3] = { x: +S[2], y: +S[3] }) : M[0] = { x: +S[P - 2], y: +S[P - 1] } : P - 4 === x ? M[3] = M[2] : x || (M[0] = { x: +S[x], y: +S[x + 1] }), A.push([\"C\", (-M[0].x + 6 * M[1].x + M[2].x) / 6, (-M[0].y + 6 * M[1].y + M[2].y) / 6, (M[1].x + 6 * M[2].x - M[3].x) / 6, (M[1].y + 6 * M[2].y - M[3].y) / 6, M[2].x, M[2].y]);\n        }\n        return A;\n      }\n      function p(S, E, A, x) {\n        return [S, E, A, x, A, x];\n      }\n      function j(S, E, A, x, P, M) {\n        return [1 / 3 * S + 2 / 3 * A, 1 / 3 * E + 2 / 3 * x, 1 / 3 * P + 2 / 3 * A, 1 / 3 * M + 2 / 3 * x, P, M];\n      }\n      function T(S, E, A, x, P, M, R, L, F) {\n        for (var V = (F = 1 < (F = F ?? 1) ? 1 : F < 0 ? 0 : F) / 2, G = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816], U = 0, W = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472], X = 0; X < 12; X++) {\n          var b = V * G[X] + V, ne = _(b, S, A, P, R), b = _(b, E, x, M, L);\n          U += W[X] * Math.sqrt(ne * ne + b * b);\n        }\n        return V * U;\n      }\n      function _(S, E, A, x, P) {\n        return S * (S * (-3 * E + 9 * A - 9 * x + 3 * P) + 6 * E - 12 * A + 6 * x) - 3 * E + 3 * A;\n      }\n      y.default.Font = function() {\n        function S(x) {\n          if (!(this instanceof S))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this.parent = x, this.cache = {}, this.font = void 0;\n        }\n        var E, A;\n        return E = S, (A = [{ key: \"textBounds\", value: function(x) {\n          var P = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 0, M = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 0, V = 3 < arguments.length ? arguments[3] : void 0, R = 4 < arguments.length ? arguments[4] : void 0, L = R && R.renderer && R.renderer._pInst || this.parent, F = L._renderer.drawingContext, V = (F.textAlign || u.LEFT, F.textBaseline || u.BASELINE, V || L._renderer._textSize);\n          if (!J) {\n            for (var G = [], U = [], W = [], X = (W[0] = [], []), ne = this._scale(V), b = L._renderer.textLeading(), O = 0, D = (this.font.forEachGlyph(x, P, M, V, R, function(re, ue, le, K) {\n              var ae = re.getMetrics();\n              re.index === 0 ? W[O += 1] = [] : (W[O].push(ue + ae.xMin * ne), W[O].push(ue + ae.xMax * ne), X.push(le + O * b + -ae.yMin * ne), X.push(le + O * b + -ae.yMax * ne));\n            }), 0 < W[O].length && (G[O] = Math.min.apply(null, W[O]), U[O] = Math.max.apply(null, W[O])), 0), B = 0; B <= O; B++) {\n              G[B] = Math.min.apply(null, W[B]), U[B] = Math.max.apply(null, W[B]);\n              var Y = U[B] - G[B];\n              D < Y && (D = Y);\n            }\n            var F = Math.min.apply(null, G), J = { x: F, y: M = Math.min.apply(null, X), h: Math.max.apply(null, X) - M, w: D, advance: F - P }, V = this._handleAlignment(L._renderer, x, J.x, J.y, J.w + J.advance);\n            J.x = V.x, J.y = V.y;\n          }\n          return J;\n        } }, { key: \"textToPoints\", value: function(x, P, M, R, L) {\n          var F = P, V = [], G = x.split(/\\r?\\n|\\r|\\n/g);\n          R = R || this.parent._renderer._textSize;\n          for (var U, W, X, ne = 0; ne < G.length; ne++) {\n            var b = 0;\n            P = F;\n            for (var O = (O = G[ne]).replace(\"\t\", \"  \"), D = this._getGlyphs(O), B = 0; B < D.length; B++) {\n              if (W = O, !((X = D)[U = B].name && X[U].name === \"space\" || W.length === X.length && W[U] === \" \"))\n                for (var Y = function(re) {\n                  for (var ue, le = [], K = 0; K < re.length; K++)\n                    re[K].type === \"M\" && (ue && le.push(ue), ue = []), ue.push(function(ae) {\n                      var he = [ae.type];\n                      return ae.type === \"M\" || ae.type === \"L\" ? he.push(ae.x, ae.y) : ae.type === \"C\" ? he.push(ae.x1, ae.y1, ae.x2, ae.y2, ae.x, ae.y) : ae.type === \"Q\" && he.push(ae.x1, ae.y1, ae.x, ae.y), he;\n                    }(re[K]));\n                  return le.push(ue), le;\n                }(D[B].getPath(P, M, R).commands), J = 0; J < Y.length; J++)\n                  for (var te = function(re, ue) {\n                    for (var ue = function(fe, ge) {\n                      if (g(fe) !== \"object\")\n                        fe = ge;\n                      else\n                        for (var xe in ge)\n                          fe[xe] === void 0 && (fe[xe] = ge[xe]);\n                      return fe;\n                    }(ue, { sampleFactor: 0.1, simplifyThreshold: 0 }), le = l(re, 0, 1), K = le / (le * ue.sampleFactor), ae = [], he = 0; he < le; he += K)\n                      ae.push(l(re, he));\n                    return ue.simplifyThreshold && function(_e) {\n                      for (var fe = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 0, ge = 0, xe = _e.length - 1; 3 < _e.length && 0 <= xe; --xe)\n                        s(r(_e, xe - 1), r(_e, xe), r(_e, xe + 1), fe) && (_e.splice(xe % _e.length, 1), ge++);\n                    }(ae, ue.simplifyThreshold), ae;\n                  }(Y[J], L), ce = 0; ce < te.length; ce++)\n                    te[ce].x += b, V.push(te[ce]);\n              b += D[B].advanceWidth * this._scale(R);\n            }\n            M += this.parent._renderer._textLeading;\n          }\n          return V;\n        } }, { key: \"_getGlyphs\", value: function(x) {\n          return this.font.stringToGlyphs(x);\n        } }, { key: \"_getPath\", value: function(x, F, M, R) {\n          var L = (R && R.renderer && R.renderer._pInst || this.parent)._renderer, F = this._handleAlignment(L, x, F, M);\n          return this.font.getPath(x, F.x, F.y, L._textSize, R);\n        } }, { key: \"_getPathData\", value: function(x, P, M, R) {\n          var L = 3;\n          return typeof x == \"string\" && 2 < arguments.length ? x = this._getPath(x, P, M, R) : g(P) === \"object\" && (R = P), R && typeof R.decimals == \"number\" && (L = R.decimals), x.toPathData(L);\n        } }, { key: \"_getSVG\", value: function(x, P, M, R) {\n          var L = 3;\n          return typeof x == \"string\" && 2 < arguments.length ? x = this._getPath(x, P, M, R) : g(P) === \"object\" && (R = P), R && (typeof R.decimals == \"number\" && (L = R.decimals), typeof R.strokeWidth == \"number\" && (x.strokeWidth = R.strokeWidth), R.fill !== void 0 && (x.fill = R.fill), R.stroke !== void 0 && (x.stroke = R.stroke)), x.toSVG(L);\n        } }, { key: \"_renderPath\", value: function(V, U, W, R) {\n          var L = R && R.renderer || this.parent._renderer, F = L.drawingContext, V = (g(V) === \"object\" && V.commands ? V : this._getPath(V, U, W, R)).commands, G = (F.beginPath(), !0), U = !1, W = void 0;\n          try {\n            for (var X, ne = V[Symbol.iterator](); !(G = (X = ne.next()).done); G = !0) {\n              var b = X.value;\n              b.type === \"M\" ? F.moveTo(b.x, b.y) : b.type === \"L\" ? F.lineTo(b.x, b.y) : b.type === \"C\" ? F.bezierCurveTo(b.x1, b.y1, b.x2, b.y2, b.x, b.y) : b.type === \"Q\" ? F.quadraticCurveTo(b.x1, b.y1, b.x, b.y) : b.type === \"Z\" && F.closePath();\n            }\n          } catch (O) {\n            U = !0, W = O;\n          } finally {\n            try {\n              G || ne.return == null || ne.return();\n            } finally {\n              if (U)\n                throw W;\n            }\n          }\n          return L._doStroke && L._strokeSet && !L._clipping && F.stroke(), L._doFill && !L._clipping && (L._fillSet || L._setFill(u._DEFAULT_TEXT_FILL), F.fill()), this;\n        } }, { key: \"_textWidth\", value: function(x, P) {\n          return this.font.getAdvanceWidth(x, P);\n        } }, { key: \"_textAscent\", value: function(x) {\n          return this.font.ascender * this._scale(x);\n        } }, { key: \"_textDescent\", value: function(x) {\n          return -this.font.descender * this._scale(x);\n        } }, { key: \"_scale\", value: function(x) {\n          return 1 / this.font.unitsPerEm * (x || this.parent._renderer._textSize);\n        } }, { key: \"_handleAlignment\", value: function(x, P, M, R, L) {\n          var F = x._textSize;\n          switch (L === void 0 && (L = this._textWidth(P, F)), x._textAlign) {\n            case u.CENTER:\n              M -= L / 2;\n              break;\n            case u.RIGHT:\n              M -= L;\n          }\n          switch (x._textBaseline) {\n            case u.TOP:\n              R += this._textAscent(F);\n              break;\n            case u.CENTER:\n              R += this._textAscent(F) / 2;\n              break;\n            case u.BOTTOM:\n              R -= this._textDescent(F);\n          }\n          return { x: M, y: R };\n        } }]) && f(E.prototype, A), S;\n      }(), t = y.default, C.default = t;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.fill\": 155, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.array.splice\": 170, \"core-js/modules/es.function.name\": 173, \"core-js/modules/es.number.to-fixed\": 180, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 319: [function(t, H, C) {\n      t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.array-buffer.constructor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.array-buffer.constructor\"), t(\"core-js/modules/es.object.to-string\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t }, t.default.prototype.append = function(m, y) {\n        return m.push(y), m;\n      }, t.default.prototype.arrayCopy = function(m, y, u, h, g) {\n        var f, r;\n        m = g !== void 0 ? (r = Math.min(g, m.length), f = h, m.slice(y, r + y)) : (r = u !== void 0 ? (r = u, Math.min(r, m.length)) : m.length, u = y, m.slice(f = 0, r)), Array.prototype.splice.apply(u, [f, r].concat(m));\n      }, t.default.prototype.concat = function(m, y) {\n        return m.concat(y);\n      }, t.default.prototype.reverse = function(m) {\n        return m.reverse();\n      }, t.default.prototype.shorten = function(m) {\n        return m.pop(), m;\n      }, t.default.prototype.shuffle = function(m, y) {\n        for (var u, h, g = ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(m), f = (m = y || g ? m : m.slice()).length; 1 < f; )\n          u = this.random(0, 1) * f | 0, h = m[--f], m[f] = m[u], m[u] = h;\n        return m;\n      }, t.default.prototype.sort = function(m, h) {\n        var u = h ? m.slice(0, Math.min(h, m.length)) : m, h = h ? m.slice(Math.min(h, m.length)) : [];\n        return (u = typeof u[0] == \"string\" ? u.sort() : u.sort(function(g, f) {\n          return g - f;\n        })).concat(h);\n      }, t.default.prototype.splice = function(m, y, u) {\n        return Array.prototype.splice.apply(m, [u, 0].concat(y)), m;\n      }, t.default.prototype.subset = function(m, y, u) {\n        return u !== void 0 ? m.slice(y, y + u) : m.slice(y, m.length);\n      }, t = t.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array-buffer.constructor\": 151, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.array.splice\": 170, \"core-js/modules/es.object.to-string\": 187 }], 320: [function(t, H, C) {\n      t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.repeat\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.repeat\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      m.default.prototype.float = function(y) {\n        return y instanceof Array ? y.map(parseFloat) : parseFloat(y);\n      }, m.default.prototype.int = function(y) {\n        var u = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 10;\n        return y === 1 / 0 || y === \"Infinity\" ? 1 / 0 : y === -1 / 0 || y === \"-Infinity\" ? -1 / 0 : typeof y == \"string\" ? parseInt(y, u) : typeof y == \"number\" ? 0 | y : typeof y == \"boolean\" ? y ? 1 : 0 : y instanceof Array ? y.map(function(h) {\n          return m.default.prototype.int(h, u);\n        }) : void 0;\n      }, m.default.prototype.str = function(y) {\n        return y instanceof Array ? y.map(m.default.prototype.str) : String(y);\n      }, m.default.prototype.boolean = function(y) {\n        return typeof y == \"number\" ? y !== 0 : typeof y == \"string\" ? y.toLowerCase() === \"true\" : typeof y == \"boolean\" ? y : y instanceof Array ? y.map(m.default.prototype.boolean) : void 0;\n      }, m.default.prototype.byte = function(y) {\n        return y = m.default.prototype.int(y, 10), typeof y == \"number\" ? (y + 128) % 256 - 128 : y instanceof Array ? y.map(m.default.prototype.byte) : void 0;\n      }, m.default.prototype.char = function(y) {\n        return typeof y != \"number\" || isNaN(y) ? y instanceof Array ? y.map(m.default.prototype.char) : typeof y == \"string\" ? m.default.prototype.char(parseInt(y, 10)) : void 0 : String.fromCharCode(y);\n      }, m.default.prototype.unchar = function(y) {\n        return typeof y == \"string\" && y.length === 1 ? y.charCodeAt(0) : y instanceof Array ? y.map(m.default.prototype.unchar) : void 0;\n      }, m.default.prototype.hex = function(y, u) {\n        if (u = u ?? 8, y instanceof Array)\n          return y.map(function(g) {\n            return m.default.prototype.hex(g, u);\n          });\n        if (y === 1 / 0 || y === -1 / 0)\n          return (y === 1 / 0 ? \"F\" : \"0\").repeat(u);\n        if (typeof y == \"number\") {\n          y < 0 && (y = 4294967295 + y + 1);\n          for (var h = Number(y).toString(16).toUpperCase(); h.length < u; )\n            h = \"0\".concat(h);\n          return h = h.length >= u ? h.substring(h.length - u, h.length) : h;\n        }\n      }, m.default.prototype.unhex = function(y) {\n        return y instanceof Array ? y.map(m.default.prototype.unhex) : parseInt(\"0x\".concat(y), 16);\n      }, t = m.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.number.constructor\": 178, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.repeat\": 200 }], 321: [function(t, H, C) {\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.number.to-fixed\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.constructor\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.pad-start\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.trim\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.number.to-fixed\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.constructor\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.pad-start\"), t(\"core-js/modules/es.string.replace\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.trim\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (r = t(\"../core/main\")) && r.__esModule ? r : { default: r };\n      function y(s, o) {\n        return function(i) {\n          if (Array.isArray(i))\n            return i;\n        }(s) || function(i, l) {\n          if (Symbol.iterator in Object(i) || Object.prototype.toString.call(i) === \"[object Arguments]\") {\n            var n = [], a = !0, c = !1, p = void 0;\n            try {\n              for (var j, T = i[Symbol.iterator](); !(a = (j = T.next()).done) && (n.push(j.value), !l || n.length !== l); a = !0)\n                ;\n            } catch (_) {\n              c = !0, p = _;\n            } finally {\n              try {\n                a || T.return == null || T.return();\n              } finally {\n                if (c)\n                  throw p;\n              }\n            }\n            return n;\n          }\n        }(s, o) || function() {\n          throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n        }();\n      }\n      function u(s, o, i) {\n        var n = y(s.toString().split(\".\"), 2), l = n[0], n = n[1];\n        return i === void 0 ? (l = l.padStart(o, \"0\"), n ? l + \".\" + n : l) : (l = (s = y(s.toFixed(i).toString().split(\".\"), 2))[0], n = s[1], l = l.padStart(o, \"0\"), n === void 0 ? l : l + \".\" + n);\n      }\n      function h(n, o) {\n        var i = (n = n.toString()).indexOf(\".\"), l = i !== -1 ? n.substring(i) : \"\", n = (n = i !== -1 ? n.substring(0, i) : n).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n        if (o === 0)\n          l = \"\";\n        else if (o !== void 0)\n          if (o > l.length)\n            for (var a = o - (l += i === -1 ? \".\" : \"\").length + 1, c = 0; c < a; c++)\n              l += \"0\";\n          else\n            l = l.substring(0, o + 1);\n        return n + l;\n      }\n      function g(s) {\n        return 0 < parseFloat(s) ? \"+\".concat(s.toString()) : s.toString();\n      }\n      function f(s) {\n        return 0 <= parseFloat(s) ? \" \".concat(s.toString()) : s.toString();\n      }\n      t(\"../core/friendly_errors/validate_params\"), t(\"../core/friendly_errors/file_errors\"), t(\"../core/friendly_errors/fes_core\"), m.default.prototype.join = function(s, o) {\n        return m.default._validateParameters(\"join\", arguments), s.join(o);\n      }, m.default.prototype.match = function(s, o) {\n        return m.default._validateParameters(\"match\", arguments), s.match(o);\n      }, m.default.prototype.matchAll = function(s, o) {\n        m.default._validateParameters(\"matchAll\", arguments);\n        for (var i = new RegExp(o, \"g\"), l = i.exec(s), n = []; l !== null; )\n          n.push(l), l = i.exec(s);\n        return n;\n      }, m.default.prototype.nf = function(s, o, i) {\n        return m.default._validateParameters(\"nf\", arguments), s instanceof Array ? s.map(function(l) {\n          return u(l, o, i);\n        }) : Object.prototype.toString.call(s) === \"[object Arguments]\" ? s.length === 3 ? this.nf(s[0], s[1], s[2]) : s.length === 2 ? this.nf(s[0], s[1]) : this.nf(s[0]) : u(s, o, i);\n      }, m.default.prototype.nfc = function(s, o) {\n        return m.default._validateParameters(\"nfc\", arguments), s instanceof Array ? s.map(function(i) {\n          return h(i, o);\n        }) : h(s, o);\n      }, m.default.prototype.nfp = function() {\n        for (var s = arguments.length, o = new Array(s), i = 0; i < s; i++)\n          o[i] = arguments[i];\n        m.default._validateParameters(\"nfp\", o);\n        var l = m.default.prototype.nf.apply(this, o);\n        return l instanceof Array ? l.map(g) : g(l);\n      }, m.default.prototype.nfs = function() {\n        for (var s = arguments.length, o = new Array(s), i = 0; i < s; i++)\n          o[i] = arguments[i];\n        m.default._validateParameters(\"nfs\", o);\n        var l = m.default.prototype.nf.apply(this, o);\n        return l instanceof Array ? l.map(f) : f(l);\n      }, m.default.prototype.split = function(s, o) {\n        return m.default._validateParameters(\"split\", arguments), s.split(o);\n      }, m.default.prototype.splitTokens = function(s, o) {\n        var i, l;\n        return m.default._validateParameters(\"splitTokens\", arguments), l = o !== void 0 ? (l = /\\]/g.exec(o = o), (i = /\\[/g.exec(o)) && l ? (o = o.slice(0, l.index) + o.slice(l.index + 1), i = /\\[/g.exec(o), o = o.slice(0, i.index) + o.slice(i.index + 1), new RegExp(\"[\\\\[\".concat(o, \"\\\\]]\"), \"g\")) : l ? (o = o.slice(0, l.index) + o.slice(l.index + 1), new RegExp(\"[\".concat(o, \"\\\\]]\"), \"g\")) : i ? (o = o.slice(0, i.index) + o.slice(i.index + 1), new RegExp(\"[\".concat(o, \"\\\\[]\"), \"g\")) : new RegExp(\"[\".concat(o, \"]\"), \"g\")) : /\\s/g, s.split(l).filter(function(n) {\n          return n;\n        });\n      }, m.default.prototype.trim = function(s) {\n        return m.default._validateParameters(\"trim\", arguments), s instanceof Array ? s.map(this.trim) : s.trim();\n      };\n      var r = m.default;\n      C.default = r;\n    }, { \"../core/friendly_errors/fes_core\": 271, \"../core/friendly_errors/file_errors\": 272, \"../core/friendly_errors/validate_params\": 275, \"../core/main\": 280, \"core-js/modules/es.array.filter\": 156, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.number.to-fixed\": 180, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.constructor\": 191, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.match\": 198, \"core-js/modules/es.string.pad-start\": 199, \"core-js/modules/es.string.replace\": 201, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.string.trim\": 206, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.iterator\": 243 }], 322: [function(t, H, C) {\n      Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t }, t.default.prototype.day = function() {\n        return (/* @__PURE__ */ new Date()).getDate();\n      }, t.default.prototype.hour = function() {\n        return (/* @__PURE__ */ new Date()).getHours();\n      }, t.default.prototype.minute = function() {\n        return (/* @__PURE__ */ new Date()).getMinutes();\n      }, t.default.prototype.millis = function() {\n        return this._millisStart === -1 ? 0 : window.performance.now() - this._millisStart;\n      }, t.default.prototype.month = function() {\n        return (/* @__PURE__ */ new Date()).getMonth() + 1;\n      }, t.default.prototype.second = function() {\n        return (/* @__PURE__ */ new Date()).getSeconds();\n      }, t.default.prototype.year = function() {\n        return (/* @__PURE__ */ new Date()).getFullYear();\n      }, t = t.default, C.default = t;\n    }, { \"../core/main\": 280 }], 323: [function(t, H, C) {\n      function m(s) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(o) {\n          return typeof o;\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n        })(s);\n      }\n      function y(s) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(o) {\n          return m(o);\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : m(o);\n        })(s);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.math.hypot\"), t(\"core-js/modules/es.math.sign\"), t(\"core-js/modules/es.number.to-fixed\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.math.hypot\"), t(\"core-js/modules/es.math.sign\"), t(\"core-js/modules/es.number.to-fixed\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (r = t(\"../core/main\")) && r.__esModule ? r : { default: r }, h = (t(\"./p5.Geometry\"), function(s) {\n        if (s && s.__esModule)\n          return s;\n        if (s === null || y(s) !== \"object\" && typeof s != \"function\")\n          return { default: s };\n        var o = g();\n        if (o && o.has(s))\n          return o.get(s);\n        var i, l = {}, n = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (i in s) {\n          var a;\n          Object.prototype.hasOwnProperty.call(s, i) && ((a = n ? Object.getOwnPropertyDescriptor(s, i) : null) && (a.get || a.set) ? Object.defineProperty(l, i, a) : l[i] = s[i]);\n        }\n        return l.default = s, o && o.set(s, l), l;\n      }(t(\"../core/constants\")));\n      function g() {\n        var s;\n        return typeof WeakMap != \"function\" ? null : (s = /* @__PURE__ */ new WeakMap(), g = function() {\n          return s;\n        }, s);\n      }\n      u.default.prototype.beginGeometry = function() {\n        return this._renderer.beginGeometry();\n      }, u.default.prototype.endGeometry = function() {\n        return this._renderer.endGeometry();\n      }, u.default.prototype.buildGeometry = function(s) {\n        return this._renderer.buildGeometry(s);\n      }, u.default.prototype.freeGeometry = function(s) {\n        this._renderer._freeBuffers(s.gid);\n      }, u.default.prototype.plane = function() {\n        var s, o = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 50, i = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : o, l = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 1, n = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : 1, a = (this._assert3d(\"plane\"), u.default._validateParameters(\"plane\", arguments), \"plane|\".concat(l, \"|\").concat(n));\n        return this._renderer.geometryInHash(a) || ((s = new u.default.Geometry(l, n, function() {\n          for (var c, p, j = 0; j <= this.detailY; j++)\n            for (var T = j / this.detailY, _ = 0; _ <= this.detailX; _++)\n              c = _ / this.detailX, p = new u.default.Vector(c - 0.5, T - 0.5, 0), this.vertices.push(p), this.uvs.push(c, T);\n        })).computeFaces().computeNormals(), l <= 1 && n <= 1 ? s._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log(\"Cannot draw stroke on plane objects with more than 1 detailX or 1 detailY\"), this._renderer.createBuffers(a, s)), this._renderer.drawBuffersScaled(a, o, i, 1), this;\n      }, u.default.prototype.box = function(s, o, i, l, n) {\n        this._assert3d(\"box\"), u.default._validateParameters(\"box\", arguments), s === void 0 && (s = 50), o === void 0 && (o = s), i === void 0 && (i = o);\n        var a, c = this._renderer.attributes && this._renderer.attributes.perPixelLighting, c = (n === void 0 && (n = c ? 1 : 4), \"box|\".concat(l = l === void 0 ? c ? 1 : 4 : l, \"|\").concat(n));\n        return this._renderer.geometryInHash(c) || ((a = new u.default.Geometry(l, n, function() {\n          var p = this;\n          this.edges = [[0, 1], [1, 3], [3, 2], [6, 7], [8, 9], [9, 11], [14, 15], [16, 17], [17, 19], [18, 19], [20, 21], [22, 23]], [[0, 4, 2, 6], [1, 3, 5, 7], [0, 1, 4, 5], [2, 6, 3, 7], [0, 2, 1, 3], [4, 5, 6, 7]].forEach(function(j, T) {\n            for (var T = 4 * T, _ = 0; _ < 4; _++) {\n              var S = j[_], S = new u.default.Vector((2 * (1 & S) - 1) / 2, ((2 & S) - 1) / 2, ((4 & S) / 2 - 1) / 2);\n              p.vertices.push(S), p.uvs.push(1 & _, (2 & _) / 2);\n            }\n            p.faces.push([T, 1 + T, 2 + T]), p.faces.push([2 + T, 1 + T, 3 + T]);\n          });\n        })).computeNormals(), l <= 4 && n <= 4 ? a._edgesToVertices() : this._renderer._doStroke && console.log(\"Cannot draw stroke on box objects with more than 4 detailX or 4 detailY\"), this._renderer.createBuffers(c, a)), this._renderer.drawBuffersScaled(c, s, o, i), this;\n      }, u.default.prototype.sphere = function() {\n        var s = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 50, o = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : 24, i = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 16;\n        return this._assert3d(\"sphere\"), u.default._validateParameters(\"sphere\", arguments), this.ellipsoid(s, s, s, o, i), this;\n      };\n      function f(s, o, i, l, n, a, c) {\n        s = s <= 0 ? 1 : s, o = o < 0 ? 0 : o, i = i <= 0 ? s : i, l = l < 3 ? 3 : l;\n        for (var p, j, T = (a = a === void 0 || a) ? -2 : 0, _ = (n = n < 1 ? 1 : n) + ((c = c === void 0 ? o !== 0 : c) ? 2 : 0), S = Math.atan2(s - o, i), E = Math.sin(S), A = Math.cos(S), x = T; x <= _; ++x) {\n          var P = x / n, M = i * P, R = void 0, R = x < 0 ? (P = M = 0, s) : n < x ? (M = i, P = 1, o) : s + (o - s) * P;\n          for (x !== -2 && x !== n + 2 || (R = 0), M -= i / 2, p = 0; p < l; ++p) {\n            var L = p / (l - 1), V = 2 * Math.PI * L, F = Math.sin(V), V = Math.cos(V), G = (this.vertices.push(new u.default.Vector(F * R, M, V * R)), void 0), G = x < 0 ? new u.default.Vector(0, -1, 0) : n < x && o ? new u.default.Vector(0, 1, 0) : new u.default.Vector(F * A, E, V * A);\n            this.vertexNormals.push(G), this.uvs.push(L, P);\n          }\n        }\n        var U = 0;\n        if (a) {\n          for (j = 0; j < l; ++j)\n            this.faces.push([U + j, U + l + (j + 1) % l, U + l + j]);\n          U += 2 * l;\n        }\n        for (x = 0; x < n; ++x) {\n          for (p = 0; p < l; ++p) {\n            var W = (p + 1) % l;\n            this.faces.push([U + p, U + W, U + l + W]), this.faces.push([U + p, U + l + W, U + l + p]);\n          }\n          U += l;\n        }\n        if (c)\n          for (U += l, p = 0; p < l; ++p)\n            this.faces.push([U + p, U + (p + 1) % l, U + l]);\n      }\n      u.default.prototype.cylinder = function() {\n        var s, o = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 50, i = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : o, l = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 24, n = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : 1, a = !(4 < arguments.length && arguments[4] !== void 0) || arguments[4], c = !(5 < arguments.length && arguments[5] !== void 0) || arguments[5], p = (this._assert3d(\"cylinder\"), u.default._validateParameters(\"cylinder\", arguments), \"cylinder|\".concat(l, \"|\").concat(n, \"|\").concat(a, \"|\").concat(c));\n        return this._renderer.geometryInHash(p) || (s = new u.default.Geometry(l, n), f.call(s, 1, 1, 1, l, n, a, c), l <= 24 && n <= 16 ? s._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log(\"Cannot draw stroke on cylinder objects with more than 24 detailX or 16 detailY\"), this._renderer.createBuffers(p, s)), this._renderer.drawBuffersScaled(p, o, i, o), this;\n      }, u.default.prototype.cone = function() {\n        var s, o = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 50, i = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : o, l = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 24, n = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : 1, a = !(4 < arguments.length && arguments[4] !== void 0) || arguments[4], c = (this._assert3d(\"cone\"), u.default._validateParameters(\"cone\", arguments), \"cone|\".concat(l, \"|\").concat(n, \"|\").concat(a));\n        return this._renderer.geometryInHash(c) || (s = new u.default.Geometry(l, n), f.call(s, 1, 0, 1, l, n, a, !1), l <= 24 && n <= 16 ? s._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log(\"Cannot draw stroke on cone objects with more than 24 detailX or 16 detailY\"), this._renderer.createBuffers(c, s)), this._renderer.drawBuffersScaled(c, o, i, o), this;\n      }, u.default.prototype.ellipsoid = function() {\n        var s, o = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 50, i = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : o, l = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : o, n = 3 < arguments.length && arguments[3] !== void 0 ? arguments[3] : 24, a = 4 < arguments.length && arguments[4] !== void 0 ? arguments[4] : 16, c = (this._assert3d(\"ellipsoid\"), u.default._validateParameters(\"ellipsoid\", arguments), \"ellipsoid|\".concat(n, \"|\").concat(a));\n        return this._renderer.geometryInHash(c) || ((s = new u.default.Geometry(n, a, function() {\n          for (var p = 0; p <= this.detailY; p++)\n            for (var j = p / this.detailY, T = Math.PI * j - Math.PI / 2, _ = Math.cos(T), S = Math.sin(T), E = 0; E <= this.detailX; E++) {\n              var A = E / this.detailX, P = 2 * Math.PI * A, x = Math.cos(P), P = Math.sin(P), P = new u.default.Vector(_ * P, S, _ * x);\n              this.vertices.push(P), this.vertexNormals.push(P), this.uvs.push(A, j);\n            }\n        })).computeFaces(), n <= 24 && a <= 24 ? s._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log(\"Cannot draw stroke on ellipsoids with more than 24 detailX or 24 detailY\"), this._renderer.createBuffers(c, s)), this._renderer.drawBuffersScaled(c, o, i, l), this;\n      }, u.default.prototype.torus = function(s, c, i, l) {\n        if (this._assert3d(\"torus\"), u.default._validateParameters(\"torus\", arguments), s === void 0)\n          s = 50;\n        else if (!s)\n          return;\n        if (c === void 0)\n          c = 10;\n        else if (!c)\n          return;\n        i === void 0 && (i = 24), l === void 0 && (l = 16);\n        var n, a = (c / s).toPrecision(4), c = \"torus|\".concat(a, \"|\").concat(i, \"|\").concat(l);\n        return this._renderer.geometryInHash(c) || ((n = new u.default.Geometry(i, l, function() {\n          for (var p = 0; p <= this.detailY; p++)\n            for (var j = p / this.detailY, T = 2 * Math.PI * j, _ = Math.cos(T), S = Math.sin(T), E = 1 + a * _, A = 0; A <= this.detailX; A++) {\n              var x = A / this.detailX, P = 2 * Math.PI * x, R = Math.cos(P), P = Math.sin(P), M = new u.default.Vector(E * R, E * P, a * S), R = new u.default.Vector(_ * R, _ * P, S);\n              this.vertices.push(M), this.vertexNormals.push(R), this.uvs.push(x, j);\n            }\n        })).computeFaces(), i <= 24 && l <= 16 ? n._makeTriangleEdges()._edgesToVertices() : this._renderer._doStroke && console.log(\"Cannot draw strokes on torus object with more than 24 detailX or 16 detailY\"), this._renderer.createBuffers(c, n)), this._renderer.drawBuffersScaled(c, s, s, s), this;\n      }, u.default.RendererGL.prototype.point = function(s, o) {\n        var i = [];\n        return i.push(new u.default.Vector(s, o, 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : 0)), this._drawPoints(i, this.immediateMode.buffers.point), this;\n      }, u.default.RendererGL.prototype.triangle = function(c) {\n        var o = c[0], i = c[1], l = c[2], n = c[3], a = c[4], c = c[5], p = (this.geometryInHash(\"tri\") || ((p = new u.default.Geometry(1, 1, function() {\n          var _ = [];\n          _.push(new u.default.Vector(0, 0, 0)), _.push(new u.default.Vector(1, 0, 0)), _.push(new u.default.Vector(0, 1, 0)), this.edges = [[0, 1], [1, 2], [2, 0]], this.vertices = _, this.faces = [[0, 1, 2]], this.uvs = [0, 0, 1, 0, 1, 1];\n        }))._edgesToVertices(), p.computeNormals(), this.createBuffers(\"tri\", p)), this.uMVMatrix.copy());\n        try {\n          var j = Math.sign(o * n - l * i + l * c - a * n + a * i - o * c), T = new u.default.Matrix([l - o, n - i, 0, 0, a - o, c - i, 0, 0, 0, 0, j, 0, o, i, 0, 1]).mult(this.uMVMatrix);\n          this.uMVMatrix = T, this.drawBuffers(\"tri\");\n        } finally {\n          this.uMVMatrix = p;\n        }\n        return this;\n      }, u.default.RendererGL.prototype.ellipse = function(s) {\n        this.arc(s[0], s[1], s[2], s[3], 0, h.TWO_PI, h.OPEN, s[4]);\n      }, u.default.RendererGL.prototype.arc = function() {\n        var s, o = arguments.length <= 0 ? void 0 : arguments[0], i = arguments.length <= 1 ? void 0 : arguments[1], l = arguments.length <= 2 ? void 0 : arguments[2], n = arguments.length <= 3 ? void 0 : arguments[3], a = arguments.length <= 4 ? void 0 : arguments[4], c = arguments.length <= 5 ? void 0 : arguments[5], p = arguments.length <= 6 ? void 0 : arguments[6], j = (arguments.length <= 7 ? void 0 : arguments[7]) || 25, T = (Math.abs(c - a) >= h.TWO_PI ? \"\".concat(_ = \"ellipse\", \"|\") : \"\".concat(_ = \"arc\", \"|\").concat(a, \"|\").concat(c, \"|\").concat(p, \"|\")).concat(j, \"|\"), _ = (this.geometryInHash(T) || ((s = new u.default.Geometry(j, 1, function() {\n          if (a.toFixed(10) !== c.toFixed(10)) {\n            p !== h.PIE && p !== void 0 || (this.vertices.push(new u.default.Vector(0.5, 0.5, 0)), this.uvs.push([0.5, 0.5]));\n            for (var S = 0; S <= j; S++) {\n              var A = (c - a) * (S / j) + a, E = 0.5 + Math.cos(A) / 2, A = 0.5 + Math.sin(A) / 2;\n              this.vertices.push(new u.default.Vector(E, A, 0)), this.uvs.push([E, A]), S < j - 1 && (this.faces.push([0, S + 1, S + 2]), this.edges.push([S + 1, S + 2]));\n            }\n            switch (p) {\n              case h.PIE:\n                this.faces.push([0, this.vertices.length - 2, this.vertices.length - 1]), this.edges.push([0, 1]), this.edges.push([this.vertices.length - 2, this.vertices.length - 1]), this.edges.push([0, this.vertices.length - 1]);\n                break;\n              case h.CHORD:\n                this.edges.push([0, 1]), this.edges.push([0, this.vertices.length - 1]);\n                break;\n              case h.OPEN:\n                this.edges.push([0, 1]);\n                break;\n              default:\n                this.faces.push([0, this.vertices.length - 2, this.vertices.length - 1]), this.edges.push([this.vertices.length - 2, this.vertices.length - 1]);\n            }\n          }\n        })).computeNormals(), j <= 50 ? s._edgesToVertices(s) : this._doStroke && console.log(\"Cannot apply a stroke to an \".concat(_, \" with more than 50 detail\")), this.createBuffers(T, s)), this.uMVMatrix.copy());\n        try {\n          this.uMVMatrix.translate([o, i, 0]), this.uMVMatrix.scale(l, n, 1), this.drawBuffers(T);\n        } finally {\n          this.uMVMatrix = _;\n        }\n        return this;\n      }, u.default.RendererGL.prototype.rect = function(s) {\n        var o = s[0], i = s[1], l = s[2], n = s[3];\n        if (s[4] === void 0) {\n          var p = this._pInst._glAttributes.perPixelLighting, a = s[4] || (p ? 1 : 24), c = s[5] || (p ? 1 : 16), p = \"rect|\".concat(a, \"|\").concat(c), j = (this.geometryInHash(p) || ((j = new u.default.Geometry(a, c, function() {\n            for (var G = 0; G <= this.detailY; G++)\n              for (var U = G / this.detailY, W = 0; W <= this.detailX; W++) {\n                var X = W / this.detailX, ne = new u.default.Vector(X, U, 0);\n                this.vertices.push(ne), this.uvs.push(X, U);\n              }\n            0 < a && 0 < c && (this.edges = [[0, a], [a, (a + 1) * (c + 1) - 1], [(a + 1) * (c + 1) - 1, (a + 1) * c], [(a + 1) * c, 0]]);\n          })).computeFaces().computeNormals()._edgesToVertices(), this.createBuffers(p, j)), this.uMVMatrix.copy());\n          try {\n            this.uMVMatrix.translate([o, i, 0]), this.uMVMatrix.scale(l, n, 1), this.drawBuffers(p);\n          } finally {\n            this.uMVMatrix = j;\n          }\n        } else {\n          var p = s[4], j = s[5] === void 0 ? p : s[5], T = s[6] === void 0 ? j : s[6], s = s[7] === void 0 ? T : s[7], P = l, _ = n, A = ((P += o) < o && (A = o, o = P, P = A), (_ += i) < i && (A = i, i = _, _ = A), Math.min((P - o) / 2, (_ - i) / 2)), S = (A < p && (p = A), A < j && (j = A), A < T && (T = A), A < s && (s = A), o), E = i, A = P, o = _, x = (this.beginShape(), j !== 0 ? (this.vertex(A - j, E), this.quadraticVertex(A, E, A, E + j)) : this.vertex(A, E), T !== 0 ? (this.vertex(A, o - T), this.quadraticVertex(A, o, A - T, o)) : this.vertex(A, o), s !== 0 ? (this.vertex(S + s, o), this.quadraticVertex(S, o, S, o - s)) : this.vertex(S, o), p !== 0 ? (this.vertex(S, E + p), this.quadraticVertex(S, E, S + p, E)) : this.vertex(S, E), !(this.immediateMode.geometry.uvs.length = 0)), i = !1, P = void 0;\n          try {\n            for (var M, R = this.immediateMode.geometry.vertices[Symbol.iterator](); !(x = (M = R.next()).done); x = !0) {\n              var L = M.value, F = (L.x - S) / l, V = (L.y - E) / n;\n              this.immediateMode.geometry.uvs.push(F, V);\n            }\n          } catch (b) {\n            i = !0, P = b;\n          } finally {\n            try {\n              x || R.return == null || R.return();\n            } finally {\n              if (i)\n                throw P;\n            }\n          }\n          this.endShape(h.CLOSE);\n        }\n        return this;\n      }, u.default.RendererGL.prototype.quad = function(s, o, i, l, n, a, c, p, j, T, _, S) {\n        var E = 12 < arguments.length && arguments[12] !== void 0 ? arguments[12] : 2, A = 13 < arguments.length && arguments[13] !== void 0 ? arguments[13] : 2, x = \"quad|\".concat(s, \"|\").concat(o, \"|\").concat(i, \"|\").concat(l, \"|\").concat(n, \"|\").concat(a, \"|\").concat(c, \"|\").concat(p, \"|\").concat(j, \"|\").concat(T, \"|\").concat(_, \"|\").concat(S, \"|\").concat(E, \"|\").concat(A);\n        if (!this.geometryInHash(x)) {\n          var P = new u.default.Geometry(E, A, function() {\n            for (var W = 1 / (this.detailX - 1), X = 1 / (this.detailY - 1), ne = 0; ne < this.detailY; ne++)\n              for (var b = 0; b < this.detailX; b++) {\n                var O = b * W, D = ne * X;\n                this.vertices.push(new u.default.Vector((1 - O) * ((1 - D) * s + D * T) + O * ((1 - D) * l + D * c), (1 - O) * ((1 - D) * o + D * _) + O * ((1 - D) * n + D * p), (1 - O) * ((1 - D) * i + D * S) + O * ((1 - D) * a + D * j))), this.uvs.push([O, D]);\n              }\n          });\n          P.faces = [];\n          for (var M = 0; M < A - 1; M++)\n            for (var R = 0; R < E - 1; R++) {\n              var L = R + M * E, F = R + 1 + (M + 1) * E, V = R + (M + 1) * E;\n              P.faces.push([L, R + 1 + M * E, F]), P.faces.push([L, F, V]);\n            }\n          P.computeNormals();\n          for (var G = [P.edges.length = 0, 2, 3, 1], U = 0; U < G.length; U++)\n            P.edges.push([G[U], G[(U + 1) % G.length]]);\n          P._edgesToVertices(), this.createBuffers(x, P);\n        }\n        return this.drawBuffers(x), this;\n      }, u.default.RendererGL.prototype.bezier = function(s, o, i, l, n, a, c, p, j, T, _, S) {\n        arguments.length === 8 && (_ = p, T = c, p = a, c = n, n = l, l = i, i = a = j = S = 0);\n        var E = this._pInst._bezierDetail || 20;\n        this.beginShape();\n        for (var A = 0; A <= E; A++) {\n          var x = Math.pow(1 - A / E, 3), P = A / E * 3 * Math.pow(1 - A / E, 2), M = 3 * Math.pow(A / E, 2) * (1 - A / E), R = Math.pow(A / E, 3);\n          this.vertex(s * x + l * P + c * M + T * R, o * x + n * P + p * M + _ * R, i * x + a * P + j * M + S * R);\n        }\n        return this.endShape(), this;\n      }, u.default.RendererGL.prototype.curve = function(s, o, i, l, n, a, c, p, j, T, _, S) {\n        arguments.length === 8 && (T = c, _ = p, c = n, p = l, n = l = i, i = a = j = S = 0);\n        var E = this._pInst._curveDetail;\n        this.beginShape();\n        for (var A = 0; A <= E; A++) {\n          var x = 0.5 * Math.pow(A / E, 3), P = 0.5 * Math.pow(A / E, 2), M = A / E * 0.5;\n          this.vertex(x * (3 * l - s - 3 * c + T) + P * (2 * s - 5 * l + 4 * c - T) + M * (-s + c) + 2 * l * 0.5, x * (3 * n - o - 3 * p + _) + P * (2 * o - 5 * n + 4 * p - _) + M * (-o + p) + 2 * n * 0.5, x * (3 * a - i - 3 * j + S) + P * (2 * i - 5 * a + 4 * j - S) + M * (-i + j) + 2 * a * 0.5);\n        }\n        return this.endShape(), this;\n      }, u.default.RendererGL.prototype.line = function() {\n        return arguments.length === 6 ? (this.beginShape(h.LINES), this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 2 ? void 0 : arguments[2]), this.vertex(arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 4 ? void 0 : arguments[4], arguments.length <= 5 ? void 0 : arguments[5]), this.endShape()) : arguments.length === 4 && (this.beginShape(h.LINES), this.vertex(arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 1 ? void 0 : arguments[1], 0), this.vertex(arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 3 ? void 0 : arguments[3], 0), this.endShape()), this;\n      }, u.default.RendererGL.prototype.bezierVertex = function() {\n        if (this.immediateMode._bezierVertex.length === 0)\n          throw Error(\"vertex() must be used once before calling bezierVertex()\");\n        var s, o, i, l, n, a, c = [], p = [], j = arguments.length;\n        if (this._lookUpTableBezier.length === 0 || this._lutBezierDetail !== this._pInst._curveDetail) {\n          this._lookUpTableBezier = [], this._lutBezierDetail = this._pInst._curveDetail;\n          for (var T = 1 / this._lutBezierDetail, _ = 0, S = 1, E = 0; _ < 1; ) {\n            if (a = parseFloat(_.toFixed(6)), this._lookUpTableBezier[E] = this._bezierCoefficients(a), S.toFixed(6) === T.toFixed(6)) {\n              a = parseFloat(S.toFixed(6)) + parseFloat(_.toFixed(6)), ++E, this._lookUpTableBezier[E] = this._bezierCoefficients(a);\n              break;\n            }\n            _ += T, S -= T, ++E;\n          }\n        }\n        for (var A = this._lookUpTableBezier.length, x = [], P = 0; P < 4; P++)\n          x.push([]);\n        x[0] = this.immediateMode.geometry.vertexColors.slice(-4), x[3] = this.curFillColor.slice();\n        var M = [];\n        for (P = 0; P < 4; P++)\n          M.push([]);\n        if (M[0] = this.immediateMode.geometry.vertexStrokeColors.slice(-4), M[3] = this.curStrokeColor.slice(), j === 6) {\n          this.isBezier = !0;\n          var c = [this.immediateMode._bezierVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 4 ? void 0 : arguments[4]], p = [this.immediateMode._bezierVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 5 ? void 0 : arguments[5]], R = Math.hypot(c[0] - c[1], p[0] - p[1]), F = Math.hypot(c[1] - c[2], p[1] - p[2]), L = Math.hypot(c[2] - c[3], p[2] - p[3]), F = R + F + L;\n          for (R /= F, L /= F, n = 0; n < 4; n++)\n            x[1].push(x[0][n] * (1 - R) + x[3][n] * R), x[2].push(x[0][n] * L + x[3][n] * (1 - L)), M[1].push(M[0][n] * (1 - R) + M[3][n] * R), M[2].push(M[0][n] * L + M[3][n] * (1 - L));\n          for (l = 0; l < A; l++) {\n            for (this.curFillColor = [0, 0, 0, 0], this.curStrokeColor = [0, 0, 0, 0], P = s = o = 0; P < 4; P++) {\n              for (n = 0; n < 4; n++)\n                this.curFillColor[n] += this._lookUpTableBezier[l][P] * x[P][n], this.curStrokeColor[n] += this._lookUpTableBezier[l][P] * M[P][n];\n              s += c[P] * this._lookUpTableBezier[l][P], o += p[P] * this._lookUpTableBezier[l][P];\n            }\n            this.vertex(s, o);\n          }\n          this.curFillColor = x[3], this.curStrokeColor = M[3], this.immediateMode._bezierVertex[0] = arguments.length <= 4 ? void 0 : arguments[4], this.immediateMode._bezierVertex[1] = arguments.length <= 5 ? void 0 : arguments[5];\n        } else if (j === 9) {\n          this.isBezier = !0, c = [this.immediateMode._bezierVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 3 ? void 0 : arguments[3], arguments.length <= 6 ? void 0 : arguments[6]], p = [this.immediateMode._bezierVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 4 ? void 0 : arguments[4], arguments.length <= 7 ? void 0 : arguments[7]];\n          var V = [this.immediateMode._bezierVertex[2], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 5 ? void 0 : arguments[5], arguments.length <= 8 ? void 0 : arguments[8]], G = Math.hypot(c[0] - c[1], p[0] - p[1], V[0] - V[1]), F = Math.hypot(c[1] - c[2], p[1] - p[2], V[1] - V[2]), U = Math.hypot(c[2] - c[3], p[2] - p[3], V[2] - V[3]), j = G + F + U;\n          for (G /= j, U /= j, n = 0; n < 4; n++)\n            x[1].push(x[0][n] * (1 - G) + x[3][n] * G), x[2].push(x[0][n] * U + x[3][n] * (1 - U)), M[1].push(M[0][n] * (1 - G) + M[3][n] * G), M[2].push(M[0][n] * U + M[3][n] * (1 - U));\n          for (l = 0; l < A; l++) {\n            for (this.curFillColor = [0, 0, 0, 0], this.curStrokeColor = [0, 0, 0, 0], P = s = o = i = 0; P < 4; P++) {\n              for (n = 0; n < 4; n++)\n                this.curFillColor[n] += this._lookUpTableBezier[l][P] * x[P][n], this.curStrokeColor[n] += this._lookUpTableBezier[l][P] * M[P][n];\n              s += c[P] * this._lookUpTableBezier[l][P], o += p[P] * this._lookUpTableBezier[l][P], i += V[P] * this._lookUpTableBezier[l][P];\n            }\n            this.vertex(s, o, i);\n          }\n          this.curFillColor = x[3], this.curStrokeColor = M[3], this.immediateMode._bezierVertex[0] = arguments.length <= 6 ? void 0 : arguments[6], this.immediateMode._bezierVertex[1] = arguments.length <= 7 ? void 0 : arguments[7], this.immediateMode._bezierVertex[2] = arguments.length <= 8 ? void 0 : arguments[8];\n        }\n      }, u.default.RendererGL.prototype.quadraticVertex = function() {\n        if (this.immediateMode._quadraticVertex.length === 0)\n          throw Error(\"vertex() must be used once before calling quadraticVertex()\");\n        var s, o, i, l, n, a, c = [], p = [], j = arguments.length;\n        if (this._lookUpTableQuadratic.length === 0 || this._lutQuadraticDetail !== this._pInst._curveDetail) {\n          this._lookUpTableQuadratic = [], this._lutQuadraticDetail = this._pInst._curveDetail;\n          for (var T = 1 / this._lutQuadraticDetail, _ = 0, S = 1, E = 0; _ < 1; ) {\n            if (a = parseFloat(_.toFixed(6)), this._lookUpTableQuadratic[E] = this._quadraticCoefficients(a), S.toFixed(6) === T.toFixed(6)) {\n              a = parseFloat(S.toFixed(6)) + parseFloat(_.toFixed(6)), ++E, this._lookUpTableQuadratic[E] = this._quadraticCoefficients(a);\n              break;\n            }\n            _ += T, S -= T, ++E;\n          }\n        }\n        for (var A = this._lookUpTableQuadratic.length, x = [], P = 0; P < 3; P++)\n          x.push([]);\n        x[0] = this.immediateMode.geometry.vertexColors.slice(-4), x[2] = this.curFillColor.slice();\n        var M = [];\n        for (P = 0; P < 3; P++)\n          M.push([]);\n        if (M[0] = this.immediateMode.geometry.vertexStrokeColors.slice(-4), M[2] = this.curStrokeColor.slice(), j === 4) {\n          this.isQuadratic = !0;\n          var c = [this.immediateMode._quadraticVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 2 ? void 0 : arguments[2]], p = [this.immediateMode._quadraticVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 3 ? void 0 : arguments[3]], R = Math.hypot(c[0] - c[1], p[0] - p[1]);\n          for (R /= R + Math.hypot(c[1] - c[2], p[1] - p[2]), n = 0; n < 4; n++)\n            x[1].push(x[0][n] * (1 - R) + x[2][n] * R), M[1].push(M[0][n] * (1 - R) + M[2][n] * R);\n          for (l = 0; l < A; l++) {\n            for (this.curFillColor = [0, 0, 0, 0], this.curStrokeColor = [0, 0, 0, 0], P = s = o = 0; P < 3; P++) {\n              for (n = 0; n < 4; n++)\n                this.curFillColor[n] += this._lookUpTableQuadratic[l][P] * x[P][n], this.curStrokeColor[n] += this._lookUpTableQuadratic[l][P] * M[P][n];\n              s += c[P] * this._lookUpTableQuadratic[l][P], o += p[P] * this._lookUpTableQuadratic[l][P];\n            }\n            this.vertex(s, o);\n          }\n          this.curFillColor = x[2], this.curStrokeColor = M[2], this.immediateMode._quadraticVertex[0] = arguments.length <= 2 ? void 0 : arguments[2], this.immediateMode._quadraticVertex[1] = arguments.length <= 3 ? void 0 : arguments[3];\n        } else if (j === 6) {\n          this.isQuadratic = !0, c = [this.immediateMode._quadraticVertex[0], arguments.length <= 0 ? void 0 : arguments[0], arguments.length <= 3 ? void 0 : arguments[3]], p = [this.immediateMode._quadraticVertex[1], arguments.length <= 1 ? void 0 : arguments[1], arguments.length <= 4 ? void 0 : arguments[4]];\n          var L = [this.immediateMode._quadraticVertex[2], arguments.length <= 2 ? void 0 : arguments[2], arguments.length <= 5 ? void 0 : arguments[5]], F = Math.hypot(c[0] - c[1], p[0] - p[1], L[0] - L[1]);\n          for (F /= F + Math.hypot(c[1] - c[2], p[1] - p[2], L[1] - L[2]), n = 0; n < 4; n++)\n            x[1].push(x[0][n] * (1 - F) + x[2][n] * F), M[1].push(M[0][n] * (1 - F) + M[2][n] * F);\n          for (l = 0; l < A; l++) {\n            for (this.curFillColor = [0, 0, 0, 0], this.curStrokeColor = [0, 0, 0, 0], P = s = o = i = 0; P < 3; P++) {\n              for (n = 0; n < 4; n++)\n                this.curFillColor[n] += this._lookUpTableQuadratic[l][P] * x[P][n], this.curStrokeColor[n] += this._lookUpTableQuadratic[l][P] * M[P][n];\n              s += c[P] * this._lookUpTableQuadratic[l][P], o += p[P] * this._lookUpTableQuadratic[l][P], i += L[P] * this._lookUpTableQuadratic[l][P];\n            }\n            this.vertex(s, o, i);\n          }\n          this.curFillColor = x[2], this.curStrokeColor = M[2], this.immediateMode._quadraticVertex[0] = arguments.length <= 3 ? void 0 : arguments[3], this.immediateMode._quadraticVertex[1] = arguments.length <= 4 ? void 0 : arguments[4], this.immediateMode._quadraticVertex[2] = arguments.length <= 5 ? void 0 : arguments[5];\n        }\n      }, u.default.RendererGL.prototype.curveVertex = function() {\n        var s, o, i, l, n, a, c = [], p = [], j = arguments.length;\n        if (this._lookUpTableBezier.length === 0 || this._lutBezierDetail !== this._pInst._curveDetail) {\n          this._lookUpTableBezier = [], this._lutBezierDetail = this._pInst._curveDetail;\n          for (var T = 1 / this._lutBezierDetail, _ = 0, S = 1, E = 0; _ < 1; ) {\n            if (a = parseFloat(_.toFixed(6)), this._lookUpTableBezier[E] = this._bezierCoefficients(a), S.toFixed(6) === T.toFixed(6)) {\n              a = parseFloat(S.toFixed(6)) + parseFloat(_.toFixed(6)), ++E, this._lookUpTableBezier[E] = this._bezierCoefficients(a);\n              break;\n            }\n            _ += T, S -= T, ++E;\n          }\n        }\n        var A = this._lookUpTableBezier.length;\n        if (j === 2) {\n          if (this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]), this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]), this.immediateMode._curveVertex.length === 8) {\n            for (this.isCurve = !0, c = this._bezierToCatmull([this.immediateMode._curveVertex[0], this.immediateMode._curveVertex[2], this.immediateMode._curveVertex[4], this.immediateMode._curveVertex[6]]), p = this._bezierToCatmull([this.immediateMode._curveVertex[1], this.immediateMode._curveVertex[3], this.immediateMode._curveVertex[5], this.immediateMode._curveVertex[7]]), n = 0; n < A; n++)\n              o = c[0] * this._lookUpTableBezier[n][0] + c[1] * this._lookUpTableBezier[n][1] + c[2] * this._lookUpTableBezier[n][2] + c[3] * this._lookUpTableBezier[n][3], i = p[0] * this._lookUpTableBezier[n][0] + p[1] * this._lookUpTableBezier[n][1] + p[2] * this._lookUpTableBezier[n][2] + p[3] * this._lookUpTableBezier[n][3], this.vertex(o, i);\n            for (n = 0; n < j; n++)\n              this.immediateMode._curveVertex.shift();\n          }\n        } else if (j === 3 && (this.immediateMode._curveVertex.push(arguments.length <= 0 ? void 0 : arguments[0]), this.immediateMode._curveVertex.push(arguments.length <= 1 ? void 0 : arguments[1]), this.immediateMode._curveVertex.push(arguments.length <= 2 ? void 0 : arguments[2]), this.immediateMode._curveVertex.length === 12)) {\n          for (this.isCurve = !0, c = this._bezierToCatmull([this.immediateMode._curveVertex[0], this.immediateMode._curveVertex[3], this.immediateMode._curveVertex[6], this.immediateMode._curveVertex[9]]), p = this._bezierToCatmull([this.immediateMode._curveVertex[1], this.immediateMode._curveVertex[4], this.immediateMode._curveVertex[7], this.immediateMode._curveVertex[10]]), s = this._bezierToCatmull([this.immediateMode._curveVertex[2], this.immediateMode._curveVertex[5], this.immediateMode._curveVertex[8], this.immediateMode._curveVertex[11]]), n = 0; n < A; n++)\n            o = c[0] * this._lookUpTableBezier[n][0] + c[1] * this._lookUpTableBezier[n][1] + c[2] * this._lookUpTableBezier[n][2] + c[3] * this._lookUpTableBezier[n][3], i = p[0] * this._lookUpTableBezier[n][0] + p[1] * this._lookUpTableBezier[n][1] + p[2] * this._lookUpTableBezier[n][2] + p[3] * this._lookUpTableBezier[n][3], l = s[0] * this._lookUpTableBezier[n][0] + s[1] * this._lookUpTableBezier[n][1] + s[2] * this._lookUpTableBezier[n][2] + s[3] * this._lookUpTableBezier[n][3], this.vertex(o, i, l);\n          for (n = 0; n < j; n++)\n            this.immediateMode._curveVertex.shift();\n        }\n      }, u.default.RendererGL.prototype.image = function(s, S, i, E, n, a, c, p, j) {\n        this._isErasing && this.blendMode(this._cachedBlendMode), this._pInst.push(), this._pInst.noLights(), this._pInst.noStroke(), this._pInst.texture(s), this._pInst.textureMode(h.NORMAL);\n        var T = 0, _ = (S <= s.width && (T = S / s.width), 1), S = (S + E <= s.width && (_ = (S + E) / s.width), 0), E = (i <= s.height && (S = i / s.height), 1);\n        i + n <= s.height && (E = (i + n) / s.height), this.beginShape(), this.vertex(a, c, 0, T, S), this.vertex(a + p, c, 0, _, S), this.vertex(a + p, c + j, 0, _, E), this.vertex(a, c + j, 0, T, E), this.endShape(h.CLOSE), this._pInst.pop(), this._isErasing && this.blendMode(h.REMOVE);\n      };\n      var r = u.default;\n      C.default = r;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"./p5.Geometry\": 332, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.math.hypot\": 175, \"core-js/modules/es.math.sign\": 177, \"core-js/modules/es.number.to-fixed\": 180, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 324: [function(t, H, C) {\n      function m(o) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(i) {\n          return typeof i;\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : typeof i;\n        })(o);\n      }\n      function y(o) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(i) {\n          return m(i);\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : m(i);\n        })(o);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.every\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.every\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.object.assign\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (s = t(\"../core/main\")) && s.__esModule ? s : { default: s }, h = function(o) {\n        if (o && o.__esModule)\n          return o;\n        if (o === null || y(o) !== \"object\" && typeof o != \"function\")\n          return { default: o };\n        var i = g();\n        if (i && i.has(o))\n          return i.get(o);\n        var l, n = {}, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (l in o) {\n          var c;\n          Object.prototype.hasOwnProperty.call(o, l) && ((c = a ? Object.getOwnPropertyDescriptor(o, l) : null) && (c.get || c.set) ? Object.defineProperty(n, l, c) : n[l] = o[l]);\n        }\n        return n.default = o, i && i.set(o, n), n;\n      }(t(\"../core/constants\"));\n      function g() {\n        var o;\n        return typeof WeakMap != \"function\" ? null : (o = /* @__PURE__ */ new WeakMap(), g = function() {\n          return o;\n        }, o);\n      }\n      function f(o) {\n        return function(i) {\n          if (Array.isArray(i)) {\n            for (var l = 0, n = new Array(i.length); l < i.length; l++)\n              n[l] = i[l];\n            return n;\n          }\n        }(o) || function(i) {\n          if (Symbol.iterator in Object(i) || Object.prototype.toString.call(i) === \"[object Arguments]\")\n            return Array.from(i);\n        }(o) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      function r(o, i) {\n        for (var l = 0; l < i.length; l++) {\n          var n = i[l];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(o, n.key, n);\n        }\n      }\n      var s = function() {\n        function o(n) {\n          if (!(this instanceof o))\n            throw new TypeError(\"Cannot call a class as a function\");\n          (this.renderer = n)._pInst.push(), this.identityMatrix = new u.default.Matrix(), n.uMVMatrix = new u.default.Matrix(), this.geometry = new u.default.Geometry(), this.geometry.gid = \"_p5_GeometryBuilder_\".concat(o.nextGeometryId), o.nextGeometryId++, this.hasTransform = !1;\n        }\n        var i, l;\n        return i = o, (l = [{ key: \"transformVertices\", value: function(n) {\n          var a = this;\n          return this.hasTransform ? n.map(function(c) {\n            return a.renderer.uMVMatrix.multiplyPoint(c);\n          }) : n;\n        } }, { key: \"transformNormals\", value: function(n) {\n          var a = this;\n          return this.hasTransform ? n.map(function(c) {\n            return a.renderer.uNMatrix.multiplyVec3(c);\n          }) : n;\n        } }, { key: \"addGeometry\", value: function(n) {\n          for (var a, c = this, p = (this.hasTransform = !this.renderer.uMVMatrix.mat4.every(function(T, _) {\n            return T === c.identityMatrix.mat4[_];\n          }), this.hasTransform && this.renderer.uNMatrix.inverseTranspose(this.renderer.uMVMatrix), this.geometry.vertices.length), j = ((a = this.geometry.vertices).push.apply(a, f(this.transformVertices(n.vertices))), (a = this.geometry.vertexNormals).push.apply(a, f(this.transformNormals(n.vertexNormals))), (a = this.geometry.uvs).push.apply(a, f(n.uvs)), this.renderer._doFill && (a = this.geometry.faces).push.apply(a, f(n.faces.map(function(T) {\n            return T.map(function(_) {\n              return _ + p;\n            });\n          }))), this.renderer._doStroke && (a = this.geometry.edges).push.apply(a, f(n.edges.map(function(T) {\n            return T.map(function(_) {\n              return _ + p;\n            });\n          }))), f(n.vertexColors)); j.length < 4 * n.vertices.length; )\n            j.push.apply(j, f(this.renderer.curFillColor));\n          (a = this.geometry.vertexColors).push.apply(a, f(j));\n        } }, { key: \"addImmediate\", value: function() {\n          var n = this.renderer.immediateMode.geometry, a = this.renderer.immediateMode.shapeMode, c = [];\n          if (this.renderer._doFill)\n            if (a === h.TRIANGLE_STRIP || a === h.QUAD_STRIP)\n              for (var p = 2; p < n.vertices.length; p++)\n                p % 2 == 0 ? c.push([p, p - 1, p - 2]) : c.push([p, p - 2, p - 1]);\n            else if (a === h.TRIANGLE_FAN)\n              for (var j = 2; j < n.vertices.length; j++)\n                c.push([0, j - 1, j]);\n            else\n              for (var T = 0; T < n.vertices.length; T += 3)\n                c.push([T, T + 1, T + 2]);\n          this.addGeometry(Object.assign({}, n, { faces: c }));\n        } }, { key: \"addRetained\", value: function(n) {\n          this.addGeometry(n.model);\n        } }, { key: \"finish\", value: function() {\n          return this.renderer._pInst.pop(), this.geometry;\n        } }]) && r(i.prototype, l), o;\n      }();\n      s.nextGeometryId = 0, C.default = s;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"core-js/modules/es.array.every\": 154, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.object.assign\": 181, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 325: [function(t, H, C) {\n      function m(r) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(s) {\n          return typeof s;\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : typeof s;\n        })(r);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.math.hypot\"), t(\"core-js/modules/es.math.sign\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.math.hypot\"), t(\"core-js/modules/es.math.sign\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var y = (f = t(\"../core/main\")) && f.__esModule ? f : { default: f }, u = function(r) {\n        if (r && r.__esModule)\n          return r;\n        if (r === null || g(r) !== \"object\" && typeof r != \"function\")\n          return { default: r };\n        var s = h();\n        if (s && s.has(r))\n          return s.get(r);\n        var o, i = {}, l = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (o in r) {\n          var n;\n          Object.prototype.hasOwnProperty.call(r, o) && ((n = l ? Object.getOwnPropertyDescriptor(r, o) : null) && (n.get || n.set) ? Object.defineProperty(i, o, n) : i[o] = r[o]);\n        }\n        return i.default = r, s && s.set(r, i), i;\n      }(t(\"../core/constants\"));\n      function h() {\n        var r;\n        return typeof WeakMap != \"function\" ? null : (r = /* @__PURE__ */ new WeakMap(), h = function() {\n          return r;\n        }, r);\n      }\n      function g(r) {\n        return (g = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(s) {\n          return m(s);\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : m(s);\n        })(r);\n      }\n      y.default.prototype.orbitControl = function(r, s, o, j) {\n        var l = this, n = (this._assert3d(\"orbitControl\"), y.default._validateParameters(\"orbitControl\", arguments), this._renderer._curCamera);\n        r === void 0 && (r = 1), s === void 0 && (s = r), o === void 0 && (o = 1), g(j) !== \"object\" && (j = {}), this.contextMenuDisabled !== !0 && (this.canvas.oncontextmenu = function() {\n          return !1;\n        }, this._setProperty(\"contextMenuDisabled\", !0)), this.wheelDefaultDisabled !== !0 && (this.canvas.onwheel = function() {\n          return !1;\n        }, this._setProperty(\"wheelDefaultDisabled\", !0));\n        var _ = j.disableTouchActions;\n        this.touchActionsDisabled === !0 || _ !== void 0 && !_ || (this.canvas.style[\"touch-action\"] = \"none\", this._setProperty(\"touchActionsDisabled\", !0));\n        var a, c, p, _ = j.freeRotation, j = _ !== void 0 && _, T = [], _ = (this.touches.forEach(function(R) {\n          l._renderer.prevTouches.forEach(function(L) {\n            R.id === L.id && (L = { x: R.x, y: R.y, px: L.x, py: L.y }, T.push(L));\n          });\n        }), this._renderer.prevTouches = this.touches, 0), S = 0, E = 0, A = 0, x = 0, P = this.height < this.width ? this.height : this.width, M = !1;\n        return 0 < T.length ? (M = 0 < T[0].x && T[0].x < this.width && 0 < T[0].y && T[0].y < this.height, T.length === 1 ? (S = -r * ((a = T[0]).x - a.px) / P, E = s * (a.y - a.py) / P) : (a = T[0], c = T[1], _ = -(Math.hypot(a.x - c.x, a.y - c.y) - Math.hypot(a.px - c.px, a.py - c.py)) * o * 4e-4, A = 0.5 * (a.x + c.x) - 0.5 * (a.px + c.px), x = 0.5 * (a.y + c.y) - 0.5 * (a.py + c.py)), 0 < this.touches.length ? M && (this._renderer.executeRotateAndMove = !0, this._renderer.executeZoom = !0) : (this._renderer.executeRotateAndMove = !1, this._renderer.executeZoom = !1)) : (M = 0 < this.mouseX && this.mouseX < this.width && 0 < this.mouseY && this.mouseY < this.height, this._mouseWheelDeltaY !== 0 ? (_ = Math.sign(this._mouseWheelDeltaY) * o, _ *= 0.01, this._mouseWheelDeltaY = 0, M && (this._renderer.executeZoom = !0)) : this._renderer.executeZoom = !1, this.mouseIsPressed ? (this.mouseButton === this.LEFT ? (S = -r * this.movedX / P, E = s * this.movedY / P) : this.mouseButton === this.RIGHT && (A = this.movedX, x = this.movedY * n.yScale), M && (this._renderer.executeRotateAndMove = !0)) : this._renderer.executeRotateAndMove = !1), _ !== 0 && this._renderer.executeZoom && (this._renderer.zoomVelocity += _), 1e-3 < Math.abs(this._renderer.zoomVelocity) ? (j ? n._orbitFree(0, 0, this._renderer.zoomVelocity) : n._orbit(0, 0, this._renderer.zoomVelocity), n.projMatrix.mat4[15] !== 0 && (n.projMatrix.mat4[0] *= Math.pow(10, -this._renderer.zoomVelocity), n.projMatrix.mat4[5] *= Math.pow(10, -this._renderer.zoomVelocity), this._renderer.uPMatrix.mat4[0] = n.projMatrix.mat4[0], this._renderer.uPMatrix.mat4[5] = n.projMatrix.mat4[5]), this._renderer.zoomVelocity *= 0.85) : this._renderer.zoomVelocity = 0, S === 0 && E === 0 || !this._renderer.executeRotateAndMove || this._renderer.rotateVelocity.add(0.6 * S, 0.6 * E), 1e-6 < this._renderer.rotateVelocity.magSq() ? (j ? n._orbitFree(-this._renderer.rotateVelocity.x, this._renderer.rotateVelocity.y, 0) : n._orbit(this._renderer.rotateVelocity.x, this._renderer.rotateVelocity.y, 0), this._renderer.rotateVelocity.mult(0.85)) : this._renderer.rotateVelocity.set(0, 0), A === 0 && x === 0 || !this._renderer.executeRotateAndMove || (a = 2 * A / this.width, c = 2 * -x / this.height, this._renderer.moveVelocity.add(0.15 * a, 0.15 * c)), 1e-6 < this._renderer.moveVelocity.magSq() ? (o = n._getLocalAxes(), r = n.eyeX - n.centerX, s = n.eyeY - n.centerY, P = n.eyeZ - n.centerZ, M = Math.sqrt(r * r + s * s + P * P), _ = new y.default.Vector(n.centerX, n.centerY, n.centerZ), _ = n.cameraMatrix.multiplyPoint(_), (_ = this._renderer.uPMatrix.multiplyAndNormalizePoint(_)).x -= this._renderer.moveVelocity.x, _.y -= this._renderer.moveVelocity.y, E = (S = this._renderer.uPMatrix.mat4)[15] === 0 ? (p = (S[8] + _.x) / S[0] * M, (S[9] + _.y) / S[5] * M) : (p = (_.x - S[12]) / S[0], (_.y - S[13]) / S[5]), n.setPosition(n.eyeX + p * o.x[0] + E * o.y[0], n.eyeY + p * o.x[1] + E * o.y[1], n.eyeZ + p * o.x[2] + E * o.y[2]), this._renderer.moveVelocity.mult(0.85)) : this._renderer.moveVelocity.set(0, 0), this;\n      }, y.default.prototype.debugMode = function() {\n        this._assert3d(\"debugMode\");\n        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)\n          s[o] = arguments[o];\n        y.default._validateParameters(\"debugMode\", s);\n        for (var i = this._registeredMethods.post.length - 1; 0 <= i; i--)\n          this._registeredMethods.post[i].toString() !== this._grid().toString() && this._registeredMethods.post[i].toString() !== this._axesIcon().toString() || this._registeredMethods.post.splice(i, 1);\n        s[0] === u.GRID ? this.registerMethod(\"post\", this._grid(s[1], s[2], s[3], s[4], s[5])) : s[0] === u.AXES ? this.registerMethod(\"post\", this._axesIcon(s[1], s[2], s[3], s[4])) : (this.registerMethod(\"post\", this._grid(s[0], s[1], s[2], s[3], s[4])), this.registerMethod(\"post\", this._axesIcon(s[5], s[6], s[7], s[8])));\n      }, y.default.prototype.noDebugMode = function() {\n        this._assert3d(\"noDebugMode\");\n        for (var r = this._registeredMethods.post.length - 1; 0 <= r; r--)\n          this._registeredMethods.post[r].toString() !== this._grid().toString() && this._registeredMethods.post[r].toString() !== this._axesIcon().toString() || this._registeredMethods.post.splice(r, 1);\n      }, y.default.prototype._grid = function(r, s, o, i, l) {\n        r === void 0 && (r = this.width / 2), s === void 0 && (s = Math.round(r / 30) < 4 ? 4 : Math.round(r / 30)), o === void 0 && (o = 0), i === void 0 && (i = 0), l === void 0 && (l = 0);\n        var n = r / s, a = r / 2;\n        return function() {\n          this.push(), this.stroke(255 * this._renderer.curStrokeColor[0], 255 * this._renderer.curStrokeColor[1], 255 * this._renderer.curStrokeColor[2]), this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix);\n          for (var c = 0; c <= s; c++)\n            this.beginShape(this.LINES), this.vertex(-a + o, i, c * n - a + l), this.vertex(a + o, i, c * n - a + l), this.endShape();\n          for (var p = 0; p <= s; p++)\n            this.beginShape(this.LINES), this.vertex(p * n - a + o, i, -a + l), this.vertex(p * n - a + o, i, a + l), this.endShape();\n          this.pop();\n        };\n      }, y.default.prototype._axesIcon = function(r, s, o, i) {\n        return r === void 0 && (r = 40 < this.width / 20 ? this.width / 20 : 40), s === void 0 && (s = -this.width / 4), o === void 0 && (o = s), i === void 0 && (i = s), function() {\n          this.push(), this._renderer.uMVMatrix.set(this._renderer._curCamera.cameraMatrix), this.strokeWeight(2), this.stroke(255, 0, 0), this.beginShape(this.LINES), this.vertex(s, o, i), this.vertex(s + r, o, i), this.endShape(), this.stroke(0, 255, 0), this.beginShape(this.LINES), this.vertex(s, o, i), this.vertex(s, o + r, i), this.endShape(), this.stroke(0, 0, 255), this.beginShape(this.LINES), this.vertex(s, o, i), this.vertex(s, o, i + r), this.endShape(), this.pop();\n        };\n      };\n      var f = y.default;\n      C.default = f;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.splice\": 170, \"core-js/modules/es.math.hypot\": 175, \"core-js/modules/es.math.sign\": 177, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.for-each\": 242, \"core-js/modules/web.dom-collections.iterator\": 243 }], 326: [function(t, H, C) {\n      t(\"core-js/modules/es.array.filter\"), t(\"core-js/modules/es.array.filter\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      m.default.prototype.ambientLight = function(y, u, h, g) {\n        this._assert3d(\"ambientLight\"), m.default._validateParameters(\"ambientLight\", arguments);\n        var f = this.color.apply(this, arguments);\n        return this._renderer.ambientLightColors.push(f._array[0], f._array[1], f._array[2]), this._renderer._enableLighting = !0, this;\n      }, m.default.prototype.specularColor = function(y, u, h) {\n        this._assert3d(\"specularColor\"), m.default._validateParameters(\"specularColor\", arguments);\n        var g = this.color.apply(this, arguments);\n        return this._renderer.specularColors = [g._array[0], g._array[1], g._array[2]], this;\n      }, m.default.prototype.directionalLight = function(y, l, i, g, f, r) {\n        this._assert3d(\"directionalLight\"), m.default._validateParameters(\"directionalLight\", arguments), y = y instanceof m.default.Color ? y : this.color(y, l, i);\n        var s, o, l = arguments[arguments.length - 1], i = typeof l == \"number\" ? (s = arguments[arguments.length - 3], o = arguments[arguments.length - 2], arguments[arguments.length - 1]) : (s = l.x, o = l.y, l.z), l = Math.sqrt(s * s + o * o + i * i);\n        return this._renderer.directionalLightDirections.push(s / l, o / l, i / l), this._renderer.directionalLightDiffuseColors.push(y._array[0], y._array[1], y._array[2]), Array.prototype.push.apply(this._renderer.directionalLightSpecularColors, this._renderer.specularColors), this._renderer._enableLighting = !0, this;\n      }, m.default.prototype.pointLight = function(y, i, l, g, f, r) {\n        this._assert3d(\"pointLight\"), m.default._validateParameters(\"pointLight\", arguments), y = y instanceof m.default.Color ? y : this.color(y, i, l);\n        var s, o, i = arguments[arguments.length - 1], l = typeof i == \"number\" ? (s = arguments[arguments.length - 3], o = arguments[arguments.length - 2], arguments[arguments.length - 1]) : (s = i.x, o = i.y, i.z);\n        return this._renderer.pointLightPositions.push(s, o, l), this._renderer.pointLightDiffuseColors.push(y._array[0], y._array[1], y._array[2]), Array.prototype.push.apply(this._renderer.pointLightSpecularColors, this._renderer.specularColors), this._renderer._enableLighting = !0, this;\n      }, m.default.prototype.imageLight = function(y) {\n        this._renderer.activeImageLight = y, this._renderer._enableLighting = !0;\n      }, m.default.prototype.panorama = function(y) {\n        this.filter(this._renderer._getSphereMapping(y));\n      }, m.default.prototype.lights = function() {\n        this._assert3d(\"lights\");\n        var y = this.color(\"rgb(128,128,128)\");\n        return this.ambientLight(y), this.directionalLight(y, 0, 0, -1), this;\n      }, m.default.prototype.lightFalloff = function(y, u, h) {\n        return this._assert3d(\"lightFalloff\"), m.default._validateParameters(\"lightFalloff\", arguments), y < 0 && (y = 0, console.warn(\"Value of constant argument in lightFalloff() should be never be negative. Set to 0.\")), u < 0 && (u = 0, console.warn(\"Value of linear argument in lightFalloff() should be never be negative. Set to 0.\")), h < 0 && (h = 0, console.warn(\"Value of quadratic argument in lightFalloff() should be never be negative. Set to 0.\")), y === 0 && u === 0 && h === 0 && (y = 1, console.warn(\"Either one of the three arguments in lightFalloff() should be greater than zero. Set constant argument to 1.\")), this._renderer.constantAttenuation = y, this._renderer.linearAttenuation = u, this._renderer.quadraticAttenuation = h, this;\n      }, m.default.prototype.spotLight = function(y, u, h, g, f, r, s, o, i, l, n) {\n        this._assert3d(\"spotLight\"), m.default._validateParameters(\"spotLight\", arguments);\n        var a, c, p, j = arguments.length;\n        switch (j) {\n          case 11:\n          case 10:\n            a = this.color(y, u, h), c = new m.default.Vector(g, f, r), p = new m.default.Vector(s, o, i);\n            break;\n          case 9:\n            y instanceof m.default.Color ? (a = y, c = new m.default.Vector(u, h, g), p = new m.default.Vector(f, r, s), l = o, n = i) : g instanceof m.default.Vector ? (a = this.color(y, u, h), c = g, p = new m.default.Vector(f, r, s), l = o, n = i) : s instanceof m.default.Vector ? (a = this.color(y, u, h), c = new m.default.Vector(g, f, r), p = s, l = o, n = i) : (a = this.color(y, u, h), c = new m.default.Vector(g, f, r), p = new m.default.Vector(s, o, i));\n            break;\n          case 8:\n            l = (p = y instanceof m.default.Color ? (a = y, c = new m.default.Vector(u, h, g), new m.default.Vector(f, r, s)) : g instanceof m.default.Vector ? (a = this.color(y, u, h), c = g, new m.default.Vector(f, r, s)) : (a = this.color(y, u, h), c = new m.default.Vector(g, f, r), s), o);\n            break;\n          case 7:\n            y instanceof m.default.Color && u instanceof m.default.Vector ? (a = y, c = u, p = new m.default.Vector(h, g, f), l = r, n = s) : y instanceof m.default.Color && f instanceof m.default.Vector ? (a = y, c = new m.default.Vector(u, h, g), p = f, l = r, n = s) : g instanceof m.default.Vector && f instanceof m.default.Vector ? (a = this.color(y, u, h), c = g, p = f, l = r, n = s) : p = y instanceof m.default.Color ? (a = y, c = new m.default.Vector(u, h, g), new m.default.Vector(f, r, s)) : g instanceof m.default.Vector ? (a = this.color(y, u, h), c = g, new m.default.Vector(f, r, s)) : (a = this.color(y, u, h), c = new m.default.Vector(g, f, r), s);\n            break;\n          case 6:\n            g instanceof m.default.Vector && f instanceof m.default.Vector ? (a = this.color(y, u, h), c = g, p = f, l = r) : y instanceof m.default.Color && f instanceof m.default.Vector ? (a = y, c = new m.default.Vector(u, h, g), p = f, l = r) : y instanceof m.default.Color && u instanceof m.default.Vector && (a = y, c = u, p = new m.default.Vector(h, g, f), l = r);\n            break;\n          case 5:\n            y instanceof m.default.Color && u instanceof m.default.Vector && h instanceof m.default.Vector ? (a = y, c = u, p = h, l = g, n = f) : g instanceof m.default.Vector && f instanceof m.default.Vector ? (a = this.color(y, u, h), c = g, p = f) : y instanceof m.default.Color && f instanceof m.default.Vector ? (a = y, c = new m.default.Vector(u, h, g), p = f) : y instanceof m.default.Color && u instanceof m.default.Vector && (a = y, c = u, p = new m.default.Vector(h, g, f));\n            break;\n          case 4:\n            a = y, c = u, p = h, l = g;\n            break;\n          case 3:\n            a = y, c = u, p = h;\n            break;\n          default:\n            return console.warn(\"Sorry, input for spotlight() is not in prescribed format. Too \".concat(j < 3 ? \"few\" : \"many\", \" arguments were provided\")), this;\n        }\n        return this._renderer.spotLightDiffuseColors.push(a._array[0], a._array[1], a._array[2]), Array.prototype.push.apply(this._renderer.spotLightSpecularColors, this._renderer.specularColors), this._renderer.spotLightPositions.push(c.x, c.y, c.z), p.normalize(), this._renderer.spotLightDirections.push(p.x, p.y, p.z), l === void 0 && (l = Math.PI / 3), n !== void 0 && n < 1 ? (n = 1, console.warn(\"Value of concentration needs to be greater than 1. Setting it to 1\")) : n === void 0 && (n = 100), l = this._renderer._pInst._toRadians(l), this._renderer.spotLightAngle.push(Math.cos(l)), this._renderer.spotLightConc.push(n), this._renderer._enableLighting = !0, this;\n      }, m.default.prototype.noLights = function() {\n        this._assert3d(\"noLights\");\n        for (var y = arguments.length, u = new Array(y), h = 0; h < y; h++)\n          u[h] = arguments[h];\n        return m.default._validateParameters(\"noLights\", u), this._renderer.activeImageLight = null, this._renderer._enableLighting = !1, this._renderer.ambientLightColors.length = 0, this._renderer.specularColors = [1, 1, 1], this._renderer.directionalLightDirections.length = 0, this._renderer.directionalLightDiffuseColors.length = 0, this._renderer.directionalLightSpecularColors.length = 0, this._renderer.pointLightPositions.length = 0, this._renderer.pointLightDiffuseColors.length = 0, this._renderer.pointLightSpecularColors.length = 0, this._renderer.spotLightPositions.length = 0, this._renderer.spotLightDirections.length = 0, this._renderer.spotLightDiffuseColors.length = 0, this._renderer.spotLightSpecularColors.length = 0, this._renderer.spotLightAngle.length = 0, this._renderer.spotLightConc.length = 0, this._renderer.constantAttenuation = 1, this._renderer.linearAttenuation = 0, this._renderer.quadraticAttenuation = 0, this._renderer._useShininess = 1, this._renderer._useMetalness = 0, this;\n      }, t = m.default, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.filter\": 156 }], 327: [function(t, H, C) {\n      function m(s) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(o) {\n          return typeof o;\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n        })(s);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.set\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.trim\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.splice\"), t(\"core-js/modules/es.object.assign\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.promise\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.set\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.match\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.trim\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t(\"regenerator-runtime/runtime\");\n      var y = (r = t(\"../core/main\")) && r.__esModule ? r : { default: r };\n      function u(s) {\n        return function(o) {\n          if (Array.isArray(o)) {\n            for (var i = 0, l = new Array(o.length); i < o.length; i++)\n              l[i] = o[i];\n            return l;\n          }\n        }(s) || function(o) {\n          if (Symbol.iterator in Object(o) || Object.prototype.toString.call(o) === \"[object Arguments]\")\n            return Array.from(o);\n        }(s) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      function h(s, o, i, l, n, a, c) {\n        try {\n          var p = s[a](c), j = p.value;\n        } catch (T) {\n          return void i(T);\n        }\n        p.done ? o(j) : Promise.resolve(j).then(l, n);\n      }\n      function g(s) {\n        return function() {\n          var o = this, i = arguments;\n          return new Promise(function(l, n) {\n            var a = s.apply(o, i);\n            function c(j) {\n              h(a, l, n, c, p, \"next\", j);\n            }\n            function p(j) {\n              h(a, l, n, c, p, \"throw\", j);\n            }\n            c(void 0);\n          });\n        };\n      }\n      function f(s) {\n        return (f = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(o) {\n          return m(o);\n        } : function(o) {\n          return o && typeof Symbol == \"function\" && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : m(o);\n        })(s);\n      }\n      t(\"./p5.Geometry\"), y.default.prototype.loadModel = function(s, o) {\n        y.default._validateParameters(\"loadModel\", arguments);\n        var i, l, n = !1, a = !1, c = !1, p = s.slice(-4), j = (o && f(o) === \"object\" ? (n = o.normalize || !1, i = o.successCallback, l = o.failureCallback, p = o.fileType || p, a = o.flipU || !1, c = o.flipV || !1) : typeof o == \"boolean\" ? (n = o, i = arguments[2], l = arguments[3], arguments[4] !== void 0 && (p = arguments[4])) : (i = typeof o == \"function\" ? o : void 0, l = arguments[2], arguments[3] !== void 0 && (p = arguments[3])), new y.default.Geometry()), T = (j.gid = \"\".concat(s, \"|\").concat(n), this);\n        function _() {\n          return (_ = g(regeneratorRuntime.mark(function E(A) {\n            var x, P, M, R;\n            return regeneratorRuntime.wrap(function(L) {\n              for (; ; )\n                switch (L.prev = L.next) {\n                  case 0:\n                    for (x = [], P = 0; P < A.length; P++)\n                      (M = A[P].match(/^mtllib (.+)/)) && function() {\n                        var F = \"\", V = M[1], G = s.split(\"/\");\n                        F = 1 < G.length ? (G.pop(), G.join(\"/\") + \"/\" + V) : V, x.push(function() {\n                          return S.apply(this, arguments);\n                        }(F).then(function(U) {\n                          return U ? (W = T, X = F, new Promise(function(ne, b) {\n                            var O = null, D = {};\n                            W.loadStrings(X, function(B) {\n                              for (var Y = 0; Y < B.length; ++Y) {\n                                var J, te = B[Y].trim().split(/\\s+/);\n                                te[0] === \"newmtl\" ? (J = te[1], D[O = J] = {}) : te[0] === \"Kd\" ? D[O].diffuseColor = [parseFloat(te[1]), parseFloat(te[2]), parseFloat(te[3])] : te[0] === \"Ka\" ? D[O].ambientColor = [parseFloat(te[1]), parseFloat(te[2]), parseFloat(te[3])] : te[0] === \"Ks\" ? D[O].specularColor = [parseFloat(te[1]), parseFloat(te[2]), parseFloat(te[3])] : te[0] === \"map_Kd\" && (D[O].texturePath = te[1]);\n                              }\n                              ne(D);\n                            }, b);\n                          })) : (console.warn(\"MTL file not found or error in parsing; proceeding without materials: \".concat(F)), {});\n                          var W, X;\n                        }).catch(function(U) {\n                          return console.warn(\"Error loading MTL file: \".concat(F), U), {};\n                        }));\n                      }();\n                    return L.prev = 2, L.next = 5, Promise.all(x);\n                  case 5:\n                    return R = L.sent, R = Object.assign.apply(Object, [{}].concat(u(R))), L.abrupt(\"return\", R);\n                  case 10:\n                    return L.prev = 10, L.t0 = L.catch(2), L.abrupt(\"return\", {});\n                  case 13:\n                  case \"end\":\n                    return L.stop();\n                }\n            }, E, null, [[2, 10]]);\n          }))).apply(this, arguments);\n        }\n        function S() {\n          return (S = g(regeneratorRuntime.mark(function E(A) {\n            var x;\n            return regeneratorRuntime.wrap(function(P) {\n              for (; ; )\n                switch (P.prev = P.next) {\n                  case 0:\n                    return P.prev = 0, P.next = 3, fetch(A, { method: \"HEAD\" });\n                  case 3:\n                    return x = P.sent, P.abrupt(\"return\", x.ok);\n                  case 7:\n                    return P.prev = 7, P.t0 = P.catch(0), P.abrupt(\"return\", !1);\n                  case 10:\n                  case \"end\":\n                    return P.stop();\n                }\n            }, E, null, [[0, 7]]);\n          }))).apply(this, arguments);\n        }\n        return p.match(/\\.stl$/i) ? this.httpDo(s, \"GET\", \"arrayBuffer\", function(E) {\n          (function(A, x) {\n            if (function(P) {\n              for (var M = new DataView(P), R = [115, 111, 108, 105, 100], L = 0; L < 5; L++)\n                if (function(F, V, G) {\n                  for (var U = 0, W = F.length; U < W; U++)\n                    if (F[U] !== V.getUint8(G + U, !1))\n                      return;\n                  return 1;\n                }(R, M, L))\n                  return;\n              return 1;\n            }(x))\n              (function(P, M) {\n                for (var R, L, F, V, G, U, W, X = new DataView(M), ne = X.getUint32(80, !0), b = !1, O = 0; O < 70; O++)\n                  X.getUint32(O, !1) === 1129270351 && X.getUint8(O + 4) === 82 && X.getUint8(O + 5) === 61 && (b = !0, V = [], G = X.getUint8(O + 6) / 255, U = X.getUint8(O + 7) / 255, W = X.getUint8(O + 8) / 255);\n                for (var D = 0; D < ne; D++) {\n                  for (var B, Y = 84 + 50 * D, J = X.getFloat32(Y, !0), te = X.getFloat32(4 + Y, !0), ce = X.getFloat32(8 + Y, !0), re = (b && (B = X.getUint16(48 + Y, !0), F = 32768 & B ? (R = G, L = U, W) : (R = (31 & B) / 31, L = (B >> 5 & 31) / 31, (B >> 10 & 31) / 31)), new y.default.Vector(J, te, ce)), ue = 1; ue <= 3; ue++) {\n                    var le = Y + 12 * ue, le = new y.default.Vector(X.getFloat32(le, !0), X.getFloat32(4 + le, !0), X.getFloat32(8 + le, !0));\n                    P.vertices.push(le), P.vertexNormals.push(re), b && V.push(R, L, F);\n                  }\n                  P.faces.push([3 * D, 3 * D + 1, 3 * D + 2]), P.uvs.push([0, 0], [0, 0], [0, 0]);\n                }\n              })(A, x);\n            else {\n              if (x = new DataView(x), !(\"TextDecoder\" in window))\n                return console.warn(\"Sorry, ASCII STL loading only works in browsers that support TextDecoder (https://caniuse.com/#feat=textencoder)\");\n              x = new TextDecoder(\"utf-8\").decode(x).split(`\n`), function(P, M) {\n                for (var R, L, F = \"\", V = [], G = 0; G < M.length; ++G) {\n                  for (var U = M[G].trim(), W = U.split(\" \"), X = 0; X < W.length; ++X)\n                    W[X] === \"\" && W.splice(X, 1);\n                  if (W.length !== 0)\n                    switch (F) {\n                      case \"\":\n                        if (W[0] !== \"solid\")\n                          return console.error(U), console.error('Invalid state \"'.concat(W[0], '\", should be \"solid\"'));\n                        F = \"solid\";\n                        break;\n                      case \"solid\":\n                        if (W[0] !== \"facet\" || W[1] !== \"normal\")\n                          return console.error(U), console.error('Invalid state \"'.concat(W[0], '\", should be \"facet normal\"'));\n                        R = new y.default.Vector(parseFloat(W[2]), parseFloat(W[3]), parseFloat(W[4])), P.vertexNormals.push(R, R, R), F = \"facet normal\";\n                        break;\n                      case \"facet normal\":\n                        if (W[0] !== \"outer\" || W[1] !== \"loop\")\n                          return console.error(U), console.error('Invalid state \"'.concat(W[0], '\", should be \"outer loop\"'));\n                        F = \"vertex\";\n                        break;\n                      case \"vertex\":\n                        if (W[0] === \"vertex\")\n                          L = new y.default.Vector(parseFloat(W[1]), parseFloat(W[2]), parseFloat(W[3])), P.vertices.push(L), P.uvs.push([0, 0]), V.push(P.vertices.indexOf(L));\n                        else {\n                          if (W[0] !== \"endloop\")\n                            return console.error(U), console.error('Invalid state \"'.concat(W[0], '\", should be \"vertex\" or \"endloop\"'));\n                          P.faces.push(V), V = [], F = \"endloop\";\n                        }\n                        break;\n                      case \"endloop\":\n                        if (W[0] !== \"endfacet\")\n                          return console.error(U), console.error('Invalid state \"'.concat(W[0], '\", should be \"endfacet\"'));\n                        F = \"endfacet\";\n                        break;\n                      case \"endfacet\":\n                        if (W[0] !== \"endsolid\") {\n                          if (W[0] !== \"facet\" || W[1] !== \"normal\")\n                            return console.error(U), console.error('Invalid state \"'.concat(W[0], '\", should be \"endsolid\" or \"facet normal\"'));\n                          R = new y.default.Vector(parseFloat(W[2]), parseFloat(W[3]), parseFloat(W[4])), P.vertexNormals.push(R, R, R), F = \"facet normal\";\n                        }\n                        break;\n                      default:\n                        console.error('Invalid state \"'.concat(F, '\"'));\n                    }\n                }\n              }(A, x);\n            }\n          })(j, E), n && j.normalize(), a && j.flipU(), c && j.flipV(), T._decrementPreload(), typeof i == \"function\" && i(j);\n        }, l) : p.match(/\\.obj$/i) ? this.loadStrings(s, function() {\n          var E = g(regeneratorRuntime.mark(function A(x) {\n            var P;\n            return regeneratorRuntime.wrap(function(M) {\n              for (; ; )\n                switch (M.prev = M.next) {\n                  case 0:\n                    return M.prev = 0, M.next = 3, function() {\n                      return _.apply(this, arguments);\n                    }(x);\n                  case 3:\n                    P = M.sent, function(R, L) {\n                      for (var F = 2 < arguments.length && arguments[2] !== void 0 ? arguments[2] : {}, V = { v: [], vt: [], vn: [] }, G = {}, U = null, W = /* @__PURE__ */ new Set(), X = !1, ne = !1, b = 0; b < L.length; ++b) {\n                        var O = L[b].trim().split(/\\b\\s+/);\n                        if (0 < O.length) {\n                          if (O[0] === \"usemtl\")\n                            U = O[1];\n                          else if (O[0] === \"v\" || O[0] === \"vn\") {\n                            var D = new y.default.Vector(parseFloat(O[1]), parseFloat(O[2]), parseFloat(O[3]));\n                            V[O[0]].push(D);\n                          } else if (O[0] === \"vt\")\n                            D = [parseFloat(O[1]), 1 - parseFloat(O[2])], V[O[0]].push(D);\n                          else if (O[0] === \"f\")\n                            for (var B = 3; B < O.length; ++B) {\n                              for (var Y = [], J = [1, B - 1, B], te = 0; te < J.length; ++te) {\n                                for (var ce, re = O[J[te]], ue = re.split(\"/\"), le = 0; le < ue.length; le++)\n                                  ue[le] = parseInt(ue[le]) - 1;\n                                G[re] || (G[re] = {}), G[re][U] === void 0 ? (ce = R.vertices.length, R.vertices.push(V.v[ue[0]].copy()), R.uvs.push(V.vt[ue[1]] ? V.vt[ue[1]].slice() : [0, 0]), R.vertexNormals.push(V.vn[ue[2]] ? V.vn[ue[2]].copy() : new y.default.Vector()), G[re][U] = ce, Y.push(ce), U && F[U] && F[U].diffuseColor && W.add(V.v[ue[0]])) : Y.push(G[re][U]);\n                              }\n                              if (Y[0] !== Y[1] && Y[0] !== Y[2] && Y[1] !== Y[2])\n                                if (R.faces.push(Y), U && F[U] && F[U].diffuseColor) {\n                                  X = X = !0;\n                                  for (var K = F[U].diffuseColor, ae = 0; ae < Y.length; ae++)\n                                    R.vertexColors.push(K[0]), R.vertexColors.push(K[1]), R.vertexColors.push(K[2]);\n                                } else\n                                  ne = !0;\n                            }\n                        }\n                      }\n                      if (R.vertexNormals.length === 0 && R.computeNormals(), X === ne)\n                        throw new Error(\"Model coloring is inconsistent. Either all vertices should have colors or none should.\");\n                    }(j, x, P), M.next = 11;\n                    break;\n                  case 7:\n                    return M.prev = 7, M.t0 = M.catch(0), l ? l(M.t0) : y.default._friendlyError(\"Error during parsing: \" + M.t0.message), M.abrupt(\"return\");\n                  case 11:\n                    return M.prev = 11, n && j.normalize(), a && j.flipU(), c && j.flipV(), T._decrementPreload(), typeof i == \"function\" && i(j), M.finish(11);\n                  case 18:\n                  case \"end\":\n                    return M.stop();\n                }\n            }, A, null, [[0, 7, 11, 18]]);\n          }));\n          return function(A) {\n            return E.apply(this, arguments);\n          };\n        }(), l) : (y.default._friendlyFileLoadError(3, s), l ? l() : y.default._friendlyError(\"Sorry, the file type is invalid. Only OBJ and STL files are supported.\")), j;\n      }, y.default.prototype.model = function(s) {\n        this._assert3d(\"model\"), y.default._validateParameters(\"model\", arguments), 0 < s.vertices.length && (this._renderer.geometryInHash(s.gid) || (s.edges.length === 0 && s._makeTriangleEdges(), s._edgesToVertices(), this._renderer.createBuffers(s.gid, s)), this._renderer.drawBuffers(s.gid));\n      };\n      var r = y.default;\n      C.default = r;\n    }, { \"../core/main\": 280, \"./p5.Geometry\": 332, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.array.splice\": 170, \"core-js/modules/es.object.assign\": 181, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.promise\": 188, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.set\": 194, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.match\": 198, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.string.trim\": 206, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.iterator\": 243, \"regenerator-runtime/runtime\": 257 }], 328: [function(t, H, C) {\n      function m(r) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(s) {\n          return typeof s;\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : typeof s;\n        })(r);\n      }\n      function y(r) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(s) {\n          return m(s);\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : m(s);\n        })(r);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.includes\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.join\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.includes\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (f = t(\"../core/main\")) && f.__esModule ? f : { default: f }, h = function(r) {\n        if (r && r.__esModule)\n          return r;\n        if (r === null || y(r) !== \"object\" && typeof r != \"function\")\n          return { default: r };\n        var s = g();\n        if (s && s.has(r))\n          return s.get(r);\n        var o, i = {}, l = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (o in r) {\n          var n;\n          Object.prototype.hasOwnProperty.call(r, o) && ((n = l ? Object.getOwnPropertyDescriptor(r, o) : null) && (n.get || n.set) ? Object.defineProperty(i, o, n) : i[o] = r[o]);\n        }\n        return i.default = r, s && s.set(r, i), i;\n      }(t(\"../core/constants\"));\n      function g() {\n        var r;\n        return typeof WeakMap != \"function\" ? null : (r = /* @__PURE__ */ new WeakMap(), g = function() {\n          return r;\n        }, r);\n      }\n      t(\"./p5.Texture\"), u.default.prototype.loadShader = function(r, s, o, i) {\n        u.default._validateParameters(\"loadShader\", arguments), i = i || console.error;\n        function l() {\n          a._decrementPreload(), o && o(n);\n        }\n        var n = new u.default.Shader(), a = this, c = !1, p = !1;\n        return this.loadStrings(r, function(j) {\n          n._vertSrc = j.join(`\n`), p = !0, c && l();\n        }, i), this.loadStrings(s, function(j) {\n          n._fragSrc = j.join(`\n`), c = !0, p && l();\n        }, i), n;\n      }, u.default.prototype.createShader = function(r, s) {\n        return u.default._validateParameters(\"createShader\", arguments), new u.default.Shader(this._renderer, r, s);\n      }, u.default.prototype.createFilterShader = function(r) {\n        u.default._validateParameters(\"createFilterShader\", arguments);\n        var s = r.includes(\"#version 300 es\") ? `#version 300 es\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    in vec3 aPosition;\n    in vec2 aTexCoord;\n    out vec2 vTexCoord;\n\n    void main() {\n      // transferring texcoords for the frag shader\n      vTexCoord = aTexCoord;\n\n      // copy position with a fourth coordinate for projection (1.0 is normal)\n      vec4 positionVec4 = vec4(aPosition, 1.0);\n\n      // project to 3D space\n      gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n    }\n  ` : `\n    uniform mat4 uModelViewMatrix;\n    uniform mat4 uProjectionMatrix;\n\n    attribute vec3 aPosition;\n    // texcoords only come from p5 to vertex shader\n    // so pass texcoords on to the fragment shader in a varying variable\n    attribute vec2 aTexCoord;\n    varying vec2 vTexCoord;\n\n    void main() {\n      // transferring texcoords for the frag shader\n      vTexCoord = aTexCoord;\n\n      // copy position with a fourth coordinate for projection (1.0 is normal)\n      vec4 positionVec4 = vec4(aPosition, 1.0);\n\n      // project to 3D space\n      gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n    }\n  `, s = new u.default.Shader(this._renderer, s, r);\n        return this._renderer.GL ? s.ensureCompiledOnContext(this) : s.ensureCompiledOnContext(this._renderer.getFilterGraphicsLayer()), s;\n      }, u.default.prototype.shader = function(r) {\n        return this._assert3d(\"shader\"), u.default._validateParameters(\"shader\", arguments), r.ensureCompiledOnContext(this), r.isStrokeShader() ? this._renderer.userStrokeShader = r : (this._renderer.userFillShader = r, this._renderer._useNormalMaterial = !1), this;\n      }, u.default.prototype.resetShader = function() {\n        return this._renderer.userFillShader = this._renderer.userStrokeShader = null, this;\n      }, u.default.prototype.texture = function(r) {\n        return this._assert3d(\"texture\"), u.default._validateParameters(\"texture\", arguments), r.gifProperties && r._animateGif(this), this._renderer.drawMode = h.TEXTURE, this._renderer._useNormalMaterial = !1, this._renderer._tex = r, this._renderer._setProperty(\"_doFill\", !0), this;\n      }, u.default.prototype.textureMode = function(r) {\n        r !== h.IMAGE && r !== h.NORMAL ? console.warn(\"You tried to set \".concat(r, \" textureMode only supports IMAGE & NORMAL \")) : this._renderer.textureMode = r;\n      }, u.default.prototype.textureWrap = function(r) {\n        var s = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : r, o = (this._renderer.textureWrapX = r, this._renderer.textureWrapY = s, !0), i = !1, l = void 0;\n        try {\n          for (var n, a = this._renderer.textures.values()[Symbol.iterator](); !(o = (n = a.next()).done); o = !0)\n            n.value.setWrapMode(r, s);\n        } catch (c) {\n          i = !0, l = c;\n        } finally {\n          try {\n            o || a.return == null || a.return();\n          } finally {\n            if (i)\n              throw l;\n          }\n        }\n      }, u.default.prototype.normalMaterial = function() {\n        this._assert3d(\"normalMaterial\");\n        for (var r = arguments.length, s = new Array(r), o = 0; o < r; o++)\n          s[o] = arguments[o];\n        return u.default._validateParameters(\"normalMaterial\", s), this._renderer.drawMode = h.FILL, this._renderer._useSpecularMaterial = !1, this._renderer._useEmissiveMaterial = !1, this._renderer._useNormalMaterial = !0, this._renderer.curFillColor = [1, 1, 1, 1], this._renderer._setProperty(\"_doFill\", !0), this.noStroke(), this;\n      }, u.default.prototype.ambientMaterial = function(r, s, o) {\n        this._assert3d(\"ambientMaterial\"), u.default._validateParameters(\"ambientMaterial\", arguments);\n        var i = u.default.prototype.color.apply(this, arguments);\n        return this._renderer._hasSetAmbient = !0, this._renderer.curAmbientColor = i._array, this._renderer._useNormalMaterial = !1, this._renderer._enableLighting = !0, this._renderer._setProperty(\"_doFill\", !0), this;\n      }, u.default.prototype.emissiveMaterial = function(r, s, o, i) {\n        this._assert3d(\"emissiveMaterial\"), u.default._validateParameters(\"emissiveMaterial\", arguments);\n        var l = u.default.prototype.color.apply(this, arguments);\n        return this._renderer.curEmissiveColor = l._array, this._renderer._useEmissiveMaterial = !0, this._renderer._useNormalMaterial = !1, this._renderer._enableLighting = !0, this;\n      }, u.default.prototype.specularMaterial = function(r, s, o, i) {\n        this._assert3d(\"specularMaterial\"), u.default._validateParameters(\"specularMaterial\", arguments);\n        var l = u.default.prototype.color.apply(this, arguments);\n        return this._renderer.curSpecularColor = l._array, this._renderer._useSpecularMaterial = !0, this._renderer._useNormalMaterial = !1, this._renderer._enableLighting = !0, this;\n      }, u.default.prototype.shininess = function(r) {\n        return this._assert3d(\"shininess\"), u.default._validateParameters(\"shininess\", arguments), this._renderer._useShininess = r = r < 1 ? 1 : r, this;\n      }, u.default.prototype.metalness = function(r) {\n        return this._assert3d(\"metalness\"), r = 1 - Math.exp(-r / 100), this._renderer._useMetalness = r, this;\n      }, u.default.RendererGL.prototype._applyColorBlend = function(r, l) {\n        var o = this.GL, i = this.drawMode === h.TEXTURE, l = l || this.userFillShader || this.userStrokeShader || this.userPointShader || i || this.curBlendMode !== h.BLEND || r[r.length - 1] < 1 || this._isErasing;\n        return l !== this._isBlending && (l || this.curBlendMode !== h.BLEND && this.curBlendMode !== h.ADD ? o.enable(o.BLEND) : o.disable(o.BLEND), o.depthMask(!0), this._isBlending = l), this._applyBlendMode(), r;\n      }, u.default.RendererGL.prototype._applyBlendMode = function() {\n        if (this._cachedBlendMode !== this.curBlendMode) {\n          var r = this.GL;\n          switch (this.curBlendMode) {\n            case h.BLEND:\n              r.blendEquation(r.FUNC_ADD), r.blendFunc(r.ONE, r.ONE_MINUS_SRC_ALPHA);\n              break;\n            case h.ADD:\n              r.blendEquation(r.FUNC_ADD), r.blendFunc(r.ONE, r.ONE);\n              break;\n            case h.REMOVE:\n              r.blendEquation(r.FUNC_ADD), r.blendFunc(r.ZERO, r.ONE_MINUS_SRC_ALPHA);\n              break;\n            case h.MULTIPLY:\n              r.blendEquation(r.FUNC_ADD), r.blendFunc(r.DST_COLOR, r.ONE_MINUS_SRC_ALPHA);\n              break;\n            case h.SCREEN:\n              r.blendEquation(r.FUNC_ADD), r.blendFunc(r.ONE, r.ONE_MINUS_SRC_COLOR);\n              break;\n            case h.EXCLUSION:\n              r.blendEquationSeparate(r.FUNC_ADD, r.FUNC_ADD), r.blendFuncSeparate(r.ONE_MINUS_DST_COLOR, r.ONE_MINUS_SRC_COLOR, r.ONE, r.ONE);\n              break;\n            case h.REPLACE:\n              r.blendEquation(r.FUNC_ADD), r.blendFunc(r.ONE, r.ZERO);\n              break;\n            case h.SUBTRACT:\n              r.blendEquationSeparate(r.FUNC_REVERSE_SUBTRACT, r.FUNC_ADD), r.blendFuncSeparate(r.ONE, r.ONE, r.ONE, r.ONE_MINUS_SRC_ALPHA);\n              break;\n            case h.DARKEST:\n              this.blendExt ? (r.blendEquationSeparate(this.blendExt.MIN || this.blendExt.MIN_EXT, r.FUNC_ADD), r.blendFuncSeparate(r.ONE, r.ONE, r.ONE, r.ONE)) : console.warn(\"blendMode(DARKEST) does not work in your browser in WEBGL mode.\");\n              break;\n            case h.LIGHTEST:\n              this.blendExt ? (r.blendEquationSeparate(this.blendExt.MAX || this.blendExt.MAX_EXT, r.FUNC_ADD), r.blendFuncSeparate(r.ONE, r.ONE, r.ONE, r.ONE)) : console.warn(\"blendMode(LIGHTEST) does not work in your browser in WEBGL mode.\");\n              break;\n            default:\n              console.error(\"Oops! Somehow RendererGL set curBlendMode to an unsupported mode.\");\n          }\n          this._isErasing || (this._cachedBlendMode = this.curBlendMode);\n        }\n      };\n      var f = u.default;\n      C.default = f;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"./p5.Texture\": 339, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.join\": 165, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 329: [function(t, H, C) {\n      t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.math.hypot\"), t(\"core-js/modules/es.string.sub\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.math.hypot\"), t(\"core-js/modules/es.string.sub\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function y(u, h) {\n        for (var g = 0; g < h.length; g++) {\n          var f = h[g];\n          f.enumerable = f.enumerable || !1, f.configurable = !0, \"value\" in f && (f.writable = !0), Object.defineProperty(u, f.key, f);\n        }\n      }\n      m.default.prototype.camera = function() {\n        var u;\n        this._assert3d(\"camera\");\n        for (var h = arguments.length, g = new Array(h), f = 0; f < h; f++)\n          g[f] = arguments[f];\n        return m.default._validateParameters(\"camera\", g), (u = this._renderer._curCamera).camera.apply(u, g), this;\n      }, m.default.prototype.perspective = function() {\n        var u;\n        this._assert3d(\"perspective\");\n        for (var h = arguments.length, g = new Array(h), f = 0; f < h; f++)\n          g[f] = arguments[f];\n        return m.default._validateParameters(\"perspective\", g), (u = this._renderer._curCamera).perspective.apply(u, g), this;\n      }, m.default.prototype.linePerspective = function(u) {\n        if (m.default._validateParameters(\"linePerspective\", arguments), !(this._renderer instanceof m.default.RendererGL))\n          throw new Error(\"linePerspective() must be called in WebGL mode.\");\n        if (u === void 0)\n          return this._renderer._curCamera.useLinePerspective;\n        this._renderer._curCamera.useLinePerspective = u;\n      }, m.default.prototype.ortho = function() {\n        var u;\n        this._assert3d(\"ortho\");\n        for (var h = arguments.length, g = new Array(h), f = 0; f < h; f++)\n          g[f] = arguments[f];\n        return m.default._validateParameters(\"ortho\", g), (u = this._renderer._curCamera).ortho.apply(u, g), this;\n      }, m.default.prototype.frustum = function() {\n        var u;\n        this._assert3d(\"frustum\");\n        for (var h = arguments.length, g = new Array(h), f = 0; f < h; f++)\n          g[f] = arguments[f];\n        return m.default._validateParameters(\"frustum\", g), (u = this._renderer._curCamera).frustum.apply(u, g), this;\n      }, m.default.prototype.createCamera = function() {\n        this._assert3d(\"createCamera\");\n        var u = new m.default.Camera(this._renderer);\n        return u._computeCameraDefaultSettings(), u._setDefaultCamera(), this._renderer._curCamera = u;\n      }, m.default.Camera = function() {\n        function u(f) {\n          if (!(this instanceof u))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this._renderer = f, this.cameraType = \"default\", this.useLinePerspective = !0, this.cameraMatrix = new m.default.Matrix(), this.projMatrix = new m.default.Matrix(), this.yScale = 1;\n        }\n        var h, g;\n        return h = u, (g = [{ key: \"perspective\", value: function(i, r, s, o) {\n          this.cameraType = 0 < arguments.length ? \"custom\" : \"default\", i === void 0 ? (i = this.defaultCameraFOV, this.cameraFOV = i) : this.cameraFOV = this._renderer._pInst._toRadians(i), r === void 0 && (r = this.defaultAspectRatio), s === void 0 && (s = this.defaultCameraNear), o === void 0 && (o = this.defaultCameraFar), s <= 1e-4 && (s = 0.01, console.log(\"Avoid perspective near plane values close to or below 0. Setting value to 0.01.\")), o < s && console.log(\"Perspective far plane value is less than near plane value. Nothing will be shown.\"), this.aspectRatio = r, this.cameraNear = s, this.cameraFar = o, this.projMatrix = m.default.Matrix.identity();\n          var i = 1 / Math.tan(this.cameraFOV / 2), l = 1 / (this.cameraNear - this.cameraFar);\n          this.projMatrix.set(i / r, 0, 0, 0, 0, -i * this.yScale, 0, 0, 0, 0, (o + s) * l, -1, 0, 0, 2 * o * s * l, 0), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix);\n        } }, { key: \"ortho\", value: function(_, T, s, o, i, l) {\n          _ === void 0 && (_ = -this._renderer.width / 2), T === void 0 && (T = +this._renderer.width / 2), s === void 0 && (s = -this._renderer.height / 2), o === void 0 && (o = +this._renderer.height / 2), i === void 0 && (i = 0), l === void 0 && (l = Math.max(this._renderer.width, this._renderer.height) + 800), this.cameraNear = i;\n          var S = T - _, n = o - s, a = (this.cameraFar = l) - i, c = 2 / S, p = 2 / n * this.yScale, j = -2 / a, T = -(T + _) / S, _ = -(o + s) / n, S = -(l + i) / a;\n          this.projMatrix = m.default.Matrix.identity(), this.projMatrix.set(c, 0, 0, 0, 0, -p, 0, 0, 0, 0, j, 0, T, _, S, 1), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix), this.cameraType = \"custom\";\n        } }, { key: \"frustum\", value: function(_, T, s, o, i, l) {\n          _ === void 0 && (_ = 0.05 * -this._renderer.width), T === void 0 && (T = 0.05 * +this._renderer.width), s === void 0 && (s = 0.05 * +this._renderer.height), o === void 0 && (o = 0.05 * -this._renderer.height), i === void 0 && (i = this.defaultCameraNear), l === void 0 && (l = this.defaultCameraFar), this.cameraNear = i;\n          var S = T - _, n = o - s, a = (this.cameraFar = l) - i, c = 2 * i / S, p = 2 * i / n * this.yScale, j = -2 * l * i / a, T = (T + _) / S, _ = (o + s) / n, S = -(l + i) / a;\n          this.projMatrix = m.default.Matrix.identity(), this.projMatrix.set(c, 0, 0, 0, 0, -p, 0, 0, T, _, S, -1, 0, 0, j, 0), this._isActive() && this._renderer.uPMatrix.set(this.projMatrix), this.cameraType = \"custom\";\n        } }, { key: \"_rotateView\", value: function(c, r, s, o) {\n          var i = this.centerX, l = this.centerY, n = this.centerZ, a = (i -= this.eyeX, l -= this.eyeY, n -= this.eyeZ, m.default.Matrix.identity(this._renderer._pInst)), c = (a.rotate(this._renderer._pInst._toRadians(c), r, s, o), [i * a.mat4[0] + l * a.mat4[4] + n * a.mat4[8], i * a.mat4[1] + l * a.mat4[5] + n * a.mat4[9], i * a.mat4[2] + l * a.mat4[6] + n * a.mat4[10]]);\n          c[0] += this.eyeX, c[1] += this.eyeY, c[2] += this.eyeZ, this.camera(this.eyeX, this.eyeY, this.eyeZ, c[0], c[1], c[2], this.upX, this.upY, this.upZ);\n        } }, { key: \"pan\", value: function(f) {\n          var r = this._getLocalAxes();\n          this._rotateView(f, r.y[0], r.y[1], r.y[2]);\n        } }, { key: \"tilt\", value: function(f) {\n          var r = this._getLocalAxes();\n          this._rotateView(f, r.x[0], r.x[1], r.x[2]);\n        } }, { key: \"lookAt\", value: function(f, r, s) {\n          this.camera(this.eyeX, this.eyeY, this.eyeZ, f, r, s, this.upX, this.upY, this.upZ);\n        } }, { key: \"camera\", value: function(f, r, s, o, i, l, n, a, c) {\n          return f === void 0 && (f = this.defaultEyeX, r = this.defaultEyeY, s = this.defaultEyeZ, o = f, i = r, a = 1, c = n = l = 0), this.eyeX = f, this.eyeY = r, this.eyeZ = s, o !== void 0 && (this.centerX = o, this.centerY = i, this.centerZ = l), n !== void 0 && (this.upX = n, this.upY = a, this.upZ = c), o = this._getLocalAxes(), this.cameraMatrix.set(o.x[0], o.y[0], o.z[0], 0, o.x[1], o.y[1], o.z[1], 0, o.x[2], o.y[2], o.z[2], 0, 0, 0, 0, 1), i = -f, this.cameraMatrix.translate([i, -r, -s]), this._isActive() && this._renderer.uMVMatrix.set(this.cameraMatrix), this;\n        } }, { key: \"move\", value: function(o, i, s) {\n          var l = this._getLocalAxes(), o = [l.x[0] * o, l.x[1] * o, l.x[2] * o], i = [l.y[0] * i, l.y[1] * i, l.y[2] * i], l = [l.z[0] * s, l.z[1] * s, l.z[2] * s];\n          this.camera(this.eyeX + o[0] + i[0] + l[0], this.eyeY + o[1] + i[1] + l[1], this.eyeZ + o[2] + i[2] + l[2], this.centerX + o[0] + i[0] + l[0], this.centerY + o[1] + i[1] + l[1], this.centerZ + o[2] + i[2] + l[2], this.upX, this.upY, this.upZ);\n        } }, { key: \"setPosition\", value: function(f, r, s) {\n          var o = f - this.eyeX, i = r - this.eyeY, l = s - this.eyeZ;\n          this.camera(f, r, s, this.centerX + o, this.centerY + i, this.centerZ + l, this.upX, this.upY, this.upZ);\n        } }, { key: \"set\", value: function(f) {\n          for (var r = 0, s = [\"eyeX\", \"eyeY\", \"eyeZ\", \"centerX\", \"centerY\", \"centerZ\", \"upX\", \"upY\", \"upZ\", \"cameraFOV\", \"aspectRatio\", \"cameraNear\", \"cameraFar\", \"cameraType\", \"yScale\"]; r < s.length; r++) {\n            var o = s[r];\n            this[o] = f[o];\n          }\n          this.cameraMatrix = f.cameraMatrix.copy(), this.projMatrix = f.projMatrix.copy(), this._isActive() && (this._renderer.uMVMatrix.mat4 = this.cameraMatrix.mat4.slice(), this._renderer.uPMatrix.mat4 = this.projMatrix.mat4.slice());\n        } }, { key: \"slerp\", value: function(f, r, s) {\n          var o, i, l, n, a, c, p, j, T, _, S, E, A, x, P, M, R, L;\n          s === 0 ? this.set(f) : s === 1 ? this.set(r) : (this.projMatrix.mat4[15] !== 0 && (this.projMatrix.mat4[0] = f.projMatrix.mat4[0] * Math.pow(r.projMatrix.mat4[0] / f.projMatrix.mat4[0], s), this.projMatrix.mat4[5] = f.projMatrix.mat4[5] * Math.pow(r.projMatrix.mat4[5] / f.projMatrix.mat4[5], s), this._isActive() && (this._renderer.uPMatrix.mat4 = this.projMatrix.mat4.slice())), n = new m.default.Vector(f.eyeX, f.eyeY, f.eyeZ), a = new m.default.Vector(r.eyeX, r.eyeY, r.eyeZ), M = new m.default.Vector(f.centerX, f.centerY, f.centerZ), L = new m.default.Vector(r.centerX, r.centerY, r.centerZ), l = m.default.Vector.dist(n, M), o = m.default.Vector.dist(a, L), o = l * Math.pow(o / l, s), l = m.default.Vector.sub(n, a), i = 1, 1e-6 < (R = (x = n.copy().sub(a).sub(M).add(L)).magSq()) && (i = m.default.Vector.dot(l, x) / R, i = Math.max(0, Math.min(i, 1))), l = m.default.Vector.lerp(m.default.Vector.lerp(n, M, i), m.default.Vector.lerp(a, L, i), s), x = f.cameraMatrix.createSubMatrix3x3(), R = r.cameraMatrix.createSubMatrix3x3(), n = x.row(2), M = R.row(2), a = x.row(1), L = R.row(1), f = new m.default.Vector(), r = new m.default.Vector(), c = new m.default.Vector(), p = new m.default.Vector(), 1 - (j = 0.5 * ((x = (R = R.mult3x3(x.copy().transpose3x3())).diagonal())[0] + x[1] + x[2] - 1)) < 1e-7 ? (f.set(m.default.Vector.lerp(n, M, s)).normalize(), c.set(f).mult(i * o).add(l), p.set(f).mult((i - 1) * o).add(l), r.set(m.default.Vector.lerp(a, L, s)).normalize()) : (M = 1 / (1 - j), L = Math.max(x[0], x[1], x[2]), E = R.mat3[1] + R.mat3[3], A = R.mat3[2] + R.mat3[6], P = R.mat3[5] + R.mat3[7], L = L === x[0] ? (_ = 0.5 * E * (M /= T = Math.sqrt((x[0] - j) * M)), S = 0.5 * A * M, 0.5 * (R.mat3[7] - R.mat3[5]) / T) : L === x[1] ? (S = 0.5 * P * (M /= _ = Math.sqrt((x[1] - j) * M)), T = 0.5 * E * M, 0.5 * (R.mat3[2] - R.mat3[6]) / _) : (T = 0.5 * A * (M /= S = Math.sqrt((x[2] - j) * M)), _ = 0.5 * P * M, 0.5 * (R.mat3[3] - R.mat3[1]) / S), E = s * Math.atan2(L, j), A = Math.cos(E), x = Math.sin(E), (L = new m.default.Matrix(\"mat3\", [A + (P = 1 - A) * T * T, P * (M = T * _) + x * S, P * (R = S * T) - x * _, P * M - x * S, A + P * _ * _, P * (s = _ * S) + x * T, P * R + x * _, P * s - x * T, A + P * S * S])).multiplyVec3(n, f), c.set(f).mult(i * o).add(l), p.set(f).mult((i - 1) * o).add(l), L.multiplyVec3(a, r)), this.camera(c.x, c.y, c.z, p.x, p.y, p.z, r.x, r.y, r.z));\n        } }, { key: \"_computeCameraDefaultSettings\", value: function() {\n          this.defaultAspectRatio = this._renderer.width / this._renderer.height, this.defaultEyeX = 0, this.defaultEyeY = 0, this.defaultEyeZ = 800, this.defaultCameraFOV = 2 * Math.atan(this._renderer.height / 2 / this.defaultEyeZ), this.defaultCenterX = 0, this.defaultCenterY = 0, this.defaultCenterZ = 0, this.defaultCameraNear = 0.1 * this.defaultEyeZ, this.defaultCameraFar = 10 * this.defaultEyeZ;\n        } }, { key: \"_setDefaultCamera\", value: function() {\n          this.cameraFOV = this.defaultCameraFOV, this.aspectRatio = this.defaultAspectRatio, this.eyeX = this.defaultEyeX, this.eyeY = this.defaultEyeY, this.eyeZ = this.defaultEyeZ, this.centerX = this.defaultCenterX, this.centerY = this.defaultCenterY, this.centerZ = this.defaultCenterZ, this.upX = 0, this.upY = 1, this.upZ = 0, this.cameraNear = this.defaultCameraNear, this.cameraFar = this.defaultCameraFar, this.perspective(), this.camera(), this.cameraType = \"default\";\n        } }, { key: \"_resize\", value: function() {\n          this.cameraType === \"default\" && (this._computeCameraDefaultSettings(), this.cameraFOV = this.defaultCameraFOV, this.aspectRatio = this.defaultAspectRatio, this.perspective());\n        } }, { key: \"copy\", value: function() {\n          var f = new m.default.Camera(this._renderer);\n          return f.cameraFOV = this.cameraFOV, f.aspectRatio = this.aspectRatio, f.eyeX = this.eyeX, f.eyeY = this.eyeY, f.eyeZ = this.eyeZ, f.centerX = this.centerX, f.centerY = this.centerY, f.centerZ = this.centerZ, f.upX = this.upX, f.upY = this.upY, f.upZ = this.upZ, f.cameraNear = this.cameraNear, f.cameraFar = this.cameraFar, f.cameraType = this.cameraType, f.cameraMatrix = this.cameraMatrix.copy(), f.projMatrix = this.projMatrix.copy(), f.yScale = this.yScale, f;\n        } }, { key: \"_getLocalAxes\", value: function() {\n          var f = this.eyeX - this.centerX, r = this.eyeY - this.centerY, s = this.eyeZ - this.centerZ, n = Math.sqrt(f * f + r * r + s * s), n = (n !== 0 && (f /= n, r /= n, s /= n), this.upX), o = (a = this.upY) * s - (c = this.upZ) * r, i = -n * s + c * f, l = n * r - a * f, n = r * l - s * i, a = -f * l + s * o, c = f * i - r * o, p = Math.sqrt(o * o + i * i + l * l), p = (p !== 0 && (o /= p, i /= p, l /= p), Math.sqrt(n * n + a * a + c * c));\n          return p !== 0 && (n /= p, a /= p, c /= p), { x: [o, i, l], y: [n, a, c], z: [f, r, s] };\n        } }, { key: \"_orbit\", value: function(f, p, c) {\n          var i = this.eyeX - this.centerX, l = this.eyeY - this.centerY, n = this.eyeZ - this.centerZ, o = Math.hypot(i, l, n), i = new m.default.Vector(i, l, n).normalize(), l = new m.default.Vector(this.upX, this.upY, this.upZ).normalize(), n = m.default.Vector.cross(l, i).normalize(), a = m.default.Vector.cross(n, l), c = ((o = (o *= Math.pow(10, c)) < this.cameraNear ? this.cameraNear : o) > this.cameraFar && (o = this.cameraFar), Math.acos(Math.max(-1, Math.min(1, m.default.Vector.dot(i, l)))) + p), p = f;\n          (c <= 0 || c >= Math.PI) && (this.upX *= -1, this.upY *= -1, this.upZ *= -1), l.mult(Math.cos(c)), a.mult(Math.cos(p) * Math.sin(c)), n.mult(Math.sin(p) * Math.sin(c)), i.set(l).add(a).add(n), this.eyeX = o * i.x + this.centerX, this.eyeY = o * i.y + this.centerY, this.eyeZ = o * i.z + this.centerZ, this.camera(this.eyeX, this.eyeY, this.eyeZ, this.centerX, this.centerY, this.centerZ, this.upX, this.upY, this.upZ);\n        } }, { key: \"_orbitFree\", value: function(c, p, T) {\n          var i = this.eyeX - this.centerX, l = this.eyeY - this.centerY, n = this.eyeZ - this.centerZ, o = Math.hypot(i, l, n), i = new m.default.Vector(i, l, n).normalize(), l = new m.default.Vector(this.upX, this.upY, this.upZ), n = m.default.Vector.cross(l, i).normalize(), a = m.default.Vector.cross(i, n), _ = Math.atan2(p, c), _ = (a.mult(Math.sin(_)), n.mult(Math.cos(_)).add(a), Math.sqrt(c * c + p * p)), a = m.default.Vector.cross(i, n), c = ((o = (o *= Math.pow(10, T)) < this.cameraNear ? this.cameraNear : o) > this.cameraFar && (o = this.cameraFar), Math.cos(_)), p = Math.sin(_), T = l.dot(i), _ = l.dot(n), j = T * c + _ * p, T = -T * p + _ * c, _ = l.dot(a);\n          l.x = j * i.x + T * n.x + _ * a.x, l.y = j * i.y + T * n.y + _ * a.y, l.z = j * i.z + T * n.z + _ * a.z, n.mult(-p), i.mult(c).add(n).mult(o), this.camera(i.x + this.centerX, i.y + this.centerY, i.z + this.centerZ, this.centerX, this.centerY, this.centerZ, l.x, l.y, l.z);\n        } }, { key: \"_isActive\", value: function() {\n          return this === this._renderer._curCamera;\n        } }]) && y(h.prototype, g), u;\n      }(), m.default.prototype.setCamera = function(u) {\n        this._renderer._curCamera = u, this._renderer.uPMatrix.set(u.projMatrix);\n      }, t = m.default.Camera, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.math.hypot\": 175, \"core-js/modules/es.string.sub\": 205 }], 330: [function(t, H, C) {\n      t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.math.log2\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.typed-array.float32-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.math.log2\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.typed-array.float32-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function m(y, u) {\n        for (var h = 0; h < u.length; h++) {\n          var g = u[h];\n          g.enumerable = g.enumerable || !1, g.configurable = !0, \"value\" in g && (g.writable = !0), Object.defineProperty(y, g.key, g);\n        }\n      }\n      t.default.DataArray = function() {\n        function y() {\n          var g = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 128, f = this, r = y;\n          if (!(f instanceof r))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this.length = 0, this.data = new Float32Array(g), this.initialLength = g;\n        }\n        var u, h;\n        return u = y, (h = [{ key: \"dataArray\", value: function() {\n          return this.subArray(0, this.length);\n        } }, { key: \"clear\", value: function() {\n          this.length = 0;\n        } }, { key: \"rescale\", value: function() {\n          var g;\n          this.length < this.data.length / 2 && (g = 1 << Math.ceil(Math.log2(this.length)), (g = new Float32Array(g)).set(this.data.subarray(0, this.length), 0), this.data = g);\n        } }, { key: \"reset\", value: function() {\n          this.clear(), this.data = new Float32Array(this.initialLength);\n        } }, { key: \"push\", value: function() {\n          for (var g = arguments.length, f = new Array(g), r = 0; r < g; r++)\n            f[r] = arguments[r];\n          this.ensureLength(this.length + f.length), this.data.set(f, this.length), this.length += f.length;\n        } }, { key: \"slice\", value: function(g, f) {\n          return this.data.slice(g, Math.min(f, this.length));\n        } }, { key: \"subArray\", value: function(g, f) {\n          return this.data.subarray(g, Math.min(f, this.length));\n        } }, { key: \"ensureLength\", value: function(g) {\n          for (; this.data.length < g; ) {\n            var f = new Float32Array(2 * this.data.length);\n            f.set(this.data, 0), this.data = f;\n          }\n        } }]) && m(u.prototype, h), y;\n      }(), t = t.default.DataArray, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.math.log2\": 176, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.float32-array\": 216, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236 }], 331: [function(E, H, C) {\n      function m(A) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(x) {\n          return typeof x;\n        } : function(x) {\n          return x && typeof Symbol == \"function\" && x.constructor === Symbol && x !== Symbol.prototype ? \"symbol\" : typeof x;\n        })(A);\n      }\n      function y(A) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(x) {\n          return m(x);\n        } : function(x) {\n          return x && typeof Symbol == \"function\" && x.constructor === Symbol && x !== Symbol.prototype ? \"symbol\" : m(x);\n        })(A);\n      }\n      E(\"core-js/modules/es.symbol\"), E(\"core-js/modules/es.symbol.description\"), E(\"core-js/modules/es.symbol.iterator\"), E(\"core-js/modules/es.array.fill\"), E(\"core-js/modules/es.array.includes\"), E(\"core-js/modules/es.array.iterator\"), E(\"core-js/modules/es.object.get-own-property-descriptor\"), E(\"core-js/modules/es.object.get-prototype-of\"), E(\"core-js/modules/es.object.to-string\"), E(\"core-js/modules/es.reflect.construct\"), E(\"core-js/modules/es.reflect.get\"), E(\"core-js/modules/es.regexp.to-string\"), E(\"core-js/modules/es.string.includes\"), E(\"core-js/modules/es.string.iterator\"), E(\"core-js/modules/es.typed-array.float32-array\"), E(\"core-js/modules/es.typed-array.uint8-array\"), E(\"core-js/modules/es.typed-array.uint8-clamped-array\"), E(\"core-js/modules/es.typed-array.copy-within\"), E(\"core-js/modules/es.typed-array.every\"), E(\"core-js/modules/es.typed-array.fill\"), E(\"core-js/modules/es.typed-array.filter\"), E(\"core-js/modules/es.typed-array.find\"), E(\"core-js/modules/es.typed-array.find-index\"), E(\"core-js/modules/es.typed-array.for-each\"), E(\"core-js/modules/es.typed-array.includes\"), E(\"core-js/modules/es.typed-array.index-of\"), E(\"core-js/modules/es.typed-array.iterator\"), E(\"core-js/modules/es.typed-array.join\"), E(\"core-js/modules/es.typed-array.last-index-of\"), E(\"core-js/modules/es.typed-array.map\"), E(\"core-js/modules/es.typed-array.reduce\"), E(\"core-js/modules/es.typed-array.reduce-right\"), E(\"core-js/modules/es.typed-array.reverse\"), E(\"core-js/modules/es.typed-array.set\"), E(\"core-js/modules/es.typed-array.slice\"), E(\"core-js/modules/es.typed-array.some\"), E(\"core-js/modules/es.typed-array.sort\"), E(\"core-js/modules/es.typed-array.subarray\"), E(\"core-js/modules/es.typed-array.to-locale-string\"), E(\"core-js/modules/es.typed-array.to-string\"), E(\"core-js/modules/es.weak-map\"), E(\"core-js/modules/web.dom-collections.iterator\"), E(\"core-js/modules/es.array.fill\"), E(\"core-js/modules/es.array.includes\"), E(\"core-js/modules/es.array.iterator\"), E(\"core-js/modules/es.object.get-prototype-of\"), E(\"core-js/modules/es.object.to-string\"), E(\"core-js/modules/es.string.includes\"), E(\"core-js/modules/es.typed-array.float32-array\"), E(\"core-js/modules/es.typed-array.uint8-array\"), E(\"core-js/modules/es.typed-array.uint8-clamped-array\"), E(\"core-js/modules/es.typed-array.copy-within\"), E(\"core-js/modules/es.typed-array.every\"), E(\"core-js/modules/es.typed-array.fill\"), E(\"core-js/modules/es.typed-array.filter\"), E(\"core-js/modules/es.typed-array.find\"), E(\"core-js/modules/es.typed-array.find-index\"), E(\"core-js/modules/es.typed-array.for-each\"), E(\"core-js/modules/es.typed-array.includes\"), E(\"core-js/modules/es.typed-array.index-of\"), E(\"core-js/modules/es.typed-array.iterator\"), E(\"core-js/modules/es.typed-array.join\"), E(\"core-js/modules/es.typed-array.last-index-of\"), E(\"core-js/modules/es.typed-array.map\"), E(\"core-js/modules/es.typed-array.reduce\"), E(\"core-js/modules/es.typed-array.reduce-right\"), E(\"core-js/modules/es.typed-array.reverse\"), E(\"core-js/modules/es.typed-array.set\"), E(\"core-js/modules/es.typed-array.slice\"), E(\"core-js/modules/es.typed-array.some\"), E(\"core-js/modules/es.typed-array.sort\"), E(\"core-js/modules/es.typed-array.subarray\"), E(\"core-js/modules/es.typed-array.to-locale-string\"), E(\"core-js/modules/es.typed-array.to-string\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (S = E(\"../core/main\")) && S.__esModule ? S : { default: S }, h = function(A) {\n        if (A && A.__esModule)\n          return A;\n        if (A === null || y(A) !== \"object\" && typeof A != \"function\")\n          return { default: A };\n        var x = r();\n        if (x && x.has(A))\n          return x.get(A);\n        var P, M = {}, R = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (P in A) {\n          var L;\n          Object.prototype.hasOwnProperty.call(A, P) && ((L = R ? Object.getOwnPropertyDescriptor(A, P) : null) && (L.get || L.set) ? Object.defineProperty(M, P, L) : M[P] = A[P]);\n        }\n        return M.default = A, x && x.set(A, M), M;\n      }(E(\"../core/constants\")), g = E(\"./p5.Texture\"), f = E(\"./p5.RendererGL\");\n      function r() {\n        var A;\n        return typeof WeakMap != \"function\" ? null : (A = /* @__PURE__ */ new WeakMap(), r = function() {\n          return A;\n        }, A);\n      }\n      function s(A, x) {\n        return function(P) {\n          if (Array.isArray(P))\n            return P;\n        }(A) || function(P, M) {\n          if (Symbol.iterator in Object(P) || Object.prototype.toString.call(P) === \"[object Arguments]\") {\n            var R = [], L = !0, F = !1, V = void 0;\n            try {\n              for (var G, U = P[Symbol.iterator](); !(L = (G = U.next()).done) && (R.push(G.value), !M || R.length !== M); L = !0)\n                ;\n            } catch (W) {\n              F = !0, V = W;\n            } finally {\n              try {\n                L || U.return == null || U.return();\n              } finally {\n                if (F)\n                  throw V;\n              }\n            }\n            return R;\n          }\n        }(A, x) || function() {\n          throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n        }();\n      }\n      function o(A, x, P) {\n        return x in A ? Object.defineProperty(A, x, { value: P, enumerable: !0, configurable: !0, writable: !0 }) : A[x] = P, A;\n      }\n      function i(A, x) {\n        if (!(A instanceof x))\n          throw new TypeError(\"Cannot call a class as a function\");\n      }\n      function l(A, x) {\n        for (var P = 0; P < x.length; P++) {\n          var M = x[P];\n          M.enumerable = M.enumerable || !1, M.configurable = !0, \"value\" in M && (M.writable = !0), Object.defineProperty(A, M.key, M);\n        }\n      }\n      function n(A, x, P) {\n        x && l(A.prototype, x);\n      }\n      function a(A, x, P) {\n        return (a = typeof Reflect < \"u\" && Reflect.get ? Reflect.get : function(F, R, L) {\n          var F = function(V, G) {\n            for (; !Object.prototype.hasOwnProperty.call(V, G) && (V = j(V)) !== null; )\n              ;\n            return V;\n          }(F, R);\n          if (F)\n            return (F = Object.getOwnPropertyDescriptor(F, R)).get ? F.get.call(L) : F.value;\n        })(A, x, P || A);\n      }\n      function c(A, x) {\n        return (c = Object.setPrototypeOf || function(P, M) {\n          return P.__proto__ = M, P;\n        })(A, x);\n      }\n      function p(A) {\n        return function() {\n          var x, P = j(A), P = (x = function() {\n            if (typeof Reflect < \"u\" && Reflect.construct && !Reflect.construct.sham) {\n              if (typeof Proxy == \"function\")\n                return 1;\n              try {\n                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {\n                })), 1;\n              } catch {\n              }\n            }\n          }() ? (x = j(this).constructor, Reflect.construct(P, arguments, x)) : P.apply(this, arguments), this);\n          if (!x || y(x) !== \"object\" && typeof x != \"function\") {\n            if (P !== void 0)\n              return P;\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n          return x;\n        };\n      }\n      function j(A) {\n        return (j = Object.setPrototypeOf ? Object.getPrototypeOf : function(x) {\n          return x.__proto__ || Object.getPrototypeOf(x);\n        })(A);\n      }\n      var T = function(A) {\n        var x = M;\n        if (typeof A != \"function\" && A !== null)\n          throw new TypeError(\"Super expression must either be null or a function\");\n        x.prototype = Object.create(A && A.prototype, { constructor: { value: x, writable: !0, configurable: !0 } }), A && c(x, A);\n        var P = p(M);\n        function M(R) {\n          var L;\n          return i(this, M), (L = P.call(this, R.target._renderer)).fbo = R, L.yScale = -1, L;\n        }\n        return n(M, [{ key: \"_computeCameraDefaultSettings\", value: function() {\n          a(j(M.prototype), \"_computeCameraDefaultSettings\", this).call(this), this.defaultAspectRatio = this.fbo.width / this.fbo.height, this.defaultCameraFOV = 2 * Math.atan(this.fbo.height / 2 / this.defaultEyeZ);\n        } }]), M;\n      }(u.default.Camera), _ = (u.default.FramebufferCamera = T, function() {\n        function A(x, P) {\n          i(this, A), this.framebuffer = x, this.property = P;\n        }\n        return n(A, [{ key: \"rawTexture\", value: function() {\n          return this.framebuffer[this.property];\n        } }, { key: \"width\", get: function() {\n          return this.framebuffer.width * this.framebuffer.density;\n        } }, { key: \"height\", get: function() {\n          return this.framebuffer.height * this.framebuffer.density;\n        } }]), A;\n      }()), S = (u.default.FramebufferTexture = _, function() {\n        function A(x) {\n          var P = this, M = 1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {}, R = (i(this, A), this.target = x, this.target._renderer.framebuffers.add(this), this._isClipApplied = !1, this.pixels = [], this.format = M.format || h.UNSIGNED_BYTE, this.channels = M.channels || (x._renderer._pInst._glAttributes.alpha ? h.RGBA : h.RGB), this.useDepth = M.depth === void 0 || M.depth, this.depthFormat = M.depthFormat || h.FLOAT, this.textureFiltering = M.textureFiltering || h.LINEAR, M.antialias === void 0 ? this.antialiasSamples = x._renderer._pInst._glAttributes.antialias ? 2 : 0 : typeof M.antialias == \"number\" ? this.antialiasSamples = M.antialias : this.antialiasSamples = M.antialias ? 2 : 0, this.antialias = 0 < this.antialiasSamples, this.antialias && x.webglVersion !== h.WEBGL2 && (console.warn(\"Antialiasing is unsupported in a WebGL 1 context\"), this.antialias = !1), this.density = M.density || x.pixelDensity(), x._renderer.GL);\n          if (this.gl = R, M.width && M.height ? (L = x._renderer._adjustDimensions(M.width, M.height), this.width = L.adjustedWidth, this.height = L.adjustedHeight, this._autoSized = !1) : (M.width === void 0 != (M.height === void 0) && console.warn(\"Please supply both width and height for a framebuffer to give it a size. Only one was given, so the framebuffer will match the size of its canvas.\"), this.width = x.width, this.height = x.height, this._autoSized = !0), this._checkIfFormatsAvailable(), M.stencil && !this.useDepth && console.warn(\"A stencil buffer can only be used if also using depth. Since the framebuffer has no depth buffer, the stencil buffer will be ignored.\"), this.useStencil = this.useDepth && (M.stencil === void 0 || M.stencil), this.framebuffer = R.createFramebuffer(), !this.framebuffer)\n            throw new Error(\"Unable to create a framebuffer\");\n          if (this.antialias && (this.aaFramebuffer = R.createFramebuffer(), !this.aaFramebuffer))\n            throw new Error(\"Unable to create a framebuffer for antialiasing\");\n          this._recreateTextures();\n          var L = this.target._renderer._curCamera;\n          this.defaultCamera = this.createCamera(), this.filterCamera = this.createCamera(), this.target._renderer._curCamera = L, this.draw(function() {\n            return P.target.clear();\n          });\n        }\n        return n(A, [{ key: \"resize\", value: function(x, P) {\n          this._autoSized = !1;\n          var M = this.target._renderer._adjustDimensions(x, P);\n          x = M.adjustedWidth, P = M.adjustedHeight, this.width = x, this.height = P, this._handleResize();\n        } }, { key: \"pixelDensity\", value: function(x) {\n          if (!x)\n            return this.density;\n          this._autoSized = !1, this.density = x, this._handleResize();\n        } }, { key: \"autoSized\", value: function(x) {\n          if (x === void 0)\n            return this._autoSized;\n          this._autoSized = x, this._handleResize();\n        } }, { key: \"_checkIfFormatsAvailable\", value: function() {\n          var x = this.gl, x = (this.useDepth && this.target.webglVersion === h.WEBGL && !x.getExtension(\"WEBGL_depth_texture\") && (console.warn(\"Unable to create depth textures in this environment. Falling back to a framebuffer without depth.\"), this.useDepth = !1), this.useDepth && this.target.webglVersion === h.WEBGL && this.depthFormat === h.FLOAT && (console.warn(\"FLOAT depth format is unavailable in WebGL 1. Defaulting to UNSIGNED_INT.\"), this.depthFormat = h.UNSIGNED_INT), [h.UNSIGNED_BYTE, h.FLOAT, h.HALF_FLOAT].includes(this.format) || (console.warn(\"Unknown Framebuffer format. Please use UNSIGNED_BYTE, FLOAT, or HALF_FLOAT. Defaulting to UNSIGNED_BYTE.\"), this.format = h.UNSIGNED_BYTE), this.useDepth && ![h.UNSIGNED_INT, h.FLOAT].includes(this.depthFormat) && (console.warn(\"Unknown Framebuffer depth format. Please use UNSIGNED_INT or FLOAT. Defaulting to FLOAT.\"), this.depthFormat = h.FLOAT), (0, g.checkWebGLCapabilities)(this.target._renderer));\n          x.float || this.format !== h.FLOAT || (console.warn(\"This environment does not support FLOAT textures. Falling back to UNSIGNED_BYTE.\"), this.format = h.UNSIGNED_BYTE), this.useDepth && !x.float && this.depthFormat === h.FLOAT && (console.warn(\"This environment does not support FLOAT depth textures. Falling back to UNSIGNED_INT.\"), this.depthFormat = h.UNSIGNED_INT), x.halfFloat || this.format !== h.HALF_FLOAT || (console.warn(\"This environment does not support HALF_FLOAT textures. Falling back to UNSIGNED_BYTE.\"), this.format = h.UNSIGNED_BYTE), this.channels === h.RGB && [h.FLOAT, h.HALF_FLOAT].includes(this.format) && (console.warn(\"FLOAT and HALF_FLOAT formats do not work cross-platform with only RGB channels. Falling back to RGBA.\"), this.channels = h.RGBA);\n        } }, { key: \"_recreateTextures\", value: function() {\n          var x = this.gl, P = (this._updateSize(), x.getParameter(x.TEXTURE_BINDING_2D)), M = x.getParameter(x.FRAMEBUFFER_BINDING), R = x.createTexture();\n          if (!R)\n            throw new Error(\"Unable to create color texture\");\n          x.bindTexture(x.TEXTURE_2D, R);\n          var L = this._glColorFormat();\n          if (x.texImage2D(x.TEXTURE_2D, 0, L.internalFormat, this.width * this.density, this.height * this.density, 0, L.format, L.type, null), this.colorTexture = R, x.bindFramebuffer(x.FRAMEBUFFER, this.framebuffer), x.framebufferTexture2D(x.FRAMEBUFFER, x.COLOR_ATTACHMENT0, x.TEXTURE_2D, R, 0), this.useDepth) {\n            var R = x.createTexture();\n            if (!R)\n              throw new Error(\"Unable to create depth texture\");\n            var F = this._glDepthFormat();\n            x.bindTexture(x.TEXTURE_2D, R), x.texImage2D(x.TEXTURE_2D, 0, F.internalFormat, this.width * this.density, this.height * this.density, 0, F.format, F.type, null), x.framebufferTexture2D(x.FRAMEBUFFER, this.useStencil ? x.DEPTH_STENCIL_ATTACHMENT : x.DEPTH_ATTACHMENT, x.TEXTURE_2D, R, 0), this.depthTexture = R;\n          }\n          this.antialias && (this.colorRenderbuffer = x.createRenderbuffer(), x.bindRenderbuffer(x.RENDERBUFFER, this.colorRenderbuffer), x.renderbufferStorageMultisample(x.RENDERBUFFER, Math.max(0, Math.min(this.antialiasSamples, x.getParameter(x.MAX_SAMPLES))), L.internalFormat, this.width * this.density, this.height * this.density), this.useDepth && (F = this._glDepthFormat(), this.depthRenderbuffer = x.createRenderbuffer(), x.bindRenderbuffer(x.RENDERBUFFER, this.depthRenderbuffer), x.renderbufferStorageMultisample(x.RENDERBUFFER, Math.max(0, Math.min(this.antialiasSamples, x.getParameter(x.MAX_SAMPLES))), F.internalFormat, this.width * this.density, this.height * this.density)), x.bindFramebuffer(x.FRAMEBUFFER, this.aaFramebuffer), x.framebufferRenderbuffer(x.FRAMEBUFFER, x.COLOR_ATTACHMENT0, x.RENDERBUFFER, this.colorRenderbuffer), this.useDepth && x.framebufferRenderbuffer(x.FRAMEBUFFER, this.useStencil ? x.DEPTH_STENCIL_ATTACHMENT : x.DEPTH_ATTACHMENT, x.RENDERBUFFER, this.depthRenderbuffer)), this.useDepth && (this.depth = new _(this, \"depthTexture\"), R = x.NEAREST, this.depthP5Texture = new u.default.Texture(this.target._renderer, this.depth, { minFilter: R, magFilter: R }), this.target._renderer.textures.set(this.depth, this.depthP5Texture)), this.color = new _(this, \"colorTexture\"), L = this.textureFiltering === h.LINEAR ? x.LINEAR : x.NEAREST, this.colorP5Texture = new u.default.Texture(this.target._renderer, this.color, { minFilter: L, magFilter: L }), this.target._renderer.textures.set(this.color, this.colorP5Texture), x.bindTexture(x.TEXTURE_2D, P), x.bindFramebuffer(x.FRAMEBUFFER, M);\n        } }, { key: \"_glColorFormat\", value: function() {\n          var x, P, M = this.gl, R = this.format === h.FLOAT ? M.FLOAT : this.format === h.HALF_FLOAT ? this.target.webglVersion === h.WEBGL2 ? M.HALF_FLOAT : M.getExtension(\"OES_texture_half_float\").HALF_FLOAT_OES : M.UNSIGNED_BYTE, L = this.channels === h.RGBA ? M.RGBA : M.RGB;\n          return { internalFormat: this.target.webglVersion === h.WEBGL2 ? (o(P = {}, M.FLOAT, o({}, M.RGBA, M.RGBA32F)), o(P, M.HALF_FLOAT, o({}, M.RGBA, M.RGBA16F)), o(P, M.UNSIGNED_BYTE, (o(x = {}, M.RGBA, M.RGBA8), o(x, M.RGB, M.RGB8), x)), P[R][L]) : this.format === h.HALF_FLOAT ? M.RGBA : L, format: L, type: R };\n        } }, { key: \"_glDepthFormat\", value: function() {\n          var M = this.gl, x = this.useStencil ? this.depthFormat === h.FLOAT ? M.FLOAT_32_UNSIGNED_INT_24_8_REV : this.target.webglVersion === h.WEBGL2 ? M.UNSIGNED_INT_24_8 : M.getExtension(\"WEBGL_depth_texture\").UNSIGNED_INT_24_8_WEBGL : this.depthFormat === h.FLOAT ? M.FLOAT : M.UNSIGNED_INT, P = this.useStencil ? M.DEPTH_STENCIL : M.DEPTH_COMPONENT, M = this.useStencil ? this.depthFormat === h.FLOAT ? M.DEPTH32F_STENCIL8 : this.target.webglVersion === h.WEBGL2 ? M.DEPTH24_STENCIL8 : M.DEPTH_STENCIL : this.target.webglVersion === h.WEBGL2 ? this.depthFormat === h.FLOAT ? M.DEPTH_COMPONENT32F : M.DEPTH_COMPONENT24 : M.DEPTH_COMPONENT;\n          return { internalFormat: M, format: P, type: x };\n        } }, { key: \"_updateSize\", value: function() {\n          this._autoSized && (this.width = this.target.width, this.height = this.target.height, this.density = this.target.pixelDensity());\n        } }, { key: \"_canvasSizeChanged\", value: function() {\n          this._autoSized && this._handleResize();\n        } }, { key: \"_handleResize\", value: function() {\n          var R = this.color, x = this.depth, P = this.colorRenderbuffer, M = this.depthRenderbuffer, R = (this._deleteTexture(R), x && this._deleteTexture(x), this.gl);\n          P && R.deleteRenderbuffer(P), M && R.deleteRenderbuffer(M), this._recreateTextures(), this.defaultCamera._resize();\n        } }, { key: \"createCamera\", value: function() {\n          var x = new T(this);\n          return x._computeCameraDefaultSettings(), x._setDefaultCamera(), this.target._renderer._curCamera = x;\n        } }, { key: \"_deleteTexture\", value: function(x) {\n          this.gl.deleteTexture(x.rawTexture()), this.target._renderer.textures.delete(x);\n        } }, { key: \"remove\", value: function() {\n          var x = this.gl;\n          this._deleteTexture(this.color), this.depth && this._deleteTexture(this.depth), x.deleteFramebuffer(this.framebuffer), this.aaFramebuffer && x.deleteFramebuffer(this.aaFramebuffer), this.depthRenderbuffer && x.deleteRenderbuffer(this.depthRenderbuffer), this.colorRenderbuffer && x.deleteRenderbuffer(this.colorRenderbuffer), this.target._renderer.framebuffers.delete(this);\n        } }, { key: \"begin\", value: function() {\n          this.prevFramebuffer = this.target._renderer.activeFramebuffer(), this.prevFramebuffer && this.prevFramebuffer._beforeEnd(), this.target._renderer.activeFramebuffers.push(this), this._beforeBegin(), this.target.push(), this.target.setCamera(this.defaultCamera), this.target._renderer.uMVMatrix.set(this.target._renderer._curCamera.cameraMatrix), this.target._renderer._applyStencilTestIfClipping();\n        } }, { key: \"_framebufferToBind\", value: function() {\n          return this.antialias ? this.aaFramebuffer : this.framebuffer;\n        } }, { key: \"_beforeBegin\", value: function() {\n          var x = this.gl;\n          x.bindFramebuffer(x.FRAMEBUFFER, this._framebufferToBind()), this.target._renderer.viewport(this.width * this.density, this.height * this.density);\n        } }, { key: \"_beforeEnd\", value: function() {\n          if (this.antialias) {\n            var x = this.gl, P = (x.bindFramebuffer(x.READ_FRAMEBUFFER, this.aaFramebuffer), x.bindFramebuffer(x.DRAW_FRAMEBUFFER, this.framebuffer), [[x.COLOR_BUFFER_BIT, this.colorP5Texture.glMagFilter]]);\n            this.useDepth && P.push([x.DEPTH_BUFFER_BIT, this.depthP5Texture.glMagFilter]);\n            for (var M = 0, R = P; M < R.length; M++) {\n              var F = s(R[M], 2), L = F[0], F = F[1];\n              x.blitFramebuffer(0, 0, this.width * this.density, this.height * this.density, 0, 0, this.width * this.density, this.height * this.density, L, F);\n            }\n          }\n        } }, { key: \"end\", value: function() {\n          var x = this.gl;\n          if (this.target.pop(), this.target._renderer.activeFramebuffers.pop() !== this)\n            throw new Error(\"It looks like you've called end() while another Framebuffer is active.\");\n          this._beforeEnd(), this.prevFramebuffer ? this.prevFramebuffer._beforeBegin() : (x.bindFramebuffer(x.FRAMEBUFFER, null), this.target._renderer.viewport(this.target._renderer._origViewport.width, this.target._renderer._origViewport.height)), this.target._renderer._applyStencilTestIfClipping();\n        } }, { key: \"draw\", value: function(x) {\n          this.begin(), x(), this.end();\n        } }, { key: \"loadPixels\", value: function() {\n          var x = this.gl, P = this.target._renderer.activeFramebuffer(), M = (x.bindFramebuffer(x.FRAMEBUFFER, this.framebuffer), this._glColorFormat());\n          this.pixels = (0, f.readPixelsWebGL)(this.pixels, x, this.framebuffer, 0, 0, this.width * this.density, this.height * this.density, M.format, M.type), P ? x.bindFramebuffer(x.FRAMEBUFFER, P._framebufferToBind()) : x.bindFramebuffer(x.FRAMEBUFFER, null);\n        } }, { key: \"get\", value: function(x, P, M, R) {\n          u.default._validateParameters(\"p5.Framebuffer.get\", arguments);\n          var L = this._glColorFormat();\n          if (x === void 0 && P === void 0)\n            P = x = 0, M = this.width, R = this.height;\n          else if (M === void 0 && R === void 0)\n            return (x < 0 || P < 0 || x >= this.width || P >= this.height) && (console.warn(\"The x and y values passed to p5.Framebuffer.get are outside of its range and will be clamped.\"), x = this.target.constrain(x, 0, this.width - 1), P = this.target.constrain(P, 0, this.height - 1)), (0, f.readPixelWebGL)(this.gl, this.framebuffer, x * this.density, P * this.density, L.format, L.type);\n          x = this.target.constrain(x, 0, this.width - 1), P = this.target.constrain(P, 0, this.height - 1), M = this.target.constrain(M, 1, this.width - x), R = this.target.constrain(R, 1, this.height - P);\n          for (var F = (0, f.readPixelsWebGL)(void 0, this.gl, this.framebuffer, x * this.density, P * this.density, M * this.density, R * this.density, L.format, L.type), V = new Uint8ClampedArray(M * R * this.density * this.density * 4), G = (V.fill(255), L.type === this.gl.RGB ? 3 : 4), U = 0; U < R * this.density; U++)\n            for (var W = 0; W < M * this.density; W++)\n              for (var X = 0; X < 4; X++) {\n                var ne, b = 4 * (U * M * this.density + W) + X;\n                X < G && (ne = G == 4 ? b : (U * M * this.density + W) * G + X, V[b] = F[ne]);\n              }\n          return x = new u.default.Image(M * this.density, R * this.density), x.imageData = x.canvas.getContext(\"2d\").createImageData(x.width, x.height), x.imageData.data.set(V), x.pixels = x.imageData.data, x.updatePixels(), this.density !== 1 && x.resize(M, R), x;\n        } }, { key: \"updatePixels\", value: function() {\n          var x = this.gl, P = (this.colorP5Texture.bindTexture(), this._glColorFormat()), M = P.format === x.RGBA ? 4 : 3, M = this.width * this.height * this.density * this.density * M, R = P.type === x.UNSIGNED_BYTE ? Uint8Array : Float32Array;\n          if (!(this.pixels instanceof R) || this.pixels.length !== M)\n            throw new Error(\"The pixels array has not been set correctly. Please call loadPixels() before updatePixels().\");\n          x.texImage2D(x.TEXTURE_2D, 0, P.internalFormat, this.width * this.density, this.height * this.density, 0, P.format, P.type, this.pixels), this.colorP5Texture.unbindTexture(), R = this.target._renderer.activeFramebuffer(), this.antialias ? (this.begin(), this.target.push(), this.target.imageMode(this.target.CENTER), this.target.resetMatrix(), this.target.noStroke(), this.target.clear(), this.target.image(this, 0, 0), this.target.pop(), this.useDepth && (x.clearDepth(1), x.clear(x.DEPTH_BUFFER_BIT)), this.end()) : (x.bindFramebuffer(x.FRAMEBUFFER, this.framebuffer), this.useDepth && (x.clearDepth(1), x.clear(x.DEPTH_BUFFER_BIT)), R ? x.bindFramebuffer(x.FRAMEBUFFER, R._framebufferToBind()) : x.bindFramebuffer(x.FRAMEBUFFER, null));\n        } }]), A;\n      }()), E = u.default.Framebuffer = S;\n      C.default = E;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"./p5.RendererGL\": 337, \"./p5.Texture\": 339, \"core-js/modules/es.array.fill\": 155, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.get-prototype-of\": 185, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.reflect.construct\": 189, \"core-js/modules/es.reflect.get\": 190, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.float32-array\": 216, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236, \"core-js/modules/es.typed-array.uint8-array\": 239, \"core-js/modules/es.typed-array.uint8-clamped-array\": 240, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 332: [function(t, H, C) {\n      function m(o) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(i) {\n          return typeof i;\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : typeof i;\n        })(o);\n      }\n      function y(o) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(i) {\n          return m(i);\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : m(i);\n        })(o);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.flat\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.unscopables.flat\"), t(\"core-js/modules/es.map\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.set\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.sub\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.flat\"), t(\"core-js/modules/es.array.for-each\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.unscopables.flat\"), t(\"core-js/modules/es.map\"), t(\"core-js/modules/es.number.constructor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.set\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.sub\"), t(\"core-js/modules/web.dom-collections.for-each\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (s = t(\"../core/main\")) && s.__esModule ? s : { default: s }, h = function(o) {\n        if (o && o.__esModule)\n          return o;\n        if (o === null || y(o) !== \"object\" && typeof o != \"function\")\n          return { default: o };\n        var i = g();\n        if (i && i.has(o))\n          return i.get(o);\n        var l, n = {}, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (l in o) {\n          var c;\n          Object.prototype.hasOwnProperty.call(o, l) && ((c = a ? Object.getOwnPropertyDescriptor(o, l) : null) && (c.get || c.set) ? Object.defineProperty(n, l, c) : n[l] = o[l]);\n        }\n        return n.default = o, i && i.set(o, n), n;\n      }(t(\"../core/constants\"));\n      function g() {\n        var o;\n        return typeof WeakMap != \"function\" ? null : (o = /* @__PURE__ */ new WeakMap(), g = function() {\n          return o;\n        }, o);\n      }\n      function f(o) {\n        return function(i) {\n          if (Array.isArray(i)) {\n            for (var l = 0, n = new Array(i.length); l < i.length; l++)\n              n[l] = i[l];\n            return n;\n          }\n        }(o) || function(i) {\n          if (Symbol.iterator in Object(i) || Object.prototype.toString.call(i) === \"[object Arguments]\")\n            return Array.from(i);\n        }(o) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      function r(o, i) {\n        for (var l = 0; l < i.length; l++) {\n          var n = i[l];\n          n.enumerable = n.enumerable || !1, n.configurable = !0, \"value\" in n && (n.writable = !0), Object.defineProperty(o, n.key, n);\n        }\n      }\n      u.default.Geometry = function() {\n        function o(n, a, c) {\n          if (!(this instanceof o))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this.vertices = [], this.boundingBoxCache = null, this.lineVertices = new u.default.DataArray(), this.lineTangentsIn = new u.default.DataArray(), this.lineTangentsOut = new u.default.DataArray(), this.lineSides = new u.default.DataArray(), this.vertexNormals = [], this.faces = [], this.uvs = [], this.edges = [], this.vertexColors = [], this.vertexStrokeColors = [], this.lineVertexColors = new u.default.DataArray(), this.detailX = n !== void 0 ? n : 1, this.detailY = a !== void 0 ? a : 1, this.dirtyFlags = {}, this._hasFillTransparency = void 0, this._hasStrokeTransparency = void 0, c instanceof Function && c.call(this);\n        }\n        var i, l;\n        return i = o, (l = [{ key: \"calculateBoundingBox\", value: function() {\n          if (!this.boundingBoxCache) {\n            for (var n = new u.default.Vector(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE), a = new u.default.Vector(Number.MIN_VALUE, Number.MIN_VALUE, Number.MIN_VALUE), c = 0; c < this.vertices.length; c++) {\n              var p = this.vertices[c];\n              n.x = Math.min(n.x, p.x), n.y = Math.min(n.y, p.y), n.z = Math.min(n.z, p.z), a.x = Math.max(a.x, p.x), a.y = Math.max(a.y, p.y), a.z = Math.max(a.z, p.z);\n            }\n            var j = new u.default.Vector(a.x - n.x, a.y - n.y, a.z - n.z), T = new u.default.Vector((n.x + a.x) / 2, (n.y + a.y) / 2, (n.z + a.z) / 2);\n            this.boundingBoxCache = { min: n, max: a, size: j, offset: T };\n          }\n          return this.boundingBoxCache;\n        } }, { key: \"reset\", value: function() {\n          this._hasFillTransparency = void 0, this._hasStrokeTransparency = void 0, this.lineVertices.clear(), this.lineTangentsIn.clear(), this.lineTangentsOut.clear(), this.lineSides.clear(), this.vertices.length = 0, this.edges.length = 0, this.vertexColors.length = 0, this.vertexStrokeColors.length = 0, this.lineVertexColors.clear(), this.vertexNormals.length = 0, this.uvs.length = 0, this.dirtyFlags = {};\n        } }, { key: \"hasFillTransparency\", value: function() {\n          if (this._hasFillTransparency === void 0) {\n            this._hasFillTransparency = !1;\n            for (var n = 0; n < this.vertexColors.length; n += 4)\n              if (this.vertexColors[n + 3] < 1) {\n                this._hasFillTransparency = !0;\n                break;\n              }\n          }\n          return this._hasFillTransparency;\n        } }, { key: \"hasStrokeTransparency\", value: function() {\n          if (this._hasStrokeTransparency === void 0) {\n            this._hasStrokeTransparency = !1;\n            for (var n = 0; n < this.lineVertexColors.length; n += 4)\n              if (this.lineVertexColors[n + 3] < 1) {\n                this._hasStrokeTransparency = !0;\n                break;\n              }\n          }\n          return this._hasStrokeTransparency;\n        } }, { key: \"clearColors\", value: function() {\n          return this.vertexColors = [], this;\n        } }, { key: \"flipU\", value: function() {\n          this.uvs = this.uvs.flat().map(function(n, a) {\n            return a % 2 == 0 ? 1 - n : n;\n          });\n        } }, { key: \"flipV\", value: function() {\n          this.uvs = this.uvs.flat().map(function(n, a) {\n            return a % 2 == 0 ? n : 1 - n;\n          });\n        } }, { key: \"computeFaces\", value: function() {\n          this.faces.length = 0;\n          for (var n, a, c, p = this.detailX + 1, j = 0; j < this.detailY; j++)\n            for (var T = 0; T < this.detailX; T++)\n              a = (j + 1) * p + T + 1, this.faces.push([j * p + T, n = j * p + T + 1, c = (j + 1) * p + T]), this.faces.push([c, n, a]);\n          return this;\n        } }, { key: \"_getFaceNormal\", value: function(a) {\n          var a = this.faces[a], c = this.vertices[a[0]], j = this.vertices[a[1]], a = this.vertices[a[2]], j = u.default.Vector.sub(j, c), a = u.default.Vector.sub(a, c), c = u.default.Vector.cross(j, a), p = u.default.Vector.mag(c), j = p / (u.default.Vector.mag(j) * u.default.Vector.mag(a));\n          return j === 0 || isNaN(j) ? (console.warn(\"p5.Geometry.prototype._getFaceNormal:\", \"face has colinear sides or a repeated vertex\"), c) : (1 < j && (j = 1), c.mult(Math.asin(j) / p));\n        } }, { key: \"computeNormals\", value: function() {\n          var n, a = this, c = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : h.FLAT, p = (1 < arguments.length && arguments[1] !== void 0 ? arguments[1] : {}).roundToPrecision, j = this.vertexNormals, T = this.vertices, _ = this.faces;\n          if (c === h.SMOOTH) {\n            for (var S = {}, E = [], A = Math.pow(10, p === void 0 ? 3 : p), x = function(F) {\n              return Math.round(F * A) / A;\n            }, P = function(F) {\n              return \"\".concat(x(F.x), \",\").concat(x(F.y), \",\").concat(x(F.z));\n            }, M = 0; M < T.length; M++) {\n              var R = T[M], L = P(R);\n              S[L] === void 0 && (S[L] = E.length, E.push(R));\n            }\n            _.forEach(function(F) {\n              for (var V = 0; V < 3; ++V) {\n                var G = F[V], G = T[G], G = P(G);\n                F[V] = S[G];\n              }\n            }), this.edges.forEach(function(F) {\n              for (var V = 0; V < 2; ++V) {\n                var G = F[V], G = T[G], G = P(G);\n                F[V] = S[G];\n              }\n            }), this.vertices = T = E;\n          }\n          for (n = j.length = 0; n < T.length; ++n)\n            j.push(new u.default.Vector());\n          for (_.forEach(function(F, V) {\n            for (var G = a._getFaceNormal(V), U = 0; U < 3; ++U) {\n              var W = F[U];\n              j[W].add(G);\n            }\n          }), n = 0; n < T.length; ++n)\n            j[n].normalize();\n          return this;\n        } }, { key: \"averageNormals\", value: function() {\n          for (var n = 0; n <= this.detailY; n++) {\n            var a = this.detailX + 1, c = u.default.Vector.add(this.vertexNormals[n * a], this.vertexNormals[n * a + this.detailX]), c = u.default.Vector.div(c, 2);\n            this.vertexNormals[n * a] = c, this.vertexNormals[n * a + this.detailX] = c;\n          }\n          return this;\n        } }, { key: \"averagePoleNormals\", value: function() {\n          for (var n = new u.default.Vector(0, 0, 0), a = 0; a < this.detailX; a++)\n            n.add(this.vertexNormals[a]);\n          for (var n = u.default.Vector.div(n, this.detailX), c = 0; c < this.detailX; c++)\n            this.vertexNormals[c] = n;\n          n = new u.default.Vector(0, 0, 0);\n          for (var p = this.vertices.length - 1; p > this.vertices.length - 1 - this.detailX; p--)\n            n.add(this.vertexNormals[p]);\n          n = u.default.Vector.div(n, this.detailX);\n          for (var j = this.vertices.length - 1; j > this.vertices.length - 1 - this.detailX; j--)\n            this.vertexNormals[j] = n;\n          return this;\n        } }, { key: \"_makeTriangleEdges\", value: function() {\n          for (var n = this.edges.length = 0; n < this.faces.length; n++)\n            this.edges.push([this.faces[n][0], this.faces[n][1]]), this.edges.push([this.faces[n][1], this.faces[n][2]]), this.edges.push([this.faces[n][2], this.faces[n][0]]);\n          return this;\n        } }, { key: \"_edgesToVertices\", value: function() {\n          this.lineVertices.clear(), this.lineTangentsIn.clear(), this.lineTangentsOut.clear(), this.lineSides.clear();\n          for (var n, a = /* @__PURE__ */ new Map(), c = /* @__PURE__ */ new Set(), p = 0; p < this.edges.length; p++) {\n            var j, T = this.edges[p - 1], _ = this.edges[p], S = this.vertices[_[0]], E = this.vertices[_[1]], A = 0 < this.vertexStrokeColors.length ? this.vertexStrokeColors.slice(4 * _[0], 4 * (_[0] + 1)) : [0, 0, 0, 0], x = 0 < this.vertexStrokeColors.length ? this.vertexStrokeColors.slice(4 * _[1], 4 * (_[1] + 1)) : [0, 0, 0, 0], P = E.copy().sub(S).normalize(), M = 0 < P.magSq();\n            M && this._addSegment(S, E, A, x, P), 0 < p && T[1] === _[0] ? c.has(_[0]) || (c.add(_[0]), a.delete(_[0]), n && M && P.dot(n) < 1 - 1e-8 && this._addJoin(S, n, P, A)) : (M && !c.has(_[0]) && ((j = a.get(_[0])) ? (this._addJoin(S, j.dir, P, A), a.delete(_[0]), c.add(_[0])) : a.set(_[0], { point: S, dir: P.copy().mult(-1), color: A })), n && !c.has(T[1]) && ((j = a.get(T[1])) ? (this._addJoin(this.vertices[T[1]], n, j.dir.copy().mult(-1), A), a.delete(T[1]), c.add(T[1])) : a.set(T[1], { point: this.vertices[T[1]], dir: n, color: A }), n = void 0)), p !== this.edges.length - 1 || c.has(_[1]) || ((S = a.get(_[1])) ? (this._addJoin(E, P, S.dir.copy().mult(-1), x), a.delete(_[1]), c.add(_[1])) : a.set(_[1], { point: E, dir: P, color: x })), M && (n = P);\n          }\n          var R = !0, L = !1, F = void 0;\n          try {\n            for (var V, G = a.values()[Symbol.iterator](); !(R = (V = G.next()).done); R = !0) {\n              var U = V.value, W = U.point, X = U.dir, ne = U.color;\n              this._addCap(W, X, ne);\n            }\n          } catch (b) {\n            L = !0, F = b;\n          } finally {\n            try {\n              R || G.return == null || G.return();\n            } finally {\n              if (L)\n                throw F;\n            }\n          }\n          return this;\n        } }, { key: \"_addSegment\", value: function(T, _, c, p, j) {\n          var T = T.array(), _ = _.array(), S = j.array();\n          this.lineSides.push(1, 1, -1, 1, -1, -1);\n          for (var E = 0, A = [this.lineTangentsIn, this.lineTangentsOut]; E < A.length; E++)\n            for (var x = A[E], P = 0; P < 6; P++)\n              x.push.apply(x, f(S));\n          return (j = this.lineVertices).push.apply(j, f(T).concat(f(_), f(T), f(_), f(_), f(T))), (j = this.lineVertexColors).push.apply(j, f(c).concat(f(p), f(c), f(p), f(p), f(c))), this;\n        } }, { key: \"_addCap\", value: function(n, a, c) {\n          for (var p, j = n.array(), T = a.array(), _ = [0, 0, 0], S = 0; S < 6; S++)\n            (p = this.lineVertices).push.apply(p, f(j)), (p = this.lineTangentsIn).push.apply(p, f(T)), (p = this.lineTangentsOut).push.apply(p, _), (p = this.lineVertexColors).push.apply(p, f(c));\n          return this.lineSides.push(-1, 2, -2, 1, 2, -1), this;\n        } }, { key: \"_addJoin\", value: function(n, a, c, p) {\n          for (var j, T = n.array(), _ = a.array(), S = c.array(), E = 0; E < 12; E++)\n            (j = this.lineVertices).push.apply(j, f(T)), (j = this.lineTangentsIn).push.apply(j, f(_)), (j = this.lineTangentsOut).push.apply(j, f(S)), (j = this.lineVertexColors).push.apply(j, f(p));\n          return this.lineSides.push(-1, -3, -2, -1, 0, -3), this.lineSides.push(3, 1, 2, 3, 0, 1), this;\n        } }, { key: \"normalize\", value: function() {\n          if (0 < this.vertices.length) {\n            for (var n = this.vertices[0].copy(), a = this.vertices[0].copy(), c = 0; c < this.vertices.length; c++)\n              n.x = Math.max(n.x, this.vertices[c].x), a.x = Math.min(a.x, this.vertices[c].x), n.y = Math.max(n.y, this.vertices[c].y), a.y = Math.min(a.y, this.vertices[c].y), n.z = Math.max(n.z, this.vertices[c].z), a.z = Math.min(a.z, this.vertices[c].z);\n            for (var p = u.default.Vector.lerp(n, a, 0.5), j = u.default.Vector.sub(n, a), T = 200 / Math.max(Math.max(j.x, j.y), j.z), _ = 0; _ < this.vertices.length; _++)\n              this.vertices[_].sub(p), this.vertices[_].mult(T);\n          }\n          return this;\n        } }]) && r(i.prototype, l), o;\n      }();\n      var s = u.default.Geometry;\n      C.default = s;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.flat\": 159, \"core-js/modules/es.array.for-each\": 160, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.array.unscopables.flat\": 172, \"core-js/modules/es.map\": 174, \"core-js/modules/es.number.constructor\": 178, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.set\": 194, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.sub\": 205, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.for-each\": 242, \"core-js/modules/web.dom-collections.iterator\": 243 }], 333: [function(g, H, C) {\n      g(\"core-js/modules/es.array.iterator\"), g(\"core-js/modules/es.object.to-string\"), g(\"core-js/modules/es.typed-array.float32-array\"), g(\"core-js/modules/es.typed-array.copy-within\"), g(\"core-js/modules/es.typed-array.every\"), g(\"core-js/modules/es.typed-array.fill\"), g(\"core-js/modules/es.typed-array.filter\"), g(\"core-js/modules/es.typed-array.find\"), g(\"core-js/modules/es.typed-array.find-index\"), g(\"core-js/modules/es.typed-array.for-each\"), g(\"core-js/modules/es.typed-array.includes\"), g(\"core-js/modules/es.typed-array.index-of\"), g(\"core-js/modules/es.typed-array.iterator\"), g(\"core-js/modules/es.typed-array.join\"), g(\"core-js/modules/es.typed-array.last-index-of\"), g(\"core-js/modules/es.typed-array.map\"), g(\"core-js/modules/es.typed-array.reduce\"), g(\"core-js/modules/es.typed-array.reduce-right\"), g(\"core-js/modules/es.typed-array.reverse\"), g(\"core-js/modules/es.typed-array.set\"), g(\"core-js/modules/es.typed-array.slice\"), g(\"core-js/modules/es.typed-array.some\"), g(\"core-js/modules/es.typed-array.sort\"), g(\"core-js/modules/es.typed-array.subarray\"), g(\"core-js/modules/es.typed-array.to-locale-string\"), g(\"core-js/modules/es.typed-array.to-string\"), g(\"core-js/modules/es.array.iterator\"), g(\"core-js/modules/es.object.to-string\"), g(\"core-js/modules/es.typed-array.float32-array\"), g(\"core-js/modules/es.typed-array.copy-within\"), g(\"core-js/modules/es.typed-array.every\"), g(\"core-js/modules/es.typed-array.fill\"), g(\"core-js/modules/es.typed-array.filter\"), g(\"core-js/modules/es.typed-array.find\"), g(\"core-js/modules/es.typed-array.find-index\"), g(\"core-js/modules/es.typed-array.for-each\"), g(\"core-js/modules/es.typed-array.includes\"), g(\"core-js/modules/es.typed-array.index-of\"), g(\"core-js/modules/es.typed-array.iterator\"), g(\"core-js/modules/es.typed-array.join\"), g(\"core-js/modules/es.typed-array.last-index-of\"), g(\"core-js/modules/es.typed-array.map\"), g(\"core-js/modules/es.typed-array.reduce\"), g(\"core-js/modules/es.typed-array.reduce-right\"), g(\"core-js/modules/es.typed-array.reverse\"), g(\"core-js/modules/es.typed-array.set\"), g(\"core-js/modules/es.typed-array.slice\"), g(\"core-js/modules/es.typed-array.some\"), g(\"core-js/modules/es.typed-array.sort\"), g(\"core-js/modules/es.typed-array.subarray\"), g(\"core-js/modules/es.typed-array.to-locale-string\"), g(\"core-js/modules/es.typed-array.to-string\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (g = g(\"../core/main\")) && g.__esModule ? g : { default: g };\n      function y(f, r) {\n        for (var s = 0; s < r.length; s++) {\n          var o = r[s];\n          o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(f, o.key, o);\n        }\n      }\n      var u = Array, h = function(f) {\n        return Array.isArray(f);\n      }, g = (typeof Float32Array < \"u\" && (u = Float32Array, h = function(f) {\n        return Array.isArray(f) || f instanceof Float32Array;\n      }), m.default.Matrix = function() {\n        function f() {\n          var i = this, l = f;\n          if (i instanceof l)\n            return arguments.length && ((i = arguments.length - 1) < 0 || arguments.length <= i ? void 0 : arguments[i]) instanceof m.default && (this.p5 = (l = arguments.length - 1) < 0 || arguments.length <= l ? void 0 : arguments[l]), (arguments.length <= 0 ? void 0 : arguments[0]) === \"mat3\" ? this.mat3 = Array.isArray(arguments.length <= 1 ? void 0 : arguments[1]) ? arguments.length <= 1 ? void 0 : arguments[1] : new u([1, 0, 0, 0, 1, 0, 0, 0, 1]) : this.mat4 = Array.isArray(arguments.length <= 0 ? void 0 : arguments[0]) ? arguments.length <= 0 ? void 0 : arguments[0] : new u([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]), this;\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n        var r, s, o;\n        return r = f, o = [{ key: \"identity\", value: function(i) {\n          return new m.default.Matrix(i);\n        } }], (s = [{ key: \"set\", value: function(i) {\n          var l = arguments;\n          if (i instanceof m.default.Matrix ? l = i.mat4 : h(i) && (l = i), l.length !== 16)\n            m.default._friendlyError(\"Expected 16 values but received \".concat(l.length, \".\"), \"p5.Matrix.set\");\n          else\n            for (var n = 0; n < 16; n++)\n              this.mat4[n] = l[n];\n          return this;\n        } }, { key: \"get\", value: function() {\n          return new m.default.Matrix(this.mat4, this.p5);\n        } }, { key: \"copy\", value: function() {\n          var i;\n          return this.mat3 !== void 0 ? ((i = new m.default.Matrix(\"mat3\", this.p5)).mat3[0] = this.mat3[0], i.mat3[1] = this.mat3[1], i.mat3[2] = this.mat3[2], i.mat3[3] = this.mat3[3], i.mat3[4] = this.mat3[4], i.mat3[5] = this.mat3[5], i.mat3[6] = this.mat3[6], i.mat3[7] = this.mat3[7], i.mat3[8] = this.mat3[8]) : ((i = new m.default.Matrix(this.p5)).mat4[0] = this.mat4[0], i.mat4[1] = this.mat4[1], i.mat4[2] = this.mat4[2], i.mat4[3] = this.mat4[3], i.mat4[4] = this.mat4[4], i.mat4[5] = this.mat4[5], i.mat4[6] = this.mat4[6], i.mat4[7] = this.mat4[7], i.mat4[8] = this.mat4[8], i.mat4[9] = this.mat4[9], i.mat4[10] = this.mat4[10], i.mat4[11] = this.mat4[11], i.mat4[12] = this.mat4[12], i.mat4[13] = this.mat4[13], i.mat4[14] = this.mat4[14], i.mat4[15] = this.mat4[15]), i;\n        } }, { key: \"transpose\", value: function(i) {\n          var l, n, a, c, p, j;\n          return i instanceof m.default.Matrix ? (l = i.mat4[1], n = i.mat4[2], a = i.mat4[3], c = i.mat4[6], p = i.mat4[7], j = i.mat4[11], this.mat4[0] = i.mat4[0], this.mat4[1] = i.mat4[4], this.mat4[2] = i.mat4[8], this.mat4[3] = i.mat4[12], this.mat4[4] = l, this.mat4[5] = i.mat4[5], this.mat4[6] = i.mat4[9], this.mat4[7] = i.mat4[13], this.mat4[8] = n, this.mat4[9] = c, this.mat4[10] = i.mat4[10], this.mat4[11] = i.mat4[14], this.mat4[12] = a, this.mat4[13] = p, this.mat4[14] = j, this.mat4[15] = i.mat4[15]) : h(i) && (l = i[1], n = i[2], a = i[3], c = i[6], p = i[7], j = i[11], this.mat4[0] = i[0], this.mat4[1] = i[4], this.mat4[2] = i[8], this.mat4[3] = i[12], this.mat4[4] = l, this.mat4[5] = i[5], this.mat4[6] = i[9], this.mat4[7] = i[13], this.mat4[8] = n, this.mat4[9] = c, this.mat4[10] = i[10], this.mat4[11] = i[14], this.mat4[12] = a, this.mat4[13] = p, this.mat4[14] = j, this.mat4[15] = i[15]), this;\n        } }, { key: \"invert\", value: function(F) {\n          F instanceof m.default.Matrix ? (l = F.mat4[0], n = F.mat4[1], a = F.mat4[2], c = F.mat4[3], p = F.mat4[4], j = F.mat4[5], T = F.mat4[6], _ = F.mat4[7], S = F.mat4[8], E = F.mat4[9], A = F.mat4[10], x = F.mat4[11], P = F.mat4[12], M = F.mat4[13], R = F.mat4[14], L = F.mat4[15]) : h(F) && (l = F[0], n = F[1], a = F[2], c = F[3], p = F[4], j = F[5], T = F[6], _ = F[7], S = F[8], E = F[9], A = F[10], x = F[11], P = F[12], M = F[13], R = F[14], L = F[15]);\n          var l, n, a, c, p, j, T, _, S, E, A, x, P, M, R, L, F = l * j - n * p, V = l * T - a * p, G = l * _ - c * p, U = n * T - a * j, W = n * _ - c * j, X = a * _ - c * T, ne = S * M - E * P, b = S * R - A * P, O = S * L - x * P, D = E * R - A * M, B = E * L - x * M, Y = A * L - x * R, J = F * Y - V * B + G * D + U * O - W * b + X * ne;\n          return J ? (this.mat4[0] = (j * Y - T * B + _ * D) * (J = 1 / J), this.mat4[1] = (a * B - n * Y - c * D) * J, this.mat4[2] = (M * X - R * W + L * U) * J, this.mat4[3] = (A * W - E * X - x * U) * J, this.mat4[4] = (T * O - p * Y - _ * b) * J, this.mat4[5] = (l * Y - a * O + c * b) * J, this.mat4[6] = (R * G - P * X - L * V) * J, this.mat4[7] = (S * X - A * G + x * V) * J, this.mat4[8] = (p * B - j * O + _ * ne) * J, this.mat4[9] = (n * O - l * B - c * ne) * J, this.mat4[10] = (P * W - M * G + L * F) * J, this.mat4[11] = (E * G - S * W - x * F) * J, this.mat4[12] = (j * b - p * D - T * ne) * J, this.mat4[13] = (l * D - n * b + a * ne) * J, this.mat4[14] = (M * V - P * U - R * F) * J, this.mat4[15] = (S * U - E * V + A * F) * J, this) : null;\n        } }, { key: \"invert3x3\", value: function() {\n          var i = this.mat3[0], l = this.mat3[1], n = this.mat3[2], a = this.mat3[3], c = this.mat3[4], p = this.mat3[5], j = this.mat3[6], T = this.mat3[7], _ = this.mat3[8], S = _ * c - p * T, E = -_ * a + p * j, A = T * a - c * j, x = i * S + l * E + n * A;\n          return x ? (this.mat3[0] = S * (x = 1 / x), this.mat3[1] = (-_ * l + n * T) * x, this.mat3[2] = (p * l - n * c) * x, this.mat3[3] = E * x, this.mat3[4] = (_ * i - n * j) * x, this.mat3[5] = (-p * i + n * a) * x, this.mat3[6] = A * x, this.mat3[7] = (-T * i + l * j) * x, this.mat3[8] = (c * i - l * a) * x, this) : null;\n        } }, { key: \"transpose3x3\", value: function(i) {\n          var l = (i = i === void 0 ? this.mat3 : i)[1], n = i[2], a = i[5];\n          return this.mat3[0] = i[0], this.mat3[1] = i[3], this.mat3[2] = i[6], this.mat3[3] = l, this.mat3[4] = i[4], this.mat3[5] = i[7], this.mat3[6] = n, this.mat3[7] = a, this.mat3[8] = i[8], this;\n        } }, { key: \"inverseTranspose\", value: function(i) {\n          if (i = i.mat4, this.mat3 === void 0 ? m.default._friendlyError(\"sorry, this function only works with mat3\") : (this.mat3[0] = i[0], this.mat3[1] = i[1], this.mat3[2] = i[2], this.mat3[3] = i[4], this.mat3[4] = i[5], this.mat3[5] = i[6], this.mat3[6] = i[8], this.mat3[7] = i[9], this.mat3[8] = i[10]), i = this.invert3x3(), i)\n            i.transpose3x3(this.mat3);\n          else\n            for (var l = 0; l < 9; l++)\n              this.mat3[l] = 0;\n          return this;\n        } }, { key: \"determinant\", value: function() {\n          var i = this.mat4[0] * this.mat4[5] - this.mat4[1] * this.mat4[4], l = this.mat4[0] * this.mat4[6] - this.mat4[2] * this.mat4[4], n = this.mat4[0] * this.mat4[7] - this.mat4[3] * this.mat4[4], a = this.mat4[1] * this.mat4[6] - this.mat4[2] * this.mat4[5], c = this.mat4[1] * this.mat4[7] - this.mat4[3] * this.mat4[5], p = this.mat4[2] * this.mat4[7] - this.mat4[3] * this.mat4[6], j = this.mat4[8] * this.mat4[13] - this.mat4[9] * this.mat4[12], T = this.mat4[8] * this.mat4[14] - this.mat4[10] * this.mat4[12], _ = this.mat4[8] * this.mat4[15] - this.mat4[11] * this.mat4[12], S = this.mat4[9] * this.mat4[14] - this.mat4[10] * this.mat4[13], E = this.mat4[9] * this.mat4[15] - this.mat4[11] * this.mat4[13];\n          return i * (this.mat4[10] * this.mat4[15] - this.mat4[11] * this.mat4[14]) - l * E + n * S + a * _ - c * T + p * j;\n        } }, { key: \"mult\", value: function(n) {\n          var l;\n          if (n === this || n === this.mat4)\n            l = this.copy().mat4;\n          else if (n instanceof m.default.Matrix)\n            l = n.mat4;\n          else if (h(n))\n            l = n;\n          else {\n            if (arguments.length !== 16)\n              return;\n            l = arguments;\n          }\n          var n = this.mat4[0], a = this.mat4[1], c = this.mat4[2], p = this.mat4[3];\n          return this.mat4[0] = n * l[0] + a * l[4] + c * l[8] + p * l[12], this.mat4[1] = n * l[1] + a * l[5] + c * l[9] + p * l[13], this.mat4[2] = n * l[2] + a * l[6] + c * l[10] + p * l[14], this.mat4[3] = n * l[3] + a * l[7] + c * l[11] + p * l[15], n = this.mat4[4], a = this.mat4[5], c = this.mat4[6], p = this.mat4[7], this.mat4[4] = n * l[0] + a * l[4] + c * l[8] + p * l[12], this.mat4[5] = n * l[1] + a * l[5] + c * l[9] + p * l[13], this.mat4[6] = n * l[2] + a * l[6] + c * l[10] + p * l[14], this.mat4[7] = n * l[3] + a * l[7] + c * l[11] + p * l[15], n = this.mat4[8], a = this.mat4[9], c = this.mat4[10], p = this.mat4[11], this.mat4[8] = n * l[0] + a * l[4] + c * l[8] + p * l[12], this.mat4[9] = n * l[1] + a * l[5] + c * l[9] + p * l[13], this.mat4[10] = n * l[2] + a * l[6] + c * l[10] + p * l[14], this.mat4[11] = n * l[3] + a * l[7] + c * l[11] + p * l[15], n = this.mat4[12], a = this.mat4[13], c = this.mat4[14], p = this.mat4[15], this.mat4[12] = n * l[0] + a * l[4] + c * l[8] + p * l[12], this.mat4[13] = n * l[1] + a * l[5] + c * l[9] + p * l[13], this.mat4[14] = n * l[2] + a * l[6] + c * l[10] + p * l[14], this.mat4[15] = n * l[3] + a * l[7] + c * l[11] + p * l[15], this;\n        } }, { key: \"apply\", value: function(n) {\n          var l;\n          if (n === this || n === this.mat4)\n            l = this.copy().mat4;\n          else if (n instanceof m.default.Matrix)\n            l = n.mat4;\n          else if (h(n))\n            l = n;\n          else {\n            if (arguments.length !== 16)\n              return;\n            l = arguments;\n          }\n          var n = this.mat4, a = n[0], c = n[4], p = n[8], j = n[12], a = (n[0] = l[0] * a + l[1] * c + l[2] * p + l[3] * j, n[4] = l[4] * a + l[5] * c + l[6] * p + l[7] * j, n[8] = l[8] * a + l[9] * c + l[10] * p + l[11] * j, n[12] = l[12] * a + l[13] * c + l[14] * p + l[15] * j, n[1]), c = n[5], p = n[9], j = n[13], a = (n[1] = l[0] * a + l[1] * c + l[2] * p + l[3] * j, n[5] = l[4] * a + l[5] * c + l[6] * p + l[7] * j, n[9] = l[8] * a + l[9] * c + l[10] * p + l[11] * j, n[13] = l[12] * a + l[13] * c + l[14] * p + l[15] * j, n[2]), c = n[6], p = n[10], j = n[14], a = (n[2] = l[0] * a + l[1] * c + l[2] * p + l[3] * j, n[6] = l[4] * a + l[5] * c + l[6] * p + l[7] * j, n[10] = l[8] * a + l[9] * c + l[10] * p + l[11] * j, n[14] = l[12] * a + l[13] * c + l[14] * p + l[15] * j, n[3]), c = n[7], p = n[11], j = n[15];\n          return n[3] = l[0] * a + l[1] * c + l[2] * p + l[3] * j, n[7] = l[4] * a + l[5] * c + l[6] * p + l[7] * j, n[11] = l[8] * a + l[9] * c + l[10] * p + l[11] * j, n[15] = l[12] * a + l[13] * c + l[14] * p + l[15] * j, this;\n        } }, { key: \"scale\", value: function(i, l, n) {\n          return i instanceof m.default.Vector ? (l = i.y, n = i.z, i = i.x) : i instanceof Array && (l = i[1], n = i[2], i = i[0]), this.mat4[0] *= i, this.mat4[1] *= i, this.mat4[2] *= i, this.mat4[3] *= i, this.mat4[4] *= l, this.mat4[5] *= l, this.mat4[6] *= l, this.mat4[7] *= l, this.mat4[8] *= n, this.mat4[9] *= n, this.mat4[10] *= n, this.mat4[11] *= n, this;\n        } }, { key: \"rotate\", value: function(F, B, D, a) {\n          B instanceof m.default.Vector ? (D = B.y, a = B.z, B = B.x) : B instanceof Array && (D = B[1], a = B[2], B = B[0]);\n          var c = Math.sqrt(B * B + D * D + a * a), c = (B *= 1 / c, D *= 1 / c, a *= 1 / c, this.mat4[0]), p = this.mat4[1], j = this.mat4[2], T = this.mat4[3], _ = this.mat4[4], S = this.mat4[5], E = this.mat4[6], A = this.mat4[7], x = this.mat4[8], P = this.mat4[9], M = this.mat4[10], R = this.mat4[11], L = Math.sin(F), F = Math.cos(F), V = 1 - F, G = B * B * V + F, U = D * B * V + a * L, W = a * B * V - D * L, X = B * D * V - a * L, ne = D * D * V + F, b = a * D * V + B * L, O = B * a * V + D * L, D = D * a * V - B * L, B = a * a * V + F;\n          return this.mat4[0] = c * G + _ * U + x * W, this.mat4[1] = p * G + S * U + P * W, this.mat4[2] = j * G + E * U + M * W, this.mat4[3] = T * G + A * U + R * W, this.mat4[4] = c * X + _ * ne + x * b, this.mat4[5] = p * X + S * ne + P * b, this.mat4[6] = j * X + E * ne + M * b, this.mat4[7] = T * X + A * ne + R * b, this.mat4[8] = c * O + _ * D + x * B, this.mat4[9] = p * O + S * D + P * B, this.mat4[10] = j * O + E * D + M * B, this.mat4[11] = T * O + A * D + R * B, this;\n        } }, { key: \"translate\", value: function(a) {\n          var l = a[0], n = a[1], a = a[2] || 0;\n          this.mat4[12] += this.mat4[0] * l + this.mat4[4] * n + this.mat4[8] * a, this.mat4[13] += this.mat4[1] * l + this.mat4[5] * n + this.mat4[9] * a, this.mat4[14] += this.mat4[2] * l + this.mat4[6] * n + this.mat4[10] * a, this.mat4[15] += this.mat4[3] * l + this.mat4[7] * n + this.mat4[11] * a;\n        } }, { key: \"rotateX\", value: function(i) {\n          this.rotate(i, 1, 0, 0);\n        } }, { key: \"rotateY\", value: function(i) {\n          this.rotate(i, 0, 1, 0);\n        } }, { key: \"rotateZ\", value: function(i) {\n          this.rotate(i, 0, 0, 1);\n        } }, { key: \"perspective\", value: function(c, l, n, a) {\n          var c = 1 / Math.tan(c / 2), p = 1 / (n - a);\n          return this.mat4[0] = c / l, this.mat4[1] = 0, this.mat4[2] = 0, this.mat4[3] = 0, this.mat4[4] = 0, this.mat4[5] = c, this.mat4[6] = 0, this.mat4[7] = 0, this.mat4[8] = 0, this.mat4[9] = 0, this.mat4[10] = (a + n) * p, this.mat4[11] = -1, this.mat4[12] = 0, this.mat4[13] = 0, this.mat4[14] = 2 * a * n * p, this.mat4[15] = 0, this;\n        } }, { key: \"ortho\", value: function(i, l, n, a, c, p) {\n          var j = 1 / (i - l), T = 1 / (n - a), _ = 1 / (c - p);\n          return this.mat4[0] = -2 * j, this.mat4[1] = 0, this.mat4[2] = 0, this.mat4[3] = 0, this.mat4[4] = 0, this.mat4[5] = -2 * T, this.mat4[6] = 0, this.mat4[7] = 0, this.mat4[8] = 0, this.mat4[9] = 0, this.mat4[10] = 2 * _, this.mat4[11] = 0, this.mat4[12] = (i + l) * j, this.mat4[13] = (a + n) * T, this.mat4[14] = (p + c) * _, this.mat4[15] = 1, this;\n        } }, { key: \"multiplyVec4\", value: function(i, l, n, a) {\n          var c = new Array(4), p = this.mat4;\n          return c[0] = p[0] * i + p[4] * l + p[8] * n + p[12] * a, c[1] = p[1] * i + p[5] * l + p[9] * n + p[13] * a, c[2] = p[2] * i + p[6] * l + p[10] * n + p[14] * a, c[3] = p[3] * i + p[7] * l + p[11] * n + p[15] * a, c;\n        } }, { key: \"multiplyPoint\", value: function(n) {\n          var a = n.x, l = n.y, n = n.z, a = this.multiplyVec4(a, l, n, 1);\n          return new m.default.Vector(a[0], a[1], a[2]);\n        } }, { key: \"multiplyAndNormalizePoint\", value: function(n) {\n          var a = n.x, l = n.y, n = n.z, a = this.multiplyVec4(a, l, n, 1);\n          return a[0] /= a[3], a[1] /= a[3], a[2] /= a[3], new m.default.Vector(a[0], a[1], a[2]);\n        } }, { key: \"multiplyDirection\", value: function(n) {\n          var a = n.x, l = n.y, n = n.z, a = this.multiplyVec4(a, l, n, 0);\n          return new m.default.Vector(a[0], a[1], a[2]);\n        } }, { key: \"mult3x3\", value: function(n) {\n          var l;\n          if (n === this || n === this.mat3)\n            l = this.copy().mat3;\n          else if (n instanceof m.default.Matrix)\n            l = n.mat3;\n          else if (h(n))\n            l = n;\n          else {\n            if (arguments.length !== 9)\n              return;\n            l = arguments;\n          }\n          var n = this.mat3[0], a = this.mat3[1], c = this.mat3[2];\n          return this.mat3[0] = n * l[0] + a * l[3] + c * l[6], this.mat3[1] = n * l[1] + a * l[4] + c * l[7], this.mat3[2] = n * l[2] + a * l[5] + c * l[8], n = this.mat3[3], a = this.mat3[4], c = this.mat3[5], this.mat3[3] = n * l[0] + a * l[3] + c * l[6], this.mat3[4] = n * l[1] + a * l[4] + c * l[7], this.mat3[5] = n * l[2] + a * l[5] + c * l[8], n = this.mat3[6], a = this.mat3[7], c = this.mat3[8], this.mat3[6] = n * l[0] + a * l[3] + c * l[6], this.mat3[7] = n * l[1] + a * l[4] + c * l[7], this.mat3[8] = n * l[2] + a * l[5] + c * l[8], this;\n        } }, { key: \"column\", value: function(i) {\n          return new m.default.Vector(this.mat3[3 * i], this.mat3[3 * i + 1], this.mat3[3 * i + 2]);\n        } }, { key: \"row\", value: function(i) {\n          return new m.default.Vector(this.mat3[i], this.mat3[i + 3], this.mat3[i + 6]);\n        } }, { key: \"diagonal\", value: function() {\n          return this.mat3 !== void 0 ? [this.mat3[0], this.mat3[4], this.mat3[8]] : [this.mat4[0], this.mat4[5], this.mat4[10], this.mat4[15]];\n        } }, { key: \"multiplyVec3\", value: function(i, l) {\n          return (l = l === void 0 ? i.copy() : l).x = this.row(0).dot(i), l.y = this.row(1).dot(i), l.z = this.row(2).dot(i), l;\n        } }, { key: \"createSubMatrix3x3\", value: function() {\n          var i = new m.default.Matrix(\"mat3\");\n          return i.mat3[0] = this.mat4[0], i.mat3[1] = this.mat4[1], i.mat3[2] = this.mat4[2], i.mat3[3] = this.mat4[4], i.mat3[4] = this.mat4[5], i.mat3[5] = this.mat4[6], i.mat3[6] = this.mat4[8], i.mat3[7] = this.mat4[9], i.mat3[8] = this.mat4[10], i;\n        } }]) && y(r.prototype, s), o && y(r, o), f;\n      }(), m.default.Matrix);\n      C.default = g;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.float32-array\": 216, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236 }], 334: [function(t, H, C) {\n      t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.map\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0, t = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function m(y, u) {\n        for (var h = 0; h < u.length; h++) {\n          var g = u[h];\n          g.enumerable = g.enumerable || !1, g.configurable = !0, \"value\" in g && (g.writable = !0), Object.defineProperty(y, g.key, g);\n        }\n      }\n      t.default.RenderBuffer = function() {\n        function y(g, f, r, s, o, i) {\n          if (!(this instanceof y))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this.size = g, this.src = f, this.dst = r, this.attr = s, this._renderer = o, this.map = i;\n        }\n        var u, h;\n        return u = y, (h = [{ key: \"_prepareBuffer\", value: function(g, f) {\n          var r, s, o, n = f.attributes, i = this._renderer.GL, l = g.model || g, n = n[this.attr];\n          n && (r = g[this.dst], 0 < (s = l[this.src]).length ? ((o = !r) && (g[this.dst] = r = i.createBuffer()), i.bindBuffer(i.ARRAY_BUFFER, r), !o && l.dirtyFlags[this.src] === !1 || (o = (g = this.map) ? g(s) : s, this._renderer._bindBuffer(r, i.ARRAY_BUFFER, o), l.dirtyFlags[this.src] = !1), f.enableAttrib(n, this.size)) : (g = n.location) !== -1 && this._renderer.registerEnabled.has(g) && (i.disableVertexAttribArray(g), this._renderer.registerEnabled.delete(g)));\n        } }]) && m(u.prototype, h), y;\n      }(), t = t.default.RenderBuffer, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.map\": 167 }], 335: [function(t, H, C) {\n      function m(o) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(i) {\n          return typeof i;\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : typeof i;\n        })(o);\n      }\n      function y(o) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(i) {\n          return m(i);\n        } : function(i) {\n          return i && typeof Symbol == \"function\" && i.constructor === Symbol && i !== Symbol.prototype ? \"symbol\" : m(i);\n        })(o);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.fill\"), t(\"core-js/modules/es.array.find-index\"), t(\"core-js/modules/es.array.from\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.map\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.concat\"), t(\"core-js/modules/es.array.fill\"), t(\"core-js/modules/es.array.find-index\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.map\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.map\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (s = t(\"../core/main\")) && s.__esModule ? s : { default: s }, h = function(o) {\n        if (o && o.__esModule)\n          return o;\n        if (o === null || y(o) !== \"object\" && typeof o != \"function\")\n          return { default: o };\n        var i = g();\n        if (i && i.has(o))\n          return i.get(o);\n        var l, n = {}, a = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (l in o) {\n          var c;\n          Object.prototype.hasOwnProperty.call(o, l) && ((c = a ? Object.getOwnPropertyDescriptor(o, l) : null) && (c.get || c.set) ? Object.defineProperty(n, l, c) : n[l] = o[l]);\n        }\n        return n.default = o, i && i.set(o, n), n;\n      }(t(\"../core/constants\"));\n      function g() {\n        var o;\n        return typeof WeakMap != \"function\" ? null : (o = /* @__PURE__ */ new WeakMap(), g = function() {\n          return o;\n        }, o);\n      }\n      function f(o) {\n        return function(i) {\n          if (Array.isArray(i)) {\n            for (var l = 0, n = new Array(i.length); l < i.length; l++)\n              n[l] = i[l];\n            return n;\n          }\n        }(o) || function(i) {\n          if (Symbol.iterator in Object(i) || Object.prototype.toString.call(i) === \"[object Arguments]\")\n            return Array.from(i);\n        }(o) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      t(\"./p5.RenderBuffer\"), u.default.RendererGL.prototype.beginShape = function(o) {\n        return this.immediateMode.shapeMode = o !== void 0 ? o : h.TESS, this.immediateMode.geometry.reset(), this.immediateMode.contourIndices = [], this;\n      };\n      var r = { vertices: 1, vertexNormals: 1, vertexColors: 4, vertexStrokeColors: 4, uvs: 2 }, s = (u.default.RendererGL.prototype.beginContour = function() {\n        if (this.immediateMode.shapeMode !== h.TESS)\n          throw new Error(\"WebGL mode can only use contours with beginShape(TESS).\");\n        this.immediateMode.contourIndices.push(this.immediateMode.geometry.vertices.length);\n      }, u.default.RendererGL.prototype.vertex = function(o, i) {\n        if (this.immediateMode.shapeMode === h.QUADS && this.immediateMode.geometry.vertices.length % 6 == 3)\n          for (var l in r) {\n            var n = r[l], l = this.immediateMode.geometry[l];\n            l.push.apply(l, f(l.slice(l.length - 3 * n, l.length - 2 * n)).concat(f(l.slice(l.length - n, l.length))));\n          }\n        var a, c, p = a = c = 0, j = (arguments.length === 3 ? p = arguments[2] : arguments.length === 4 ? (a = arguments[2], c = arguments[3]) : arguments.length === 5 && (p = arguments[2], a = arguments[3], c = arguments[4]), new u.default.Vector(o, i, p)), j = (this.immediateMode.geometry.vertices.push(j), this.immediateMode.geometry.vertexNormals.push(this._currentNormal), this.curFillColor || [0.5, 0.5, 0.5, 1]), j = (this.immediateMode.geometry.vertexColors.push(j[0], j[1], j[2], j[3]), this.curStrokeColor || [0.5, 0.5, 0.5, 1]);\n        return this.immediateMode.geometry.vertexStrokeColors.push(j[0], j[1], j[2], j[3]), this.textureMode !== h.IMAGE || this.isProcessingVertices || (this._tex !== null ? 0 < this._tex.width && 0 < this._tex.height && (a /= this._tex.width, c /= this._tex.height) : this.userFillShader === void 0 && this.userStrokeShader === void 0 && this.userPointShader === void 0 && this._tex === null && 4 <= arguments.length && console.warn(\"You must first call texture() before using vertex() with image based u and v coordinates\")), this.immediateMode.geometry.uvs.push(a, c), this.immediateMode._bezierVertex[0] = o, this.immediateMode._bezierVertex[1] = i, this.immediateMode._bezierVertex[2] = p, this.immediateMode._quadraticVertex[0] = o, this.immediateMode._quadraticVertex[1] = i, this.immediateMode._quadraticVertex[2] = p, this;\n      }, u.default.RendererGL.prototype.normal = function(o, i, l) {\n        return o instanceof u.default.Vector ? this._currentNormal = o : this._currentNormal = new u.default.Vector(o, i, l), this;\n      }, u.default.RendererGL.prototype.endShape = function(o, i, l, n, a, c) {\n        var p, j = 6 < arguments.length && arguments[6] !== void 0 ? arguments[6] : 1;\n        return this.immediateMode.shapeMode === h.POINTS ? this._drawPoints(this.immediateMode.geometry.vertices, this.immediateMode.buffers.point) : (this.immediateMode.geometry.vertices.length === 3 && this.immediateMode.shapeMode === h.TESS && (this.immediateMode.shapeMode, h.TRIANGLES), this.isProcessingVertices = !0, this._processVertices.apply(this, arguments), p = this.isProcessingVertices = !1, this.immediateMode.shapeMode !== h.LINE_STRIP && this.immediateMode.shapeMode !== h.LINES || (this.immediateMode.shapeMode = h.TRIANGLE_FAN, p = !0), this.immediateMode.shapeMode === h.QUADS ? this.immediateMode.shapeMode = h.TRIANGLES : this.immediateMode.shapeMode === h.QUAD_STRIP && (this.immediateMode.shapeMode = h.TRIANGLE_STRIP), this._doFill && !p && !this.geometryBuilder && 3 <= this.immediateMode.geometry.vertices.length && this._drawImmediateFill(j), this._doStroke && !this.geometryBuilder && 1 <= this.immediateMode.geometry.lineVertices.length && this._drawImmediateStroke(), this.geometryBuilder && this.geometryBuilder.addImmediate(), this.isBezier = !1, this.isQuadratic = !1, this.isCurve = !1, this.immediateMode._bezierVertex.length = 0, this.immediateMode._quadraticVertex.length = 0, this.immediateMode._curveVertex.length = 0), this;\n      }, u.default.RendererGL.prototype._processVertices = function(o) {\n        var i;\n        this.immediateMode.geometry.vertices.length !== 0 && (i = this._doStroke, o = o === h.CLOSE, i && (this.immediateMode.geometry.edges = this._calculateEdges(this.immediateMode.shapeMode, this.immediateMode.geometry.vertices, o), this.geometryBuilder || this.immediateMode.geometry._edgesToVertices()), i = this.immediateMode.shapeMode === h.TESS, o = 0 < this.immediateMode.contourIndices.length, this._doFill && (this.isBezier || this.isQuadratic || this.isCurve || i || o) && this.immediateMode.shapeMode !== h.LINES && this._tesselateShape());\n      }, u.default.RendererGL.prototype._calculateEdges = function(o, i, l) {\n        var n = [], a = 0, c = this.immediateMode.contourIndices.slice(), p = 0;\n        switch (o) {\n          case h.TRIANGLE_STRIP:\n            for (a = 0; a < i.length - 2; a++)\n              n.push([a, a + 1]), n.push([a, a + 2]);\n            n.push([a, a + 1]);\n            break;\n          case h.TRIANGLE_FAN:\n            for (a = 1; a < i.length - 1; a++)\n              n.push([0, a]), n.push([a, a + 1]);\n            n.push([0, i.length - 1]);\n            break;\n          case h.TRIANGLES:\n            for (a = 0; a < i.length - 2; a += 3)\n              n.push([a, a + 1]), n.push([a + 1, a + 2]), n.push([a + 2, a]);\n            break;\n          case h.LINES:\n            for (a = 0; a < i.length - 1; a += 2)\n              n.push([a, a + 1]);\n            break;\n          case h.QUADS:\n            for (a = 0; a < i.length - 5; a += 6)\n              n.push([a, a + 1]), n.push([a + 1, a + 2]), n.push([a + 3, a + 5]), n.push([a + 4, a + 5]);\n            break;\n          case h.QUAD_STRIP:\n            for (a = 0; a < i.length - 2; a += 2)\n              n.push([a, a + 1]), n.push([a, a + 2]), n.push([a + 1, a + 3]);\n            n.push([a, a + 1]);\n            break;\n          default:\n            for (a = 0; a < i.length; a++)\n              a + 1 < i.length && a + 1 !== c[0] ? n.push([a, a + 1]) : ((l || p) && n.push([a, p]), 0 < c.length && (p = c.shift()));\n        }\n        return o !== h.TESS && l && n.push([i.length - 1, 0]), n;\n      }, u.default.RendererGL.prototype._tesselateShape = function() {\n        for (var o = this, i = (this.immediateMode.shapeMode = h.TRIANGLES, [[]]), l = 0; l < this.immediateMode.geometry.vertices.length; l++)\n          0 < this.immediateMode.contourIndices.length && this.immediateMode.contourIndices[0] === l && (this.immediateMode.contourIndices.shift(), i.push([])), i[i.length - 1].push(this.immediateMode.geometry.vertices[l].x, this.immediateMode.geometry.vertices[l].y, this.immediateMode.geometry.vertices[l].z, this.immediateMode.geometry.uvs[2 * l], this.immediateMode.geometry.uvs[2 * l + 1], this.immediateMode.geometry.vertexColors[4 * l], this.immediateMode.geometry.vertexColors[4 * l + 1], this.immediateMode.geometry.vertexColors[4 * l + 2], this.immediateMode.geometry.vertexColors[4 * l + 3], this.immediateMode.geometry.vertexNormals[l].x, this.immediateMode.geometry.vertexNormals[l].y, this.immediateMode.geometry.vertexNormals[l].z);\n        for (var n, a = this._triangulate(i), c = this.immediateMode.geometry.vertices, p = (this.immediateMode.geometry.vertices = [], this.immediateMode.geometry.vertexNormals = [], this.immediateMode.geometry.uvs = [], []), j = 0, T = a.length; j < T; j += u.default.RendererGL.prototype.tessyVertexSize)\n          p.push.apply(p, f(a.slice(j + 5, j + 9))), this.normal.apply(this, f(a.slice(j + 9, j + 12))), this.vertex.apply(this, f(a.slice(j, j + 5)));\n        this.geometryBuilder && (n = /* @__PURE__ */ new Map(), this.immediateMode.geometry.edges = this.immediateMode.geometry.edges.map(function(_) {\n          return _.map(function(S) {\n            if (!n.has(S)) {\n              var E = c[S], A = o.immediateMode.geometry.vertices.findIndex(function(V) {\n                return E.x === V.x && E.y === V.y && E.z === V.z;\n              });\n              if (A === -1) {\n                for (var x = 1 / 0, P = 0, M = 0; M < o.immediateMode.geometry.vertices.length; M++) {\n                  var L = o.immediateMode.geometry.vertices[M], F = E.x - L.x, R = E.y - L.y, L = E.z - L.z, F = F * F + R * R + L * L;\n                  F < x && (x = F, P = M);\n                }\n                A = P;\n              }\n              n.set(S, A);\n            }\n            return n.get(S);\n          });\n        })), this.immediateMode.geometry.vertexColors = p;\n      }, u.default.RendererGL.prototype._drawImmediateFill = function() {\n        var o, i = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 1, l = this.GL, n = (this._useVertexColor = 0 < this.immediateMode.geometry.vertexColors.length, o = this._getImmediateFillShader(), this._setFillUniforms(o), !0), a = !1, c = void 0;\n        try {\n          for (var p, j = this.immediateMode.buffers.fill[Symbol.iterator](); !(n = (p = j.next()).done); n = !0)\n            p.value._prepareBuffer(this.immediateMode.geometry, o);\n        } catch (T) {\n          a = !0, c = T;\n        } finally {\n          try {\n            n || j.return == null || j.return();\n          } finally {\n            if (a)\n              throw c;\n          }\n        }\n        if (o.disableRemainingAttributes(), this._applyColorBlend(this.curFillColor, this.immediateMode.geometry.hasFillTransparency()), i === 1)\n          l.drawArrays(this.immediateMode.shapeMode, 0, this.immediateMode.geometry.vertices.length);\n        else\n          try {\n            l.drawArraysInstanced(this.immediateMode.shapeMode, 0, this.immediateMode.geometry.vertices.length, i);\n          } catch {\n            console.log(\"🌸 p5.js says: Instancing is only supported in WebGL2 mode\");\n          }\n        o.unbindShader();\n      }, u.default.RendererGL.prototype._drawImmediateStroke = function() {\n        var o = this.GL, i = (this._useLineColor = 0 < this.immediateMode.geometry.vertexStrokeColors.length, this._getImmediateStrokeShader()), l = (this._setStrokeUniforms(i), !0), n = !1, a = void 0;\n        try {\n          for (var c, p = this.immediateMode.buffers.stroke[Symbol.iterator](); !(l = (c = p.next()).done); l = !0)\n            c.value._prepareBuffer(this.immediateMode.geometry, i);\n        } catch (j) {\n          n = !0, a = j;\n        } finally {\n          try {\n            l || p.return == null || p.return();\n          } finally {\n            if (n)\n              throw a;\n          }\n        }\n        i.disableRemainingAttributes(), this._applyColorBlend(this.curStrokeColor, this.immediateMode.geometry.hasFillTransparency()), o.drawArrays(o.TRIANGLES, 0, this.immediateMode.geometry.lineVertices.length / 3), i.unbindShader();\n      }, u.default.RendererGL);\n      C.default = s;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"./p5.RenderBuffer\": 334, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.fill\": 155, \"core-js/modules/es.array.find-index\": 157, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.map\": 174, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 336: [function(t, H, C) {\n      function m(r) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(s) {\n          return typeof s;\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : typeof s;\n        })(r);\n      }\n      function y(r) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(s) {\n          return m(s);\n        } : function(s) {\n          return s && typeof Symbol == \"function\" && s.constructor === Symbol && s !== Symbol.prototype ? \"symbol\" : m(s);\n        })(r);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.fill\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.some\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.typed-array.float32-array\"), t(\"core-js/modules/es.typed-array.uint16-array\"), t(\"core-js/modules/es.typed-array.uint32-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.fill\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.some\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.typed-array.float32-array\"), t(\"core-js/modules/es.typed-array.uint16-array\"), t(\"core-js/modules/es.typed-array.uint32-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var u = (f = t(\"../core/main\")) && f.__esModule ? f : { default: f }, h = (t(\"./p5.RendererGL\"), t(\"./p5.RenderBuffer\"), function(r) {\n        if (r && r.__esModule)\n          return r;\n        if (r === null || y(r) !== \"object\" && typeof r != \"function\")\n          return { default: r };\n        var s = g();\n        if (s && s.has(r))\n          return s.get(r);\n        var o, i = {}, l = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (o in r) {\n          var n;\n          Object.prototype.hasOwnProperty.call(r, o) && ((n = l ? Object.getOwnPropertyDescriptor(r, o) : null) && (n.get || n.set) ? Object.defineProperty(i, o, n) : i[o] = r[o]);\n        }\n        return i.default = r, s && s.set(r, i), i;\n      }(t(\"../core/constants\")));\n      function g() {\n        var r;\n        return typeof WeakMap != \"function\" ? null : (r = /* @__PURE__ */ new WeakMap(), g = function() {\n          return r;\n        }, r);\n      }\n      u.default.RendererGL.prototype.freeGeometry = function(r) {\n        r.gid ? this._freeBuffers(r.gid) : console.warn(\"The model you passed to freeGeometry does not have an id!\");\n      }, u.default.RendererGL.prototype._initBufferDefaults = function(r) {\n        var s;\n        return this._freeBuffers(r), 1e3 < Object.keys(this.retainedMode.geometry).length && (s = Object.keys(this.retainedMode.geometry)[0], this._freeBuffers(s)), this.retainedMode.geometry[r] = {};\n      }, u.default.RendererGL.prototype._freeBuffers = function(r) {\n        var s, o = this.retainedMode.geometry[r];\n        function i(l) {\n          var n = !0, a = !1, c = void 0;\n          try {\n            for (var p, j = l[Symbol.iterator](); !(n = (p = j.next()).done); n = !0) {\n              var T = p.value;\n              o[T.dst] && (s.deleteBuffer(o[T.dst]), o[T.dst] = null);\n            }\n          } catch (_) {\n            a = !0, c = _;\n          } finally {\n            try {\n              n || j.return == null || j.return();\n            } finally {\n              if (a)\n                throw c;\n            }\n          }\n        }\n        o && (delete this.retainedMode.geometry[r], s = this.GL, o.indexBuffer && s.deleteBuffer(o.indexBuffer), i(this.retainedMode.buffers.stroke), i(this.retainedMode.buffers.fill));\n      }, u.default.RendererGL.prototype.createBuffers = function(a, s) {\n        var o, i, l, n = this.GL, a = this._initBufferDefaults(a), c = (a.model = s, a.indexBuffer);\n        return s.faces.length ? (c = c || (a.indexBuffer = n.createBuffer()), l = (i = (o = u.default.RendererGL.prototype._flatten(s.faces)).some(function(p) {\n          return 65535 < p;\n        })) ? Uint32Array : Uint16Array, this._bindBuffer(c, n.ELEMENT_ARRAY_BUFFER, o, l), a.indexBufferType = i ? n.UNSIGNED_INT : n.UNSIGNED_SHORT, a.vertexCount = 3 * s.faces.length) : (c && (n.deleteBuffer(c), a.indexBuffer = null), a.vertexCount = s.vertices ? s.vertices.length : 0), a.lineVertexCount = s.lineVertices ? s.lineVertices.length / 3 : 0, a;\n      }, u.default.RendererGL.prototype.drawBuffers = function(r) {\n        var s = this.GL, o = this.retainedMode.geometry[r];\n        if (!this.geometryBuilder && this._doFill && 0 < this.retainedMode.geometry[r].vertexCount) {\n          this._useVertexColor = 0 < o.model.vertexColors.length;\n          var i = this._getRetainedFillShader(), l = (this._setFillUniforms(i), !0), n = !1, a = void 0;\n          try {\n            for (var c, p = this.retainedMode.buffers.fill[Symbol.iterator](); !(l = (c = p.next()).done); l = !0)\n              c.value._prepareBuffer(o, i);\n          } catch (E) {\n            n = !0, a = E;\n          } finally {\n            try {\n              l || p.return == null || p.return();\n            } finally {\n              if (n)\n                throw a;\n            }\n          }\n          i.disableRemainingAttributes(), o.indexBuffer && this._bindBuffer(o.indexBuffer, s.ELEMENT_ARRAY_BUFFER), this._applyColorBlend(this.curFillColor, o.model.hasFillTransparency()), this._drawElements(s.TRIANGLES, r), i.unbindShader();\n        }\n        if (!this.geometryBuilder && this._doStroke && 0 < o.lineVertexCount) {\n          this._useLineColor = 0 < o.model.vertexStrokeColors.length;\n          var j = this._getRetainedStrokeShader(), T = (this._setStrokeUniforms(j), !0), n = !1, a = void 0;\n          try {\n            for (var _, S = this.retainedMode.buffers.stroke[Symbol.iterator](); !(T = (_ = S.next()).done); T = !0)\n              _.value._prepareBuffer(o, j);\n          } catch (x) {\n            n = !0, a = x;\n          } finally {\n            try {\n              T || S.return == null || S.return();\n            } finally {\n              if (n)\n                throw a;\n            }\n          }\n          j.disableRemainingAttributes(), this._applyColorBlend(this.curStrokeColor, o.model.hasStrokeTransparency()), this._drawArrays(s.TRIANGLES, r), j.unbindShader();\n        }\n        return this.geometryBuilder && this.geometryBuilder.addRetained(o), this;\n      }, u.default.RendererGL.prototype.drawBuffersScaled = function(r, s, o, i) {\n        var l = this.uMVMatrix.copy();\n        try {\n          this.uMVMatrix.scale(s, o, i), this.drawBuffers(r);\n        } finally {\n          this.uMVMatrix = l;\n        }\n      }, u.default.RendererGL.prototype._drawArrays = function(r, s) {\n        return this.GL.drawArrays(r, 0, this.retainedMode.geometry[s].lineVertexCount), this;\n      }, u.default.RendererGL.prototype._drawElements = function(r, o) {\n        var o = this.retainedMode.geometry[o], i = this.GL;\n        if (o.indexBuffer) {\n          if (this._pInst.webglVersion !== h.WEBGL2 && o.indexBufferType === i.UNSIGNED_INT && !i.getExtension(\"OES_element_index_uint\"))\n            throw new Error(\"Unable to render a 3d model with > 65535 triangles. Your web browser does not support the WebGL Extension OES_element_index_uint.\");\n          i.drawElements(i.TRIANGLES, o.vertexCount, o.indexBufferType, 0);\n        } else\n          i.drawArrays(r || i.TRIANGLES, 0, o.vertexCount);\n      }, u.default.RendererGL.prototype._drawPoints = function(r, s) {\n        var o = this.GL, i = this._getImmediatePointShader();\n        this._setPointUniforms(i), this._bindBuffer(s, o.ARRAY_BUFFER, this._vToNArray(r), Float32Array, o.STATIC_DRAW), i.enableAttrib(i.attributes.aPosition, 3), this._applyColorBlend(this.curStrokeColor), o.drawArrays(o.Points, 0, r.length), i.unbindShader();\n      };\n      var f = u.default.RendererGL;\n      C.default = f;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"./p5.RenderBuffer\": 334, \"./p5.RendererGL\": 337, \"core-js/modules/es.array.fill\": 155, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.some\": 169, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.keys\": 186, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.float32-array\": 216, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236, \"core-js/modules/es.typed-array.uint16-array\": 237, \"core-js/modules/es.typed-array.uint32-array\": 238, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 337: [function(M, H, C) {\n      function m(U) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(W) {\n          return typeof W;\n        } : function(W) {\n          return W && typeof Symbol == \"function\" && W.constructor === Symbol && W !== Symbol.prototype ? \"symbol\" : typeof W;\n        })(U);\n      }\n      function y(U) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(W) {\n          return m(W);\n        } : function(W) {\n          return W && typeof Symbol == \"function\" && W.constructor === Symbol && W !== Symbol.prototype ? \"symbol\" : m(W);\n        })(U);\n      }\n      M(\"core-js/modules/es.symbol\"), M(\"core-js/modules/es.symbol.description\"), M(\"core-js/modules/es.symbol.iterator\"), M(\"core-js/modules/es.array.concat\"), M(\"core-js/modules/es.array.copy-within\"), M(\"core-js/modules/es.array.every\"), M(\"core-js/modules/es.array.fill\"), M(\"core-js/modules/es.array.flat\"), M(\"core-js/modules/es.array.flat-map\"), M(\"core-js/modules/es.array.from\"), M(\"core-js/modules/es.array.includes\"), M(\"core-js/modules/es.array.iterator\"), M(\"core-js/modules/es.array.map\"), M(\"core-js/modules/es.array.slice\"), M(\"core-js/modules/es.array.some\"), M(\"core-js/modules/es.array.unscopables.flat\"), M(\"core-js/modules/es.array.unscopables.flat-map\"), M(\"core-js/modules/es.map\"), M(\"core-js/modules/es.object.assign\"), M(\"core-js/modules/es.object.get-own-property-descriptor\"), M(\"core-js/modules/es.object.get-prototype-of\"), M(\"core-js/modules/es.object.to-string\"), M(\"core-js/modules/es.reflect.construct\"), M(\"core-js/modules/es.reflect.get\"), M(\"core-js/modules/es.regexp.to-string\"), M(\"core-js/modules/es.set\"), M(\"core-js/modules/es.string.includes\"), M(\"core-js/modules/es.string.iterator\"), M(\"core-js/modules/es.typed-array.float32-array\"), M(\"core-js/modules/es.typed-array.float64-array\"), M(\"core-js/modules/es.typed-array.int16-array\"), M(\"core-js/modules/es.typed-array.uint8-array\"), M(\"core-js/modules/es.typed-array.uint16-array\"), M(\"core-js/modules/es.typed-array.uint32-array\"), M(\"core-js/modules/es.typed-array.copy-within\"), M(\"core-js/modules/es.typed-array.every\"), M(\"core-js/modules/es.typed-array.fill\"), M(\"core-js/modules/es.typed-array.filter\"), M(\"core-js/modules/es.typed-array.find\"), M(\"core-js/modules/es.typed-array.find-index\"), M(\"core-js/modules/es.typed-array.for-each\"), M(\"core-js/modules/es.typed-array.includes\"), M(\"core-js/modules/es.typed-array.index-of\"), M(\"core-js/modules/es.typed-array.iterator\"), M(\"core-js/modules/es.typed-array.join\"), M(\"core-js/modules/es.typed-array.last-index-of\"), M(\"core-js/modules/es.typed-array.map\"), M(\"core-js/modules/es.typed-array.reduce\"), M(\"core-js/modules/es.typed-array.reduce-right\"), M(\"core-js/modules/es.typed-array.reverse\"), M(\"core-js/modules/es.typed-array.set\"), M(\"core-js/modules/es.typed-array.slice\"), M(\"core-js/modules/es.typed-array.some\"), M(\"core-js/modules/es.typed-array.sort\"), M(\"core-js/modules/es.typed-array.subarray\"), M(\"core-js/modules/es.typed-array.to-locale-string\"), M(\"core-js/modules/es.typed-array.to-string\"), M(\"core-js/modules/es.weak-map\"), M(\"core-js/modules/web.dom-collections.iterator\"), M(\"core-js/modules/es.symbol\"), M(\"core-js/modules/es.symbol.description\"), M(\"core-js/modules/es.symbol.iterator\"), M(\"core-js/modules/es.array.concat\"), M(\"core-js/modules/es.array.copy-within\"), M(\"core-js/modules/es.array.every\"), M(\"core-js/modules/es.array.fill\"), M(\"core-js/modules/es.array.flat\"), M(\"core-js/modules/es.array.flat-map\"), M(\"core-js/modules/es.array.from\"), M(\"core-js/modules/es.array.includes\"), M(\"core-js/modules/es.array.iterator\"), M(\"core-js/modules/es.array.map\"), M(\"core-js/modules/es.array.slice\"), M(\"core-js/modules/es.array.some\"), M(\"core-js/modules/es.array.unscopables.flat\"), M(\"core-js/modules/es.array.unscopables.flat-map\"), M(\"core-js/modules/es.map\"), M(\"core-js/modules/es.object.assign\"), M(\"core-js/modules/es.object.to-string\"), M(\"core-js/modules/es.set\"), M(\"core-js/modules/es.string.includes\"), M(\"core-js/modules/es.string.iterator\"), M(\"core-js/modules/es.typed-array.float32-array\"), M(\"core-js/modules/es.typed-array.float64-array\"), M(\"core-js/modules/es.typed-array.int16-array\"), M(\"core-js/modules/es.typed-array.uint8-array\"), M(\"core-js/modules/es.typed-array.uint16-array\"), M(\"core-js/modules/es.typed-array.uint32-array\"), M(\"core-js/modules/es.typed-array.copy-within\"), M(\"core-js/modules/es.typed-array.every\"), M(\"core-js/modules/es.typed-array.fill\"), M(\"core-js/modules/es.typed-array.filter\"), M(\"core-js/modules/es.typed-array.find\"), M(\"core-js/modules/es.typed-array.find-index\"), M(\"core-js/modules/es.typed-array.for-each\"), M(\"core-js/modules/es.typed-array.includes\"), M(\"core-js/modules/es.typed-array.index-of\"), M(\"core-js/modules/es.typed-array.iterator\"), M(\"core-js/modules/es.typed-array.join\"), M(\"core-js/modules/es.typed-array.last-index-of\"), M(\"core-js/modules/es.typed-array.map\"), M(\"core-js/modules/es.typed-array.reduce\"), M(\"core-js/modules/es.typed-array.reduce-right\"), M(\"core-js/modules/es.typed-array.reverse\"), M(\"core-js/modules/es.typed-array.set\"), M(\"core-js/modules/es.typed-array.slice\"), M(\"core-js/modules/es.typed-array.some\"), M(\"core-js/modules/es.typed-array.sort\"), M(\"core-js/modules/es.typed-array.subarray\"), M(\"core-js/modules/es.typed-array.to-locale-string\"), M(\"core-js/modules/es.typed-array.to-string\"), M(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.readPixelsWebGL = V, C.readPixelWebGL = G, C.default = void 0;\n      var u = o(M(\"../core/main\")), h = function(U) {\n        if (U && U.__esModule)\n          return U;\n        if (U === null || y(U) !== \"object\" && typeof U != \"function\")\n          return { default: U };\n        var W = s();\n        if (W && W.has(U))\n          return W.get(U);\n        var X, ne = {}, b = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (X in U) {\n          var O;\n          Object.prototype.hasOwnProperty.call(U, X) && ((O = b ? Object.getOwnPropertyDescriptor(U, X) : null) && (O.get || O.set) ? Object.defineProperty(ne, X, O) : ne[X] = U[X]);\n        }\n        return ne.default = U, W && W.set(U, ne), ne;\n      }(M(\"../core/constants\")), g = o(M(\"./GeometryBuilder\")), f = o(M(\"libtess\")), r = (M(\"./p5.Shader\"), M(\"./p5.Camera\"), M(\"../core/p5.Renderer\"), M(\"./p5.Matrix\"), M(\"./p5.Framebuffer\"), M(\"path\"), M(\"./p5.Texture\"));\n      function s() {\n        var U;\n        return typeof WeakMap != \"function\" ? null : (U = /* @__PURE__ */ new WeakMap(), s = function() {\n          return U;\n        }, U);\n      }\n      function o(U) {\n        return U && U.__esModule ? U : { default: U };\n      }\n      function i(U) {\n        return function(W) {\n          if (Array.isArray(W)) {\n            for (var X = 0, ne = new Array(W.length); X < W.length; X++)\n              ne[X] = W[X];\n            return ne;\n          }\n        }(U) || function(W) {\n          if (Symbol.iterator in Object(W) || Object.prototype.toString.call(W) === \"[object Arguments]\")\n            return Array.from(W);\n        }(U) || function() {\n          throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n        }();\n      }\n      function l(U, W) {\n        for (var X = 0; X < W.length; X++) {\n          var ne = W[X];\n          ne.enumerable = ne.enumerable || !1, ne.configurable = !0, \"value\" in ne && (ne.writable = !0), Object.defineProperty(U, ne.key, ne);\n        }\n      }\n      function n(U, W, X) {\n        return (n = typeof Reflect < \"u\" && Reflect.get ? Reflect.get : function(D, b, O) {\n          var D = function(B, Y) {\n            for (; !Object.prototype.hasOwnProperty.call(B, Y) && (B = j(B)) !== null; )\n              ;\n            return B;\n          }(D, b);\n          if (D)\n            return (D = Object.getOwnPropertyDescriptor(D, b)).get ? D.get.call(O) : D.value;\n        })(U, W, X || U);\n      }\n      function a(U, W) {\n        return (a = Object.setPrototypeOf || function(X, ne) {\n          return X.__proto__ = ne, X;\n        })(U, W);\n      }\n      function c(U) {\n        return function() {\n          var W, X, ne = j(U);\n          return W = function() {\n            if (typeof Reflect < \"u\" && Reflect.construct && !Reflect.construct.sham) {\n              if (typeof Proxy == \"function\")\n                return 1;\n              try {\n                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {\n                })), 1;\n              } catch {\n              }\n            }\n          }() ? (W = j(this).constructor, Reflect.construct(ne, arguments, W)) : ne.apply(this, arguments), ne = this, !(X = W) || y(X) !== \"object\" && typeof X != \"function\" ? p(ne) : X;\n        };\n      }\n      function p(U) {\n        if (U === void 0)\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        return U;\n      }\n      function j(U) {\n        return (j = Object.setPrototypeOf ? Object.getPrototypeOf : function(W) {\n          return W.__proto__ || Object.getPrototypeOf(W);\n        })(U);\n      }\n      function T(U, W, X) {\n        W in U ? Object.defineProperty(U, W, { value: X, enumerable: !0, configurable: !0, writable: !0 }) : U[W] = X;\n      }\n      function _(U, W) {\n        P += \"#define STROKE_CAP_\".concat(U, \" \").concat(W, `\n`), A[h[U]] = W;\n      }\n      function S(U, W) {\n        P += \"#define STROKE_JOIN_\".concat(U, \" \").concat(W, `\n`), x[h[U]] = W;\n      }\n      var E, A = {}, x = {}, P = \"\", M = (_(\"ROUND\", 0), _(\"PROJECT\", 1), _(\"SQUARE\", 2), S(\"ROUND\", 0), S(\"MITER\", 1), S(\"BEVEL\", 2), `#define PI 3.141592\n\nprecision highp float;\nprecision highp int;\n\nuniform mat4 uViewMatrix;\n\nuniform bool uUseLighting;\n\nuniform int uAmbientLightCount;\nuniform vec3 uAmbientColor[5];\nuniform mat3 uCameraRotation;\nuniform int uDirectionalLightCount;\nuniform vec3 uLightingDirection[5];\nuniform vec3 uDirectionalDiffuseColors[5];\nuniform vec3 uDirectionalSpecularColors[5];\n\nuniform int uPointLightCount;\nuniform vec3 uPointLightLocation[5];\nuniform vec3 uPointLightDiffuseColors[5];\t\nuniform vec3 uPointLightSpecularColors[5];\n\nuniform int uSpotLightCount;\nuniform float uSpotLightAngle[5];\nuniform float uSpotLightConc[5];\nuniform vec3 uSpotLightDiffuseColors[5];\nuniform vec3 uSpotLightSpecularColors[5];\nuniform vec3 uSpotLightLocation[5];\nuniform vec3 uSpotLightDirection[5];\n\nuniform bool uSpecular;\nuniform float uShininess;\nuniform float metallic;\n\nuniform float uConstantAttenuation;\nuniform float uLinearAttenuation;\nuniform float uQuadraticAttenuation;\n\n// setting from  _setImageLightUniforms()\n// boolean to initiate the calculateImageDiffuse and calculateImageSpecular\nuniform bool uUseImageLight;\n// texture for use in calculateImageDiffuse\nuniform sampler2D environmentMapDiffused;\n// texture for use in calculateImageSpecular\nuniform sampler2D environmentMapSpecular;\n// roughness for use in calculateImageSpecular\nuniform float levelOfDetail;\n\nconst float specularFactor = 2.0;\nconst float diffuseFactor = 0.73;\n\nstruct LightResult {\n  float specular;\n  float diffuse;\n};\n\nfloat _phongSpecular(\n  vec3 lightDirection,\n  vec3 viewDirection,\n  vec3 surfaceNormal,\n  float shininess) {\n\n  vec3 R = reflect(lightDirection, surfaceNormal);\n  return pow(max(0.0, dot(R, viewDirection)), shininess);\n}\n\nfloat _lambertDiffuse(vec3 lightDirection, vec3 surfaceNormal) {\n  return max(0.0, dot(-lightDirection, surfaceNormal));\n}\n\nLightResult _light(vec3 viewDirection, vec3 normal, vec3 lightVector) {\n\n  vec3 lightDir = normalize(lightVector);\n\n  //compute our diffuse & specular terms\n  LightResult lr;\n  float specularIntensity = mix(1.0, 0.4, metallic);\n  float diffuseIntensity = mix(1.0, 0.1, metallic);\n  if (uSpecular)\n    lr.specular = (_phongSpecular(lightDir, viewDirection, normal, uShininess)) * specularIntensity;\n    lr.diffuse = _lambertDiffuse(lightDir, normal) * diffuseIntensity;\n  return lr;\n}\n\n// converts the range of \"value\" from [min1 to max1] to [min2 to max2]\nfloat map(float value, float min1, float max1, float min2, float max2) {\n  return min2 + (value - min1) * (max2 - min2) / (max1 - min1);\n}\n\nvec2 mapTextureToNormal( vec3 v ){\n  // x = r sin(phi) cos(theta)   \n  // y = r cos(phi)  \n  // z = r sin(phi) sin(theta)\n  float phi = acos( v.y );\n  // if phi is 0, then there are no x, z components\n  float theta = 0.0;\n  // else \n  theta = acos(v.x / sin(phi));\n  float sinTheta = v.z / sin(phi);\n  if (sinTheta < 0.0) {\n    // Turn it into -theta, but in the 0-2PI range\n    theta = 2.0 * PI - theta;\n  }\n  theta = theta / (2.0 * 3.14159);\n  phi = phi / 3.14159 ;\n  \n  vec2 angles = vec2( fract(theta + 0.25), 1.0 - phi );\n  return angles;\n}\n\n\nvec3 calculateImageDiffuse( vec3 vNormal, vec3 vViewPosition ){\n  // make 2 seperate builds \n  vec3 worldCameraPosition =  vec3(0.0, 0.0, 0.0);  // hardcoded world camera position\n  vec3 worldNormal = normalize(vNormal * uCameraRotation);\n  vec2 newTexCoor = mapTextureToNormal( worldNormal );\n  vec4 texture = TEXTURE( environmentMapDiffused, newTexCoor );\n  // this is to make the darker sections more dark\n  // png and jpg usually flatten the brightness so it is to reverse that\n  return mix(smoothstep(vec3(0.0), vec3(1.0), texture.xyz), vec3(0.0), metallic);\n}\n\nvec3 calculateImageSpecular( vec3 vNormal, vec3 vViewPosition ){\n  vec3 worldCameraPosition =  vec3(0.0, 0.0, 0.0);\n  vec3 worldNormal = normalize(vNormal);\n  vec3 lightDirection = normalize( vViewPosition - worldCameraPosition );\n  vec3 R = reflect(lightDirection, worldNormal) * uCameraRotation;\n  vec2 newTexCoor = mapTextureToNormal( R );\n#ifdef WEBGL2\n  vec4 outColor = textureLod(environmentMapSpecular, newTexCoor, levelOfDetail);\n#else\n  vec4 outColor = TEXTURE(environmentMapSpecular, newTexCoor);\n#endif\n  // this is to make the darker sections more dark\n  // png and jpg usually flatten the brightness so it is to reverse that\n  return mix(\n    pow(outColor.xyz, vec3(10)),\n    pow(outColor.xyz, vec3(1.2)),\n    metallic \n  );\n}\n\nvoid totalLight(\n  vec3 modelPosition,\n  vec3 normal,\n  out vec3 totalDiffuse,\n  out vec3 totalSpecular\n) {\n\n  totalSpecular = vec3(0.0);\n\n  if (!uUseLighting) {\n    totalDiffuse = vec3(1.0);\n    return;\n  }\n\n  totalDiffuse = vec3(0.0);\n\n  vec3 viewDirection = normalize(-modelPosition);\n\n  for (int j = 0; j < 5; j++) {\n    if (j < uDirectionalLightCount) {\n      vec3 lightVector = (uViewMatrix * vec4(uLightingDirection[j], 0.0)).xyz;\n      vec3 lightColor = uDirectionalDiffuseColors[j];\n      vec3 specularColor = uDirectionalSpecularColors[j];\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if (j < uPointLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uPointLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n      //calculate attenuation\n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n      vec3 lightColor = lightFalloff * uPointLightDiffuseColors[j];\n      vec3 specularColor = lightFalloff * uPointLightSpecularColors[j];\n\n      LightResult result = _light(viewDirection, normal, lightVector);\n      totalDiffuse += result.diffuse * lightColor;\n      totalSpecular += result.specular * lightColor * specularColor;\n    }\n\n    if(j < uSpotLightCount) {\n      vec3 lightPosition = (uViewMatrix * vec4(uSpotLightLocation[j], 1.0)).xyz;\n      vec3 lightVector = modelPosition - lightPosition;\n    \n      float lightDistance = length(lightVector);\n      float lightFalloff = 1.0 / (uConstantAttenuation + lightDistance * uLinearAttenuation + (lightDistance * lightDistance) * uQuadraticAttenuation);\n\n      vec3 lightDirection = (uViewMatrix * vec4(uSpotLightDirection[j], 0.0)).xyz;\n      float spotDot = dot(normalize(lightVector), normalize(lightDirection));\n      float spotFalloff;\n      if(spotDot < uSpotLightAngle[j]) {\n        spotFalloff = 0.0;\n      }\n      else {\n        spotFalloff = pow(spotDot, uSpotLightConc[j]);\n      }\n      lightFalloff *= spotFalloff;\n\n      vec3 lightColor = uSpotLightDiffuseColors[j];\n      vec3 specularColor = uSpotLightSpecularColors[j];\n     \n      LightResult result = _light(viewDirection, normal, lightVector);\n      \n      totalDiffuse += result.diffuse * lightColor * lightFalloff;\n      totalSpecular += result.specular * lightColor * specularColor * lightFalloff;\n    }\n  }\n\n  if( uUseImageLight ){\n    totalDiffuse += calculateImageDiffuse(normal, modelPosition);\n    totalSpecular += calculateImageSpecular(normal, modelPosition);\n  }\n\n  totalDiffuse *= diffuseFactor;\n  totalSpecular *= specularFactor;\n}\n`), R = { sphereMappingFrag: `#define PI 3.141592\n\nprecision highp float;\n  \nuniform sampler2D uSampler;\nuniform mat3 uNewNormalMatrix;\nuniform float uFovY;\nuniform float uAspect;\n\nvarying vec2 vTexCoord;\n  \nvoid main() {\n    float uFovX = uFovY * uAspect; \n    vec4 newTexColor = texture2D(uSampler, vTexCoord);\n    float angleY = mix(uFovY/2.0,  -uFovY/2.0, vTexCoord.y);\n    float angleX = mix(uFovX/2.0, -uFovX/2.0, vTexCoord.x);\n    vec3 rotatedNormal = vec3( angleX, angleY, 1.0 );\n    rotatedNormal = uNewNormalMatrix * normalize(rotatedNormal);\n    vec2 suv;\n    suv.y = 0.5 + 0.5 * (-rotatedNormal.y);\n    suv.x = atan(rotatedNormal.z, rotatedNormal.x) / (2.0 * PI) + 0.5;\n    newTexColor = texture2D(uSampler, suv.xy);\n    gl_FragColor = newTexColor;\n}\n`, immediateVert: `IN vec3 aPosition;\nIN vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uResolution;\nuniform float uPointSize;\n\nOUT vec4 vColor;\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n  gl_PointSize = uPointSize;\n}\n`, vertexColorVert: `IN vec3 aPosition;\nIN vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nOUT vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vColor = aVertexColor;\n}\n`, vertexColorFrag: `IN vec4 vColor;\nvoid main(void) {\n  OUT_COLOR = vec4(vColor.rgb, 1.) * vColor.a;\n}\n`, normalVert: `IN vec3 aPosition;\nIN vec3 aNormal;\nIN vec2 aTexCoord;\nIN vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nuniform vec4 uMaterialColor;\nuniform bool uUseVertexColor;\n\nOUT vec3 vVertexNormal;\nOUT highp vec2 vVertTexCoord;\nOUT vec4 vColor;\n\nvoid main(void) {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vVertexNormal = normalize(vec3( uNormalMatrix * aNormal ));\n  vVertTexCoord = aTexCoord;\n  vColor = (uUseVertexColor ? aVertexColor : uMaterialColor);\n}\n`, normalFrag: `IN vec3 vVertexNormal;\nvoid main(void) {\n  OUT_COLOR = vec4(vVertexNormal, 1.0);\n}\n`, basicFrag: `IN vec4 vColor;\nvoid main(void) {\n  OUT_COLOR = vec4(vColor.rgb, 1.) * vColor.a;\n}\n`, lightVert: M + `// include lighting.glgl\n\nIN vec3 aPosition;\nIN vec3 aNormal;\nIN vec2 aTexCoord;\nIN vec4 aVertexColor;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nuniform bool uUseVertexColor;\nuniform vec4 uMaterialColor;\n\nOUT highp vec2 vVertTexCoord;\nOUT vec3 vDiffuseColor;\nOUT vec3 vSpecularColor;\nOUT vec4 vColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * viewModelPosition;\n\n  vec3 vertexNormal = normalize(uNormalMatrix * aNormal);\n  vVertTexCoord = aTexCoord;\n\n  totalLight(viewModelPosition.xyz, vertexNormal, vDiffuseColor, vSpecularColor);\n\n  for (int i = 0; i < 8; i++) {\n    if (i < uAmbientLightCount) {\n      vDiffuseColor += uAmbientColor[i];\n    }\n  }\n  \n  vColor = (uUseVertexColor ? aVertexColor : uMaterialColor);\n}\n`, lightTextureFrag: `uniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\nuniform bool uEmissive;\n\nIN highp vec2 vVertTexCoord;\nIN vec3 vDiffuseColor;\nIN vec3 vSpecularColor;\nIN vec4 vColor;\n\nvoid main(void) {\n  if(uEmissive && !isTexture) {\n    OUT_COLOR = vColor;\n  }\n  else {\n    vec4 baseColor = isTexture\n      // Textures come in with premultiplied alpha. To apply tint and still have\n      // premultiplied alpha output, we need to multiply the RGB channels by the\n      // tint RGB, and all channels by the tint alpha.\n      ? TEXTURE(uSampler, vVertTexCoord) * vec4(uTint.rgb/255., 1.) * (uTint.a/255.)\n      // Colors come in with unmultiplied alpha, so we need to multiply the RGB\n      // channels by alpha to convert it to premultiplied alpha.\n      : vec4(vColor.rgb * vColor.a, vColor.a);\n    OUT_COLOR = vec4(baseColor.rgb * vDiffuseColor + vSpecularColor, baseColor.a);\n  }\n}\n`, phongVert: `precision highp int;\n\nIN vec3 aPosition;\nIN vec3 aNormal;\nIN vec2 aTexCoord;\nIN vec4 aVertexColor;\n\nuniform vec3 uAmbientColor[5];\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\nuniform int uAmbientLightCount;\n\nuniform bool uUseVertexColor;\nuniform vec4 uMaterialColor;\n\nOUT vec3 vNormal;\nOUT vec2 vTexCoord;\nOUT vec3 vViewPosition;\nOUT vec3 vAmbientColor;\nOUT vec4 vColor;\n\nvoid main(void) {\n\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n\n  // Pass varyings to fragment shader\n  vViewPosition = viewModelPosition.xyz;\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n\n  vNormal = uNormalMatrix * aNormal;\n  vTexCoord = aTexCoord;\n\n  // TODO: this should be a uniform\n  vAmbientColor = vec3(0.0);\n  for (int i = 0; i < 5; i++) {\n    if (i < uAmbientLightCount) {\n      vAmbientColor += uAmbientColor[i];\n    }\n  }\n  \n  vColor = (uUseVertexColor ? aVertexColor : uMaterialColor);\n}\n`, phongFrag: M + `// include lighting.glsl\nprecision highp int;\n\nuniform bool uHasSetAmbient;\nuniform vec4 uSpecularMatColor;\nuniform vec4 uAmbientMatColor;\nuniform vec4 uEmissiveMatColor;\n\nuniform vec4 uTint;\nuniform sampler2D uSampler;\nuniform bool isTexture;\n\nIN vec3 vNormal;\nIN vec2 vTexCoord;\nIN vec3 vViewPosition;\nIN vec3 vAmbientColor;\nIN vec4 vColor;\n\nvoid main(void) {\n\n  vec3 diffuse;\n  vec3 specular;\n  totalLight(vViewPosition, normalize(vNormal), diffuse, specular);\n\n  // Calculating final color as result of all lights (plus emissive term).\n\n  vec4 baseColor = isTexture\n    // Textures come in with premultiplied alpha. To apply tint and still have\n    // premultiplied alpha output, we need to multiply the RGB channels by the\n    // tint RGB, and all channels by the tint alpha.\n    ? TEXTURE(uSampler, vTexCoord) * vec4(uTint.rgb/255., 1.) * (uTint.a/255.)\n    // Colors come in with unmultiplied alpha, so we need to multiply the RGB\n    // channels by alpha to convert it to premultiplied alpha.\n    : vec4(vColor.rgb * vColor.a, vColor.a);\n  OUT_COLOR = vec4(diffuse * baseColor.rgb + \n                    vAmbientColor * (\n                      uHasSetAmbient ? uAmbientMatColor.rgb : baseColor.rgb\n                    ) + \n                    specular * uSpecularMatColor.rgb + \n                    uEmissiveMatColor.rgb, baseColor.a);\n}\n`, fontVert: `IN vec3 aPosition;\nIN vec2 aTexCoord;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nuniform vec4 uGlyphRect;\nuniform float uGlyphOffset;\n\nOUT vec2 vTexCoord;\nOUT float w;\n\nvoid main() {\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  // scale by the size of the glyph's rectangle\n  positionVec4.xy *= uGlyphRect.zw - uGlyphRect.xy;\n\n  // Expand glyph bounding boxes by 1px on each side to give a bit of room\n  // for antialiasing\n  vec3 newOrigin = (uModelViewMatrix * vec4(0., 0., 0., 1.)).xyz;\n  vec3 newDX = (uModelViewMatrix * vec4(1., 0., 0., 1.)).xyz;\n  vec3 newDY = (uModelViewMatrix * vec4(0., 1., 0., 1.)).xyz;\n  vec2 pixelScale = vec2(\n    1. / length(newOrigin - newDX),\n    1. / length(newOrigin - newDY)\n  );\n  vec2 offset = pixelScale * normalize(aTexCoord - vec2(0.5, 0.5)) * vec2(1., -1.);\n  vec2 textureOffset = offset * (1. / vec2(\n    uGlyphRect.z - uGlyphRect.x,\n    uGlyphRect.w - uGlyphRect.y\n  ));\n\n  // move to the corner of the glyph\n  positionVec4.xy += uGlyphRect.xy;\n\n  // move to the letter's line offset\n  positionVec4.x += uGlyphOffset;\n\n  positionVec4.xy += offset;\n  \n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n  vTexCoord = aTexCoord + textureOffset;\n  w = gl_Position.w;\n}\n`, fontFrag: `#ifndef WEBGL2\n#extension GL_OES_standard_derivatives : enable\n#endif\n\n#if 0\n  // simulate integer math using floats\n\t#define int float\n\t#define ivec2 vec2\n\t#define INT(x) float(x)\n\n\tint ifloor(float v) { return floor(v); }\n\tivec2 ifloor(vec2 v) { return floor(v); }\n\n#else\n  // use native integer math\n\tprecision highp int;\n\t#define INT(x) x\n\n\tint ifloor(float v) { return int(v); }\n\tint ifloor(int v) { return v; }\n\tivec2 ifloor(vec2 v) { return ivec2(v); }\n\n#endif\n\nuniform sampler2D uSamplerStrokes;\nuniform sampler2D uSamplerRowStrokes;\nuniform sampler2D uSamplerRows;\nuniform sampler2D uSamplerColStrokes;\nuniform sampler2D uSamplerCols;\n\nuniform ivec2 uStrokeImageSize;\nuniform ivec2 uCellsImageSize;\nuniform ivec2 uGridImageSize;\n\nuniform ivec2 uGridOffset;\nuniform ivec2 uGridSize;\nuniform vec4 uMaterialColor;\n\nIN vec2 vTexCoord;\n\n// some helper functions\nint ROUND(float v) { return ifloor(v + 0.5); }\nivec2 ROUND(vec2 v) { return ifloor(v + 0.5); }\nfloat saturate(float v) { return clamp(v, 0.0, 1.0); }\nvec2 saturate(vec2 v) { return clamp(v, 0.0, 1.0); }\n\nint mul(float v1, int v2) {\n  return ifloor(v1 * float(v2));\n}\n\nivec2 mul(vec2 v1, ivec2 v2) {\n  return ifloor(v1 * vec2(v2) + 0.5);\n}\n\n// unpack a 16-bit integer from a float vec2\nint getInt16(vec2 v) {\n  ivec2 iv = ROUND(v * 255.0);\n  return iv.x * INT(128) + iv.y;\n}\n\nvec2 pixelScale;\nvec2 coverage = vec2(0.0);\nvec2 weight = vec2(0.5);\nconst float minDistance = 1.0/8192.0;\nconst float hardness = 1.05; // amount of antialias\n\n// the maximum number of curves in a glyph\nconst int N = INT(250);\n\n// retrieves an indexed pixel from a sampler\nvec4 getTexel(sampler2D sampler, int pos, ivec2 size) {\n  int width = size.x;\n  int y = ifloor(pos / width);\n  int x = pos - y * width;  // pos % width\n\n  return TEXTURE(sampler, (vec2(x, y) + 0.5) / vec2(size));\n}\n\nvoid calulateCrossings(vec2 p0, vec2 p1, vec2 p2, out vec2 C1, out vec2 C2) {\n\n  // get the coefficients of the quadratic in t\n  vec2 a = p0 - p1 * 2.0 + p2;\n  vec2 b = p0 - p1;\n  vec2 c = p0 - vTexCoord;\n\n  // found out which values of 't' it crosses the axes\n  vec2 surd = sqrt(max(vec2(0.0), b * b - a * c));\n  vec2 t1 = ((b - surd) / a).yx;\n  vec2 t2 = ((b + surd) / a).yx;\n\n  // approximate straight lines to avoid rounding errors\n  if (abs(a.y) < 0.001)\n    t1.x = t2.x = c.y / (2.0 * b.y);\n\n  if (abs(a.x) < 0.001)\n    t1.y = t2.y = c.x / (2.0 * b.x);\n\n  // plug into quadratic formula to find the corrdinates of the crossings\n  C1 = ((a * t1 - b * 2.0) * t1 + c) * pixelScale;\n  C2 = ((a * t2 - b * 2.0) * t2 + c) * pixelScale;\n}\n\nvoid coverageX(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  // determine on which side of the x-axis the points lie\n  bool y0 = p0.y > vTexCoord.y;\n  bool y1 = p1.y > vTexCoord.y;\n  bool y2 = p2.y > vTexCoord.y;\n\n  // could web be under the curve (after t1)?\n  if (y1 ? !y2 : y0) {\n    // add the coverage for t1\n    coverage.x += saturate(C1.x + 0.5);\n    // calculate the anti-aliasing for t1\n    weight.x = min(weight.x, abs(C1.x));\n  }\n\n  // are we outside the curve (after t2)?\n  if (y1 ? !y0 : y2) {\n    // subtract the coverage for t2\n    coverage.x -= saturate(C2.x + 0.5);\n    // calculate the anti-aliasing for t2\n    weight.x = min(weight.x, abs(C2.x));\n  }\n}\n\n// this is essentially the same as coverageX, but with the axes swapped\nvoid coverageY(vec2 p0, vec2 p1, vec2 p2) {\n\n  vec2 C1, C2;\n  calulateCrossings(p0, p1, p2, C1, C2);\n\n  bool x0 = p0.x > vTexCoord.x;\n  bool x1 = p1.x > vTexCoord.x;\n  bool x2 = p2.x > vTexCoord.x;\n\n  if (x1 ? !x2 : x0) {\n    coverage.y -= saturate(C1.y + 0.5);\n    weight.y = min(weight.y, abs(C1.y));\n  }\n\n  if (x1 ? !x0 : x2) {\n    coverage.y += saturate(C2.y + 0.5);\n    weight.y = min(weight.y, abs(C2.y));\n  }\n}\n\nvoid main() {\n\n  // calculate the pixel scale based on screen-coordinates\n  pixelScale = hardness / fwidth(vTexCoord);\n\n  // which grid cell is this pixel in?\n  ivec2 gridCoord = ifloor(vTexCoord * vec2(uGridSize));\n\n  // intersect curves in this row\n  {\n    // the index into the row info bitmap\n    int rowIndex = gridCoord.y + uGridOffset.y;\n    // fetch the info texel\n    vec4 rowInfo = getTexel(uSamplerRows, rowIndex, uGridImageSize);\n    // unpack the rowInfo\n    int rowStrokeIndex = getInt16(rowInfo.xy);\n    int rowStrokeCount = getInt16(rowInfo.zw);\n\n    for (int iRowStroke = INT(0); iRowStroke < N; iRowStroke++) {\n      if (iRowStroke >= rowStrokeCount)\n        break;\n\n      // each stroke is made up of 3 points: the start and control point\n      // and the start of the next curve.\n      // fetch the indices of this pair of strokes:\n      vec4 strokeIndices = getTexel(uSamplerRowStrokes, rowStrokeIndex++, uCellsImageSize);\n\n      // unpack the stroke index\n      int strokePos = getInt16(strokeIndices.xy);\n\n      // fetch the two strokes\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n\n      // calculate the coverage\n      coverageX(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  // intersect curves in this column\n  {\n    int colIndex = gridCoord.x + uGridOffset.x;\n    vec4 colInfo = getTexel(uSamplerCols, colIndex, uGridImageSize);\n    int colStrokeIndex = getInt16(colInfo.xy);\n    int colStrokeCount = getInt16(colInfo.zw);\n    \n    for (int iColStroke = INT(0); iColStroke < N; iColStroke++) {\n      if (iColStroke >= colStrokeCount)\n        break;\n\n      vec4 strokeIndices = getTexel(uSamplerColStrokes, colStrokeIndex++, uCellsImageSize);\n\n      int strokePos = getInt16(strokeIndices.xy);\n      vec4 stroke0 = getTexel(uSamplerStrokes, strokePos + INT(0), uStrokeImageSize);\n      vec4 stroke1 = getTexel(uSamplerStrokes, strokePos + INT(1), uStrokeImageSize);\n      coverageY(stroke0.xy, stroke0.zw, stroke1.xy);\n    }\n  }\n\n  weight = saturate(1.0 - weight * 2.0);\n  float distance = max(weight.x + weight.y, minDistance); // manhattan approx.\n  float antialias = abs(dot(coverage, weight) / distance);\n  float cover = min(abs(coverage.x), abs(coverage.y));\n  OUT_COLOR = vec4(uMaterialColor.rgb, 1.) * uMaterialColor.a;\n  OUT_COLOR *= saturate(max(antialias, cover));\n}\n`, lineVert: P + `/*\n  Part of the Processing project - http://processing.org\n  Copyright (c) 2012-15 The Processing Foundation\n  Copyright (c) 2004-12 Ben Fry and Casey Reas\n  Copyright (c) 2001-04 Massachusetts Institute of Technology\n  This library is free software; you can redistribute it and/or\n  modify it under the terms of the GNU Lesser General Public\n  License as published by the Free Software Foundation, version 2.1.\n  This library is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n  Lesser General Public License for more details.\n  You should have received a copy of the GNU Lesser General\n  Public License along with this library; if not, write to the\n  Free Software Foundation, Inc., 59 Temple Place, Suite 330,\n  Boston, MA  02111-1307  USA\n*/\n\n#define PROCESSING_LINE_SHADER\n\nprecision mediump int;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform float uStrokeWeight;\n\nuniform bool uUseLineColor;\nuniform vec4 uMaterialColor;\n\nuniform vec4 uViewport;\nuniform int uPerspective;\nuniform int uStrokeJoin;\n\nIN vec4 aPosition;\nIN vec3 aTangentIn;\nIN vec3 aTangentOut;\nIN float aSide;\nIN vec4 aVertexColor;\n\nOUT vec4 vColor;\nOUT vec2 vTangent;\nOUT vec2 vCenter;\nOUT vec2 vPosition;\nOUT float vMaxDist;\nOUT float vCap;\nOUT float vJoin;\n\nvec2 lineIntersection(vec2 aPoint, vec2 aDir, vec2 bPoint, vec2 bDir) {\n  // Rotate and translate so a starts at the origin and goes out to the right\n  bPoint -= aPoint;\n  vec2 rotatedBFrom = vec2(\n    bPoint.x*aDir.x + bPoint.y*aDir.y,\n    bPoint.y*aDir.x - bPoint.x*aDir.y\n  );\n  vec2 bTo = bPoint + bDir;\n  vec2 rotatedBTo = vec2(\n    bTo.x*aDir.x + bTo.y*aDir.y,\n    bTo.y*aDir.x - bTo.x*aDir.y\n  );\n  float intersectionDistance =\n    rotatedBTo.x + (rotatedBFrom.x - rotatedBTo.x) * rotatedBTo.y /\n    (rotatedBTo.y - rotatedBFrom.y);\n  return aPoint + aDir * intersectionDistance;\n}\n\nvoid main() {\n  // Caps have one of either the in or out tangent set to 0\n  vCap = (aTangentIn == vec3(0.)) != (aTangentOut == (vec3(0.)))\n    ? 1. : 0.;\n\n  // Joins have two unique, defined tangents\n  vJoin = (\n    aTangentIn != vec3(0.) &&\n    aTangentOut != vec3(0.) &&\n    aTangentIn != aTangentOut\n  ) ? 1. : 0.;\n\n  vec4 posp = uModelViewMatrix * aPosition;\n  vec4 posqIn = uModelViewMatrix * (aPosition + vec4(aTangentIn, 0));\n  vec4 posqOut = uModelViewMatrix * (aPosition + vec4(aTangentOut, 0));\n\n  float facingCamera = pow(\n    // The word space tangent's z value is 0 if it's facing the camera\n    abs(normalize(posqIn-posp).z),\n\n    // Using pow() here to ramp \\`facingCamera\\` up from 0 to 1 really quickly\n    // so most lines get scaled and don't get clipped\n    0.25\n  );\n\n  // using a scale <1 moves the lines towards the camera\n  // in order to prevent popping effects due to half of\n  // the line disappearing behind the geometry faces.\n  float scale = mix(1., 0.995, facingCamera);\n\n  // Moving vertices slightly toward the camera\n  // to avoid depth-fighting with the fill triangles.\n  // Discussed here:\n  // http://www.opengl.org/discussion_boards/ubbthreads.php?ubb=showflat&Number=252848  \n  posp.xyz = posp.xyz * scale;\n  posqIn.xyz = posqIn.xyz * scale;\n  posqOut.xyz = posqOut.xyz * scale;\n\n  vec4 p = uProjectionMatrix * posp;\n  vec4 qIn = uProjectionMatrix * posqIn;\n  vec4 qOut = uProjectionMatrix * posqOut;\n  vCenter = p.xy;\n\n  // formula to convert from clip space (range -1..1) to screen space (range 0..[width or height])\n  // screen_p = (p.xy/p.w + <1,1>) * 0.5 * uViewport.zw\n\n  // prevent division by W by transforming the tangent formula (div by 0 causes\n  // the line to disappear, see https://github.com/processing/processing/issues/5183)\n  // t = screen_q - screen_p\n  //\n  // tangent is normalized and we don't care which aDirection it points to (+-)\n  // t = +- normalize( screen_q - screen_p )\n  // t = +- normalize( (q.xy/q.w+<1,1>)*0.5*uViewport.zw - (p.xy/p.w+<1,1>)*0.5*uViewport.zw )\n  //\n  // extract common factor, <1,1> - <1,1> cancels out\n  // t = +- normalize( (q.xy/q.w - p.xy/p.w) * 0.5 * uViewport.zw )\n  //\n  // convert to common divisor\n  // t = +- normalize( ((q.xy*p.w - p.xy*q.w) / (p.w*q.w)) * 0.5 * uViewport.zw )\n  //\n  // remove the common scalar divisor/factor, not needed due to normalize and +-\n  // (keep uViewport - can't remove because it has different components for x and y\n  //  and corrects for aspect ratio, see https://github.com/processing/processing/issues/5181)\n  // t = +- normalize( (q.xy*p.w - p.xy*q.w) * uViewport.zw )\n\n  vec2 tangentIn = normalize((qIn.xy*p.w - p.xy*qIn.w) * uViewport.zw);\n  vec2 tangentOut = normalize((qOut.xy*p.w - p.xy*qOut.w) * uViewport.zw);\n\n  vec2 curPerspScale;\n  if(uPerspective == 1) {\n    // Perspective ---\n    // convert from world to clip by multiplying with projection scaling factor\n    // to get the right thickness (see https://github.com/processing/processing/issues/5182)\n\n    // The y value of the projection matrix may be flipped if rendering to a Framebuffer.\n    // Multiplying again by its sign here negates the flip to get just the scale.\n    curPerspScale = (uProjectionMatrix * vec4(1, sign(uProjectionMatrix[1][1]), 0, 0)).xy;\n  } else {\n    // No Perspective ---\n    // multiply by W (to cancel out division by W later in the pipeline) and\n    // convert from screen to clip (derived from clip to screen above)\n    curPerspScale = p.w / (0.5 * uViewport.zw);\n  }\n\n  vec2 offset;\n  if (vJoin == 1.) {\n    vTangent = normalize(tangentIn + tangentOut);\n    vec2 normalIn = vec2(-tangentIn.y, tangentIn.x);\n    vec2 normalOut = vec2(-tangentOut.y, tangentOut.x);\n    float side = sign(aSide);\n    float sideEnum = abs(aSide);\n\n    // We generate vertices for joins on either side of the centerline, but\n    // the \"elbow\" side is the only one needing a join. By not setting the\n    // offset for the other side, all its vertices will end up in the same\n    // spot and not render, effectively discarding it.\n    if (sign(dot(tangentOut, vec2(-tangentIn.y, tangentIn.x))) != side) {\n      // Side enums:\n      //   1: the side going into the join\n      //   2: the middle of the join\n      //   3: the side going out of the join\n      if (sideEnum == 2.) {\n        // Calculate the position + tangent on either side of the join, and\n        // find where the lines intersect to find the elbow of the join\n        vec2 c = (posp.xy/posp.w + vec2(1.,1.)) * 0.5 * uViewport.zw;\n        vec2 intersection = lineIntersection(\n          c + (side * normalIn * uStrokeWeight / 2.),\n          tangentIn,\n          c + (side * normalOut * uStrokeWeight / 2.),\n          tangentOut\n        );\n        offset = (intersection - c);\n\n        // When lines are thick and the angle of the join approaches 180, the\n        // elbow might be really far from the center. We'll apply a limit to\n        // the magnitude to avoid lines going across the whole screen when this\n        // happens.\n        float mag = length(offset);\n        float maxMag = 3. * uStrokeWeight;\n        if (mag > maxMag) {\n          offset *= maxMag / mag;\n        }\n      } else if (sideEnum == 1.) {\n        offset = side * normalIn * uStrokeWeight / 2.;\n      } else if (sideEnum == 3.) {\n        offset = side * normalOut * uStrokeWeight / 2.;\n      }\n    }\n    if (uStrokeJoin == STROKE_JOIN_BEVEL) {\n      vec2 avgNormal = vec2(-vTangent.y, vTangent.x);\n      vMaxDist = abs(dot(avgNormal, normalIn * uStrokeWeight / 2.));\n    } else {\n      vMaxDist = uStrokeWeight / 2.;\n    }\n  } else {\n    vec2 tangent = aTangentIn == vec3(0.) ? tangentOut : tangentIn;\n    vTangent = tangent;\n    vec2 normal = vec2(-tangent.y, tangent.x);\n\n    float normalOffset = sign(aSide);\n    // Caps will have side values of -2 or 2 on the edge of the cap that\n    // extends out from the line\n    float tangentOffset = abs(aSide) - 1.;\n    offset = (normal * normalOffset + tangent * tangentOffset) *\n      uStrokeWeight * 0.5;\n    vMaxDist = uStrokeWeight / 2.;\n  }\n  vPosition = vCenter + offset;\n\n  gl_Position.xy = p.xy + offset.xy * curPerspScale;\n  gl_Position.zw = p.zw;\n  \n  vColor = (uUseLineColor ? aVertexColor : uMaterialColor);\n}\n`, lineFrag: P + `precision mediump int;\n\nuniform vec4 uMaterialColor;\nuniform int uStrokeCap;\nuniform int uStrokeJoin;\nuniform float uStrokeWeight;\n\nIN vec4 vColor;\nIN vec2 vTangent;\nIN vec2 vCenter;\nIN vec2 vPosition;\nIN float vMaxDist;\nIN float vCap;\nIN float vJoin;\n\nfloat distSquared(vec2 a, vec2 b) {\n  vec2 aToB = b - a;\n  return dot(aToB, aToB);\n}\n\nvoid main() {\n  if (vCap > 0.) {\n    if (\n      uStrokeCap == STROKE_CAP_ROUND &&\n      distSquared(vPosition, vCenter) > uStrokeWeight * uStrokeWeight * 0.25\n    ) {\n      discard;\n    } else if (\n      uStrokeCap == STROKE_CAP_SQUARE &&\n      dot(vPosition - vCenter, vTangent) > 0.\n    ) {\n      discard;\n    }\n    // Use full area for PROJECT\n  } else if (vJoin > 0.) {\n    if (\n      uStrokeJoin == STROKE_JOIN_ROUND &&\n      distSquared(vPosition, vCenter) > uStrokeWeight * uStrokeWeight * 0.25\n    ) {\n      discard;\n    } else if (uStrokeJoin == STROKE_JOIN_BEVEL) {\n      vec2 normal = vec2(-vTangent.y, vTangent.x);\n      if (abs(dot(vPosition - vCenter, normal)) > vMaxDist) {\n        discard;\n      }\n    }\n    // Use full area for MITER\n  }\n  OUT_COLOR = vec4(vColor.rgb, 1.) * vColor.a;\n}\n`, pointVert: `IN vec3 aPosition;\nuniform float uPointSize;\nOUT float vStrokeWeight;\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nvoid main() {\n\tvec4 positionVec4 =  vec4(aPosition, 1.0);\n\tgl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n\tgl_PointSize = uPointSize;\n\tvStrokeWeight = uPointSize;\n}\n`, pointFrag: `precision mediump int;\nuniform vec4 uMaterialColor;\nIN float vStrokeWeight;\n\nvoid main(){\n  float mask = 0.0;\n\n  // make a circular mask using the gl_PointCoord (goes from 0 - 1 on a point)\n  // might be able to get a nicer edge on big strokeweights with smoothstep but slightly less performant\n\n  mask = step(0.98, length(gl_PointCoord * 2.0 - 1.0));\n\n  // if strokeWeight is 1 or less lets just draw a square\n  // this prevents weird artifacting from carving circles when our points are really small\n  // if strokeWeight is larger than 1, we just use it as is\n\n  mask = mix(0.0, mask, clamp(floor(vStrokeWeight - 0.5),0.0,1.0));\n\n  // throw away the borders of the mask\n  // otherwise we get weird alpha blending issues\n\n  if(mask > 0.98){\n    discard;\n  }\n\n  OUT_COLOR = vec4(uMaterialColor.rgb, 1.) * uMaterialColor.a;\n}\n`, imageLightVert: `precision highp float;\nattribute vec3 aPosition;\nattribute vec3 aNormal;\nattribute vec2 aTexCoord;\n\nvarying vec3 localPos;\nvarying vec3 vWorldNormal;\nvarying vec3 vWorldPosition;\nvarying vec2 vTexCoord;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat3 uNormalMatrix;\n\nvoid main() {\n  // Multiply the position by the matrix.\n  vec4 viewModelPosition = uModelViewMatrix * vec4(aPosition, 1.0);\n  gl_Position = uProjectionMatrix * viewModelPosition;  \n  \n  // orient the normals and pass to the fragment shader\n  vWorldNormal = uNormalMatrix * aNormal;\n  \n  // send the view position to the fragment shader\n  vWorldPosition = (uModelViewMatrix * vec4(aPosition, 1.0)).xyz;\n  \n  localPos = vWorldPosition;\n  vTexCoord = aTexCoord;\n}\n\n\n/*\nin the vertex shader we'll compute the world position and world oriented normal of the vertices and pass those to the fragment shader as varyings.\n*/\n`, imageLightDiffusedFrag: `precision highp float;\nvarying vec3 localPos;\n\n// the HDR cubemap converted (can be from an equirectangular environment map.)\nuniform sampler2D environmentMap;\nvarying vec2 vTexCoord;\n\nconst float PI = 3.14159265359;\n\nvec2 nTOE( vec3 v ){\n  // x = r sin(phi) cos(theta)   \n  // y = r cos(phi)  \n  // z = r sin(phi) sin(theta)\n  float phi = acos( v.y );\n  // if phi is 0, then there are no x, z components\n  float theta = 0.0;\n  // else \n  theta = acos(v.x / sin(phi));\n  float sinTheta = v.z / sin(phi);\n  if (sinTheta < 0.0) {\n    // Turn it into -theta, but in the 0-2PI range\n    theta = 2.0 * PI - theta;\n  }\n  theta = theta / (2.0 * 3.14159);\n  phi = phi / 3.14159 ;\n  \n  vec2 angles = vec2( phi, theta );\n  return angles;\n}\n\nfloat random(vec2 p) {\n  vec3 p3  = fract(vec3(p.xyx) * .1031);\n  p3 += dot(p3, p3.yzx + 33.33);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\nvoid main()\n{   \t \n\t// the sample direction equals the hemisphere's orientation\n  float phi = vTexCoord.x * 2.0 * PI;\n  float theta = vTexCoord.y * PI;\n  float x = sin(theta) * cos(phi);\n  float y = sin(theta) * sin(phi);\n  float z = cos(theta);\n  vec3 normal = vec3( x, y, z);\n\n\t// Discretely sampling the hemisphere given the integral's\n  // spherical coordinates translates to the following fragment code:\n\tvec3 irradiance = vec3(0.0);  \n\tvec3 up\t= vec3(0.0, 1.0, 0.0);\n\tvec3 right = normalize(cross(up, normal));\n\tup = normalize(cross(normal, right));\n\n\t//  We specify a fixed sampleDelta delta value to traverse\n  // the hemisphere; decreasing or increasing the sample delta\n  // will increase or decrease the accuracy respectively.\n\tconst float sampleDelta = 0.100;\n\tfloat nrSamples = 0.0;\n  float randomOffset = random(gl_FragCoord.xy) * sampleDelta;\n\tfor(float rawPhi = 0.0; rawPhi < 2.0 * PI; rawPhi += sampleDelta)\n\t{\n    float phi = rawPhi + randomOffset;\n    for(float rawTheta = 0.0; rawTheta < ( 0.5 ) * PI; rawTheta += sampleDelta)\n    {\n      float theta = rawTheta + randomOffset;\n      // spherical to cartesian (in tangent space) // tangent space to world // add each sample result to irradiance\n      float x = sin(theta) * cos(phi);\n      float y = sin(theta) * sin(phi);\n      float z = cos(theta);\n      vec3 tangentSample = vec3( x, y, z);\n      \n      vec3 sampleVec = tangentSample.x * right + tangentSample.y * up + tangentSample.z * normal;\n        irradiance += (texture2D(environmentMap, nTOE(sampleVec)).xyz) * cos(theta) * sin(theta);\n      nrSamples++;\n    }\n\t}\n\t// divide by the total number of samples taken, giving us the average sampled irradiance.\n\tirradiance = PI * irradiance * (1.0 / float(nrSamples )) ;\n  \n \n\tgl_FragColor = vec4(irradiance, 1.0);\n}`, imageLightSpecularFrag: `precision highp float;\\r\nvarying vec3 localPos;\\r\nvarying vec2 vTexCoord;\\r\n\\r\n// our texture\\r\nuniform sampler2D environmentMap;\\r\nuniform float roughness;\\r\n\\r\nconst float PI = 3.14159265359;\\r\n\\r\nfloat VanDerCorput(int bits);\\r\nvec2 HammersleyNoBitOps(int i, int N);\\r\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness);\\r\n\\r\n\\r\nvec2 nTOE( vec3 v ){\\r\n  // x = r sin(phi) cos(theta)   \\r\n  // y = r cos(phi)  \\r\n  // z = r sin(phi) sin(theta)\\r\n  float phi = acos( v.y );\\r\n  // if phi is 0, then there are no x, z components\\r\n  float theta = 0.0;\\r\n  // else \\r\n  theta = acos(v.x / sin(phi));\\r\n  float sinTheta = v.z / sin(phi);\\r\n  if (sinTheta < 0.0) {\\r\n    // Turn it into -theta, but in the 0-2PI range\\r\n    theta = 2.0 * PI - theta;\\r\n  }\\r\n  theta = theta / (2.0 * 3.14159);\\r\n  phi = phi / 3.14159 ;\\r\n  \\r\n  vec2 angles = vec2( phi, theta );\\r\n  return angles;\\r\n}\\r\n\\r\n\\r\nvoid main(){\\r\n  const int SAMPLE_COUNT = 400; // 4096\\r\n  int lowRoughnessLimit = int(pow(2.0,(roughness+0.1)*20.0));\\r\n  float totalWeight = 0.0;\\r\n  vec3 prefilteredColor = vec3(0.0);\\r\n  float phi = vTexCoord.x * 2.0 * PI;\\r\n  float theta = vTexCoord.y * PI;\\r\n  float x = sin(theta) * cos(phi);\\r\n  float y = sin(theta) * sin(phi);\\r\n  float z = cos(theta);\\r\n  vec3 N = vec3(x,y,z);\\r\n  vec3 V = N;\\r\n  for (int i = 0; i < SAMPLE_COUNT; ++i)\\r\n  {\\r\n    // break at smaller sample numbers for low roughness levels\\r\n    if(i == lowRoughnessLimit)\\r\n    {\\r\n      break;\\r\n    }\\r\n    vec2 Xi = HammersleyNoBitOps(i, SAMPLE_COUNT);\\r\n    vec3 H = ImportanceSampleGGX(Xi, N, roughness);\\r\n    vec3 L = normalize(2.0 * dot(V, H) * H - V);\\r\n\\r\n    float NdotL = max(dot(N, L), 0.0);\\r\n    if (NdotL > 0.0)\\r\n    {\\r\n      prefilteredColor += texture2D(environmentMap, nTOE(L)).xyz * NdotL;\\r\n      totalWeight += NdotL;\\r\n    }\\r\n  }\\r\n  prefilteredColor = prefilteredColor / totalWeight;\\r\n\\r\n  gl_FragColor = vec4(prefilteredColor, 1.0);\\r\n}\\r\n\\r\nvec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness){\\r\n  float a = roughness * roughness;\\r\n\\r\n  float phi = 2.0 * PI * Xi.x;\\r\n  float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));\\r\n  float sinTheta = sqrt(1.0 - cosTheta * cosTheta);\\r\n  // from spherical coordinates to cartesian coordinates\\r\n  vec3 H;\\r\n  H.x = cos(phi) * sinTheta;\\r\n  H.y = sin(phi) * sinTheta;\\r\n  H.z = cosTheta;\\r\n\\r\n  // from tangent-space vector to world-space sample vector\\r\n  vec3 up = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);\\r\n  vec3 tangent = normalize(cross(up, N));\\r\n  vec3 bitangent = cross(N, tangent);\\r\n\\r\n  vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;\\r\n  return normalize(sampleVec);\\r\n}\\r\n\\r\n\\r\nfloat VanDerCorput(int n, int base)\\r\n{\\r\n#ifdef WEBGL2\\r\n\\r\n    uint bits = uint(n);\\r\n    bits = (bits << 16u) | (bits >> 16u);\\r\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\\r\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\\r\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\\r\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\\r\n    return float(bits) * 2.3283064365386963e-10; // / 0x100000000\\r\n\\r\n#else\\r\n\\r\n  float invBase = 1.0 / float(base);\\r\n  float denom = 1.0;\\r\n  float result = 0.0;\\r\n\\r\n\\r\n  for (int i = 0; i < 32; ++i)\\r\n  {\\r\n        if (n > 0)\\r\n        {\\r\n        denom = mod(float(n), 2.0);\\r\n        result += denom * invBase;\\r\n        invBase = invBase / 2.0;\\r\n        n = int(float(n) / 2.0);\\r\n        }\\r\n  }\\r\n\\r\n\\r\n  return result;\\r\n\\r\n#endif\\r\n}\\r\n\\r\nvec2 HammersleyNoBitOps(int i, int N)\\r\n{\\r\n  return vec2(float(i) / float(N), VanDerCorput(i, 2));\\r\n}\\r\n` }, L = R.sphereMappingFrag;\n      for (E in R)\n        R[E] = `#ifdef WEBGL2\n\n#define IN in\n#define OUT out\n\n#ifdef FRAGMENT_SHADER\nout vec4 outColor;\n#define OUT_COLOR outColor\n#endif\n#define TEXTURE texture\n\n#else\n\n#ifdef FRAGMENT_SHADER\n#define IN varying\n#else\n#define IN attribute\n#endif\n#define OUT varying\n#define TEXTURE texture2D\n\n#ifdef FRAGMENT_SHADER\n#define OUT_COLOR gl_FragColor\n#endif\n\n#endif\n` + R[E];\n      T(M = {}, h.GRAY, `precision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\n\nfloat luma(vec3 color) {\n  // weighted grayscale with luminance values\n  return dot(color, vec3(0.2126, 0.7152, 0.0722));\n}\n\nvoid main() {\n  vec4 tex = texture2D(tex0, vTexCoord);\n  float gray = luma(tex.rgb);\n  gl_FragColor = vec4(gray, gray, gray, tex.a);\n}\n`), T(M, h.ERODE, `// Reduces the bright areas in an image\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\nuniform vec2 texelSize;\n\nfloat luma(vec3 color) {\n  // weighted grayscale with luminance values\n  // weights 77, 151, 28 taken from src/image/filters.js\n  return dot(color, vec3(0.300781, 0.589844, 0.109375));\n}\n\nvoid main() {\n  vec4 color = texture2D(tex0, vTexCoord);\n  float lum = luma(color.rgb);\n\n  // set current color as the darkest neighbor color\n\n  vec4 neighbors[4];\n  neighbors[0] = texture2D(tex0, vTexCoord + vec2( texelSize.x, 0.0));\n  neighbors[1] = texture2D(tex0, vTexCoord + vec2(-texelSize.x, 0.0));\n  neighbors[2] = texture2D(tex0, vTexCoord + vec2(0.0,  texelSize.y));\n  neighbors[3] = texture2D(tex0, vTexCoord + vec2(0.0, -texelSize.y));\n\n  for (int i = 0; i < 4; i++) {\n    vec4 neighborColor = neighbors[i];\n    float neighborLum = luma(neighborColor.rgb);\n\n    if (neighborLum < lum) {\n      color = neighborColor;\n      lum = neighborLum;\n    }\n  }\n\n  gl_FragColor = color;\n}\n`), T(M, h.DILATE, `// Increase the bright areas in an image\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\nuniform vec2 texelSize;\n\nfloat luma(vec3 color) {\n  // weighted grayscale with luminance values\n  // weights 77, 151, 28 taken from src/image/filters.js\n  return dot(color, vec3(0.300781, 0.589844, 0.109375));\n}\n\nvoid main() {\n  vec4 color = texture2D(tex0, vTexCoord);\n  float lum = luma(color.rgb);\n\n  // set current color as the brightest neighbor color\n\n  vec4 neighbors[4];\n  neighbors[0] = texture2D(tex0, vTexCoord + vec2( texelSize.x, 0.0));\n  neighbors[1] = texture2D(tex0, vTexCoord + vec2(-texelSize.x, 0.0));\n  neighbors[2] = texture2D(tex0, vTexCoord + vec2(0.0,  texelSize.y));\n  neighbors[3] = texture2D(tex0, vTexCoord + vec2(0.0, -texelSize.y));\n\n  for (int i = 0; i < 4; i++) {\n    vec4 neighborColor = neighbors[i];\n    float neighborLum = luma(neighborColor.rgb);\n\n    if (neighborLum > lum) {\n      color = neighborColor;\n      lum = neighborLum;\n    }\n  }\n\n  gl_FragColor = color;\n}\n`), T(M, h.BLUR, `precision highp float;\n\n// Two-pass blur filter, unweighted kernel.\n// See also a similar blur at Adam Ferriss' repo of shader examples:\n// https://github.com/aferriss/p5jsShaderExamples/blob/gh-pages/4_image-effects/4-9_single-pass-blur/effect.frag\n\n\nuniform sampler2D tex0;\nvarying vec2 vTexCoord;\nuniform vec2 direction;\nuniform vec2 canvasSize;\nuniform float radius;\n\nfloat random(vec2 p) {\n  vec3 p3  = fract(vec3(p.xyx) * .1031);\n  p3 += dot(p3, p3.yzx + 33.33);\n  return fract((p3.x + p3.y) * p3.z);\n}\n\n// This isn't a real Gaussian weight, it's a quadratic weight. It's what the\n// CPU mode's blur uses though, so we also use it here to match.\nfloat quadWeight(float x, float e) {\n  return pow(e-abs(x), 2.);\n}\n\nvoid main(){\n  vec2 uv = vTexCoord;\n\n  // A reasonable maximum number of samples\n  const float maxSamples = 64.0;\n\n  float numSamples = floor(7. * radius);\n  if (fract(numSamples / 2.) == 0.) {\n    numSamples++;\n  }\n  vec4 avg = vec4(0.0);\n  float total = 0.0;\n\n  // Calculate the spacing to avoid skewing if numSamples > maxSamples\n  float spacing = 1.0;\n  if (numSamples > maxSamples) {\n    spacing = numSamples / maxSamples;\n    numSamples = maxSamples;\n  }\n\n  float randomOffset = (spacing - 1.0) * mix(-0.5, 0.5, random(gl_FragCoord.xy));\n  for (float i = 0.0; i < maxSamples; i++) {\n    if (i >= numSamples) break;\n\n    float sample = i * spacing - (numSamples - 1.0) * 0.5 * spacing + randomOffset;\n    vec2 sampleCoord = uv + vec2(sample, sample) / canvasSize * direction;\n    float weight = quadWeight(sample, (numSamples - 1.0) * 0.5 * spacing);\n\n    avg += weight * texture2D(tex0, sampleCoord);\n    total += weight;\n  }\n\n  avg /= total;\n  gl_FragColor = avg;\n}\n`), T(M, h.POSTERIZE, `// Limit color space for a stylized cartoon / poster effect\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\nuniform float filterParameter;\n\nvec3 quantize(vec3 color, float n) {\n  // restrict values to N options/bins\n  // and floor each channel to nearest value\n  //\n  // eg. when N = 5, values = 0.0, 0.25, 0.50, 0.75, 1.0\n  // then quantize (0.1, 0.7, 0.9) -> (0.0, 0.5, 1.0)\n\n  color = color * n;\n  color = floor(color);\n  color = color / (n - 1.0);\n  return color;\n}\n\nvoid main() {\n  vec4 color = texture2D(tex0, vTexCoord);\n\n  vec3 restrictedColor = quantize(color.rgb / color.a, filterParameter);\n\n  gl_FragColor = vec4(restrictedColor.rgb * color.a, color.a);\n}\n`), T(M, h.OPAQUE, `// Set alpha channel to entirely opaque\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\n\nvoid main() {\n  vec4 color = texture2D(tex0, vTexCoord);\n  gl_FragColor = vec4(color.rgb / color.a, 1.0);\n}\n`), T(M, h.INVERT, `// Set each pixel to inverse value\n// Note that original INVERT does not change the opacity, so this follows suit\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\n\nvoid main() {\nvec4 color = texture2D(tex0, vTexCoord);\nvec3 origColor = color.rgb / color.a;\nvec3 invertedColor = vec3(1.0) - origColor;\ngl_FragColor = vec4(invertedColor * color.a, color.a);\n}\n`), T(M, h.THRESHOLD, `// Convert pixels to either white or black, \n// depending on if their luma is above or below filterParameter\n\nprecision highp float;\n\nvarying vec2 vTexCoord;\n\nuniform sampler2D tex0;\nuniform float filterParameter;\n\nfloat luma(vec3 color) {\n  // weighted grayscale with luminance values\n  return dot(color, vec3(0.2126, 0.7152, 0.0722));\n}\n\nvoid main() {\n  vec4 color = texture2D(tex0, vTexCoord);\n  float gray = luma(color.rgb / color.a);\n  // floor() used to match src/image/filters.js\n  float threshold = floor(filterParameter * 255.0) / 255.0;\n  float blackOrWhite = step(threshold, gray);\n  gl_FragColor = vec4(vec3(blackOrWhite) * color.a, color.a);\n}\n`);\n      var F = M;\n      function V(U, W, ce, ne, b, O, D, B, Y, J) {\n        var te = W.getParameter(W.FRAMEBUFFER_BINDING), ce = (W.bindFramebuffer(W.FRAMEBUFFER, ce), B === W.RGBA ? 4 : 3), re = O * D * ce, ue = Y === W.UNSIGNED_BYTE ? Uint8Array : Float32Array;\n        if (U instanceof ue && U.length === re || (U = new ue(re)), W.readPixels(ne, J ? J - b - D : b, O, D, B, Y, U), W.bindFramebuffer(W.FRAMEBUFFER, te), J)\n          for (var le = Math.floor(D / 2), K = new ue(O * ce), ae = 0; ae < le; ae++) {\n            var he = ae * O * 4, _e = (D - ae - 1) * O * 4;\n            K.set(U.subarray(he, he + 4 * O)), U.copyWithin(he, _e, _e + 4 * O), U.set(K, _e);\n          }\n        return U;\n      }\n      function G(U, Y, X, ne, b, O, D) {\n        var B = U.getParameter(U.FRAMEBUFFER_BINDING), Y = (U.bindFramebuffer(U.FRAMEBUFFER, Y), b === U.RGBA ? 4 : 3), Y = new (O === U.UNSIGNED_BYTE ? Uint8Array : Float32Array)(Y);\n        return U.readPixels(X, D ? D - ne - 1 : ne, 1, 1, b, O, Y), U.bindFramebuffer(U.FRAMEBUFFER, B), Array.from(Y);\n      }\n      u.default.prototype.setAttributes = function(U, W) {\n        if (this._glAttributes === void 0)\n          console.log(\"You are trying to use setAttributes on a p5.Graphics object that does not use a WEBGL renderer.\");\n        else {\n          var X = !0;\n          if (W !== void 0 ? (this._glAttributes === null && (this._glAttributes = {}), this._glAttributes[U] !== W && (this._glAttributes[U] = W, X = !1)) : U instanceof Object && this._glAttributes !== U && (this._glAttributes = U, X = !1), this._renderer.isP3D && !X) {\n            if (!this._setupDone) {\n              for (var ne in this._renderer.retainedMode.geometry)\n                if (this._renderer.retainedMode.geometry.hasOwnProperty(ne))\n                  return void u.default._friendlyError(\"Sorry, Could not set the attributes, you need to call setAttributes() before calling the other drawing methods in setup()\");\n            }\n            this.push(), this._renderer._resetContext(), this.pop(), this._renderer._curCamera && (this._renderer._curCamera._renderer = this._renderer);\n          }\n        }\n      }, u.default.RendererGL = function(U) {\n        var W = ne;\n        if (typeof U != \"function\" && U !== null)\n          throw new TypeError(\"Super expression must either be null or a function\");\n        W.prototype = Object.create(U && U.prototype, { constructor: { value: W, writable: !0, configurable: !0 } }), U && a(W, U);\n        var X = c(ne);\n        function ne(b, O, D, B) {\n          if (this instanceof ne)\n            return (b = X.call(this, b, O, D))._setAttributeDefaults(O), b._initContext(), b.isP3D = !0, b.geometryBuilder = void 0, b.GL = b.drawingContext, b._pInst._setProperty(\"drawingContext\", b.drawingContext), b._isErasing = !1, b._clipDepths = [], b._isClipApplied = !1, b._stencilTestOn = !1, b._enableLighting = !1, b.ambientLightColors = [], b.mixedAmbientLight = [], b.mixedSpecularColor = [], b.specularColors = [1, 1, 1], b.directionalLightDirections = [], b.directionalLightDiffuseColors = [], b.directionalLightSpecularColors = [], b.pointLightPositions = [], b.pointLightDiffuseColors = [], b.pointLightSpecularColors = [], b.spotLightPositions = [], b.spotLightDirections = [], b.spotLightDiffuseColors = [], b.spotLightSpecularColors = [], b.spotLightAngle = [], b.spotLightConc = [], b.activeImageLight = null, b.diffusedTextures = /* @__PURE__ */ new Map(), b.specularTextures = /* @__PURE__ */ new Map(), b.drawMode = h.FILL, b.curFillColor = b._cachedFillStyle = [1, 1, 1, 1], b.curAmbientColor = b._cachedFillStyle = [1, 1, 1, 1], b.curSpecularColor = b._cachedFillStyle = [0, 0, 0, 0], b.curEmissiveColor = b._cachedFillStyle = [0, 0, 0, 0], b.curStrokeColor = b._cachedStrokeStyle = [0, 0, 0, 1], b.curBlendMode = h.BLEND, b.preEraseBlend = void 0, b._cachedBlendMode = void 0, b.webglVersion === h.WEBGL2 ? b.blendExt = b.GL : b.blendExt = b.GL.getExtension(\"EXT_blend_minmax\"), b._isBlending = !1, b._hasSetAmbient = !1, b._useSpecularMaterial = !1, b._useEmissiveMaterial = !1, b._useNormalMaterial = !1, b._useShininess = 1, b._useMetalness = 0, b._useLineColor = !1, b._useVertexColor = !1, b.registerEnabled = /* @__PURE__ */ new Set(), b._tint = [255, 255, 255, 255], b.constantAttenuation = 1, b.linearAttenuation = 0, b.quadraticAttenuation = 0, b.uMVMatrix = new u.default.Matrix(), b.uPMatrix = new u.default.Matrix(), b.uNMatrix = new u.default.Matrix(\"mat3\"), b.curMatrix = new u.default.Matrix(\"mat3\"), b._currentNormal = new u.default.Vector(0, 0, 1), b._curCamera = new u.default.Camera(p(b)), b._curCamera._computeCameraDefaultSettings(), b._curCamera._setDefaultCamera(), b.filterCamera = new u.default.Camera(p(b)), b.filterCamera._computeCameraDefaultSettings(), b.filterCamera._setDefaultCamera(), b.prevTouches = [], b.zoomVelocity = 0, b.rotateVelocity = new u.default.Vector(0, 0), b.moveVelocity = new u.default.Vector(0, 0), b.executeZoom = !1, b.executeRotateAndMove = !1, b.specularShader = void 0, b.sphereMapping = void 0, b.diffusedShader = void 0, b._defaultLightShader = void 0, b._defaultImmediateModeShader = void 0, b._defaultNormalShader = void 0, b._defaultColorShader = void 0, b._defaultPointShader = void 0, b.userFillShader = void 0, b.userStrokeShader = void 0, b.userPointShader = void 0, b.retainedMode = { geometry: {}, buffers: { stroke: [new u.default.RenderBuffer(4, \"lineVertexColors\", \"lineColorBuffer\", \"aVertexColor\", p(b)), new u.default.RenderBuffer(3, \"lineVertices\", \"lineVerticesBuffer\", \"aPosition\", p(b)), new u.default.RenderBuffer(3, \"lineTangentsIn\", \"lineTangentsInBuffer\", \"aTangentIn\", p(b)), new u.default.RenderBuffer(3, \"lineTangentsOut\", \"lineTangentsOutBuffer\", \"aTangentOut\", p(b)), new u.default.RenderBuffer(1, \"lineSides\", \"lineSidesBuffer\", \"aSide\", p(b))], fill: [new u.default.RenderBuffer(3, \"vertices\", \"vertexBuffer\", \"aPosition\", p(b), b._vToNArray), new u.default.RenderBuffer(3, \"vertexNormals\", \"normalBuffer\", \"aNormal\", p(b), b._vToNArray), new u.default.RenderBuffer(4, \"vertexColors\", \"colorBuffer\", \"aVertexColor\", p(b)), new u.default.RenderBuffer(3, \"vertexAmbients\", \"ambientBuffer\", \"aAmbientColor\", p(b)), new u.default.RenderBuffer(2, \"uvs\", \"uvBuffer\", \"aTexCoord\", p(b), b._flatten)], text: [new u.default.RenderBuffer(3, \"vertices\", \"vertexBuffer\", \"aPosition\", p(b), b._vToNArray), new u.default.RenderBuffer(2, \"uvs\", \"uvBuffer\", \"aTexCoord\", p(b), b._flatten)] } }, b.immediateMode = { geometry: new u.default.Geometry(), shapeMode: h.TRIANGLE_FAN, contourIndices: [], _bezierVertex: [], _quadraticVertex: [], _curveVertex: [], buffers: { fill: [new u.default.RenderBuffer(3, \"vertices\", \"vertexBuffer\", \"aPosition\", p(b), b._vToNArray), new u.default.RenderBuffer(3, \"vertexNormals\", \"normalBuffer\", \"aNormal\", p(b), b._vToNArray), new u.default.RenderBuffer(4, \"vertexColors\", \"colorBuffer\", \"aVertexColor\", p(b)), new u.default.RenderBuffer(3, \"vertexAmbients\", \"ambientBuffer\", \"aAmbientColor\", p(b)), new u.default.RenderBuffer(2, \"uvs\", \"uvBuffer\", \"aTexCoord\", p(b), b._flatten)], stroke: [new u.default.RenderBuffer(4, \"lineVertexColors\", \"lineColorBuffer\", \"aVertexColor\", p(b)), new u.default.RenderBuffer(3, \"lineVertices\", \"lineVerticesBuffer\", \"aPosition\", p(b)), new u.default.RenderBuffer(3, \"lineTangentsIn\", \"lineTangentsInBuffer\", \"aTangentIn\", p(b)), new u.default.RenderBuffer(3, \"lineTangentsOut\", \"lineTangentsOutBuffer\", \"aTangentOut\", p(b)), new u.default.RenderBuffer(1, \"lineSides\", \"lineSidesBuffer\", \"aSide\", p(b))], point: b.GL.createBuffer() } }, b.pointSize = 5, b.curStrokeWeight = 1, b.curStrokeCap = h.ROUND, b.curStrokeJoin = h.ROUND, b.textures = /* @__PURE__ */ new Map(), b.framebuffers = /* @__PURE__ */ new Set(), b.activeFramebuffers = [], b.filterShader = void 0, b.filterLayer = void 0, b.filterLayerTemp = void 0, b.defaultFilterShaders = {}, b.textureMode = h.IMAGE, b.textureWrapX = h.CLAMP, b.textureWrapY = h.CLAMP, b._tex = null, b._curveTightness = 6, b._lookUpTableBezier = [], b._lookUpTableQuadratic = [], b._lutBezierDetail = 0, b._lutQuadraticDetail = 0, b.isProcessingVertices = !1, b._tessy = b._initTessy(), b.fontInfos = {}, b._curShader = void 0, b;\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n        return W = ne, (U = [{ key: \"beginGeometry\", value: function() {\n          if (this.geometryBuilder)\n            throw new Error(\"It looks like `beginGeometry()` is being called while another p5.Geometry is already being build.\");\n          this.geometryBuilder = new g.default(this);\n        } }, { key: \"endGeometry\", value: function() {\n          var b;\n          if (this.geometryBuilder)\n            return b = this.geometryBuilder.finish(), this.geometryBuilder = void 0, b;\n          throw new Error(\"Make sure you call beginGeometry() before endGeometry()!\");\n        } }, { key: \"buildGeometry\", value: function(b) {\n          return this.beginGeometry(), b(), this.endGeometry();\n        } }, { key: \"_setAttributeDefaults\", value: function(b) {\n          var O = { alpha: !0, depth: !0, stencil: !0, antialias: navigator.userAgent.toLowerCase().includes(\"safari\"), premultipliedAlpha: !0, preserveDrawingBuffer: !0, perPixelLighting: !0, version: 2 };\n          b._glAttributes === null ? b._glAttributes = O : b._glAttributes = Object.assign(O, b._glAttributes);\n        } }, { key: \"_initContext\", value: function() {\n          if (this._pInst._glAttributes.version !== 1 && (this.drawingContext = this.canvas.getContext(\"webgl2\", this._pInst._glAttributes)), this.webglVersion = this.drawingContext ? h.WEBGL2 : h.WEBGL, this._pInst._setProperty(\"webglVersion\", this.webglVersion), this.drawingContext || (this.drawingContext = this.canvas.getContext(\"webgl\", this._pInst._glAttributes) || this.canvas.getContext(\"experimental-webgl\", this._pInst._glAttributes)), this.drawingContext === null)\n            throw new Error(\"Error creating webgl context\");\n          var b = this.drawingContext;\n          b.enable(b.DEPTH_TEST), b.depthFunc(b.LEQUAL), b.viewport(0, 0, b.drawingBufferWidth, b.drawingBufferHeight), b.pixelStorei(b.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !0), this._viewport = this.drawingContext.getParameter(this.drawingContext.VIEWPORT);\n        } }, { key: \"_getParam\", value: function() {\n          var b = this.drawingContext;\n          return b.getParameter(b.MAX_TEXTURE_SIZE);\n        } }, { key: \"_adjustDimensions\", value: function(b, O) {\n          this._maxTextureSize || (this._maxTextureSize = this._getParam());\n          var B = this._maxTextureSize, B = (u.default.prototype._maxAllowedPixelDimensions, Math.floor(B / this.pixelDensity())), D = Math.min(b, B), B = Math.min(O, B);\n          return D === b && B === O || console.warn(\"Warning: The requested width/height exceeds hardware limits. \" + \"Adjusting dimensions to width: \".concat(D, \", height: \").concat(B, \".\")), { adjustedWidth: D, adjustedHeight: B };\n        } }, { key: \"_resetContext\", value: function(b, O) {\n          var D, B = this.width, Y = this.height, te = this.canvas.id, J = this._pInst instanceof u.default.Graphics, te = (J ? ((D = this._pInst).canvas.parentNode.removeChild(D.canvas), D.canvas = document.createElement(\"canvas\"), (D._pInst._userNode || document.body).appendChild(D.canvas), u.default.Element.call(D, D.canvas, D._pInst), D.width = B, D.height = Y) : ((D = this.canvas) && D.parentNode.removeChild(D), (D = document.createElement(\"canvas\")).id = te, (this._pInst._userNode || document.body).appendChild(D), this._pInst.canvas = D, this.canvas = D), new u.default.RendererGL(this._pInst.canvas, this._pInst, !J));\n          this._pInst._setProperty(\"_renderer\", te), te.resize(B, Y), te._applyDefaults(), J || this._pInst._elements.push(te), typeof O == \"function\" && setTimeout(function() {\n            O.apply(window._renderer, b);\n          }, 0);\n        } }, { key: \"_update\", value: function() {\n          this.uMVMatrix.set(this._curCamera.cameraMatrix), this.ambientLightColors.length = 0, this.specularColors = [1, 1, 1], this.directionalLightDirections.length = 0, this.directionalLightDiffuseColors.length = 0, this.directionalLightSpecularColors.length = 0, this.pointLightPositions.length = 0, this.pointLightDiffuseColors.length = 0, this.pointLightSpecularColors.length = 0, this.spotLightPositions.length = 0, this.spotLightDirections.length = 0, this.spotLightDiffuseColors.length = 0, this.spotLightSpecularColors.length = 0, this.spotLightAngle.length = 0, this.spotLightConc.length = 0, this._enableLighting = !1, this._tint = [255, 255, 255, 255], this.GL.clearStencil(0), this.GL.clear(this.GL.DEPTH_BUFFER_BIT | this.GL.STENCIL_BUFFER_BIT), this.GL.disable(this.GL.STENCIL_TEST);\n        } }, { key: \"background\", value: function() {\n          var B = (B = this._pInst).color.apply(B, arguments), b = B.levels[0] / 255, O = B.levels[1] / 255, D = B.levels[2] / 255, B = B.levels[3] / 255;\n          this.clear(b, O, D, B);\n        } }, { key: \"fill\", value: function(b, O, D, B) {\n          var Y = u.default.prototype.color.apply(this._pInst, arguments);\n          this.curFillColor = Y._array, this.drawMode = h.FILL, this._useNormalMaterial = !1, this._tex = null;\n        } }, { key: \"stroke\", value: function(b, O, D, B) {\n          var Y = u.default.prototype.color.apply(this._pInst, arguments);\n          this.curStrokeColor = Y._array;\n        } }, { key: \"strokeCap\", value: function(b) {\n          this.curStrokeCap = b;\n        } }, { key: \"strokeJoin\", value: function(b) {\n          this.curStrokeJoin = b;\n        } }, { key: \"getFilterLayer\", value: function() {\n          return this.filterLayer || (this.filterLayer = this._pInst.createFramebuffer()), this.filterLayer;\n        } }, { key: \"getFilterLayerTemp\", value: function() {\n          return this.filterLayerTemp || (this.filterLayerTemp = this._pInst.createFramebuffer()), this.filterLayerTemp;\n        } }, { key: \"matchSize\", value: function(b, O) {\n          b.width === O.width && b.height === O.height || b.resize(O.width, O.height), b.pixelDensity() !== O.pixelDensity() && b.pixelDensity(O.pixelDensity());\n        } }, { key: \"filter\", value: function() {\n          var b, O, D = this, B = this.getFilterLayer(), Y = void 0, J = void 0, te = (typeof (arguments.length <= 0 ? void 0 : arguments[0]) == \"string\" ? (J = arguments.length <= 0 ? void 0 : arguments[0], T(b = {}, h.BLUR, 3), T(b, h.POSTERIZE, 4), T(b, h.THRESHOLD, 0.5), Y = J in (b = b) && (arguments.length <= 1 ? void 0 : arguments[1]) === void 0 ? b[J] : arguments.length <= 1 ? void 0 : arguments[1], J in this.defaultFilterShaders || (this.defaultFilterShaders[J] = new u.default.Shader(B._renderer, `uniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nattribute vec3 aPosition;\n// texcoords only come from p5 to vertex shader\n// so pass texcoords on to the fragment shader in a varying variable\nattribute vec2 aTexCoord;\nvarying vec2 vTexCoord;\n\nvoid main() {\n  // transferring texcoords for the frag shader\n  vTexCoord = aTexCoord;\n\n  // copy position with a fourth coordinate for projection (1.0 is normal)\n  vec4 positionVec4 = vec4(aPosition, 1.0);\n\n  gl_Position = uProjectionMatrix * uModelViewMatrix * positionVec4;\n}\n`, F[J])), this.filterShader = this.defaultFilterShaders[J]) : this.filterShader = arguments.length <= 0 ? void 0 : arguments[0], this.activeFramebuffer() || this), ce = (this.matchSize(B, te), B.draw(function() {\n            return D._pInst.clear();\n          }), [1 / (te.width * te.pixelDensity()), 1 / (te.height * te.pixelDensity())]);\n          J === h.BLUR ? (O = this.getFilterLayerTemp(), this.matchSize(O, te), this._pInst.push(), this._pInst.noStroke(), this._pInst.blendMode(h.BLEND), this._pInst.shader(this.filterShader), this.filterShader.setUniform(\"texelSize\", ce), this.filterShader.setUniform(\"canvasSize\", [te.width, te.height]), this.filterShader.setUniform(\"radius\", Math.max(1, Y)), O.draw(function() {\n            D.filterShader.setUniform(\"direction\", [1, 0]), D.filterShader.setUniform(\"tex0\", te), D._pInst.clear(), D._pInst.shader(D.filterShader), D._pInst.noLights(), D._pInst.plane(te.width, te.height);\n          }), B.draw(function() {\n            D.filterShader.setUniform(\"direction\", [0, 1]), D.filterShader.setUniform(\"tex0\", O), D._pInst.clear(), D._pInst.shader(D.filterShader), D._pInst.noLights(), D._pInst.plane(te.width, te.height);\n          }), this._pInst.pop()) : B.draw(function() {\n            D._pInst.noStroke(), D._pInst.blendMode(h.BLEND), D._pInst.shader(D.filterShader), D.filterShader.setUniform(\"tex0\", te), D.filterShader.setUniform(\"texelSize\", ce), D.filterShader.setUniform(\"canvasSize\", [te.width, te.height]), D.filterShader.setUniform(\"filterParameter\", Y), D._pInst.noLights(), D._pInst.plane(te.width, te.height);\n          }), this._pInst.push(), this._pInst.noStroke(), this.clear(), this._pInst.push(), this._pInst.imageMode(h.CORNER), this._pInst.blendMode(h.BLEND), te.filterCamera._resize(), this._pInst.setCamera(te.filterCamera), this._pInst.resetMatrix(), this._pInst.image(B, -te.width / 2, -te.height / 2, te.width, te.height), this._pInst.clearDepth(), this._pInst.pop(), this._pInst.pop();\n        } }, { key: \"pixelDensity\", value: function(b) {\n          return b ? this._pInst.pixelDensity(b) : this._pInst.pixelDensity();\n        } }, { key: \"blendMode\", value: function(b) {\n          b === h.DARKEST || b === h.LIGHTEST || b === h.ADD || b === h.BLEND || b === h.SUBTRACT || b === h.SCREEN || b === h.EXCLUSION || b === h.REPLACE || b === h.MULTIPLY || b === h.REMOVE ? this.curBlendMode = b : b !== h.BURN && b !== h.OVERLAY && b !== h.HARD_LIGHT && b !== h.SOFT_LIGHT && b !== h.DODGE || console.warn(\"BURN, OVERLAY, HARD_LIGHT, SOFT_LIGHT, and DODGE only work for blendMode in 2D mode.\");\n        } }, { key: \"erase\", value: function(b, O) {\n          this._isErasing || (this.preEraseBlend = this.curBlendMode, this._isErasing = !0, this.blendMode(h.REMOVE), this._cachedFillStyle = this.curFillColor.slice(), this.curFillColor = [1, 1, 1, b / 255], this._cachedStrokeStyle = this.curStrokeColor.slice(), this.curStrokeColor = [1, 1, 1, O / 255]);\n        } }, { key: \"noErase\", value: function() {\n          this._isErasing && (this.curFillColor = this._cachedFillStyle.slice(), this.curStrokeColor = this._cachedStrokeStyle.slice(), this.curBlendMode = this.preEraseBlend, this.blendMode(this.preEraseBlend), this._isErasing = !1, this._applyBlendMode());\n        } }, { key: \"drawTarget\", value: function() {\n          return this.activeFramebuffers[this.activeFramebuffers.length - 1] || this;\n        } }, { key: \"beginClip\", value: function() {\n          var b = 0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : {}, b = (n(j(ne.prototype), \"beginClip\", this).call(this, b), this.drawTarget()._isClipApplied = !0, this.GL);\n          b.clearStencil(0), b.clear(b.STENCIL_BUFFER_BIT), b.enable(b.STENCIL_TEST), this._stencilTestOn = !0, b.stencilFunc(b.ALWAYS, 1, 255), b.stencilOp(b.KEEP, b.KEEP, b.REPLACE), b.disable(b.DEPTH_TEST), this._pInst.push(), this._pInst.resetShader(), this._doFill && this._pInst.fill(0, 0), this._doStroke && this._pInst.stroke(0, 0);\n        } }, { key: \"endClip\", value: function() {\n          this._pInst.pop();\n          var b = this.GL;\n          b.stencilOp(b.KEEP, b.KEEP, b.KEEP), b.stencilFunc(this._clipInvert ? b.EQUAL : b.NOTEQUAL, 0, 255), b.enable(b.DEPTH_TEST), this._clipDepths.push(this._pushPopDepth), n(j(ne.prototype), \"endClip\", this).call(this);\n        } }, { key: \"_clearClip\", value: function() {\n          this.GL.clearStencil(1), this.GL.clear(this.GL.STENCIL_BUFFER_BIT), 0 < this._clipDepths.length && this._clipDepths.pop(), this.drawTarget()._isClipApplied = !1;\n        } }, { key: \"strokeWeight\", value: function(b) {\n          this.curStrokeWeight !== b && (this.pointSize = b, this.curStrokeWeight = b);\n        } }, { key: \"_getPixel\", value: function(b, O) {\n          var D = this.GL;\n          return G(D, null, b, O, D.RGBA, D.UNSIGNED_BYTE, this._pInst.height * this._pInst.pixelDensity());\n        } }, { key: \"loadPixels\", value: function() {\n          var b, O, D = this._pixelsState;\n          this._pInst._glAttributes.preserveDrawingBuffer !== !0 ? console.log(\"loadPixels only works in WebGL when preserveDrawingBuffer is true.\") : (b = this._pInst._pixelDensity, O = this.GL, D._setProperty(\"pixels\", V(D.pixels, O, null, 0, 0, this.width * b, this.height * b, O.RGBA, O.UNSIGNED_BYTE, this.height * b)));\n        } }, { key: \"updatePixels\", value: function() {\n          var b = this._getTempFramebuffer();\n          b.pixels = this._pixelsState.pixels, b.updatePixels(), this._pInst.push(), this._pInst.resetMatrix(), this._pInst.clear(), this._pInst.imageMode(h.CENTER), this._pInst.image(b, 0, 0), this._pInst.pop(), this.GL.clearDepth(1), this.GL.clear(this.GL.DEPTH_BUFFER_BIT);\n        } }, { key: \"_getTempFramebuffer\", value: function() {\n          return this._tempFramebuffer || (this._tempFramebuffer = this._pInst.createFramebuffer({ format: h.UNSIGNED_BYTE, useDepth: this._pInst._glAttributes.depth, depthFormat: h.UNSIGNED_INT, antialias: this._pInst._glAttributes.antialias })), this._tempFramebuffer;\n        } }, { key: \"geometryInHash\", value: function(b) {\n          return this.retainedMode.geometry[b] !== void 0;\n        } }, { key: \"viewport\", value: function(b, O) {\n          this._viewport = [0, 0, b, O], this.GL.viewport(0, 0, b, O);\n        } }, { key: \"resize\", value: function(Y, B) {\n          u.default.Renderer.prototype.resize.call(this, Y, B), this._origViewport = { width: this.GL.drawingBufferWidth, height: this.GL.drawingBufferHeight }, this.viewport(this._origViewport.width, this._origViewport.height), this._curCamera._resize();\n          var Y = this._pixelsState, D = (Y.pixels !== void 0 && Y._setProperty(\"pixels\", new Uint8Array(this.GL.drawingBufferWidth * this.GL.drawingBufferHeight * 4)), !0), B = !1, Y = void 0;\n          try {\n            for (var J, te = this.framebuffers[Symbol.iterator](); !(D = (J = te.next()).done); D = !0)\n              J.value._canvasSizeChanged();\n          } catch (ce) {\n            B = !0, Y = ce;\n          } finally {\n            try {\n              D || te.return == null || te.return();\n            } finally {\n              if (B)\n                throw Y;\n            }\n          }\n        } }, { key: \"clear\", value: function() {\n          var b = (arguments.length <= 0 ? void 0 : arguments[0]) || 0, O = (arguments.length <= 1 ? void 0 : arguments[1]) || 0, D = (arguments.length <= 2 ? void 0 : arguments[2]) || 0, B = (arguments.length <= 3 ? void 0 : arguments[3]) || 0, Y = this.activeFramebuffer();\n          Y && Y.format === h.UNSIGNED_BYTE && !Y.antialias && B === 0 && (B = 1e-10), this.GL.clearColor(b * B, O * B, D * B, B), this.GL.clearDepth(1), this.GL.clear(this.GL.COLOR_BUFFER_BIT | this.GL.DEPTH_BUFFER_BIT);\n        } }, { key: \"clearDepth\", value: function() {\n          this.GL.clearDepth(0 < arguments.length && arguments[0] !== void 0 ? arguments[0] : 1), this.GL.clear(this.GL.DEPTH_BUFFER_BIT);\n        } }, { key: \"applyMatrix\", value: function(b, O, D, B, Y, J) {\n          arguments.length === 16 ? u.default.Matrix.prototype.apply.apply(this.uMVMatrix, arguments) : this.uMVMatrix.apply([b, O, 0, 0, D, B, 0, 0, 0, 0, 1, 0, Y, J, 0, 1]);\n        } }, { key: \"translate\", value: function(b, O, D) {\n          return b instanceof u.default.Vector && (D = b.z, O = b.y, b = b.x), this.uMVMatrix.translate([b, O, D]), this;\n        } }, { key: \"scale\", value: function(b, O, D) {\n          return this.uMVMatrix.scale(b, O, D), this;\n        } }, { key: \"rotate\", value: function(b, O) {\n          return O === void 0 ? this.rotateZ(b) : (u.default.Matrix.prototype.rotate.apply(this.uMVMatrix, arguments), this);\n        } }, { key: \"rotateX\", value: function(b) {\n          return this.rotate(b, 1, 0, 0), this;\n        } }, { key: \"rotateY\", value: function(b) {\n          return this.rotate(b, 0, 1, 0), this;\n        } }, { key: \"rotateZ\", value: function(b) {\n          return this.rotate(b, 0, 0, 1), this;\n        } }, { key: \"push\", value: function() {\n          var b = u.default.Renderer.prototype.push.apply(this), O = b.properties;\n          return O.uMVMatrix = this.uMVMatrix.copy(), O.uPMatrix = this.uPMatrix.copy(), O._curCamera = this._curCamera, this._curCamera = this._curCamera.copy(), O.ambientLightColors = this.ambientLightColors.slice(), O.specularColors = this.specularColors.slice(), O.directionalLightDirections = this.directionalLightDirections.slice(), O.directionalLightDiffuseColors = this.directionalLightDiffuseColors.slice(), O.directionalLightSpecularColors = this.directionalLightSpecularColors.slice(), O.pointLightPositions = this.pointLightPositions.slice(), O.pointLightDiffuseColors = this.pointLightDiffuseColors.slice(), O.pointLightSpecularColors = this.pointLightSpecularColors.slice(), O.spotLightPositions = this.spotLightPositions.slice(), O.spotLightDirections = this.spotLightDirections.slice(), O.spotLightDiffuseColors = this.spotLightDiffuseColors.slice(), O.spotLightSpecularColors = this.spotLightSpecularColors.slice(), O.spotLightAngle = this.spotLightAngle.slice(), O.spotLightConc = this.spotLightConc.slice(), O.userFillShader = this.userFillShader, O.userStrokeShader = this.userStrokeShader, O.userPointShader = this.userPointShader, O.pointSize = this.pointSize, O.curStrokeWeight = this.curStrokeWeight, O.curStrokeColor = this.curStrokeColor, O.curFillColor = this.curFillColor, O.curAmbientColor = this.curAmbientColor, O.curSpecularColor = this.curSpecularColor, O.curEmissiveColor = this.curEmissiveColor, O._hasSetAmbient = this._hasSetAmbient, O._useSpecularMaterial = this._useSpecularMaterial, O._useEmissiveMaterial = this._useEmissiveMaterial, O._useShininess = this._useShininess, O._useMetalness = this._useMetalness, O.constantAttenuation = this.constantAttenuation, O.linearAttenuation = this.linearAttenuation, O.quadraticAttenuation = this.quadraticAttenuation, O._enableLighting = this._enableLighting, O._useNormalMaterial = this._useNormalMaterial, O._tex = this._tex, O.drawMode = this.drawMode, O._currentNormal = this._currentNormal, O.curBlendMode = this.curBlendMode, O.activeImageLight = this.activeImageLight, b;\n        } }, { key: \"pop\", value: function() {\n          var b;\n          0 < this._clipDepths.length && this._pushPopDepth === this._clipDepths[this._clipDepths.length - 1] && this._clearClip();\n          for (var O = arguments.length, D = new Array(O), B = 0; B < O; B++)\n            D[B] = arguments[B];\n          (b = n(j(ne.prototype), \"pop\", this)).call.apply(b, [this].concat(D)), this._applyStencilTestIfClipping();\n        } }, { key: \"_applyStencilTestIfClipping\", value: function() {\n          var b = this.drawTarget();\n          b._isClipApplied !== this._stencilTestOn && (b._isClipApplied ? (this.GL.enable(this.GL.STENCIL_TEST), this._stencilTestOn = !0) : (this.GL.disable(this.GL.STENCIL_TEST), this._stencilTestOn = !1));\n        } }, { key: \"resetMatrix\", value: function() {\n          return this.uMVMatrix.set(this._curCamera.cameraMatrix), this;\n        } }, { key: \"_getImmediateStrokeShader\", value: function() {\n          var b = this.userStrokeShader;\n          return b && b.isStrokeShader() ? b : this._getLineShader();\n        } }, { key: \"_getRetainedStrokeShader\", value: function() {\n          return this._getImmediateStrokeShader();\n        } }, { key: \"_getSphereMapping\", value: function(b) {\n          return this.sphereMapping || (this.sphereMapping = this._pInst.createFilterShader(L)), this.uNMatrix.inverseTranspose(this.uMVMatrix), this.uNMatrix.invert3x3(this.uNMatrix), this.sphereMapping.setUniform(\"uFovY\", this._curCamera.cameraFOV), this.sphereMapping.setUniform(\"uAspect\", this._curCamera.aspectRatio), this.sphereMapping.setUniform(\"uNewNormalMatrix\", this.uNMatrix.mat3), this.sphereMapping.setUniform(\"uSampler\", b), this.sphereMapping;\n        } }, { key: \"_getImmediateFillShader\", value: function() {\n          var b = this.userFillShader;\n          if (this._useNormalMaterial && (!b || !b.isNormalShader()))\n            return this._getNormalShader();\n          if (this._enableLighting) {\n            if (!b || !b.isLightShader())\n              return this._getLightShader();\n          } else if (this._tex) {\n            if (!b || !b.isTextureShader())\n              return this._getLightShader();\n          } else if (!b)\n            return this._getImmediateModeShader();\n          return b;\n        } }, { key: \"_getRetainedFillShader\", value: function() {\n          if (this._useNormalMaterial)\n            return this._getNormalShader();\n          var b = this.userFillShader;\n          if (this._enableLighting) {\n            if (!b || !b.isLightShader())\n              return this._getLightShader();\n          } else if (this._tex) {\n            if (!b || !b.isTextureShader())\n              return this._getLightShader();\n          } else if (!b)\n            return this._getColorShader();\n          return b;\n        } }, { key: \"_getImmediatePointShader\", value: function() {\n          var b = this.userPointShader;\n          return b && b.isPointShader() ? b : this._getPointShader();\n        } }, { key: \"_getRetainedLineShader\", value: function() {\n          return this._getImmediateLineShader();\n        } }, { key: \"_getLightShader\", value: function() {\n          return this._defaultLightShader || (this._pInst._glAttributes.perPixelLighting ? this._defaultLightShader = new u.default.Shader(this, this._webGL2CompatibilityPrefix(\"vert\", \"highp\") + R.phongVert, this._webGL2CompatibilityPrefix(\"frag\", \"highp\") + R.phongFrag) : this._defaultLightShader = new u.default.Shader(this, this._webGL2CompatibilityPrefix(\"vert\", \"highp\") + R.lightVert, this._webGL2CompatibilityPrefix(\"frag\", \"highp\") + R.lightTextureFrag)), this._defaultLightShader;\n        } }, { key: \"_getImmediateModeShader\", value: function() {\n          return this._defaultImmediateModeShader || (this._defaultImmediateModeShader = new u.default.Shader(this, this._webGL2CompatibilityPrefix(\"vert\", \"mediump\") + R.immediateVert, this._webGL2CompatibilityPrefix(\"frag\", \"mediump\") + R.vertexColorFrag)), this._defaultImmediateModeShader;\n        } }, { key: \"_getNormalShader\", value: function() {\n          return this._defaultNormalShader || (this._defaultNormalShader = new u.default.Shader(this, this._webGL2CompatibilityPrefix(\"vert\", \"mediump\") + R.normalVert, this._webGL2CompatibilityPrefix(\"frag\", \"mediump\") + R.normalFrag)), this._defaultNormalShader;\n        } }, { key: \"_getColorShader\", value: function() {\n          return this._defaultColorShader || (this._defaultColorShader = new u.default.Shader(this, this._webGL2CompatibilityPrefix(\"vert\", \"mediump\") + R.normalVert, this._webGL2CompatibilityPrefix(\"frag\", \"mediump\") + R.basicFrag)), this._defaultColorShader;\n        } }, { key: \"_getPointShader\", value: function() {\n          return this._defaultPointShader || (this._defaultPointShader = new u.default.Shader(this, this._webGL2CompatibilityPrefix(\"vert\", \"mediump\") + R.pointVert, this._webGL2CompatibilityPrefix(\"frag\", \"mediump\") + R.pointFrag)), this._defaultPointShader;\n        } }, { key: \"_getLineShader\", value: function() {\n          return this._defaultLineShader || (this._defaultLineShader = new u.default.Shader(this, this._webGL2CompatibilityPrefix(\"vert\", \"mediump\") + R.lineVert, this._webGL2CompatibilityPrefix(\"frag\", \"mediump\") + R.lineFrag)), this._defaultLineShader;\n        } }, { key: \"_getFontShader\", value: function() {\n          return this._defaultFontShader || (this.webglVersion === h.WEBGL && this.GL.getExtension(\"OES_standard_derivatives\"), this._defaultFontShader = new u.default.Shader(this, this._webGL2CompatibilityPrefix(\"vert\", \"mediump\") + R.fontVert, this._webGL2CompatibilityPrefix(\"frag\", \"mediump\") + R.fontFrag)), this._defaultFontShader;\n        } }, { key: \"_webGL2CompatibilityPrefix\", value: function(b, O) {\n          var D = \"\";\n          return this.webglVersion === h.WEBGL2 && (D += `#version 300 es\n#define WEBGL2\n`), b === \"vert\" ? D += `#define VERTEX_SHADER\n` : b === \"frag\" && (D += `#define FRAGMENT_SHADER\n`), O && (D += \"precision \".concat(O, ` float;\n`)), D;\n        } }, { key: \"_getEmptyTexture\", value: function() {\n          var b;\n          return this._emptyTexture || ((b = new u.default.Image(1, 1)).set(0, 0, 255), this._emptyTexture = new u.default.Texture(this, b)), this._emptyTexture;\n        } }, { key: \"getTexture\", value: function(b) {\n          b instanceof u.default.Framebuffer && (b = b.color);\n          var O = this.textures.get(b);\n          return O || (O = new u.default.Texture(this, b), this.textures.set(b, O), O);\n        } }, { key: \"getDiffusedTexture\", value: function(b) {\n          var O, D, B = this;\n          return this.diffusedTextures.get(b) != null ? this.diffusedTextures.get(b) : (O = Math.floor(b.height / b.width * 200), D = this._pInst.createFramebuffer({ width: 200, height: O, density: 1 }), this.diffusedShader || (this.diffusedShader = this._pInst.createShader(R.imageLightVert, R.imageLightDiffusedFrag)), D.draw(function() {\n            B._pInst.shader(B.diffusedShader), B.diffusedShader.setUniform(\"environmentMap\", b), B._pInst.noStroke(), B._pInst.rectMode(h.CENTER), B._pInst.noLights(), B._pInst.rect(0, 0, 200, O);\n          }), this.diffusedTextures.set(b, D), D);\n        } }, { key: \"getSpecularTexture\", value: function(b) {\n          var O = this;\n          if (this.specularTextures.get(b) != null)\n            return this.specularTextures.get(b);\n          for (var D, B = [], Y = this._pInst.createFramebuffer({ width: 512, height: 512, density: 1 }), J = Math.log(512) / Math.log(2), te = (this.specularShader || (this.specularShader = this._pInst.createShader(R.imageLightVert, R.imageLightSpecularFrag)), 512); 1 <= te; te /= 2)\n            (function(ce) {\n              Y.resize(ce, ce);\n              var re = 1 - Math.log(ce) / Math.log(2) / J;\n              Y.draw(function() {\n                O._pInst.shader(O.specularShader), O._pInst.clear(), O.specularShader.setUniform(\"environmentMap\", b), O.specularShader.setUniform(\"roughness\", re), O._pInst.noStroke(), O._pInst.noLights(), O._pInst.plane(ce, ce);\n              }), B.push(Y.get().drawingContext.getImageData(0, 0, ce, ce));\n            })(te);\n          return Y.remove(), D = new r.MipmapTexture(this, B, {}), this.specularTextures.set(b, D), D;\n        } }, { key: \"activeFramebuffer\", value: function() {\n          return this.activeFramebuffers[this.activeFramebuffers.length - 1] || null;\n        } }, { key: \"createFramebuffer\", value: function(b) {\n          return new u.default.Framebuffer(this, b);\n        } }, { key: \"_setStrokeUniforms\", value: function(b) {\n          b.bindShader(), b.setUniform(\"uUseLineColor\", this._useLineColor), b.setUniform(\"uMaterialColor\", this.curStrokeColor), b.setUniform(\"uStrokeWeight\", this.curStrokeWeight), b.setUniform(\"uStrokeCap\", A[this.curStrokeCap]), b.setUniform(\"uStrokeJoin\", x[this.curStrokeJoin]);\n        } }, { key: \"_setFillUniforms\", value: function(b) {\n          var O = this, D = (b.bindShader(), this.mixedSpecularColor = i(this.curSpecularColor), 0 < this._useMetalness && (this.mixedSpecularColor = this.mixedSpecularColor.map(function(B, Y) {\n            return O.curFillColor[Y] * O._useMetalness + B * (1 - O._useMetalness);\n          })), b.setUniform(\"uUseVertexColor\", this._useVertexColor), b.setUniform(\"uMaterialColor\", this.curFillColor), b.setUniform(\"isTexture\", !!this._tex), this._tex && b.setUniform(\"uSampler\", this._tex), b.setUniform(\"uTint\", this._tint), b.setUniform(\"uHasSetAmbient\", this._hasSetAmbient), b.setUniform(\"uAmbientMatColor\", this.curAmbientColor), b.setUniform(\"uSpecularMatColor\", this.mixedSpecularColor), b.setUniform(\"uEmissiveMatColor\", this.curEmissiveColor), b.setUniform(\"uSpecular\", this._useSpecularMaterial), b.setUniform(\"uEmissive\", this._useEmissiveMaterial), b.setUniform(\"uShininess\", this._useShininess), b.setUniform(\"metallic\", this._useMetalness), this._setImageLightUniforms(b), b.setUniform(\"uUseLighting\", this._enableLighting), this.pointLightDiffuseColors.length / 3), D = (b.setUniform(\"uPointLightCount\", D), b.setUniform(\"uPointLightLocation\", this.pointLightPositions), b.setUniform(\"uPointLightDiffuseColors\", this.pointLightDiffuseColors), b.setUniform(\"uPointLightSpecularColors\", this.pointLightSpecularColors), this.directionalLightDiffuseColors.length / 3), D = (b.setUniform(\"uDirectionalLightCount\", D), b.setUniform(\"uLightingDirection\", this.directionalLightDirections), b.setUniform(\"uDirectionalDiffuseColors\", this.directionalLightDiffuseColors), b.setUniform(\"uDirectionalSpecularColors\", this.directionalLightSpecularColors), this.ambientLightColors.length / 3), D = (this.mixedAmbientLight = i(this.ambientLightColors), 0 < this._useMetalness && (this.mixedAmbientLight = this.mixedAmbientLight.map(function(B) {\n            return B -= O._useMetalness, Math.max(0, B);\n          })), b.setUniform(\"uAmbientLightCount\", D), b.setUniform(\"uAmbientColor\", this.mixedAmbientLight), this.spotLightDiffuseColors.length / 3);\n          b.setUniform(\"uSpotLightCount\", D), b.setUniform(\"uSpotLightAngle\", this.spotLightAngle), b.setUniform(\"uSpotLightConc\", this.spotLightConc), b.setUniform(\"uSpotLightDiffuseColors\", this.spotLightDiffuseColors), b.setUniform(\"uSpotLightSpecularColors\", this.spotLightSpecularColors), b.setUniform(\"uSpotLightLocation\", this.spotLightPositions), b.setUniform(\"uSpotLightDirection\", this.spotLightDirections), b.setUniform(\"uConstantAttenuation\", this.constantAttenuation), b.setUniform(\"uLinearAttenuation\", this.linearAttenuation), b.setUniform(\"uQuadraticAttenuation\", this.quadraticAttenuation), b.bindTextures();\n        } }, { key: \"_setImageLightUniforms\", value: function(b) {\n          var O, D;\n          b.setUniform(\"uUseImageLight\", this.activeImageLight != null), this.activeImageLight && (O = this.getDiffusedTexture(this.activeImageLight), b.setUniform(\"environmentMapDiffused\", O), O = this.getSpecularTexture(this.activeImageLight), D = 20 / this._useShininess, b.setUniform(\"levelOfDetail\", 8 * D), b.setUniform(\"environmentMapSpecular\", O));\n        } }, { key: \"_setPointUniforms\", value: function(b) {\n          b.bindShader(), b.setUniform(\"uMaterialColor\", this.curStrokeColor), b.setUniform(\"uPointSize\", this.pointSize * this._pInst._pixelDensity);\n        } }, { key: \"_bindBuffer\", value: function(b, O, D, B, Y) {\n          O = O || this.GL.ARRAY_BUFFER, this.GL.bindBuffer(O, b), D !== void 0 && ((b = D) instanceof u.default.DataArray ? b = D.dataArray() : b instanceof (B || Float32Array) || (b = new (B || Float32Array)(b)), this.GL.bufferData(O, b, Y || this.GL.STATIC_DRAW));\n        } }, { key: \"_arraysEqual\", value: function(b, O) {\n          return b.length === O.length && b.every(function(D, B) {\n            return D === O[B];\n          });\n        } }, { key: \"_isTypedArray\", value: function(b) {\n          return [Float32Array, Float64Array, Int16Array, Uint16Array, Uint32Array].some(function(O) {\n            return b instanceof O;\n          });\n        } }, { key: \"_flatten\", value: function(b) {\n          return b.flat();\n        } }, { key: \"_vToNArray\", value: function(b) {\n          return b.flatMap(function(O) {\n            return [O.x, O.y, O.z];\n          });\n        } }, { key: \"_bezierCoefficients\", value: function(b) {\n          var O = b * b, D = 1 - b, B = D * D;\n          return [B * D, 3 * B * b, 3 * D * O, O * b];\n        } }, { key: \"_quadraticCoefficients\", value: function(b) {\n          var O = 1 - b;\n          return [O * O, 2 * O * b, b * b];\n        } }, { key: \"_bezierToCatmull\", value: function(b) {\n          return [b[1], b[1] + (b[2] - b[0]) / this._curveTightness, b[2] - (b[3] - b[1]) / this._curveTightness, b[2]];\n        } }, { key: \"_initTessy\", value: function() {\n          var b = new f.default.GluTesselator();\n          return b.gluTessCallback(f.default.gluEnum.GLU_TESS_VERTEX_DATA, function(O, D) {\n            var B = !0, Y = !1, J = void 0;\n            try {\n              for (var te, ce = O[Symbol.iterator](); !(B = (te = ce.next()).done); B = !0) {\n                var re = te.value;\n                D.push(re);\n              }\n            } catch (ue) {\n              Y = !0, J = ue;\n            } finally {\n              try {\n                B || ce.return == null || ce.return();\n              } finally {\n                if (Y)\n                  throw J;\n              }\n            }\n          }), b.gluTessCallback(f.default.gluEnum.GLU_TESS_BEGIN, function(O) {\n            O !== f.default.primitiveType.GL_TRIANGLES && console.log(\"expected TRIANGLES but got type: \".concat(O));\n          }), b.gluTessCallback(f.default.gluEnum.GLU_TESS_ERROR, function(O) {\n            console.log(\"error callback\"), console.log(\"error number: \".concat(O));\n          }), b.gluTessCallback(f.default.gluEnum.GLU_TESS_COMBINE, function(O, D, B) {\n            for (var Y = new Array(u.default.RendererGL.prototype.tessyVertexSize).fill(0), J = 0; J < B.length; J++)\n              for (var te = 0; te < Y.length; te++)\n                B[J] !== 0 && D[J] && (Y[te] += D[J][te] * B[J]);\n            return Y;\n          }), b.gluTessCallback(f.default.gluEnum.GLU_TESS_EDGE_FLAG, function(O) {\n          }), b.gluTessProperty(f.default.gluEnum.GLU_TESS_WINDING_RULE, f.default.windingRule.GLU_TESS_WINDING_NONZERO), b;\n        } }, { key: \"_triangulate\", value: function(b) {\n          var O = b[0] ? b[0][2] : void 0, D = !0, B = !0, re = !1, le = void 0;\n          try {\n            for (var Y, J = b[Symbol.iterator](); !(B = (Y = J.next()).done); B = !0)\n              for (var te = Y.value, ce = 0; ce < te.length; ce += u.default.RendererGL.prototype.tessyVertexSize)\n                if (te[ce + 2] !== O) {\n                  D = !1;\n                  break;\n                }\n          } catch (xe) {\n            re = !0, le = xe;\n          } finally {\n            try {\n              B || J.return == null || J.return();\n            } finally {\n              if (re)\n                throw le;\n            }\n          }\n          D ? this._tessy.gluTessNormal(0, 0, 1) : this._tessy.gluTessNormal(0, 0, 0);\n          var re = [], ue = (this._tessy.gluTessBeginPolygon(re), !0), le = !1, K = void 0;\n          try {\n            for (var ae, he = b[Symbol.iterator](); !(ue = (ae = he.next()).done); ue = !0) {\n              var _e = ae.value;\n              this._tessy.gluTessBeginContour();\n              for (var fe = 0; fe < _e.length; fe += u.default.RendererGL.prototype.tessyVertexSize) {\n                var ge = _e.slice(fe, fe + u.default.RendererGL.prototype.tessyVertexSize);\n                this._tessy.gluTessVertex(ge, ge);\n              }\n              this._tessy.gluTessEndContour();\n            }\n          } catch (xe) {\n            le = !0, K = xe;\n          } finally {\n            try {\n              ue || he.return == null || he.return();\n            } finally {\n              if (le)\n                throw K;\n            }\n          }\n          return this._tessy.gluTessEndPolygon(), re;\n        } }]) && l(W.prototype, U), ne;\n      }(u.default.Renderer), u.default.prototype._assert3d = function(U) {\n        if (!this._renderer.isP3D)\n          throw new Error(\"\".concat(U, \"() is only supported in WEBGL mode. If you'd like to use 3D graphics and WebGL, see  https://p5js.org/examples/form-3d-primitives.html for more information.\"));\n      }, u.default.RendererGL.prototype.tessyVertexSize = 12, M = u.default.RendererGL, C.default = M;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"../core/p5.Renderer\": 283, \"./GeometryBuilder\": 324, \"./p5.Camera\": 329, \"./p5.Framebuffer\": 331, \"./p5.Matrix\": 333, \"./p5.Shader\": 338, \"./p5.Texture\": 339, \"core-js/modules/es.array.concat\": 152, \"core-js/modules/es.array.copy-within\": 153, \"core-js/modules/es.array.every\": 154, \"core-js/modules/es.array.fill\": 155, \"core-js/modules/es.array.flat\": 159, \"core-js/modules/es.array.flat-map\": 158, \"core-js/modules/es.array.from\": 161, \"core-js/modules/es.array.includes\": 162, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.map\": 167, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.array.some\": 169, \"core-js/modules/es.array.unscopables.flat\": 172, \"core-js/modules/es.array.unscopables.flat-map\": 171, \"core-js/modules/es.map\": 174, \"core-js/modules/es.object.assign\": 181, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.get-prototype-of\": 185, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.reflect.construct\": 189, \"core-js/modules/es.reflect.get\": 190, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.set\": 194, \"core-js/modules/es.string.includes\": 196, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.float32-array\": 216, \"core-js/modules/es.typed-array.float64-array\": 217, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.int16-array\": 221, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236, \"core-js/modules/es.typed-array.uint16-array\": 237, \"core-js/modules/es.typed-array.uint32-array\": 238, \"core-js/modules/es.typed-array.uint8-array\": 239, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243, libtess: 252, path: 255 }], 338: [function(t, H, C) {\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.some\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.index-of\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.array.slice\"), t(\"core-js/modules/es.array.some\"), t(\"core-js/modules/es.function.name\"), t(\"core-js/modules/es.object.keys\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/web.dom-collections.iterator\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.default = void 0;\n      var m = (t = t(\"../core/main\")) && t.__esModule ? t : { default: t };\n      function y(u, h) {\n        for (var g = 0; g < h.length; g++) {\n          var f = h[g];\n          f.enumerable = f.enumerable || !1, f.configurable = !0, \"value\" in f && (f.writable = !0), Object.defineProperty(u, f.key, f);\n        }\n      }\n      m.default.Shader = function() {\n        function u(f, r, s) {\n          if (!(this instanceof u))\n            throw new TypeError(\"Cannot call a class as a function\");\n          this._renderer = f, this._vertSrc = r, this._fragSrc = s, this._vertShader = -1, this._fragShader = -1, this._glProgram = 0, this._loadedAttributes = !1, this.attributes = {}, this._loadedUniforms = !1, this.uniforms = {}, this._bound = !1, this.samplers = [];\n        }\n        var h, g;\n        return h = u, (g = [{ key: \"init\", value: function() {\n          if (this._glProgram === 0) {\n            var f = this._renderer.GL;\n            if (this._vertShader = f.createShader(f.VERTEX_SHADER), f.shaderSource(this._vertShader, this._vertSrc), f.compileShader(this._vertShader), !f.getShaderParameter(this._vertShader, f.COMPILE_STATUS))\n              return m.default._friendlyError(\"Yikes! An error occurred compiling the vertex shader:\".concat(f.getShaderInfoLog(this._vertShader))), null;\n            if (this._fragShader = f.createShader(f.FRAGMENT_SHADER), f.shaderSource(this._fragShader, this._fragSrc), f.compileShader(this._fragShader), !f.getShaderParameter(this._fragShader, f.COMPILE_STATUS))\n              return m.default._friendlyError(\"Darn! An error occurred compiling the fragment shader:\".concat(f.getShaderInfoLog(this._fragShader))), null;\n            this._glProgram = f.createProgram(), f.attachShader(this._glProgram, this._vertShader), f.attachShader(this._glProgram, this._fragShader), f.linkProgram(this._glProgram), f.getProgramParameter(this._glProgram, f.LINK_STATUS) || m.default._friendlyError(\"Snap! Error linking shader program: \".concat(f.getProgramInfoLog(this._glProgram))), this._loadAttributes(), this._loadUniforms();\n          }\n          return this;\n        } }, { key: \"copyToContext\", value: function(f) {\n          var r = new m.default.Shader(f._renderer, this._vertSrc, this._fragSrc);\n          return r.ensureCompiledOnContext(f), r;\n        } }, { key: \"ensureCompiledOnContext\", value: function(f) {\n          if (this._glProgram !== 0 && this._renderer !== f._renderer)\n            throw new Error(\"The shader being run is attached to a different context. Do you need to copy it to this context first with .copyToContext()?\");\n          this._glProgram === 0 && (this._renderer = f._renderer, this.init());\n        } }, { key: \"_loadAttributes\", value: function() {\n          if (!this._loadedAttributes) {\n            this.attributes = {};\n            for (var f = this._renderer.GL, r = f.getProgramParameter(this._glProgram, f.ACTIVE_ATTRIBUTES), s = 0; s < r; ++s) {\n              var o = f.getActiveAttrib(this._glProgram, s), i = o.name, l = f.getAttribLocation(this._glProgram, i), n = {};\n              n.name = i, n.location = l, n.index = s, n.type = o.type, n.size = o.size, this.attributes[i] = n;\n            }\n            this._loadedAttributes = !0;\n          }\n        } }, { key: \"_loadUniforms\", value: function() {\n          if (!this._loadedUniforms) {\n            for (var f = this._renderer.GL, r = f.getProgramParameter(this._glProgram, f.ACTIVE_UNIFORMS), s = 0, o = 0; o < r; ++o) {\n              var i = f.getActiveUniform(this._glProgram, o), l = {}, n = (l.location = f.getUniformLocation(this._glProgram, i.name), l.size = i.size, i.name);\n              1 < i.size && (n = n.substring(0, n.indexOf(\"[0]\"))), l.name = n, l.type = i.type, l._cachedData = void 0, l.type === f.SAMPLER_2D && (l.samplerIndex = s, s++, this.samplers.push(l)), l.isArray = 1 < i.size || l.type === f.FLOAT_MAT3 || l.type === f.FLOAT_MAT4 || l.type === f.FLOAT_VEC2 || l.type === f.FLOAT_VEC3 || l.type === f.FLOAT_VEC4 || l.type === f.INT_VEC2 || l.type === f.INT_VEC4 || l.type === f.INT_VEC3, this.uniforms[n] = l;\n            }\n            this._loadedUniforms = !0;\n          }\n        } }, { key: \"compile\", value: function() {\n        } }, { key: \"bindShader\", value: function() {\n          this.init(), this._bound || (this.useProgram(), this._bound = !0, this._setMatrixUniforms(), this.setUniform(\"uViewport\", this._renderer._viewport));\n        } }, { key: \"unbindShader\", value: function() {\n          return this._bound && (this.unbindTextures(), this._bound = !1), this;\n        } }, { key: \"bindTextures\", value: function() {\n          var f = this._renderer.GL, r = !0, s = !1, o = void 0;\n          try {\n            for (var i, l = this.samplers[Symbol.iterator](); !(r = (i = l.next()).done); r = !0) {\n              var n = i.value, a = n.texture;\n              a === void 0 && (a = this._renderer._getEmptyTexture()), f.activeTexture(f.TEXTURE0 + n.samplerIndex), a.bindTexture(), a.update(), f.uniform1i(n.location, n.samplerIndex);\n            }\n          } catch (c) {\n            s = !0, o = c;\n          } finally {\n            try {\n              r || l.return == null || l.return();\n            } finally {\n              if (s)\n                throw o;\n            }\n          }\n        } }, { key: \"updateTextures\", value: function() {\n          var f = !0, r = !1, s = void 0;\n          try {\n            for (var o, i = this.samplers[Symbol.iterator](); !(f = (o = i.next()).done); f = !0) {\n              var l = o.value.texture;\n              l && l.update();\n            }\n          } catch (n) {\n            r = !0, s = n;\n          } finally {\n            try {\n              f || i.return == null || i.return();\n            } finally {\n              if (r)\n                throw s;\n            }\n          }\n        } }, { key: \"unbindTextures\", value: function() {\n          var f = !0, r = !1, s = void 0;\n          try {\n            for (var o, i = this.samplers[Symbol.iterator](); !(f = (o = i.next()).done); f = !0) {\n              var l = o.value;\n              this.setUniform(l.name, this._renderer._getEmptyTexture());\n            }\n          } catch (n) {\n            r = !0, s = n;\n          } finally {\n            try {\n              f || i.return == null || i.return();\n            } finally {\n              if (r)\n                throw s;\n            }\n          }\n        } }, { key: \"_setMatrixUniforms\", value: function() {\n          var f = this._renderer._curCamera.cameraMatrix, r = this._renderer.uPMatrix, s = this._renderer.uMVMatrix, o = s.copy();\n          o.mult(r), this.isStrokeShader() && this.setUniform(\"uPerspective\", this._renderer._curCamera.useLinePerspective ? 1 : 0), this.setUniform(\"uViewMatrix\", f.mat4), this.setUniform(\"uProjectionMatrix\", r.mat4), this.setUniform(\"uModelViewMatrix\", s.mat4), this.setUniform(\"uModelViewProjectionMatrix\", o.mat4), this.uniforms.uNormalMatrix && (this._renderer.uNMatrix.inverseTranspose(this._renderer.uMVMatrix), this.setUniform(\"uNormalMatrix\", this._renderer.uNMatrix.mat3)), this.uniforms.uCameraRotation && (this._renderer.curMatrix.inverseTranspose(this._renderer._curCamera.cameraMatrix), this.setUniform(\"uCameraRotation\", this._renderer.curMatrix.mat3));\n        } }, { key: \"useProgram\", value: function() {\n          var f = this._renderer.GL;\n          return this._renderer._curShader !== this && (f.useProgram(this._glProgram), this._renderer._curShader = this), this;\n        } }, { key: \"setUniform\", value: function(f, r) {\n          var s = this.uniforms[f];\n          if (s) {\n            var o = this._renderer.GL;\n            if (s.isArray) {\n              if (s._cachedData && this._renderer._arraysEqual(s._cachedData, r))\n                return;\n              s._cachedData = r.slice(0);\n            } else {\n              if (s._cachedData && s._cachedData === r)\n                return;\n              Array.isArray(r) ? s._cachedData = r.slice(0) : s._cachedData = r;\n            }\n            var i = s.location;\n            switch (this.useProgram(), s.type) {\n              case o.BOOL:\n                r === !0 ? o.uniform1i(i, 1) : o.uniform1i(i, 0);\n                break;\n              case o.INT:\n                1 < s.size ? r.length && o.uniform1iv(i, r) : o.uniform1i(i, r);\n                break;\n              case o.FLOAT:\n                1 < s.size ? r.length && o.uniform1fv(i, r) : o.uniform1f(i, r);\n                break;\n              case o.FLOAT_MAT3:\n                o.uniformMatrix3fv(i, !1, r);\n                break;\n              case o.FLOAT_MAT4:\n                o.uniformMatrix4fv(i, !1, r);\n                break;\n              case o.FLOAT_VEC2:\n                1 < s.size ? r.length && o.uniform2fv(i, r) : o.uniform2f(i, r[0], r[1]);\n                break;\n              case o.FLOAT_VEC3:\n                1 < s.size ? r.length && o.uniform3fv(i, r) : o.uniform3f(i, r[0], r[1], r[2]);\n                break;\n              case o.FLOAT_VEC4:\n                1 < s.size ? r.length && o.uniform4fv(i, r) : o.uniform4f(i, r[0], r[1], r[2], r[3]);\n                break;\n              case o.INT_VEC2:\n                1 < s.size ? r.length && o.uniform2iv(i, r) : o.uniform2i(i, r[0], r[1]);\n                break;\n              case o.INT_VEC3:\n                1 < s.size ? r.length && o.uniform3iv(i, r) : o.uniform3i(i, r[0], r[1], r[2]);\n                break;\n              case o.INT_VEC4:\n                1 < s.size ? r.length && o.uniform4iv(i, r) : o.uniform4i(i, r[0], r[1], r[2], r[3]);\n                break;\n              case o.SAMPLER_2D:\n                o.activeTexture(o.TEXTURE0 + s.samplerIndex), s.texture = r instanceof m.default.Texture ? r : this._renderer.getTexture(r), o.uniform1i(i, s.samplerIndex), s.texture.src.gifProperties && s.texture.src._animateGif(this._renderer._pInst);\n            }\n            return this;\n          }\n        } }, { key: \"isLightShader\", value: function() {\n          return [this.attributes.aNormal, this.uniforms.uUseLighting, this.uniforms.uAmbientLightCount, this.uniforms.uDirectionalLightCount, this.uniforms.uPointLightCount, this.uniforms.uAmbientColor, this.uniforms.uDirectionalDiffuseColors, this.uniforms.uDirectionalSpecularColors, this.uniforms.uPointLightLocation, this.uniforms.uPointLightDiffuseColors, this.uniforms.uPointLightSpecularColors, this.uniforms.uLightingDirection, this.uniforms.uSpecular].some(function(f) {\n            return f !== void 0;\n          });\n        } }, { key: \"isNormalShader\", value: function() {\n          return this.attributes.aNormal !== void 0;\n        } }, { key: \"isTextureShader\", value: function() {\n          return 0 < this.samplers.length;\n        } }, { key: \"isColorShader\", value: function() {\n          return this.attributes.aVertexColor !== void 0 || this.uniforms.uMaterialColor !== void 0;\n        } }, { key: \"isTexLightShader\", value: function() {\n          return this.isLightShader() && this.isTextureShader();\n        } }, { key: \"isStrokeShader\", value: function() {\n          return this.uniforms.uStrokeWeight !== void 0;\n        } }, { key: \"enableAttrib\", value: function(f, r, s, o, i, l) {\n          var n;\n          return f && (f = f.location) !== -1 && (n = this._renderer.GL, this._renderer.registerEnabled.has(f) || (n.enableVertexAttribArray(f), this._renderer.registerEnabled.add(f)), this._renderer.GL.vertexAttribPointer(f, r, s || n.FLOAT, o || !1, i || 0, l || 0)), this;\n        } }, { key: \"disableRemainingAttributes\", value: function() {\n          var f = this, r = !0, s = !1, o = void 0;\n          try {\n            for (var i, l = this._renderer.registerEnabled.values()[Symbol.iterator](); !(r = (i = l.next()).done); r = !0)\n              (function() {\n                var n = i.value;\n                Object.keys(f.attributes).some(function(a) {\n                  return f.attributes[a].location === n;\n                }) || (f._renderer.GL.disableVertexAttribArray(n), f._renderer.registerEnabled.delete(n));\n              })();\n          } catch (n) {\n            s = !0, o = n;\n          } finally {\n            try {\n              r || l.return == null || l.return();\n            } finally {\n              if (s)\n                throw o;\n            }\n          }\n        } }]) && y(h.prototype, g), u;\n      }(), t = m.default.Shader, C.default = t;\n    }, { \"../core/main\": 280, \"core-js/modules/es.array.index-of\": 163, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.array.slice\": 168, \"core-js/modules/es.array.some\": 169, \"core-js/modules/es.function.name\": 173, \"core-js/modules/es.object.keys\": 186, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/web.dom-collections.iterator\": 243 }], 339: [function(t, H, C) {\n      function m(c) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(p) {\n          return typeof p;\n        } : function(p) {\n          return p && typeof Symbol == \"function\" && p.constructor === Symbol && p !== Symbol.prototype ? \"symbol\" : typeof p;\n        })(c);\n      }\n      function y(c) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(p) {\n          return m(p);\n        } : function(p) {\n          return p && typeof Symbol == \"function\" && p.constructor === Symbol && p !== Symbol.prototype ? \"symbol\" : m(p);\n        })(c);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.get-prototype-of\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.reflect.construct\"), t(\"core-js/modules/es.regexp.to-string\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.typed-array.uint8-array\"), t(\"core-js/modules/es.typed-array.copy-within\"), t(\"core-js/modules/es.typed-array.every\"), t(\"core-js/modules/es.typed-array.fill\"), t(\"core-js/modules/es.typed-array.filter\"), t(\"core-js/modules/es.typed-array.find\"), t(\"core-js/modules/es.typed-array.find-index\"), t(\"core-js/modules/es.typed-array.for-each\"), t(\"core-js/modules/es.typed-array.includes\"), t(\"core-js/modules/es.typed-array.index-of\"), t(\"core-js/modules/es.typed-array.iterator\"), t(\"core-js/modules/es.typed-array.join\"), t(\"core-js/modules/es.typed-array.last-index-of\"), t(\"core-js/modules/es.typed-array.map\"), t(\"core-js/modules/es.typed-array.reduce\"), t(\"core-js/modules/es.typed-array.reduce-right\"), t(\"core-js/modules/es.typed-array.reverse\"), t(\"core-js/modules/es.typed-array.set\"), t(\"core-js/modules/es.typed-array.slice\"), t(\"core-js/modules/es.typed-array.some\"), t(\"core-js/modules/es.typed-array.sort\"), t(\"core-js/modules/es.typed-array.subarray\"), t(\"core-js/modules/es.typed-array.to-locale-string\"), t(\"core-js/modules/es.typed-array.to-string\"), Object.defineProperty(C, \"__esModule\", { value: !0 }), C.checkWebGLCapabilities = a, C.default = C.MipmapTexture = void 0;\n      var u = (n = t(\"../core/main\")) && n.__esModule ? n : { default: n }, h = function(c) {\n        if (c && c.__esModule)\n          return c;\n        if (c === null || y(c) !== \"object\" && typeof c != \"function\")\n          return { default: c };\n        var p = g();\n        if (p && p.has(c))\n          return p.get(c);\n        var j, T = {}, _ = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (j in c) {\n          var S;\n          Object.prototype.hasOwnProperty.call(c, j) && ((S = _ ? Object.getOwnPropertyDescriptor(c, j) : null) && (S.get || S.set) ? Object.defineProperty(T, j, S) : T[j] = c[j]);\n        }\n        return T.default = c, p && p.set(c, T), T;\n      }(t(\"../core/constants\"));\n      function g() {\n        var c;\n        return typeof WeakMap != \"function\" ? null : (c = /* @__PURE__ */ new WeakMap(), g = function() {\n          return c;\n        }, c);\n      }\n      function f(c, p) {\n        return (f = Object.setPrototypeOf || function(j, T) {\n          return j.__proto__ = T, j;\n        })(c, p);\n      }\n      function r(c) {\n        return function() {\n          var p, j = s(c), j = (p = function() {\n            if (typeof Reflect < \"u\" && Reflect.construct && !Reflect.construct.sham) {\n              if (typeof Proxy == \"function\")\n                return 1;\n              try {\n                return Date.prototype.toString.call(Reflect.construct(Date, [], function() {\n                })), 1;\n              } catch {\n              }\n            }\n          }() ? (p = s(this).constructor, Reflect.construct(j, arguments, p)) : j.apply(this, arguments), this);\n          if (!p || y(p) !== \"object\" && typeof p != \"function\") {\n            if (j !== void 0)\n              return j;\n            throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n          }\n          return p;\n        };\n      }\n      function s(c) {\n        return (s = Object.setPrototypeOf ? Object.getPrototypeOf : function(p) {\n          return p.__proto__ || Object.getPrototypeOf(p);\n        })(c);\n      }\n      function o(c, p) {\n        if (!(c instanceof p))\n          throw new TypeError(\"Cannot call a class as a function\");\n      }\n      function i(c, p) {\n        for (var j = 0; j < p.length; j++) {\n          var T = p[j];\n          T.enumerable = T.enumerable || !1, T.configurable = !0, \"value\" in T && (T.writable = !0), Object.defineProperty(c, T.key, T);\n        }\n      }\n      function l(c, p, j) {\n        p && i(c.prototype, p);\n      }\n      u.default.Texture = function() {\n        function c(E, j, S) {\n          o(this, c), this._renderer = E;\n          var _ = this._renderer.GL, S = (S = S || {}, this.src = j, this.glTex = void 0, this.glTarget = _.TEXTURE_2D, this.glFormat = S.format || _.RGBA, this.mipmaps = !1, this.glMinFilter = S.minFilter || _.LINEAR, this.glMagFilter = S.magFilter || _.LINEAR, this.glWrapS = S.wrapS || _.CLAMP_TO_EDGE, this.glWrapT = S.wrapT || _.CLAMP_TO_EDGE, this.glDataType = S.dataType || _.UNSIGNED_BYTE, a(E)), E = (this.glFormat !== _.HALF_FLOAT || S.halfFloat || (console.log(\"This device does not support dataType HALF_FLOAT. Falling back to FLOAT.\"), this.glDataType = _.FLOAT), this.glFormat !== _.HALF_FLOAT || this.glMinFilter !== _.LINEAR && this.glMagFilter !== _.LINEAR || S.halfFloatLinear || (console.log(\"This device does not support linear filtering for dataType FLOAT. Falling back to NEAREST.\"), this.glMinFilter === _.LINEAR && (this.glMinFilter = _.NEAREST), this.glMagFilter === _.LINEAR && (this.glMagFilter = _.NEAREST)), this.glFormat !== _.FLOAT || S.float || (console.log(\"This device does not support dataType FLOAT. Falling back to UNSIGNED_BYTE.\"), this.glDataType = _.UNSIGNED_BYTE), this.glFormat !== _.FLOAT || this.glMinFilter !== _.LINEAR && this.glMagFilter !== _.LINEAR || S.floatLinear || (console.log(\"This device does not support linear filtering for dataType FLOAT. Falling back to NEAREST.\"), this.glMinFilter === _.LINEAR && (this.glMinFilter = _.NEAREST), this.glMagFilter === _.LINEAR && (this.glMagFilter = _.NEAREST)), this.isSrcMediaElement = u.default.MediaElement !== void 0 && j instanceof u.default.MediaElement, this._videoPrevUpdateTime = 0, this.isSrcHTMLElement = u.default.Element !== void 0 && j instanceof u.default.Element && !(j instanceof u.default.Graphics) && !(j instanceof u.default.Renderer), this.isSrcP5Image = j instanceof u.default.Image, this.isSrcP5Graphics = j instanceof u.default.Graphics, this.isSrcP5Renderer = j instanceof u.default.Renderer, this.isImageData = typeof ImageData < \"u\" && j instanceof ImageData, this.isFramebufferTexture = j instanceof u.default.FramebufferTexture, this._getTextureDataFromSource());\n          return this.width = E.width, this.height = E.height, this.init(E), this;\n        }\n        return l(c, [{ key: \"_getTextureDataFromSource\", value: function() {\n          var p;\n          return this.isFramebufferTexture ? p = this.src.rawTexture() : this.isSrcP5Image ? p = this.src.canvas : this.isSrcMediaElement || this.isSrcP5Graphics || this.isSrcP5Renderer || this.isSrcHTMLElement ? p = this.src.elt : this.isImageData && (p = this.src), p;\n        } }, { key: \"init\", value: function(p) {\n          var j, T = this._renderer.GL;\n          this.isFramebufferTexture || (this.glTex = T.createTexture()), this.glWrapS = this._renderer.textureWrapX, this.glWrapT = this._renderer.textureWrapY, this.setWrapMode(this.glWrapS, this.glWrapT), this.bindTexture(), T.texParameteri(T.TEXTURE_2D, T.TEXTURE_MAG_FILTER, this.glMagFilter), T.texParameteri(T.TEXTURE_2D, T.TEXTURE_MIN_FILTER, this.glMinFilter), this.isFramebufferTexture || (this.width === 0 || this.height === 0 || this.isSrcMediaElement && !this.src.loadedmetadata ? (j = new Uint8Array([1, 1, 1, 1]), T.texImage2D(this.glTarget, 0, T.RGBA, 1, 1, 0, this.glFormat, this.glDataType, j)) : T.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, this.glDataType, p));\n        } }, { key: \"update\", value: function() {\n          var p, j, T, _ = this.src;\n          return _.width !== 0 && _.height !== 0 && !this.isFramebufferTexture && (p = this._getTextureDataFromSource(), j = !1, T = this._renderer.GL, p.width !== this.width || p.height !== this.height ? (j = !0, this.width = p.width || _.width, this.height = p.height || _.height, this.isSrcP5Image ? _.setModified(!1) : (this.isSrcMediaElement || this.isSrcHTMLElement) && _.setModified(!0)) : this.isSrcP5Image ? _.isModified() && _.setModified(!(j = !0)) : this.isSrcMediaElement ? _.isModified() ? _.setModified(!(j = !0)) : _.loadedmetadata && this._videoPrevUpdateTime !== _.time() && (this._videoPrevUpdateTime = _.time(), j = !0) : this.isImageData ? _._dirty && (j = !(_._dirty = !1)) : j = !0, j && (this.bindTexture(), T.texImage2D(this.glTarget, 0, this.glFormat, this.glFormat, this.glDataType, p)), j);\n        } }, { key: \"bindTexture\", value: function() {\n          return this._renderer.GL.bindTexture(this.glTarget, this.getTexture()), this;\n        } }, { key: \"unbindTexture\", value: function() {\n          this._renderer.GL.bindTexture(this.glTarget, null);\n        } }, { key: \"getTexture\", value: function() {\n          return this.isFramebufferTexture ? this.src.rawTexture() : this.glTex;\n        } }, { key: \"setInterpolation\", value: function(p, j) {\n          var T = this._renderer.GL;\n          this.glMinFilter = this.glFilter(p), this.glMagFilter = this.glFilter(j), this.bindTexture(), T.texParameteri(T.TEXTURE_2D, T.TEXTURE_MIN_FILTER, this.glMinFilter), T.texParameteri(T.TEXTURE_2D, T.TEXTURE_MAG_FILTER, this.glMagFilter), this.unbindTexture();\n        } }, { key: \"glFilter\", value: function(p) {\n          var j = this._renderer.GL;\n          return p === h.NEAREST ? j.NEAREST : j.LINEAR;\n        } }, { key: \"setWrapMode\", value: function(p, j) {\n          function T(A) {\n            return (A & A - 1) == 0;\n          }\n          var _ = this._renderer.GL, E = this._getTextureDataFromSource(), E = E.naturalWidth && E.naturalHeight ? (S = E.naturalWidth, E.naturalHeight) : (S = this.width, this.height), S = T(S), E = T(E);\n          p === h.REPEAT ? this._renderer.webglVersion === h.WEBGL2 || S && E ? this.glWrapS = _.REPEAT : (console.warn(\"You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead\"), this.glWrapS = _.CLAMP_TO_EDGE) : p === h.MIRROR ? this._renderer.webglVersion === h.WEBGL2 || S && E ? this.glWrapS = _.MIRRORED_REPEAT : (console.warn(\"You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead\"), this.glWrapS = _.CLAMP_TO_EDGE) : this.glWrapS = _.CLAMP_TO_EDGE, j === h.REPEAT ? this._renderer.webglVersion === h.WEBGL2 || S && E ? this.glWrapT = _.REPEAT : (console.warn(\"You tried to set the wrap mode to REPEAT but the texture size is not a power of two. Setting to CLAMP instead\"), this.glWrapT = _.CLAMP_TO_EDGE) : j === h.MIRROR ? this._renderer.webglVersion === h.WEBGL2 || S && E ? this.glWrapT = _.MIRRORED_REPEAT : (console.warn(\"You tried to set the wrap mode to MIRROR but the texture size is not a power of two. Setting to CLAMP instead\"), this.glWrapT = _.CLAMP_TO_EDGE) : this.glWrapT = _.CLAMP_TO_EDGE, this.bindTexture(), _.texParameteri(_.TEXTURE_2D, _.TEXTURE_WRAP_S, this.glWrapS), _.texParameteri(_.TEXTURE_2D, _.TEXTURE_WRAP_T, this.glWrapT), this.unbindTexture();\n        } }]), c;\n      }();\n      var n = function(c) {\n        var p = T;\n        if (typeof c != \"function\" && c !== null)\n          throw new TypeError(\"Super expression must either be null or a function\");\n        p.prototype = Object.create(c && c.prototype, { constructor: { value: p, writable: !0, configurable: !0 } }), c && f(p, c);\n        var j = r(T);\n        function T(_, S, E) {\n          return o(this, T), S = (_ = j.call(this, _, S, E))._renderer.GL, _.glMinFilter === S.LINEAR && (_.glMinFilter = S.LINEAR_MIPMAP_LINEAR), _;\n        }\n        return l(T, [{ key: \"glFilter\", value: function(_) {\n          return this._renderer.GL.LINEAR_MIPMAP_LINEAR;\n        } }, { key: \"_getTextureDataFromSource\", value: function() {\n          return this.src;\n        } }, { key: \"init\", value: function(_) {\n          var S = this._renderer.GL;\n          this.glTex = S.createTexture(), this.bindTexture();\n          for (var E = 0; E < _.length; E++)\n            S.texImage2D(this.glTarget, E, this.glFormat, this.glFormat, this.glDataType, _[E]);\n          this.glMinFilter = S.LINEAR_MIPMAP_LINEAR, S.texParameteri(S.TEXTURE_2D, S.TEXTURE_MAG_FILTER, this.glMagFilter), S.texParameteri(S.TEXTURE_2D, S.TEXTURE_MIN_FILTER, this.glMinFilter), this.unbindTexture();\n        } }, { key: \"update\", value: function() {\n        } }]), T;\n      }(u.default.Texture);\n      function a(_) {\n        var p = _.GL, _ = _.webglVersion, j = _ === h.WEBGL2 ? p.getExtension(\"EXT_color_buffer_float\") && p.getExtension(\"EXT_float_blend\") : p.getExtension(\"OES_texture_float\"), T = j && p.getExtension(\"OES_texture_float_linear\"), _ = _ === h.WEBGL2 ? p.getExtension(\"EXT_color_buffer_float\") : p.getExtension(\"OES_texture_half_float\");\n        return { float: j, floatLinear: T, halfFloat: _, halfFloatLinear: _ && p.getExtension(\"OES_texture_half_float_linear\") };\n      }\n      C.MipmapTexture = n, t = u.default.Texture, C.default = t;\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.get-prototype-of\": 185, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.reflect.construct\": 189, \"core-js/modules/es.regexp.to-string\": 193, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.typed-array.copy-within\": 210, \"core-js/modules/es.typed-array.every\": 211, \"core-js/modules/es.typed-array.fill\": 212, \"core-js/modules/es.typed-array.filter\": 213, \"core-js/modules/es.typed-array.find\": 215, \"core-js/modules/es.typed-array.find-index\": 214, \"core-js/modules/es.typed-array.for-each\": 218, \"core-js/modules/es.typed-array.includes\": 219, \"core-js/modules/es.typed-array.index-of\": 220, \"core-js/modules/es.typed-array.iterator\": 223, \"core-js/modules/es.typed-array.join\": 224, \"core-js/modules/es.typed-array.last-index-of\": 225, \"core-js/modules/es.typed-array.map\": 226, \"core-js/modules/es.typed-array.reduce\": 228, \"core-js/modules/es.typed-array.reduce-right\": 227, \"core-js/modules/es.typed-array.reverse\": 229, \"core-js/modules/es.typed-array.set\": 230, \"core-js/modules/es.typed-array.slice\": 231, \"core-js/modules/es.typed-array.some\": 232, \"core-js/modules/es.typed-array.sort\": 233, \"core-js/modules/es.typed-array.subarray\": 234, \"core-js/modules/es.typed-array.to-locale-string\": 235, \"core-js/modules/es.typed-array.to-string\": 236, \"core-js/modules/es.typed-array.uint8-array\": 239, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }], 340: [function(t, H, C) {\n      function m(c) {\n        return (m = typeof Symbol == \"function\" && typeof Symbol.iterator == \"symbol\" ? function(p) {\n          return typeof p;\n        } : function(p) {\n          return p && typeof Symbol == \"function\" && p.constructor === Symbol && p !== Symbol.prototype ? \"symbol\" : typeof p;\n        })(c);\n      }\n      function y(c) {\n        return (y = typeof Symbol == \"function\" && m(Symbol.iterator) === \"symbol\" ? function(p) {\n          return m(p);\n        } : function(p) {\n          return p && typeof Symbol == \"function\" && p.constructor === Symbol && p !== Symbol.prototype ? \"symbol\" : m(p);\n        })(c);\n      }\n      t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.get-own-property-descriptor\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.sub\"), t(\"core-js/modules/es.weak-map\"), t(\"core-js/modules/web.dom-collections.iterator\"), t(\"core-js/modules/es.symbol\"), t(\"core-js/modules/es.symbol.description\"), t(\"core-js/modules/es.symbol.iterator\"), t(\"core-js/modules/es.array.iterator\"), t(\"core-js/modules/es.object.to-string\"), t(\"core-js/modules/es.regexp.exec\"), t(\"core-js/modules/es.string.iterator\"), t(\"core-js/modules/es.string.split\"), t(\"core-js/modules/es.string.sub\"), t(\"core-js/modules/web.dom-collections.iterator\");\n      var u, h = (u = t(\"../core/main\")) && u.__esModule ? u : { default: u }, g = function(c) {\n        if (c && c.__esModule)\n          return c;\n        if (c === null || y(c) !== \"object\" && typeof c != \"function\")\n          return { default: c };\n        var p = f();\n        if (p && p.has(c))\n          return p.get(c);\n        var j, T = {}, _ = Object.defineProperty && Object.getOwnPropertyDescriptor;\n        for (j in c) {\n          var S;\n          Object.prototype.hasOwnProperty.call(c, j) && ((S = _ ? Object.getOwnPropertyDescriptor(c, j) : null) && (S.get || S.set) ? Object.defineProperty(T, j, S) : T[j] = c[j]);\n        }\n        return T.default = c, p && p.set(c, T), T;\n      }(t(\"../core/constants\"));\n      function f() {\n        var c;\n        return typeof WeakMap != \"function\" ? null : (c = /* @__PURE__ */ new WeakMap(), f = function() {\n          return c;\n        }, c);\n      }\n      function r(c, p) {\n        if (!(c instanceof p))\n          throw new TypeError(\"Cannot call a class as a function\");\n      }\n      function s(c, p) {\n        for (var j = 0; j < p.length; j++) {\n          var T = p[j];\n          T.enumerable = T.enumerable || !1, T.configurable = !0, \"value\" in T && (T.writable = !0), Object.defineProperty(c, T.key, T);\n        }\n      }\n      function o(c, p, j) {\n        p && s(c.prototype, p);\n      }\n      t(\"./p5.Shader\"), t(\"./p5.RendererGL.Retained\"), h.default.RendererGL.prototype._applyTextProperties = function() {\n      }, h.default.RendererGL.prototype.textWidth = function(c) {\n        return this._isOpenType() ? this._textFont._textWidth(c, this._textSize) : 0;\n      };\n      var i = function() {\n        function c(p, j) {\n          r(this, c), this.width = p, this.height = j, this.infos = [];\n        }\n        return o(c, [{ key: \"findImage\", value: function(p) {\n          var j, T, _ = this.width * this.height;\n          if (_ < p)\n            throw new Error(\"font is too complex to render in 3D\");\n          for (var S = this.infos.length - 1; 0 <= S; --S) {\n            var E = this.infos[S];\n            if (E.index + p < _) {\n              T = (j = E).imageData;\n              break;\n            }\n          }\n          if (!j) {\n            try {\n              T = new ImageData(this.width, this.height);\n            } catch {\n              var A = document.getElementsByTagName(\"canvas\")[0], x = !A, P = (A || ((A = document.createElement(\"canvas\")).style.display = \"none\", document.body.appendChild(A)), A.getContext(\"2d\"));\n              P && (T = P.createImageData(this.width, this.height)), x && document.body.removeChild(A);\n            }\n            this.infos.push(j = { index: 0, imageData: T });\n          }\n          return P = j.index, j.index += p, T._dirty = !0, { imageData: T, index: P };\n        } }]), c;\n      }();\n      function l(E, p, j, T, _) {\n        var S = E.imageData.data, E = 4 * E.index++;\n        S[E++] = p, S[E++] = j, S[E++] = T, S[+E] = _;\n      }\n      var n = Math.sqrt(3), a = function() {\n        function c(p) {\n          r(this, c), this.font = p, this.strokeImageInfos = new i(64, 64), this.colDimImageInfos = new i(64, 64), this.rowDimImageInfos = new i(64, 64), this.colCellImageInfos = new i(64, 64), this.rowCellImageInfos = new i(64, 64), this.glyphInfos = {};\n        }\n        return o(c, [{ key: \"getGlyphInfo\", value: function(p) {\n          var j = this.glyphInfos[p.index];\n          if (!j) {\n            var T = p.getBoundingBox(), _ = T.x1, S = T.y1, E = T.x2 - _, A = T.y2 - S, x = p.path.commands;\n            if (E == 0 || A == 0 || !x.length)\n              return this.glyphInfos[p.index] = {};\n            for (var P = [], M = [], R = [], L = 8; 0 <= L; --L)\n              R.push([]);\n            for (L = 8; 0 <= L; --L)\n              M.push([]);\n            var F, V, G, U, W = function() {\n              function ze(Ve, Xe, He, ve) {\n                r(this, ze), this.p0 = Ve, this.c0 = Xe, this.c1 = He, this.p1 = ve;\n              }\n              return o(ze, [{ key: \"toQuadratic\", value: function() {\n                return { x: this.p0.x, y: this.p0.y, x1: this.p1.x, y1: this.p1.y, cx: (3 * (this.c0.x + this.c1.x) - (this.p0.x + this.p1.x)) / 4, cy: (3 * (this.c0.y + this.c1.y) - (this.p0.y + this.p1.y)) / 4 };\n              } }, { key: \"quadError\", value: function() {\n                return h.default.Vector.sub(h.default.Vector.sub(this.p1, this.p0), h.default.Vector.mult(h.default.Vector.sub(this.c1, this.c0), 3)).mag() / 2;\n              } }, { key: \"split\", value: function(Re) {\n                var Xe = h.default.Vector.lerp(this.p0, this.c0, Re), ve = h.default.Vector.lerp(this.c0, this.c1, Re), He = h.default.Vector.lerp(Xe, ve, Re), ve = (this.c1 = h.default.Vector.lerp(this.c1, this.p1, Re), this.c0 = h.default.Vector.lerp(ve, this.c1, Re), h.default.Vector.lerp(He, this.c0, Re)), Re = new ze(this.p0, Xe, He, ve);\n                return this.p0 = ve, Re;\n              } }, { key: \"splitInflections\", value: function() {\n                var Ve = h.default.Vector.sub(this.c0, this.p0), Xe = h.default.Vector.sub(h.default.Vector.sub(this.c1, this.c0), Ve), He = h.default.Vector.sub(h.default.Vector.sub(h.default.Vector.sub(this.p1, this.c1), Ve), h.default.Vector.mult(Xe, 2)), ve = [], Re = Xe.x * He.y - Xe.y * He.x;\n                return Re !== 0 && 0 <= (Ve = (He = Ve.x * He.y - Ve.y * He.x) * He - 4 * Re * (Ve.x * Xe.y - Ve.y * Xe.x)) && (Re < 0 && (Re = -Re, He = -He), Ve = (-He + (Xe = Math.sqrt(Ve))) / (2 * Re), 0 < (He = (-He - Xe) / (2 * Re)) && He < 1 && (ve.push(this.split(He)), Ve = 1 - (1 - Ve) / (1 - He)), 0 < Ve && Ve < 1 && ve.push(this.split(Ve))), ve.push(this), ve;\n              } }]), ze;\n            }(), X = !0, ne = !1, b = void 0;\n            try {\n              for (var O, D = x[Symbol.iterator](); !(X = (O = D.next()).done); X = !0) {\n                var B = O.value, Y = (B.x - _) / E, J = (B.y - S) / A;\n                if (!Me(F, V, Y, J)) {\n                  switch (B.type) {\n                    case \"M\":\n                      G = Y, U = J;\n                      break;\n                    case \"L\":\n                      De(F, V, Y, J);\n                      break;\n                    case \"Q\":\n                      var te = (B.x1 - _) / E, ce = (B.y1 - S) / A;\n                      ge([F, Y, te], [V, J, ce], { x: F, y: V, cx: te, cy: ce });\n                      break;\n                    case \"Z\":\n                      Me(F, V, G, U) ? P.push({ x: F, y: V }) : (De(F, V, G, U), P.push({ x: G, y: U }));\n                      break;\n                    case \"C\":\n                      for (var re = function($, je, Ce, He, ve, Re, we, Z) {\n                        var $ = new W(new h.default.Vector($, je), new h.default.Vector(Ce, He), new h.default.Vector(ve, Re), new h.default.Vector(we, Z)).splitInflections(), q = [], ee = 30 / n, pe = !0, je = !1, Ce = void 0;\n                        try {\n                          for (var Fe, Ne = $[Symbol.iterator](); !(pe = (Fe = Ne.next()).done); pe = !0) {\n                            for (var Be = Fe.value, We = [], st = void 0; !(0.125 <= (st = ee / Be.quadError())); ) {\n                              var nt = Math.pow(st, 0.3333333333333333), Ke = Be.split(nt), at = Be.split(1 - nt / (1 - nt));\n                              q.push(Ke), We.push(Be), Be = at;\n                            }\n                            st < 1 && q.push(Be.split(0.5)), q.push(Be), Array.prototype.push.apply(q, We.reverse());\n                          }\n                        } catch (ot) {\n                          je = !0, Ce = ot;\n                        } finally {\n                          try {\n                            pe || Ne.return == null || Ne.return();\n                          } finally {\n                            if (je)\n                              throw Ce;\n                          }\n                        }\n                        return q;\n                      }(F, V, (B.x1 - _) / E, (B.y1 - S) / A, (B.x2 - _) / E, (B.y2 - S) / A, Y, J), ue = 0; ue < re.length; ue++) {\n                        var le = re[ue].toQuadratic();\n                        ge([le.x, le.x1, le.cx], [le.y, le.y1, le.cy], le);\n                      }\n                      break;\n                    default:\n                      throw new Error(\"unknown command type: \".concat(B.type));\n                  }\n                  F = Y, V = J;\n                }\n              }\n            } catch (ze) {\n              ne = !0, b = ze;\n            } finally {\n              try {\n                X || D.return == null || D.return();\n              } finally {\n                if (ne)\n                  throw b;\n              }\n            }\n            for (var K = P.length, ae = this.strokeImageInfos.findImage(K), he = ae.index, _e = 0; _e < K; ++_e) {\n              var fe = P[_e];\n              l(ae, xe(fe.x), xe(fe.y), xe(fe.cx), xe(fe.cy));\n            }\n            (j = this.glyphInfos[p.index] = { glyph: p, uGlyphRect: [T.x1, -T.y1, T.x2, -T.y2], strokeImageInfo: ae, strokes: P, colInfo: Qe(R, this.colDimImageInfos, this.colCellImageInfos), rowInfo: Qe(M, this.rowDimImageInfos, this.rowCellImageInfos) }).uGridOffset = [j.colInfo.dimOffset, j.rowInfo.dimOffset];\n          }\n          return j;\n          function ge(ze, Ve, Xe) {\n            var He = P.length;\n            function ve(q, ee, pe) {\n              for (var je = q.length; 0 < je--; ) {\n                var Ce = q[je];\n                Ce < ee && (ee = Ce), pe < Ce && (pe = Ce);\n              }\n              return { min: ee, max: pe };\n            }\n            P.push(Xe);\n            for (var Xe = ve(ze, 1, 0), ze = Math.max(Math.floor(9 * Xe.min - 0.5), 0), Re = Math.min(Math.ceil(9 * Xe.max + 0.5), 9), we = ze; we < Re; ++we)\n              R[we].push(He);\n            for (var Xe = ve(Ve, 1, 0), ze = Math.max(Math.floor(9 * Xe.min - 0.5), 0), Z = Math.min(Math.ceil(9 * Xe.max + 0.5), 9), $ = ze; $ < Z; ++$)\n              M[$].push(He);\n          }\n          function xe(ze) {\n            return (ze = (Xe = 255) * ze) < (Ve = 0) ? Ve : Xe < ze ? Xe : ze;\n            var Ve, Xe;\n          }\n          function De(ze, Ve, Xe, He) {\n            ge([ze, Xe], [Ve, He], { x: ze, y: Ve, cx: (ze + Xe) / 2, cy: (Ve + He) / 2 });\n          }\n          function Me(ze, Ve, Xe, He) {\n            return Math.abs(Xe - ze) < 1e-5 && Math.abs(He - Ve) < 1e-5;\n          }\n          function Qe(ze, Ve, Xe) {\n            for (var He = ze.length, ve = Ve.findImage(He), Ve = ve.index, Re = 0, we = 0; we < He; ++we)\n              Re += ze[we].length;\n            for (var Z = Xe.findImage(Re), $ = 0; $ < He; ++$) {\n              var q = ze[$], ee = q.length, pe = Z.index;\n              l(ve, pe >> 7, 127 & pe, ee >> 7, 127 & ee);\n              for (var je = 0; je < ee; ++je) {\n                var Ce = q[je] + he;\n                l(Z, Ce >> 7, 127 & Ce, 0, 0);\n              }\n            }\n            return { cellImageInfo: Z, dimOffset: Ve, dimImageInfo: ve };\n          }\n        } }]), c;\n      }();\n      h.default.RendererGL.prototype._renderText = function(c, p, j, T, _) {\n        if (this._textFont && typeof this._textFont != \"string\") {\n          if (!(_ <= T) && this._doFill) {\n            if (this._isOpenType()) {\n              c.push();\n              var _ = this._doStroke, S = this.drawMode, E = (this._doStroke = !1, this.drawMode = g.TEXTURE, this._textFont.font), A = (A = this._textFont._fontInfo) || (this._textFont._fontInfo = new a(E)), j = this._textFont._handleAlignment(this, p, j, T), T = this._textSize / E.unitsPerEm, x = (this.translate(j.x, j.y, 0), this.scale(T, T, 1), this.GL), j = !this._defaultFontShader, P = this._getFontShader(), M = (P.init(), P.bindShader(), j && (P.setUniform(\"uGridImageSize\", [64, 64]), P.setUniform(\"uCellsImageSize\", [64, 64]), P.setUniform(\"uStrokeImageSize\", [64, 64]), P.setUniform(\"uGridSize\", [9, 9])), this._applyColorBlend(this.curFillColor), this.retainedMode.geometry.glyph), R = (M || ((T = this._textGeom = new h.default.Geometry(1, 1, function() {\n                for (var ue = 0; ue <= 1; ue++)\n                  for (var le = 0; le <= 1; le++)\n                    this.vertices.push(new h.default.Vector(le, ue, 0)), this.uvs.push(le, ue);\n              })).computeFaces().computeNormals(), M = this.createBuffers(\"glyph\", T)), !0), j = !1, T = void 0;\n              try {\n                for (var L, F = this.retainedMode.buffers.text[Symbol.iterator](); !(R = (L = F.next()).done); R = !0)\n                  L.value._prepareBuffer(M, P);\n              } catch (ue) {\n                j = !0, T = ue;\n              } finally {\n                try {\n                  R || F.return == null || F.return();\n                } finally {\n                  if (j)\n                    throw T;\n                }\n              }\n              this._bindBuffer(M.indexBuffer, x.ELEMENT_ARRAY_BUFFER), P.setUniform(\"uMaterialColor\", this.curFillColor), x.pixelStorei(x.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !1);\n              try {\n                var V = 0, G = null, U = E.stringToGlyphs(p), W = !0, X = !1, ne = void 0;\n                try {\n                  for (var b, O = U[Symbol.iterator](); !(W = (b = O.next()).done); W = !0) {\n                    var D, B, Y = b.value, J = (G && (V += E.getKerningValue(G, Y)), A.getGlyphInfo(Y));\n                    J.uGlyphRect && (D = J.rowInfo, B = J.colInfo, P.setUniform(\"uSamplerStrokes\", J.strokeImageInfo.imageData), P.setUniform(\"uSamplerRowStrokes\", D.cellImageInfo.imageData), P.setUniform(\"uSamplerRows\", D.dimImageInfo.imageData), P.setUniform(\"uSamplerColStrokes\", B.cellImageInfo.imageData), P.setUniform(\"uSamplerCols\", B.dimImageInfo.imageData), P.setUniform(\"uGridOffset\", J.uGridOffset), P.setUniform(\"uGlyphRect\", J.uGlyphRect), P.setUniform(\"uGlyphOffset\", V), P.bindTextures(), x.drawElements(x.TRIANGLES, 6, this.GL.UNSIGNED_SHORT, 0)), V += Y.advanceWidth, G = Y;\n                  }\n                } catch (ue) {\n                  X = !0, ne = ue;\n                } finally {\n                  try {\n                    W || O.return == null || O.return();\n                  } finally {\n                    if (X)\n                      throw ne;\n                  }\n                }\n              } finally {\n                P.unbindShader(), this._doStroke = _, this.drawMode = S, x.pixelStorei(x.UNPACK_PREMULTIPLY_ALPHA_WEBGL, !0), c.pop();\n              }\n            } else\n              console.log(\"WEBGL: only Opentype (.otf) and Truetype (.ttf) fonts are supported\");\n            return c;\n          }\n        } else\n          console.log(\"WEBGL: you must load and set a font before drawing text. See `loadFont` and `textFont` for more details.\");\n      };\n    }, { \"../core/constants\": 269, \"../core/main\": 280, \"./p5.RendererGL.Retained\": 336, \"./p5.Shader\": 338, \"core-js/modules/es.array.iterator\": 164, \"core-js/modules/es.object.get-own-property-descriptor\": 183, \"core-js/modules/es.object.to-string\": 187, \"core-js/modules/es.regexp.exec\": 192, \"core-js/modules/es.string.iterator\": 197, \"core-js/modules/es.string.split\": 203, \"core-js/modules/es.string.sub\": 205, \"core-js/modules/es.symbol\": 209, \"core-js/modules/es.symbol.description\": 207, \"core-js/modules/es.symbol.iterator\": 208, \"core-js/modules/es.weak-map\": 241, \"core-js/modules/web.dom-collections.iterator\": 243 }] }, {}, [264])(264);\n  });\n})(wn);\nvar Qn = wn.exports;\nconst Kn = /* @__PURE__ */ qn(Qn);\nfunction Jn(yt, Et) {\n  return new Kn(yt, Et);\n}\nfunction jn(yt) {\n  var Et;\n  (Et = yt.current) == null || Et.remove(), yt.current = null;\n}\nfunction $n(yt) {\n  const { sketch: Et, children: Vt, ...t } = yt, H = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), C = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    H.current !== null && (jn(C), C.current = Jn(\n      Et,\n      H.current\n    ));\n  }, [Et]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    var m, y;\n    (y = (m = C.current) == null ? void 0 : m.updateWithProps) == null || y.call(m, t);\n  }, [t, H]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => () => jn(C), []), /* @__PURE__ */ wr.jsx(\"div\", { ref: H, className: Zn, children: Vt });\n}\nfunction eo(yt) {\n  const { sketch: Et, fallback: Vt } = yt;\n  return Et === void 0 ? (console.error(\"[ReactP5Wrapper] The `sketch` prop is required.\"), Vt !== void 0 ? /* @__PURE__ */ wr.jsx(wr.Fragment, { children: Vt }) : null) : /* @__PURE__ */ wr.jsx(\n    $n,\n    {\n      ...yt\n    }\n  );\n}\nconst ro = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(eo, Wn);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@p5-wrapper/react/dist/component/react.js\n"));

/***/ })

}]);